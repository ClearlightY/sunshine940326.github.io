{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/3b3acd9d45730fef3202adcb4f2057e8.txt","path":"3b3acd9d45730fef3202adcb4f2057e8.txt","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/sogousiteverification.txt","path":"sogousiteverification.txt","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechat.jpg","path":"images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/baidu_tools.js","path":"js/src/baidu_tools.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/canvasstar.js","path":"js/src/canvasstar.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas/Stats.min.js","path":"lib/canvas/Stats.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas/TweenMax.min.js","path":"lib/canvas/TweenMax.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"29018705a0c179573d1a83ec0205e6522fdc1d24","modified":1501218341000},{"_id":"source/3b3acd9d45730fef3202adcb4f2057e8.txt","hash":"002d57312c514146f5043007edf4c616fcefe11a","modified":1498916667000},{"_id":"source/CNAME","hash":"a30c042bd030112ab9dfedc56324efb2cf410963","modified":1498916667000},{"_id":"source/google777e1fe2e2ea67b4.html","hash":"a79340f3b9aa87ada8489544bbad4fb735662739","modified":1498916667000},{"_id":"source/sogousiteverification.txt","hash":"964b8effb254c2740e2ead53661b2b803585327e","modified":1498916667000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1498916667000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1498916667000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1498916667000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1498916667000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1498916667000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1498916667000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1498916667000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1498916667000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1498916667000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1498916667000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1498916667000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1498916667000},{"_id":"themes/next/_config.yml","hash":"2a8f082a74481c0eb61718119caf9716943677ee","modified":1501142280000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1498916667000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1498916667000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1498916667000},{"_id":"source/_posts/ErrorReportingInGitUse.md","hash":"42c73884c13101f978d4c7e8dd7ae52c3e8014b4","modified":1498916667000},{"_id":"source/_posts/Freedom-of-self-discipline.md","hash":"13088affd9aef2e7d09fc48548a2f4a954d39cf9","modified":1498916667000},{"_id":"source/_posts/Front-interview.md","hash":"2ad18cf60315e940894155f315b822471e2069f1","modified":1498916667000},{"_id":"source/_posts/GitCommands.md","hash":"88097c534bb7ec6fcdd8a276bef3b684388f646c","modified":1498916667000},{"_id":"source/_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","hash":"9ecd5f901545c6cfc3e3fef5d5c712fa321ed2f8","modified":1498916667000},{"_id":"source/_posts/Hexo-advanced.md","hash":"9b3b46a5d5ee98ebf3e5526000d38a2681c21b15","modified":1498916667000},{"_id":"source/_posts/Hexo-insert-music-share-comment-tab-search.md","hash":"06496f27081eed6b5d1fc2d72de07a3201fda204","modified":1498916667000},{"_id":"source/_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","hash":"ace1f437beb46fbf0ea4c857cda3d6a9f38c8af0","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern.md","hash":"353402effdc4eae807b989d19b91a90603004f42","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern2modular-mode.md","hash":"54d300ab7470e813f3c147434bab0235d0c43bb7","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern4factory-mode.md","hash":"4f1d1146f4b592b25deb8a4ac4e806273b1cde52","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern3prototype-model.md","hash":"7f193b207d150b1d84a3ebbd7bfce64a12d61a19","modified":1498916667000},{"_id":"source/_posts/JavaScript-modular-programming2JSmodulardevelopmenthistory.md","hash":"a84b5f3248fad2b75bb6450f815dbe69c8ad13e9","modified":1498916667000},{"_id":"source/_posts/Javascript-modular-programming1module-writing.md","hash":"f6238a0c77bb95aae4d8a9b3ced72f6b25d1c0b0","modified":1498916667000},{"_id":"source/_posts/Javascript-modular-programming3requirejs-use.md","hash":"0c22c075420f6972c10888bcaa61ff8a7cf735a2","modified":1498916667000},{"_id":"source/_posts/Mobile-terminal-debugging-method.md","hash":"2170c55673fc82b807ecb573ada5048216146081","modified":1498916667000},{"_id":"source/_posts/React-first.md","hash":"8bd22082972f38e83286b87b4b92c4650ac93ec0","modified":1498916667000},{"_id":"source/_posts/React2understanding-react-with-examples.md","hash":"52b581265d12b0e10c39fe01ac0bd482c8e1ad26","modified":1498916667000},{"_id":"source/_posts/Upload-project-to-GitHub.md","hash":"904ce2833e7124fae6bfc2231d46fbc2974a377c","modified":1498916667000},{"_id":"source/_posts/Use-Gitpagehexo-to-develop-their-own-blog.md","hash":"0e9cf8ee6632879dfb7919038e984c92c0de3edc","modified":1498916667000},{"_id":"source/_posts/Use-webstorm-to-connect-GitHub.md","hash":"10eed2d5c35acce9eb2471a9053ec50321a7e349","modified":1498916667000},{"_id":"source/_posts/canvas-star.md","hash":"b6d51b905230f99cffd335af7baf7628bc82c801","modified":1502193486000},{"_id":"source/_posts/developing-guideline.md","hash":"7e01fedabe6c282401bcc5413c61bc80b059aa8e","modified":1502072172000},{"_id":"source/_posts/gulp（一）.md","hash":"2ae07a1c987e9d1edd725ae9cf322ed45c3fb6b3","modified":1498916667000},{"_id":"source/_posts/html5drag.md","hash":"09cdd1a3e5516bcfc368ea6fc856358b3dd8a402","modified":1501586441000},{"_id":"source/_posts/javascript-oop.md","hash":"709206e4bc781c5cfe05f5cabc8587a9085a03e8","modified":1502191745000},{"_id":"source/_posts/something1.md","hash":"70c7652356e368fac2e3cb395b52f0b8081d61e7","modified":1502072123000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1501218321000},{"_id":"source/about/index.md","hash":"996cc654467d2e9eee6d170e718b7521b5c8bd63","modified":1498916667000},{"_id":"source/categories/index.md","hash":"4b55e192217c1738f5deac584deef9f3d4299c79","modified":1498916667000},{"_id":"source/life/index.md","hash":"5a6947d29439a9b11b63009615287c6401543f4a","modified":1498916667000},{"_id":"source/_posts/css-checkbox-input-radio.md","hash":"10df74791c697521677d16c279d9c3e1b0942bf1","modified":1498916667000},{"_id":"source/_posts/hexo-3.md","hash":"6949ed3d7acd3434ee775ceb475b493b8b52ab5e","modified":1498916667000},{"_id":"source/_posts/html5zhihubg.md","hash":"c7c30d582f4e50347ea4876ca2e5ee552673642e","modified":1498916667000},{"_id":"source/photo/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1501221597000},{"_id":"source/photo/index.html","hash":"ced64821db7e85a5b6ca2ac19f0dd2b832be8eb3","modified":1501225030000},{"_id":"source/photo/index2.md","hash":"695f068279c81d79a6495d07e7f4b8b72d08ce49","modified":1498916667000},{"_id":"source/tags/index.md","hash":"9c32323b2c39d8628153c3852139a311c82852b1","modified":1498916667000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1498916667000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1498916667000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1498916667000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1498916667000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1498916667000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1498916667000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1498916667000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1498916667000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1498916667000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1498916667000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1498916667000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1498916667000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c33d74d532238f5263b2422b9c572899a60baaf5","modified":1498916667000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1498916667000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1498916667000},{"_id":"themes/next/layout/_layout.swig","hash":"20af0a2592d3b45ef2db089f921da8d3279d231b","modified":1500564552000},{"_id":"themes/next/layout/archive.swig","hash":"a1338223ebd1d9a2e1ddff8a961a0da9c3af8e43","modified":1498916667000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1498916667000},{"_id":"themes/next/layout/index.swig","hash":"bf095df5da3816a361e709cbaac9dd1fdc0637e3","modified":1498916667000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1498916667000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1498916667000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1498916667000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1498916667000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1498916667000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1498916667000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1498916667000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1498916667000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1498916667000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498916667000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498916667000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1498916667000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1498916667000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1498916667000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1498916667000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1498916667000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1498916667000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1498916667000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1498916667000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1498916667000},{"_id":"themes/next/layout/_macro/post.swig","hash":"a1b4669507177e3f081748914518d2f018afc192","modified":1500608596000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1498916667000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5d4b6437301f19341581e145bb508720939ee469","modified":1498916667000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1498916667000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1498916667000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"f1b70485db5615aaead815bfeddc65e33e0a325d","modified":1500564552000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1498916667000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1498916667000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1498916667000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1498916667000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1498916667000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1498916667000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1498916667000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1498916667000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1498916667000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1498916667000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1498916667000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1498916667000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1498916667000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1498916667000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1498916667000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1498916667000},{"_id":"themes/next/source/images/favicon.ico","hash":"a7700b5e6dd284b3eb00168b701b0e4c560fe108","modified":1498916667000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498916667000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498916667000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1498916667000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1498916667000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498916667000},{"_id":"themes/next/source/uploads/avatar.png","hash":"586b6e0b74ab8e3f13e242cf04398b660427c8fd","modified":1498916667000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/images/alipay.jpg","hash":"7d8b5bf7e11c690df75f3628b596f1a978d796a6","modified":1498916667000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1498916667000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1498916667000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1498916667000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1498916667000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1498916667000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1498916667000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1501205888000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1498916667000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1498916667000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"005b172954cca135301e25f28ec67a12e5dfb717","modified":1502069138000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1498916667000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1498916667000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1498916667000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1498916667000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498916667000},{"_id":"themes/next/source/images/wechat.jpg","hash":"7feb355f496ec745e8a504c787ea865f2daa25f2","modified":1498916667000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498916667000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1498916667000},{"_id":"themes/next/source/js/src/baidu_tools.js","hash":"de05cce2a0a8c73562d551daf61e687518e8985a","modified":1500564552000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1498916667000},{"_id":"themes/next/source/js/src/canvasstar.js","hash":"31c4bc214834d8df1f1d597f312ab468b68ab8d8","modified":1500557565000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1498916667000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498916667000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498916667000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1498916667000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498916667000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1498916667000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1498916667000},{"_id":"themes/next/source/lib/canvas/Stats.min.js","hash":"d838f3d00f52acc94b42e8ca93ed5a3f38f6d237","modified":1498920952000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1498916667000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498916667000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1498916667000},{"_id":"themes/next/source/lib/canvas/TweenMax.min.js","hash":"caa8e4b193f59745e654096d588885aa213e96bd","modified":1498920952000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1498916667000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1498916667000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1498916667000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498916667000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"c196401747019d389da09b7a0fe7f27e3a0ec01f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498916667000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498916667000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1498916667000},{"_id":"public/google777e1fe2e2ea67b4.html","hash":"8405f551a544f85ec5e8288bbaa5e8b2a3aba618","modified":1502193505757},{"_id":"public/photo/index.html","hash":"f9dfa63f12b297a6ca9f66d2bfcfc73dda884710","modified":1502193505808},{"_id":"public/baidu_urls.txt","hash":"6331495315c423def45c6e6a801f283adf603609","modified":1502193505808},{"_id":"public/baidusitemap.xml","hash":"c4aad439e853cc513205e8646527353dc4f29a70","modified":1502193505808},{"_id":"public/sitemap.xml","hash":"9835baf95c178d1982566bebc605d37001213a16","modified":1502193505808},{"_id":"public/about/index.html","hash":"f4453bab136665a3395eb4635cd453345e1fb2ad","modified":1502193505825},{"_id":"public/categories/index.html","hash":"4f90269f71e2cf5963896c4f783ca436c79b2bf7","modified":1502193505826},{"_id":"public/life/index.html","hash":"3d38062ece67181c7b7d5cbd2d2b2fccab563c1a","modified":1502193505826},{"_id":"public/photo/index2.html","hash":"32beb9e88742075a70712f965c9aa53d2e6c4dbf","modified":1502193505826},{"_id":"public/tags/index.html","hash":"7ed40480521827b2f6d5da6d0ab8b3e15ae7c959","modified":1502193505826},{"_id":"public/something1.html","hash":"6f8b3586bbfe3321363b712a1ee9408f98d1c6d8","modified":1502193505826},{"_id":"public/canvas-star.html","hash":"978d7171ed12070a6f0df0e3a3640fc1bd9cb863","modified":1502193505826},{"_id":"public/javascript-oop.html","hash":"23efba86bb33ce0e2c2f8ac795bea8bc45893a98","modified":1502193505826},{"_id":"public/developing-guideline.html","hash":"fceb84c58e0a3ff4e2a5c7feb945aa2e0a039c2c","modified":1502193505826},{"_id":"public/html5zhihubg.html","hash":"2eb205316b22be653fca784cc6d786f0517a9e38","modified":1502193505826},{"_id":"public/html5drag.html","hash":"6111990e9dce7f77c1cc4ae9277c6a59909ed368","modified":1502193505826},{"_id":"public/css-checkbox-input-radio.html","hash":"d23a33cc8e6cfc3e2fc670b1fe51bd03c6139991","modified":1502193505826},{"_id":"public/hexo-3.html","hash":"0cefb0f223a5c7b815f82dd0f616deacc24c54fa","modified":1502193505826},{"_id":"public/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html","hash":"9372ce9f98886f4617b0323e4188211ea7e6ab10","modified":1502193505826},{"_id":"public/Mobile-terminal-debugging-method.html","hash":"0df63bcf5aef303ca2b5038d9a13098eafc2784b","modified":1502193505826},{"_id":"public/JavaScript-Design-Pattern4factory-mode.html","hash":"775537e5a05699ea0e21bf841d1d5778d9efa24a","modified":1502193505826},{"_id":"public/JavaScript-Design-Pattern3prototype-model.html","hash":"b0d468a066b3e16af384819e9c1b875e9e39952f","modified":1502193505826},{"_id":"public/JavaScript-Design-Pattern2modular-mode.html","hash":"4fbee802840cd205f3143ab1817af1e9ea13191d","modified":1502193505826},{"_id":"public/gulp（一）.html","hash":"0ea9ee0745bfd5319a49f47e5bcc12ec2ddbaa44","modified":1502193505826},{"_id":"public/GitCommands.html","hash":"413075725ee58b6059c6930cab6e6c8b3121d2ad","modified":1502193505827},{"_id":"public/ErrorReportingInGitUse.html","hash":"4920401b075d17a885f89768e2b6e1f1f72d4ef2","modified":1502193505827},{"_id":"public/JavaScript-Design-Pattern.html","hash":"8b238d5f8ff508297fa16188e4b00794e796ac75","modified":1502193505827},{"_id":"public/Javascript-modular-programming3requirejs-use.html","hash":"7357b18eef1aa5c65b7d49c5aba7a3816f9dbfdc","modified":1502193505827},{"_id":"public/JavaScript-modular-programming2JSmodulardevelopmenthistory.html","hash":"49a2cff3cac0baecd5605eb7cf5e402ce9824afe","modified":1502193505827},{"_id":"public/Javascript-modular-programming1module-writing.html","hash":"4c3b592646ba3965f89581f708cb9b2a4c550a9a","modified":1502193505827},{"_id":"public/Front-interview.html","hash":"3880acbcdba961ae9dcc65625a7d5945ede2572f","modified":1502193505827},{"_id":"public/Freedom-of-self-discipline.html","hash":"5403cebcecf80570d78706787adc6c03b0f6f24f","modified":1502193505827},{"_id":"public/React2understanding-react-with-examples.html","hash":"1a1321dd6f216ab80cb475e42c41c3002334892b","modified":1502193505827},{"_id":"public/React-first.html","hash":"93bf1d2fa91a73b64bee89ed0be7a7c7749fe6c9","modified":1502193505827},{"_id":"public/Hexo-Understand-the-principles-of-githubPages-hexoblog.html","hash":"4b56753bee33ff0c0b1ef89382c1f83570ed05d4","modified":1502193505827},{"_id":"public/Upload-project-to-GitHub.html","hash":"5c178344e9f85326efaaa3bd753fff8081dcc1f3","modified":1502193505827},{"_id":"public/Use-webstorm-to-connect-GitHub.html","hash":"1b706308f5ac1d5db1ba76441faf4f191a3fae49","modified":1502193505827},{"_id":"public/Hexo-advanced.html","hash":"d8c43b6c3fdea263400555377a265180ca23ad7a","modified":1502193505827},{"_id":"public/Hexo-insert-music-share-comment-tab-search.html","hash":"735570273d274dd4a432a8bcc7197725902466e5","modified":1502193505827},{"_id":"public/Use-Gitpagehexo-to-develop-their-own-blog.html","hash":"d279c14970c3d041f454f06eae7239877a47c1d8","modified":1502193505827},{"_id":"public/archives/index.html","hash":"cf54868c82bf987ab2511ed4e8bc1d71cd1348d0","modified":1502193505827},{"_id":"public/archives/page/2/index.html","hash":"6f991883f85d794bffb204a821166141f9cba2eb","modified":1502193505827},{"_id":"public/archives/page/3/index.html","hash":"4d15030689bf541f887a607b8fe2b8baf85f212d","modified":1502193505827},{"_id":"public/archives/2016/index.html","hash":"5c68758001c8b90aaf1d9bd77aa93daf5e7c0b19","modified":1502193505827},{"_id":"public/archives/2016/09/index.html","hash":"de06fef15b5593479b0f0287e034438d7c063f93","modified":1502193505828},{"_id":"public/archives/2017/index.html","hash":"6ac5375b0d1a5cc52faf5041af3fb28b4174d340","modified":1502193505828},{"_id":"public/archives/2017/page/2/index.html","hash":"a0b2401182fa29421ba66ab2fe98deb5d6a4ef03","modified":1502193505828},{"_id":"public/archives/2017/page/3/index.html","hash":"c208aabf998df0b6575ed23340ec84ef79e389c8","modified":1502193505828},{"_id":"public/archives/2017/02/index.html","hash":"a9bec1aa9b5e0aeaa78cc740bc8c1330a94dcdfb","modified":1502193505828},{"_id":"public/archives/2017/03/index.html","hash":"5804c6b1b414833853ac06240ca5d0772548e368","modified":1502193505828},{"_id":"public/archives/2017/03/page/2/index.html","hash":"fe8519b234b33bb3368ebd01c11056a461738e2e","modified":1502193505828},{"_id":"public/archives/2017/04/index.html","hash":"015a616086379476a72c89ddb9efd214bb704a77","modified":1502193505828},{"_id":"public/archives/2017/05/index.html","hash":"8886a360b0071b28a6c3314ec1ee853d69657ae6","modified":1502193505828},{"_id":"public/archives/2017/06/index.html","hash":"7eadf18e79c04537be15d32f5ba33da8c9feaa25","modified":1502193505828},{"_id":"public/archives/2017/08/index.html","hash":"52ac0ba6fa98be316caa534852b53a1853b2a07a","modified":1502193505828},{"_id":"public/categories/git/index.html","hash":"0f08539b3bcc12e74eb4322a819ea67231e495e5","modified":1502193505828},{"_id":"public/categories/随笔/index.html","hash":"e1a3f3ae59f01dc88f589f65a18a3cccefbf270c","modified":1502193505828},{"_id":"public/categories/面试题库/index.html","hash":"cf492e20847d7a773b7ab687600565149b5835d2","modified":1502193505828},{"_id":"public/categories/js/index.html","hash":"693784a96a990c0dc7109df0fbb429ca16c170d9","modified":1502193505828},{"_id":"public/categories/日积月累/index.html","hash":"0aa6720d75edbfc88efb7917efd98e76cd3e13d2","modified":1502193505828},{"_id":"public/categories/react/index.html","hash":"105ea7ff3675fab61d4a3d6af4eb4b4e1741d84e","modified":1502193505828},{"_id":"public/categories/html5/index.html","hash":"8ef61704d8552b03aadc7858ed7efdaf23dbd417","modified":1502193505828},{"_id":"public/categories/gulp/index.html","hash":"50baf022c16d57885e47e27882d0561222fb20dc","modified":1502193505828},{"_id":"public/categories/html5/canvas/index.html","hash":"08ede78efb3587f054194d3a2b988f5995b5b54e","modified":1502193505828},{"_id":"public/categories/js/面向对象/index.html","hash":"5e2eae6f0ac30e46bc7327bb395288ff1c337556","modified":1502193505828},{"_id":"public/categories/css/index.html","hash":"bb470ca026d7197941ca7626bcbe0963b955b5a9","modified":1502193505828},{"_id":"public/index.html","hash":"e172ffeefd9e8e3443d34a8fea1277c9c7dd7ca6","modified":1502193505828},{"_id":"public/page/2/index.html","hash":"c25d5dc845a937be1f3aaf99ec939bd10b4a9cc2","modified":1502193505829},{"_id":"public/page/3/index.html","hash":"28c4b0ddef1b4e41cee0099f24abcf67e89c20a2","modified":1502193505829},{"_id":"public/tags/git/index.html","hash":"97d5cd31f7a6710ef5fe1683cbfdeece3892b212","modified":1502193505829},{"_id":"public/tags/实战经验/index.html","hash":"b2569cb3e8c42446f4b3ded0a8aeb71ee03cb05a","modified":1502193505829},{"_id":"public/tags/脑子里的小想法/index.html","hash":"5a8fab19be44fa348b290ff2a075aef8b0ae575c","modified":1502193505829},{"_id":"public/tags/面试/index.html","hash":"4c79ab2ef8680f385f98d7c1e7a34f57fb1b6f5a","modified":1502193505829},{"_id":"public/tags/js/index.html","hash":"feb976f14ec1fb958e2e9d7733ee3758abe0815c","modified":1502193505829},{"_id":"public/tags/知识点/index.html","hash":"4c9a9e595c1f8338877a30c320eb47fe06daa768","modified":1502193505829},{"_id":"public/tags/hexo/index.html","hash":"1e6871718fab8fa443af30c049863e262679fb8f","modified":1502193505829},{"_id":"public/tags/hexo教程/index.html","hash":"dceb9aa3c6dfddf193eab6665f8ec7dce2de23f2","modified":1502193505829},{"_id":"public/tags/js设计模式/index.html","hash":"d7c913971a7b7025a4770118ce0e829e2d3d453d","modified":1502193505829},{"_id":"public/tags/js模块化/index.html","hash":"ea7d14dc2bf67b5b1b66c5140869d52a42f30fbf","modified":1502193505829},{"_id":"public/tags/调试/index.html","hash":"0ae862bc1d197d151a609842aabe4125a5865c2d","modified":1502193505829},{"_id":"public/tags/react/index.html","hash":"a80889dded6eaa6c46428b40b7ec13c7b1446afc","modified":1502193505829},{"_id":"public/tags/html5/index.html","hash":"ee9b0c721a5c4a5328e83c0b37596ffb257fcf3c","modified":1502193505829},{"_id":"public/tags/canvas/index.html","hash":"85ab7f7834e8120838dc9791d4eb09cddb244cf8","modified":1502193505829},{"_id":"public/tags/css/index.html","hash":"2098a99311857057c5748033174a03f7d80b51de","modified":1502193505829},{"_id":"public/tags/开发规范/index.html","hash":"2038a534f60c78d16e0b1d60c9c4f747075efae8","modified":1502193505829},{"_id":"public/tags/js规范/index.html","hash":"32a2796e1eb6bf554be22aaa7f43fd4c54c2959f","modified":1502193505829},{"_id":"public/tags/jshint/index.html","hash":"b51d677f08f2fef19d81f64068952c9024789bf1","modified":1502193505829},{"_id":"public/tags/gulp/index.html","hash":"aa18a3aa36ae951b377717f5ca6d3734f272618b","modified":1502193505829},{"_id":"public/tags/前端/index.html","hash":"7c89d3e259bc72a1fd9c3edbf7d3e2e21e488d18","modified":1502193505829},{"_id":"public/tags/面向对象编程/index.html","hash":"63d3a6465cd4a3cf84c17ccd2977875d868d56d1","modified":1502193505829},{"_id":"public/tags/软件工程/index.html","hash":"4da07e111b61b1794b5d7aef6a8afceb087da2da","modified":1502193505829},{"_id":"public/tags/checkbox优化/index.html","hash":"08042a733c25114b3b615253365259fca67fe8f8","modified":1502193505830},{"_id":"public/tags/input优化/index.html","hash":"a699e027e6214448acfa28370125741d43026082","modified":1502193505830},{"_id":"public/tags/radio优化/index.html","hash":"6b05bec85a1da75f611d4fbc8ee19fe284a86b31","modified":1502193505830},{"_id":"public/tags/hexo高阶教程/index.html","hash":"f27ad6bdc1929f045dcaa501ac8b980b88365c63","modified":1502193505830},{"_id":"public/tags/hexo-gulp/index.html","hash":"9e23cd32f520f7f038f8f6c72bf390d2525853f7","modified":1502193505830},{"_id":"public/tags/hexo-七牛/index.html","hash":"7bf3de61193a580d63ed27770d08628646c08450","modified":1502193505830},{"_id":"public/tags/hexo百度收录/index.html","hash":"147efb38dac049657bb36a3986c28f0a810a7be2","modified":1502193505830},{"_id":"public/tags/hexo百度统计/index.html","hash":"cb70a5a948960b583cc2c14fbecc5c44574b8874","modified":1502193505830},{"_id":"public/tags/hexo-seo/index.html","hash":"70afd53fe098dce43373d71f6196a9a539e1dbb7","modified":1502193505830},{"_id":"public/3b3acd9d45730fef3202adcb4f2057e8.txt","hash":"002d57312c514146f5043007edf4c616fcefe11a","modified":1502193505848},{"_id":"public/CNAME","hash":"a30c042bd030112ab9dfedc56324efb2cf410963","modified":1502193505848},{"_id":"public/sogousiteverification.txt","hash":"964b8effb254c2740e2ead53661b2b803585327e","modified":1502193505848},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1502193505849},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1502193505849},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1502193505849},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1502193505849},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1502193505849},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1502193505849},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1502193505849},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1502193505849},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1502193505849},{"_id":"public/images/favicon.ico","hash":"a7700b5e6dd284b3eb00168b701b0e4c560fe108","modified":1502193505849},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502193505849},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1502193505849},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1502193505849},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1502193505849},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1502193505849},{"_id":"public/uploads/avatar.png","hash":"586b6e0b74ab8e3f13e242cf04398b660427c8fd","modified":1502193505849},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1502193505849},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1502193505849},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1502193505849},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1502193505850},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1502193505850},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1502193505850},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1502193505850},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1502193505850},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1502193505850},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1502193505850},{"_id":"public/images/alipay.jpg","hash":"7d8b5bf7e11c690df75f3628b596f1a978d796a6","modified":1502193506638},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1502193506640},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1502193506649},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1502193506657},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1502193506657},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1502193506657},{"_id":"public/js/src/baidu_tools.js","hash":"de05cce2a0a8c73562d551daf61e687518e8985a","modified":1502193506657},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1502193506657},{"_id":"public/js/src/canvasstar.js","hash":"31c4bc214834d8df1f1d597f312ab468b68ab8d8","modified":1502193506657},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1502193506657},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1502193506657},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1502193506657},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1502193506657},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1502193506657},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1502193506657},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1502193506657},{"_id":"public/lib/canvas/Stats.min.js","hash":"d838f3d00f52acc94b42e8ca93ed5a3f38f6d237","modified":1502193506657},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1502193506657},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1502193506657},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1502193506657},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1502193506657},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1502193506657},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1502193506657},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1502193506657},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1502193506657},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1502193506657},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1502193506657},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1502193506657},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1502193506658},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1502193506658},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1502193506658},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1502193506658},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1502193506658},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1502193506658},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1502193506658},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1502193506658},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1502193506658},{"_id":"public/css/main.css","hash":"a8de385c4db6fdd228c612e942827d10b966ce8c","modified":1502193506658},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1502193506658},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1502193506658},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1502193506658},{"_id":"public/lib/canvas/TweenMax.min.js","hash":"caa8e4b193f59745e654096d588885aa213e96bd","modified":1502193506658},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1502193506658},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1502193506658},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1502193506658},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1502193506658},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1502193506658},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1502193506658},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1502193506658},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1502193506658},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1502193506659},{"_id":"public/images/wechat.jpg","hash":"7feb355f496ec745e8a504c787ea865f2daa25f2","modified":1502193506659},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1502193506659},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1502193506659},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1502193506659},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1502193506688}],"Category":[{"name":"git","_id":"cj63j7zuj0005vvxiz4eckxb5"},{"name":"随笔","_id":"cj63j7zv8000cvvxiiw46ztlu"},{"name":"面试题库","_id":"cj63j7zvo000kvvxid04g2v3m"},{"name":"js","_id":"cj63j7zw6000wvvxitbj9cms0"},{"name":"日积月累","_id":"cj63j7zwx001hvvxi9s8ytiol"},{"name":"react","_id":"cj63j7zxf001rvvxig9673xsg"},{"name":"html5","_id":"cj63j7zxu0028vvxii8sc3ozp"},{"name":"gulp","_id":"cj63j7zy7002nvvxi4g2a8zcm"},{"name":"canvas","parent":"cj63j7zxu0028vvxii8sc3ozp","_id":"cj63j7zyb002vvvxij4g0vb36"},{"name":"面向对象","parent":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zyc002zvvxipbwycib3"},{"name":"css","_id":"cj63j7zye0036vvxiekssmkv5"}],"Data":[],"Page":[{"layout":"false","_content":"google-site-verification: google777e1fe2e2ea67b4.html","source":"google777e1fe2e2ea67b4.html","raw":"layout: false\n---\ngoogle-site-verification: google777e1fe2e2ea67b4.html","date":"2017-07-01T13:44:27.000Z","updated":"2017-07-01T13:44:27.000Z","path":"google777e1fe2e2ea67b4.html","title":"","comments":1,"_id":"cj63j7zl90000vvxi8n3erf5h","content":"google-site-verification: google777e1fe2e2ea67b4.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google777e1fe2e2ea67b4.html"},{"title":"about","date":"2016-09-04T09:59:49.000Z","type":"about","_content":"![](http://oova2i5xh.bkt.clouddn.com/head5.jpg)\n我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n\n很高兴大家能来到我的博客，首先说明**我不是什么大牛，但是是想成为大牛的程序媛**，梦想是去淘宝，但毕竟前面有“梦想”两个字\n\n现在任职于一家十八线的小公司，但是很热爱我的工作\n\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产\n\n大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面\n\n喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。\n\n生活不应该只有coding，我是一个爱生活的girl~\n\n喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈\n\n最近比较喜欢玩狼人杀，真的很烧脑\n\n有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒\n最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~\n邮箱:991939332@qq.com\nQQ:991939332\n微信:991939332\n微博:http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\n掘金:https://juejin.im/user/584d7a3e2f301e00572fb7fc\ngithub:https://github.com/sunshine940326\n![](http://oova2i5xh.bkt.clouddn.com/wechatme.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-04 17:59:49\ntype: \"about\"\n\n---\n![](http://oova2i5xh.bkt.clouddn.com/head5.jpg)\n我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n\n很高兴大家能来到我的博客，首先说明**我不是什么大牛，但是是想成为大牛的程序媛**，梦想是去淘宝，但毕竟前面有“梦想”两个字\n\n现在任职于一家十八线的小公司，但是很热爱我的工作\n\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产\n\n大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面\n\n喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。\n\n生活不应该只有coding，我是一个爱生活的girl~\n\n喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈\n\n最近比较喜欢玩狼人杀，真的很烧脑\n\n有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒\n最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~\n邮箱:991939332@qq.com\nQQ:991939332\n微信:991939332\n微博:http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\n掘金:https://juejin.im/user/584d7a3e2f301e00572fb7fc\ngithub:https://github.com/sunshine940326\n![](http://oova2i5xh.bkt.clouddn.com/wechatme.jpg)\n","updated":"2017-07-01T13:44:27.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj63j7zu60002vvxislqjl1a5","content":"<p><img src=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\" alt=\"\"><br>我，一个在上海慢慢前行的程序员，坚信越努力，越幸运</p>\n<p>很高兴大家能来到我的博客，首先说明<strong>我不是什么大牛，但是是想成为大牛的程序媛</strong>，梦想是去淘宝，但毕竟前面有“梦想”两个字</p>\n<p>现在任职于一家十八线的小公司，但是很热爱我的工作</p>\n<p>大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作</p>\n<p>大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产</p>\n<p>大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面</p>\n<p>喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。</p>\n<p>生活不应该只有coding，我是一个爱生活的girl~</p>\n<p>喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈</p>\n<p>最近比较喜欢玩狼人杀，真的很烧脑</p>\n<p>有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒<br>最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~<br>邮箱:991939332@qq.com<br>QQ:991939332<br>微信:991939332<br>微博:<a href=\"http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo\" target=\"_blank\" rel=\"external\">http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</a><br>掘金:<a href=\"https://juejin.im/user/584d7a3e2f301e00572fb7fc\" target=\"_blank\" rel=\"external\">https://juejin.im/user/584d7a3e2f301e00572fb7fc</a><br>github:<a href=\"https://github.com/sunshine940326\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326</a><br><img src=\"http://oova2i5xh.bkt.clouddn.com/wechatme.jpg\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\" alt=\"\"><br>我，一个在上海慢慢前行的程序员，坚信越努力，越幸运</p>\n<p>很高兴大家能来到我的博客，首先说明<strong>我不是什么大牛，但是是想成为大牛的程序媛</strong>，梦想是去淘宝，但毕竟前面有“梦想”两个字</p>\n<p>现在任职于一家十八线的小公司，但是很热爱我的工作</p>\n<p>大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作</p>\n<p>大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产</p>\n<p>大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面</p>\n<p>喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。</p>\n<p>生活不应该只有coding，我是一个爱生活的girl~</p>\n<p>喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈</p>\n<p>最近比较喜欢玩狼人杀，真的很烧脑</p>\n<p>有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒<br>最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~<br>邮箱:991939332@qq.com<br>QQ:991939332<br>微信:991939332<br>微博:<a href=\"http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo\" target=\"_blank\" rel=\"external\">http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</a><br>掘金:<a href=\"https://juejin.im/user/584d7a3e2f301e00572fb7fc\" target=\"_blank\" rel=\"external\">https://juejin.im/user/584d7a3e2f301e00572fb7fc</a><br>github:<a href=\"https://github.com/sunshine940326\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326</a><br><img src=\"http://oova2i5xh.bkt.clouddn.com/wechatme.jpg\" alt=\"\"></p>\n"},{"title":"","date":"2017-02-26T09:51:32.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-02-26 17:51:32\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-01T13:44:27.000Z","path":"categories/index.html","layout":"page","_id":"cj63j7zua0004vvxiedqg6e48","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"","date":"2017-04-04T14:50:10.000Z","type":"life","_content":"","source":"life/index.md","raw":"---\ntitle: \ndate: 2017-04-04 22:50:10\ntype: \"life\"\n---\n","updated":"2017-07-01T13:44:27.000Z","path":"life/index.html","comments":1,"layout":"page","_id":"cj63j7zus0008vvxicss2wdav","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"false","_content":"<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\" />\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/photo/index2.html\">\n    <meta property=\"og:site_name\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-07-01T13:44:27.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"Cherry&#39;s Blog\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n\n    <link rel=\"canonical\" href=\"http://cherryblog.site/photo/index2.html\"/>\n    <title>| Cherry's Blog</title>\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n      var hm = document.createElement(\"script\");\n      hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(hm, s);\n    })();\n  </script>\n\n\n  <div class=\"bg_content\">\n    <div class=\"filter\"></div>\n    <canvas id=\"canvas\"></canvas>\n  </div>\n  <div class=\"container sidebar-position-left  \">\n    <div class=\"headband\"></div>\n      <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n          <a href=\"https://github.com/sunshine940326\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/c6286ade715e9bea433b4705870de482a654f78a/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f77686974655f6666666666662e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_white_ffffff.png\"></a>\n          <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n              <div class=\"site-meta \">\n                  <div class=\"custom-logo-site-title\">\n                      <a href=\"/\"  class=\"brand\" rel=\"start\">\n                          <span class=\"logo-line-before\"><i></i></span>\n                          <span class=\"site-title\">Cherry's Blog</span>\n                          <span class=\"logo-line-after\"><i></i></span>\n                      </a>\n                  </div>\n                  <p class=\"site-subtitle\">To Be a Better Me</p>\n              </div>\n\n              <div class=\"site-nav-toggle\">\n                  <button>\n                      <span class=\"btn-bar\"></span><span class=\"btn-bar\"></span>\n                      <span class=\"btn-bar\"></span>\n                  </button>\n              </div>\n          </div>\n              <nav class=\"site-nav\">\n                  <ul id=\"menu\" class=\"menu\">\n                      <li class=\"menu-item menu-item-home\">\n                          <a href=\"/\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n                              首页\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-categories\">\n                          <a href=\"/categories\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n                              分类\n                          </a>\n                      </li>\n      \n                      <li class=\"menu-item menu-item-about\">\n                          <a href=\"/about\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n                              关于\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-archives\">\n                          <a href=\"/archives\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n                              归档\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-tags\">\n                          <a href=\"/tags\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n                              标签\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-life\">\n                          <a href=\"/life\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br />\n                              留言板\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-photo\">\n                          <a href=\"/photo\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br />\n                              照片\n                          </a>\n                      </li>\n                  </ul>\n              </nav>\n          </div>\n      </header>\n      <main id=\"main\" class=\"main\">\n          <div class=\"main-inner\">\n              <div class=\"content-wrap\">\n                  <div id=\"photo\">\n                      <div id=\"content \" class=\"content\">\n                      <div id=\"posts\" class=\"posts-expand\">\n                          <header class=\"post-header\">\n                              <h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n                          </header>\n                          <p>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG12.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG13.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG14.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG21.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG22.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG23.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG25.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG28.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG29.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG32.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG33.jpg-cherryblogImg\" alt=\"台湾日月潭\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG34.jpg-cherryblogImg\" alt=\"台湾阿里山\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG38.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG39.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG40.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG41.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG42.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG43.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG44.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG45.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG46.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG47.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG48.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E8%99%B9%E4%B9%8B%E7%8E%89.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E7%88%86%E7%9B%86.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG15.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG18.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG27.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG26.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG17.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                          </p>\n                      </div>\n                  </div>\n                  </div>\n                  <div class=\"comments\" id=\"comments\">\n                      <div id=\"SOHUCS\"></div>\n                  </div>\n              </div>\n        \n              <div class=\"sidebar-toggle\">\n                  <div class=\"sidebar-toggle-line-wrap\">\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                  </div>\n              </div>\n              <aside id=\"sidebar\" class=\"sidebar\">\n                  <div class=\"sidebar-inner\">\n                      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\"\n               src=\"/uploads/avatar.png\"\n               alt=\"Cherry\" />\n          <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">28</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">14</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">32</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n                  \n                    <i class=\"fa fa-fw fa-weibo\"></i>\n                  \n                  Weibo\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n                  </div>\n              </aside>\n          </div>\n      </main>\n      <footer id=\"footer\" class=\"footer\">\n          <div class=\"footer-inner\">\n              <div class=\"copyright\" >\n                  &copy;\n                  <span itemprop=\"copyrightYear\">2017</span>\n                  <span class=\"with-love\">\n                      <i class=\"fa fa-heart\"></i>\n                  </span>\n                  <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n              </div>\n\n              <div class=\"powered-by\">\n                  由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n              </div>\n\n              <div class=\"theme-info\">\n                  主题 -\n                  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n                      NexT.Muse\n                  </a>\n              </div>\n\n              <div class=\"busuanzi-count\">\n                  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n                  <span class=\"site-uv\">\n                      <i class=\"fa fa-user\"></i> 访问用户：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n                      人\n                  </span>\n  \n                  <span class=\"site-pv\">\n                      <i class=\"fa fa-eye\"></i> 访问次数：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n                      次\n                  </span>\n              </div>\n          </div>\n      </footer>\n\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n      if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n          window.Promise = null;\n      }\n  </script>\n\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/canvasstar.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/baidu_tools.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\">\n    (function(){\n      var appid = 'cyt8lab7G';\n      var conf = 'ca667050ec57c6762a854ee31516238f';\n      var width = window.innerWidth || document.documentElement.clientWidth;\n      if (width < 960) {\n      window.document.write('<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '\"><\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){\n        window.changyan.api.config({appid:appid,conf:conf})});\n      }\n    })();\n  </script>\n  <script type=\"text/javascript\" src=\"https://assets.changyan.sohu.com/upload/plugins/plugins.count.js\"></script>\n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n  <script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n  <script>\n      (function(){\n          var bp = document.createElement('script');\n          var curProtocol = window.location.protocol.split(':')[0];\n          if (curProtocol === 'https') {\n              bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n          }\n          else {\n              bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n          }\n          var s = document.getElementsByTagName(\"script\")[0];\n          s.parentNode.insertBefore(bp, s);\n      })();\n  </script>\n</body>\n</html>\n","source":"photo/index.html","raw":"layout: false\n---\n<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\"/>\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\" />\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/photo/index2.html\">\n    <meta property=\"og:site_name\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-07-01T13:44:27.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"Cherry&#39;s Blog\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n\n    <link rel=\"canonical\" href=\"http://cherryblog.site/photo/index2.html\"/>\n    <title>| Cherry's Blog</title>\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n      var hm = document.createElement(\"script\");\n      hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(hm, s);\n    })();\n  </script>\n\n\n  <div class=\"bg_content\">\n    <div class=\"filter\"></div>\n    <canvas id=\"canvas\"></canvas>\n  </div>\n  <div class=\"container sidebar-position-left  \">\n    <div class=\"headband\"></div>\n      <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n          <a href=\"https://github.com/sunshine940326\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/c6286ade715e9bea433b4705870de482a654f78a/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f77686974655f6666666666662e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_white_ffffff.png\"></a>\n          <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n              <div class=\"site-meta \">\n                  <div class=\"custom-logo-site-title\">\n                      <a href=\"/\"  class=\"brand\" rel=\"start\">\n                          <span class=\"logo-line-before\"><i></i></span>\n                          <span class=\"site-title\">Cherry's Blog</span>\n                          <span class=\"logo-line-after\"><i></i></span>\n                      </a>\n                  </div>\n                  <p class=\"site-subtitle\">To Be a Better Me</p>\n              </div>\n\n              <div class=\"site-nav-toggle\">\n                  <button>\n                      <span class=\"btn-bar\"></span><span class=\"btn-bar\"></span>\n                      <span class=\"btn-bar\"></span>\n                  </button>\n              </div>\n          </div>\n              <nav class=\"site-nav\">\n                  <ul id=\"menu\" class=\"menu\">\n                      <li class=\"menu-item menu-item-home\">\n                          <a href=\"/\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n                              首页\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-categories\">\n                          <a href=\"/categories\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n                              分类\n                          </a>\n                      </li>\n      \n                      <li class=\"menu-item menu-item-about\">\n                          <a href=\"/about\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n                              关于\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-archives\">\n                          <a href=\"/archives\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n                              归档\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-tags\">\n                          <a href=\"/tags\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n                              标签\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-life\">\n                          <a href=\"/life\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br />\n                              留言板\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-photo\">\n                          <a href=\"/photo\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br />\n                              照片\n                          </a>\n                      </li>\n                  </ul>\n              </nav>\n          </div>\n      </header>\n      <main id=\"main\" class=\"main\">\n          <div class=\"main-inner\">\n              <div class=\"content-wrap\">\n                  <div id=\"photo\">\n                      <div id=\"content \" class=\"content\">\n                      <div id=\"posts\" class=\"posts-expand\">\n                          <header class=\"post-header\">\n                              <h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n                          </header>\n                          <p>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG12.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG13.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG14.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG21.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG22.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG23.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG25.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG28.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG29.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG32.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG33.jpg-cherryblogImg\" alt=\"台湾日月潭\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG34.jpg-cherryblogImg\" alt=\"台湾阿里山\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG38.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG39.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG40.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG41.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG42.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG43.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG44.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG45.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG46.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG47.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG48.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E8%99%B9%E4%B9%8B%E7%8E%89.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E7%88%86%E7%9B%86.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG15.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG18.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG27.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG26.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG17.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                          </p>\n                      </div>\n                  </div>\n                  </div>\n                  <div class=\"comments\" id=\"comments\">\n                      <div id=\"SOHUCS\"></div>\n                  </div>\n              </div>\n        \n              <div class=\"sidebar-toggle\">\n                  <div class=\"sidebar-toggle-line-wrap\">\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                  </div>\n              </div>\n              <aside id=\"sidebar\" class=\"sidebar\">\n                  <div class=\"sidebar-inner\">\n                      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\"\n               src=\"/uploads/avatar.png\"\n               alt=\"Cherry\" />\n          <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">28</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">14</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">32</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n                  \n                    <i class=\"fa fa-fw fa-weibo\"></i>\n                  \n                  Weibo\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n                  </div>\n              </aside>\n          </div>\n      </main>\n      <footer id=\"footer\" class=\"footer\">\n          <div class=\"footer-inner\">\n              <div class=\"copyright\" >\n                  &copy;\n                  <span itemprop=\"copyrightYear\">2017</span>\n                  <span class=\"with-love\">\n                      <i class=\"fa fa-heart\"></i>\n                  </span>\n                  <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n              </div>\n\n              <div class=\"powered-by\">\n                  由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n              </div>\n\n              <div class=\"theme-info\">\n                  主题 -\n                  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n                      NexT.Muse\n                  </a>\n              </div>\n\n              <div class=\"busuanzi-count\">\n                  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n                  <span class=\"site-uv\">\n                      <i class=\"fa fa-user\"></i> 访问用户：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n                      人\n                  </span>\n  \n                  <span class=\"site-pv\">\n                      <i class=\"fa fa-eye\"></i> 访问次数：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n                      次\n                  </span>\n              </div>\n          </div>\n      </footer>\n\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n      if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n          window.Promise = null;\n      }\n  </script>\n\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/canvasstar.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/baidu_tools.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\">\n    (function(){\n      var appid = 'cyt8lab7G';\n      var conf = 'ca667050ec57c6762a854ee31516238f';\n      var width = window.innerWidth || document.documentElement.clientWidth;\n      if (width < 960) {\n      window.document.write('<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '\"><\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){\n        window.changyan.api.config({appid:appid,conf:conf})});\n      }\n    })();\n  </script>\n  <script type=\"text/javascript\" src=\"https://assets.changyan.sohu.com/upload/plugins/plugins.count.js\"></script>\n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n  <script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n  <script>\n      (function(){\n          var bp = document.createElement('script');\n          var curProtocol = window.location.protocol.split(':')[0];\n          if (curProtocol === 'https') {\n              bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n          }\n          else {\n              bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n          }\n          var s = document.getElementsByTagName(\"script\")[0];\n          s.parentNode.insertBefore(bp, s);\n      })();\n  </script>\n</body>\n</html>\n","date":"2017-07-28T06:57:10.000Z","updated":"2017-07-28T06:57:10.000Z","path":"photo/index.html","title":"","comments":1,"_id":"cj63j7zv1000avvxia2us6e8k","content":"<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\">\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/photo/index2.html\">\n    <meta property=\"og:site_name\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-07-01T13:44:27.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"Cherry&#39;s Blog\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n\n    <link rel=\"canonical\" href=\"http://cherryblog.site/photo/index2.html\">\n    <title>| Cherry's Blog</title>\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n      var hm = document.createElement(\"script\");\n      hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(hm, s);\n    })();\n  </script>\n\n\n  <div class=\"bg_content\">\n    <div class=\"filter\"></div>\n    <canvas id=\"canvas\"></canvas>\n  </div>\n  <div class=\"container sidebar-position-left  \">\n    <div class=\"headband\"></div>\n      <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n          <a href=\"https://github.com/sunshine940326\" target=\"_blank\" rel=\"external\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/c6286ade715e9bea433b4705870de482a654f78a/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f77686974655f6666666666662e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_white_ffffff.png\"></a>\n          <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n              <div class=\"site-meta \">\n                  <div class=\"custom-logo-site-title\">\n                      <a href=\"/\" class=\"brand\" rel=\"start\">\n                          <span class=\"logo-line-before\"><i></i></span>\n                          <span class=\"site-title\">Cherry's Blog</span>\n                          <span class=\"logo-line-after\"><i></i></span>\n                      </a>\n                  </div>\n                  <p class=\"site-subtitle\">To Be a Better Me</p>\n              </div>\n\n              <div class=\"site-nav-toggle\">\n                  <button>\n                      <span class=\"btn-bar\"></span><span class=\"btn-bar\"></span>\n                      <span class=\"btn-bar\"></span>\n                  </button>\n              </div>\n          </div>\n              <nav class=\"site-nav\">\n                  <ul id=\"menu\" class=\"menu\">\n                      <li class=\"menu-item menu-item-home\">\n                          <a href=\"/\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n                              首页\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-categories\">\n                          <a href=\"/categories\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br>\n                              分类\n                          </a>\n                      </li>\n      \n                      <li class=\"menu-item menu-item-about\">\n                          <a href=\"/about\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br>\n                              关于\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-archives\">\n                          <a href=\"/archives\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n                              归档\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-tags\">\n                          <a href=\"/tags\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n                              标签\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-life\">\n                          <a href=\"/life\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br>\n                              留言板\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-photo\">\n                          <a href=\"/photo\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br>\n                              照片\n                          </a>\n                      </li>\n                  </ul>\n              </nav>\n          </div>\n      </header>\n      <main id=\"main\" class=\"main\">\n          <div class=\"main-inner\">\n              <div class=\"content-wrap\">\n                  <div id=\"photo\">\n                      <div id=\"content \" class=\"content\">\n                      <div id=\"posts\" class=\"posts-expand\">\n                          <header class=\"post-header\">\n                              <h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n                          </header>\n                          <p>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG12.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG13.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG14.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG21.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG22.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG23.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG25.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG28.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG29.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG32.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG33.jpg-cherryblogImg\" alt=\"台湾日月潭\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG34.jpg-cherryblogImg\" alt=\"台湾阿里山\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG38.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG39.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG40.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG41.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG42.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG43.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG44.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG45.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG46.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG47.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG48.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E8%99%B9%E4%B9%8B%E7%8E%89.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E7%88%86%E7%9B%86.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG15.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG18.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG27.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG26.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG17.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                          </p>\n                      </div>\n                  </div>\n                  </div>\n                  <div class=\"comments\" id=\"comments\">\n                      <div id=\"SOHUCS\"></div>\n                  </div>\n              </div>\n        \n              <div class=\"sidebar-toggle\">\n                  <div class=\"sidebar-toggle-line-wrap\">\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                  </div>\n              </div>\n              <aside id=\"sidebar\" class=\"sidebar\">\n                  <div class=\"sidebar-inner\">\n                      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\" src=\"/uploads/avatar.png\" alt=\"Cherry\">\n          <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">28</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">14</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">32</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n                  \n                    <i class=\"fa fa-fw fa-weibo\"></i>\n                  \n                  Weibo\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n                  </div>\n              </aside>\n          </div>\n      </main>\n      <footer id=\"footer\" class=\"footer\">\n          <div class=\"footer-inner\">\n              <div class=\"copyright\">\n                  &copy;\n                  <span itemprop=\"copyrightYear\">2017</span>\n                  <span class=\"with-love\">\n                      <i class=\"fa fa-heart\"></i>\n                  </span>\n                  <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n              </div>\n\n              <div class=\"powered-by\">\n                  由 <a class=\"theme-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a> 强力驱动\n              </div>\n\n              <div class=\"theme-info\">\n                  主题 -\n                  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">\n                      NexT.Muse\n                  </a>\n              </div>\n\n              <div class=\"busuanzi-count\">\n                  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n                  <span class=\"site-uv\">\n                      <i class=\"fa fa-user\"></i> 访问用户：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n                      人\n                  </span>\n  \n                  <span class=\"site-pv\">\n                      <i class=\"fa fa-eye\"></i> 访问次数：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n                      次\n                  </span>\n              </div>\n          </div>\n      </footer>\n\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n      if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n          window.Promise = null;\n      }\n  </script>\n\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/canvasstar.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/baidu_tools.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\">\n    (function(){\n      var appid = 'cyt8lab7G';\n      var conf = 'ca667050ec57c6762a854ee31516238f';\n      var width = window.innerWidth || document.documentElement.clientWidth;\n      if (width < 960) {\n      window.document.write('<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '\"><\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){\n        window.changyan.api.config({appid:appid,conf:conf})});\n      }\n    })();\n  </script>\n  <script type=\"text/javascript\" src=\"https://assets.changyan.sohu.com/upload/plugins/plugins.count.js\"></script>\n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n  <script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n  <script>\n      (function(){\n          var bp = document.createElement('script');\n          var curProtocol = window.location.protocol.split(':')[0];\n          if (curProtocol === 'https') {\n              bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n          }\n          else {\n              bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n          }\n          var s = document.getElementsByTagName(\"script\")[0];\n          s.parentNode.insertBefore(bp, s);\n      })();\n  </script>\n</body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n  <meta charset=\"UTF-8\">\n<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n\n\n\n<meta http-equiv=\"Cache-Control\" content=\"no-transform\">\n<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\">\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\">\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/photo/index2.html\">\n    <meta property=\"og:site_name\" content=\"Cherry&#39;s Blog\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-07-01T13:44:27.000Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"Cherry&#39;s Blog\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n\n    <link rel=\"canonical\" href=\"http://cherryblog.site/photo/index2.html\">\n    <title>| Cherry's Blog</title>\n</head>\n\n<body itemscope=\"\" itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n  <script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n      var hm = document.createElement(\"script\");\n      hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n      var s = document.getElementsByTagName(\"script\")[0];\n      s.parentNode.insertBefore(hm, s);\n    })();\n  </script>\n\n\n  <div class=\"bg_content\">\n    <div class=\"filter\"></div>\n    <canvas id=\"canvas\"></canvas>\n  </div>\n  <div class=\"container sidebar-position-left  \">\n    <div class=\"headband\"></div>\n      <header id=\"header\" class=\"header\" itemscope=\"\" itemtype=\"http://schema.org/WPHeader\">\n          <a href=\"https://github.com/sunshine940326\" target=\"_blank\" rel=\"external\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/c6286ade715e9bea433b4705870de482a654f78a/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f77686974655f6666666666662e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_white_ffffff.png\"></a>\n          <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n              <div class=\"site-meta \">\n                  <div class=\"custom-logo-site-title\">\n                      <a href=\"/\" class=\"brand\" rel=\"start\">\n                          <span class=\"logo-line-before\"><i></i></span>\n                          <span class=\"site-title\">Cherry's Blog</span>\n                          <span class=\"logo-line-after\"><i></i></span>\n                      </a>\n                  </div>\n                  <p class=\"site-subtitle\">To Be a Better Me</p>\n              </div>\n\n              <div class=\"site-nav-toggle\">\n                  <button>\n                      <span class=\"btn-bar\"></span><span class=\"btn-bar\"></span>\n                      <span class=\"btn-bar\"></span>\n                  </button>\n              </div>\n          </div>\n              <nav class=\"site-nav\">\n                  <ul id=\"menu\" class=\"menu\">\n                      <li class=\"menu-item menu-item-home\">\n                          <a href=\"/\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br>\n                              首页\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-categories\">\n                          <a href=\"/categories\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br>\n                              分类\n                          </a>\n                      </li>\n      \n                      <li class=\"menu-item menu-item-about\">\n                          <a href=\"/about\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br>\n                              关于\n                          </a>\n                      </li>\n\n                      <li class=\"menu-item menu-item-archives\">\n                          <a href=\"/archives\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br>\n                              归档\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-tags\">\n                          <a href=\"/tags\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br>\n                              标签\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-life\">\n                          <a href=\"/life\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br>\n                              留言板\n                          </a>\n                      </li>\n                      <li class=\"menu-item menu-item-photo\">\n                          <a href=\"/photo\" rel=\"section\">\n                              <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br>\n                              照片\n                          </a>\n                      </li>\n                  </ul>\n              </nav>\n          </div>\n      </header>\n      <main id=\"main\" class=\"main\">\n          <div class=\"main-inner\">\n              <div class=\"content-wrap\">\n                  <div id=\"photo\">\n                      <div id=\"content \" class=\"content\">\n                      <div id=\"posts\" class=\"posts-expand\">\n                          <header class=\"post-header\">\n                              <h1 class=\"post-title\" itemprop=\"name headline\"></h1>\n                          </header>\n                          <p>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG12.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG13.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG14.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG21.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG22.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG23.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG25.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG28.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG29.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG32.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG33.jpg-cherryblogImg\" alt=\"台湾日月潭\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG34.jpg-cherryblogImg\" alt=\"台湾阿里山\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG38.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG39.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG40.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG41.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG42.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG43.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG44.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG45.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG46.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG47.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG48.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E8%99%B9%E4%B9%8B%E7%8E%89.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E7%88%86%E7%9B%86.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG15.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG18.jpg\" alt=\"上海同济大学的樱花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG27.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG26.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                              <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG17.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                          </p>\n                      </div>\n                  </div>\n                  </div>\n                  <div class=\"comments\" id=\"comments\">\n                      <div id=\"SOHUCS\"></div>\n                  </div>\n              </div>\n        \n              <div class=\"sidebar-toggle\">\n                  <div class=\"sidebar-toggle-line-wrap\">\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                      <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                  </div>\n              </div>\n              <aside id=\"sidebar\" class=\"sidebar\">\n                  <div class=\"sidebar-inner\">\n                      <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope=\"\" itemtype=\"http://schema.org/Person\">\n          <img class=\"site-author-image\" itemprop=\"image\" src=\"/uploads/avatar.png\" alt=\"Cherry\">\n          <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n           \n              <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n          \n        </div>\n        <nav class=\"site-state motion-element\">\n\n          \n            <div class=\"site-state-item site-state-posts\">\n              <a href=\"/archives\">\n                <span class=\"site-state-item-count\">28</span>\n                <span class=\"site-state-item-name\">日志</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-categories\">\n              <a href=\"/categories/index.html\">\n                <span class=\"site-state-item-count\">14</span>\n                <span class=\"site-state-item-name\">分类</span>\n              </a>\n            </div>\n          \n\n          \n            \n            \n            <div class=\"site-state-item site-state-tags\">\n              <a href=\"/tags/index.html\">\n                <span class=\"site-state-item-count\">32</span>\n                <span class=\"site-state-item-name\">标签</span>\n              </a>\n            </div>\n          \n\n        </nav>\n\n        \n\n        <div class=\"links-of-author motion-element\">\n          \n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n                  \n                    <i class=\"fa fa-fw fa-github\"></i>\n                  \n                  GitHub\n                </a>\n              </span>\n            \n              <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n                  \n                    <i class=\"fa fa-fw fa-weibo\"></i>\n                  \n                  Weibo\n                </a>\n              </span>\n            \n          \n        </div>\n\n        \n        \n\n        \n        \n\n        \n\n\n      </section>\n                  </div>\n              </aside>\n          </div>\n      </main>\n      <footer id=\"footer\" class=\"footer\">\n          <div class=\"footer-inner\">\n              <div class=\"copyright\">\n                  &copy;\n                  <span itemprop=\"copyrightYear\">2017</span>\n                  <span class=\"with-love\">\n                      <i class=\"fa fa-heart\"></i>\n                  </span>\n                  <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n              </div>\n\n              <div class=\"powered-by\">\n                  由 <a class=\"theme-link\" href=\"https://hexo.io\" target=\"_blank\" rel=\"external\">Hexo</a> 强力驱动\n              </div>\n\n              <div class=\"theme-info\">\n                  主题 -\n                  <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">\n                      NexT.Muse\n                  </a>\n              </div>\n\n              <div class=\"busuanzi-count\">\n                  <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n                  <span class=\"site-uv\">\n                      <i class=\"fa fa-user\"></i> 访问用户：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n                      人\n                  </span>\n  \n                  <span class=\"site-pv\">\n                      <i class=\"fa fa-eye\"></i> 访问次数：\n                      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n                      次\n                  </span>\n              </div>\n          </div>\n      </footer>\n\n      <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n      </div>\n  </div>\n\n  <script type=\"text/javascript\">\n      if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n          window.Promise = null;\n      }\n  </script>\n\n  <script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n  \n  <script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/canvasstar.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/baidu_tools.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n  <script type=\"text/javascript\">\n    (function(){\n      var appid = 'cyt8lab7G';\n      var conf = 'ca667050ec57c6762a854ee31516238f';\n      var width = window.innerWidth || document.documentElement.clientWidth;\n      if (width < 960) {\n      window.document.write('<script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"https://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&conf=' + conf + '\"><\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"https://changyan.sohu.com/upload/changyan.js\",function(){\n        window.changyan.api.config({appid:appid,conf:conf})});\n      }\n    })();\n  </script>\n  <script type=\"text/javascript\" src=\"https://assets.changyan.sohu.com/upload/plugins/plugins.count.js\"></script>\n  <script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n  <script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n  <script>\n    function showTime(Counter) {\n      var query = new AV.Query(Counter);\n      var entries = [];\n      var $visitors = $(\".leancloud_visitors\");\n\n      $visitors.each(function () {\n        entries.push( $(this).attr(\"id\").trim() );\n      });\n\n      query.containedIn('url', entries);\n      query.find()\n        .done(function (results) {\n          var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n          if (results.length === 0) {\n            $visitors.find(COUNT_CONTAINER_REF).text(0);\n            return;\n          }\n\n          for (var i = 0; i < results.length; i++) {\n            var item = results[i];\n            var url = item.get('url');\n            var time = item.get('time');\n            var element = document.getElementById(url);\n\n            $(element).find(COUNT_CONTAINER_REF).text(time);\n          }\n          for(var i = 0; i < entries.length; i++) {\n            var url = entries[i];\n            var element = document.getElementById(url);\n            var countSpan = $(element).find(COUNT_CONTAINER_REF);\n            if( countSpan.text() == '') {\n              countSpan.text(0);\n            }\n          }\n        })\n        .fail(function (object, error) {\n          console.log(\"Error: \" + error.code + \" \" + error.message);\n        });\n    }\n\n    function addCount(Counter) {\n      var $visitors = $(\".leancloud_visitors\");\n      var url = $visitors.attr('id').trim();\n      var title = $visitors.attr('data-flag-title').trim();\n      var query = new AV.Query(Counter);\n\n      query.equalTo(\"url\", url);\n      query.find({\n        success: function(results) {\n          if (results.length > 0) {\n            var counter = results[0];\n            counter.fetchWhenSave(true);\n            counter.increment(\"time\");\n            counter.save(null, {\n              success: function(counter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(counter.get('time'));\n              },\n              error: function(counter, error) {\n                console.log('Failed to save Visitor num, with error message: ' + error.message);\n              }\n            });\n          } else {\n            var newcounter = new Counter();\n            /* Set ACL */\n            var acl = new AV.ACL();\n            acl.setPublicReadAccess(true);\n            acl.setPublicWriteAccess(true);\n            newcounter.setACL(acl);\n            /* End Set ACL */\n            newcounter.set(\"title\", title);\n            newcounter.set(\"url\", url);\n            newcounter.set(\"time\", 1);\n            newcounter.save(null, {\n              success: function(newcounter) {\n                var $element = $(document.getElementById(url));\n                $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n              },\n              error: function(newcounter, error) {\n                console.log('Failed to create');\n              }\n            });\n          }\n        },\n        error: function(error) {\n          console.log('Error:' + error.code + \" \" + error.message);\n        }\n      });\n    }\n\n    $(function() {\n      var Counter = AV.Object.extend(\"Counter\");\n      if ($('.leancloud_visitors').length == 1) {\n        addCount(Counter);\n      } else if ($('.post-title-link').length > 1) {\n        showTime(Counter);\n      }\n    });\n  </script>\n  <script>\n      (function(){\n          var bp = document.createElement('script');\n          var curProtocol = window.location.protocol.split(':')[0];\n          if (curProtocol === 'https') {\n              bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n          }\n          else {\n              bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n          }\n          var s = document.getElementsByTagName(\"script\")[0];\n          s.parentNode.insertBefore(bp, s);\n      })();\n  </script>\n</body>\n</html>\n"},{"title":"","date":"2017-04-04T14:14:07.000Z","type":"photo","comments":1,"_content":"![第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒](http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱](http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![好喜欢多肉晒的上色之后外圈的颜色，粉粉的，很可爱，要天天晒太阳~](http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![养了半年的多肉，阳光下呈现粉嫩的颜色](http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~](http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花+白色康乃馨，康乃馨是大朵的哦](http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花，漫漫樱花好漂亮](http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)","source":"photo/index2.md","raw":"---\ntitle: \ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: true\n---\n![第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒](http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱](http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![好喜欢多肉晒的上色之后外圈的颜色，粉粉的，很可爱，要天天晒太阳~](http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![养了半年的多肉，阳光下呈现粉嫩的颜色](http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~](http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花+白色康乃馨，康乃馨是大朵的哦](http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花，漫漫樱花好漂亮](http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)","updated":"2017-07-01T13:44:27.000Z","path":"photo/index2.html","layout":"page","_id":"cj63j7zv9000evvxi9hkzun5u","content":"<p><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"好喜欢多肉晒的上色之后外圈的颜色，粉粉的，很可爱，要天天晒太阳~\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"好喜欢多肉晒的上色之后外圈的颜色，粉粉的，很可爱，要天天晒太阳~\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br><img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"></p>\n"},{"title":"","date":"2016-09-16T16:29:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \ndate: 2016-09-17 00:29:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-07-01T13:44:27.000Z","path":"tags/index.html","layout":"page","_id":"cj63j7zvf000hvvxi6tmp3c7p","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git使用中的报错情况","date":"2017-03-11T15:54:11.000Z","description":["git","git实战","git报错"],"_content":"![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n<!--more-->\n\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n\n`git pull`时报错\n```\n$ git pull\nremote: Counting objects: 100, done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 60 (delta 36), reused 3 (delta 0)\nUnpacking objects: 100% (60/60), done.\nFrom 180.166.124.26:/var/git/fzc\n   d8ec768..7c13661  master     -> origin/master\nUpdating d8ec768..7c13661\nerror: Your local changes to the following files would be overwritten by merge:\n        protected/modules/m/views/detail/house.php\n        protected/modules/m/views/list/house.php\n        protected/modules/web/views/default/list.php\n        protected/modules/web/views/detail/house.php\n        protected/modules/web/views/list/house.php\n        static_src/web/js/houseList/nprogress.js\n        static_src/web/js/list/nprogress.js\nPlease commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n```\n大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突\n解决方法（出现这样的原因是你在commit之前进行了pull，正确的顺序应该是先进行`git add`、`git commit`、然后再进行拉去远端的代码`git pull`，解决完冲突之后再push）\n1. 如果本地修改的文件不需要提交了，直接放弃就可以了\n ```\n $ git checkout --filename\n ```\n 然后远端的文件就覆盖了你的本地文件,之后就可以`git add`、`git commit`、`git pull`、`git push`了\n \n 2. 还可以保存本地的状态\n```\n//暂存当前文件\n$ git stash [save message]\nsave可以对进度进行备注\n\n\n//查看当前工作区和版本库区别\n$ git diff HEAD\n\n//显示已暂存列表\n$ git stash list\n\n//恢复最近一次暂存区\n$ git stash pop [--index][<stash>]\n[]中为可选参数\n--index 不仅恢复工作区，还恢复暂存区\n<stash>指定恢复到具体的进度\n\n//删除进度（默认删除最新进度）\n$ git stash drop [<stash>]\n\n//删除所有进度\n$ git stash clear\n\n//基于进度创建分支 \n$ git stash branch <branchname> <stash>\n```\n\n在pull的时候经常会出现下面的情况\n![image](http://images2015.cnblogs.com/blog/630011/201603/630011-20160315120522896-1718649799.jpg)\n\n```\nPlease enter a commit message to explain why this merge is necessary.\n请输入提交消息来解释为什么这种合并是必要的\n```\n这种轻情况在pull或者合并分支的时候会出现，为什么会出现我也不清楚原因= =\n - 1按键盘字母 i 进入insert模式\n\n - 2修改最上面那行黄色合并信息,可以不修改\n\n - 3按键盘左上角\"Esc\"\n\n - 4输入\":wq\",注意是冒号+wq,按回车键即可\n\n可以直接进行3、4步，","source":"_posts/ErrorReportingInGitUse.md","raw":"---\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\ndescription: [git,git实战,git报错]\n---\n![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n<!--more-->\n\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n\n`git pull`时报错\n```\n$ git pull\nremote: Counting objects: 100, done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 60 (delta 36), reused 3 (delta 0)\nUnpacking objects: 100% (60/60), done.\nFrom 180.166.124.26:/var/git/fzc\n   d8ec768..7c13661  master     -> origin/master\nUpdating d8ec768..7c13661\nerror: Your local changes to the following files would be overwritten by merge:\n        protected/modules/m/views/detail/house.php\n        protected/modules/m/views/list/house.php\n        protected/modules/web/views/default/list.php\n        protected/modules/web/views/detail/house.php\n        protected/modules/web/views/list/house.php\n        static_src/web/js/houseList/nprogress.js\n        static_src/web/js/list/nprogress.js\nPlease commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n```\n大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突\n解决方法（出现这样的原因是你在commit之前进行了pull，正确的顺序应该是先进行`git add`、`git commit`、然后再进行拉去远端的代码`git pull`，解决完冲突之后再push）\n1. 如果本地修改的文件不需要提交了，直接放弃就可以了\n ```\n $ git checkout --filename\n ```\n 然后远端的文件就覆盖了你的本地文件,之后就可以`git add`、`git commit`、`git pull`、`git push`了\n \n 2. 还可以保存本地的状态\n```\n//暂存当前文件\n$ git stash [save message]\nsave可以对进度进行备注\n\n\n//查看当前工作区和版本库区别\n$ git diff HEAD\n\n//显示已暂存列表\n$ git stash list\n\n//恢复最近一次暂存区\n$ git stash pop [--index][<stash>]\n[]中为可选参数\n--index 不仅恢复工作区，还恢复暂存区\n<stash>指定恢复到具体的进度\n\n//删除进度（默认删除最新进度）\n$ git stash drop [<stash>]\n\n//删除所有进度\n$ git stash clear\n\n//基于进度创建分支 \n$ git stash branch <branchname> <stash>\n```\n\n在pull的时候经常会出现下面的情况\n![image](http://images2015.cnblogs.com/blog/630011/201603/630011-20160315120522896-1718649799.jpg)\n\n```\nPlease enter a commit message to explain why this merge is necessary.\n请输入提交消息来解释为什么这种合并是必要的\n```\n这种轻情况在pull或者合并分支的时候会出现，为什么会出现我也不清楚原因= =\n - 1按键盘字母 i 进入insert模式\n\n - 2修改最上面那行黄色合并信息,可以不修改\n\n - 3按键盘左上角\"Esc\"\n\n - 4输入\":wq\",注意是冒号+wq,按回车键即可\n\n可以直接进行3、4步，","slug":"ErrorReportingInGitUse","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7ztz0001vvxipfn26p7q","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493224022490&amp;di=4b9c36844b17e0c6116d1fd5aa883baf&amp;imgtype=0&amp;src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png\" alt=\"git图片\"><br>在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的<br><a id=\"more\"></a></p>\n<p>在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的</p>\n<p><code>git pull</code>时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">remote: Counting objects: 100, done.</div><div class=\"line\">remote: Compressing objects: 100% (57/57), done.</div><div class=\"line\">remote: Total 60 (delta 36), reused 3 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (60/60), done.</div><div class=\"line\">From 180.166.124.26:/var/git/fzc</div><div class=\"line\">   d8ec768..7c13661  master     -&gt; origin/master</div><div class=\"line\">Updating d8ec768..7c13661</div><div class=\"line\">error: Your local changes to the following files would be overwritten by merge:</div><div class=\"line\">        protected/modules/m/views/detail/house.php</div><div class=\"line\">        protected/modules/m/views/list/house.php</div><div class=\"line\">        protected/modules/web/views/default/list.php</div><div class=\"line\">        protected/modules/web/views/detail/house.php</div><div class=\"line\">        protected/modules/web/views/list/house.php</div><div class=\"line\">        static_src/web/js/houseList/nprogress.js</div><div class=\"line\">        static_src/web/js/list/nprogress.js</div><div class=\"line\">Please commit your changes or stash them before you can merge.</div><div class=\"line\">error: The following untracked working tree files would be overwritten by merge:</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\">Please move or remove them before you can merge.</div><div class=\"line\">Aborting</div></pre></td></tr></table></figure></p>\n<p>大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突<br>解决方法（出现这样的原因是你在commit之前进行了pull，正确的顺序应该是先进行<code>git add</code>、<code>git commit</code>、然后再进行拉去远端的代码<code>git pull</code>，解决完冲突之后再push）</p>\n<ol>\n<li><p>如果本地修改的文件不需要提交了，直接放弃就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout --filename</div></pre></td></tr></table></figure>\n<p>然后远端的文件就覆盖了你的本地文件,之后就可以<code>git add</code>、<code>git commit</code>、<code>git pull</code>、<code>git push</code>了</p>\n<ol>\n<li>还可以保存本地的状态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//暂存当前文件</div><div class=\"line\">$ git stash [save message]</div><div class=\"line\">save可以对进度进行备注</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//查看当前工作区和版本库区别</div><div class=\"line\">$ git diff HEAD</div><div class=\"line\"></div><div class=\"line\">//显示已暂存列表</div><div class=\"line\">$ git stash list</div><div class=\"line\"></div><div class=\"line\">//恢复最近一次暂存区</div><div class=\"line\">$ git stash pop [--index][&lt;stash&gt;]</div><div class=\"line\">[]中为可选参数</div><div class=\"line\">--index 不仅恢复工作区，还恢复暂存区</div><div class=\"line\">&lt;stash&gt;指定恢复到具体的进度</div><div class=\"line\"></div><div class=\"line\">//删除进度（默认删除最新进度）</div><div class=\"line\">$ git stash drop [&lt;stash&gt;]</div><div class=\"line\"></div><div class=\"line\">//删除所有进度</div><div class=\"line\">$ git stash clear</div><div class=\"line\"></div><div class=\"line\">//基于进度创建分支 </div><div class=\"line\">$ git stash branch &lt;branchname&gt; &lt;stash&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>在pull的时候经常会出现下面的情况<br><img src=\"http://images2015.cnblogs.com/blog/630011/201603/630011-20160315120522896-1718649799.jpg\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Please enter a commit message to explain why this merge is necessary.</div><div class=\"line\">请输入提交消息来解释为什么这种合并是必要的</div></pre></td></tr></table></figure>\n<p>这种轻情况在pull或者合并分支的时候会出现，为什么会出现我也不清楚原因= =</p>\n<ul>\n<li><p>1按键盘字母 i 进入insert模式</p>\n</li>\n<li><p>2修改最上面那行黄色合并信息,可以不修改</p>\n</li>\n<li><p>3按键盘左上角”Esc”</p>\n</li>\n<li><p>4输入”:wq”,注意是冒号+wq,按回车键即可</p>\n</li>\n</ul>\n<p>可以直接进行3、4步，</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493224022490&amp;di=4b9c36844b17e0c6116d1fd5aa883baf&amp;imgtype=0&amp;src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png\" alt=\"git图片\"><br>在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的<br>","more":"</p>\n<p>在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的</p>\n<p><code>git pull</code>时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">remote: Counting objects: 100, done.</div><div class=\"line\">remote: Compressing objects: 100% (57/57), done.</div><div class=\"line\">remote: Total 60 (delta 36), reused 3 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (60/60), done.</div><div class=\"line\">From 180.166.124.26:/var/git/fzc</div><div class=\"line\">   d8ec768..7c13661  master     -&gt; origin/master</div><div class=\"line\">Updating d8ec768..7c13661</div><div class=\"line\">error: Your local changes to the following files would be overwritten by merge:</div><div class=\"line\">        protected/modules/m/views/detail/house.php</div><div class=\"line\">        protected/modules/m/views/list/house.php</div><div class=\"line\">        protected/modules/web/views/default/list.php</div><div class=\"line\">        protected/modules/web/views/detail/house.php</div><div class=\"line\">        protected/modules/web/views/list/house.php</div><div class=\"line\">        static_src/web/js/houseList/nprogress.js</div><div class=\"line\">        static_src/web/js/list/nprogress.js</div><div class=\"line\">Please commit your changes or stash them before you can merge.</div><div class=\"line\">error: The following untracked working tree files would be overwritten by merge:</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\">Please move or remove them before you can merge.</div><div class=\"line\">Aborting</div></pre></td></tr></table></figure></p>\n<p>大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突<br>解决方法（出现这样的原因是你在commit之前进行了pull，正确的顺序应该是先进行<code>git add</code>、<code>git commit</code>、然后再进行拉去远端的代码<code>git pull</code>，解决完冲突之后再push）</p>\n<ol>\n<li><p>如果本地修改的文件不需要提交了，直接放弃就可以了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout --filename</div></pre></td></tr></table></figure>\n<p>然后远端的文件就覆盖了你的本地文件,之后就可以<code>git add</code>、<code>git commit</code>、<code>git pull</code>、<code>git push</code>了</p>\n<ol>\n<li>还可以保存本地的状态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">//暂存当前文件</div><div class=\"line\">$ git stash [save message]</div><div class=\"line\">save可以对进度进行备注</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">//查看当前工作区和版本库区别</div><div class=\"line\">$ git diff HEAD</div><div class=\"line\"></div><div class=\"line\">//显示已暂存列表</div><div class=\"line\">$ git stash list</div><div class=\"line\"></div><div class=\"line\">//恢复最近一次暂存区</div><div class=\"line\">$ git stash pop [--index][&lt;stash&gt;]</div><div class=\"line\">[]中为可选参数</div><div class=\"line\">--index 不仅恢复工作区，还恢复暂存区</div><div class=\"line\">&lt;stash&gt;指定恢复到具体的进度</div><div class=\"line\"></div><div class=\"line\">//删除进度（默认删除最新进度）</div><div class=\"line\">$ git stash drop [&lt;stash&gt;]</div><div class=\"line\"></div><div class=\"line\">//删除所有进度</div><div class=\"line\">$ git stash clear</div><div class=\"line\"></div><div class=\"line\">//基于进度创建分支 </div><div class=\"line\">$ git stash branch &lt;branchname&gt; &lt;stash&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n<p>在pull的时候经常会出现下面的情况<br><img src=\"http://images2015.cnblogs.com/blog/630011/201603/630011-20160315120522896-1718649799.jpg\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Please enter a commit message to explain why this merge is necessary.</div><div class=\"line\">请输入提交消息来解释为什么这种合并是必要的</div></pre></td></tr></table></figure>\n<p>这种轻情况在pull或者合并分支的时候会出现，为什么会出现我也不清楚原因= =</p>\n<ul>\n<li><p>1按键盘字母 i 进入insert模式</p>\n</li>\n<li><p>2修改最上面那行黄色合并信息,可以不修改</p>\n</li>\n<li><p>3按键盘左上角”Esc”</p>\n</li>\n<li><p>4输入”:wq”,注意是冒号+wq,按回车键即可</p>\n</li>\n</ul>\n<p>可以直接进行3、4步，</p>"},{"title":"自律才能自由","date":"2017-03-02T13:55:57.000Z","_content":"我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~\n因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”\n\n<!--more-->\n\n# 初识“自律才有自由”\n第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 [坚持跑步到底有什么改变](https://www.zhihu.com/question/28656794?utm_campaign=official_account&utm_source=weibo&utm_medium=zhihu&utm_content=question)\n\n看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。\n\n其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下\n\n# 什么是自律和自由\n其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！\n\n但其实不然\n\n**自律 -- 懂得约束自己的欲望、自己管理自己**\n\n**自由 -- 只听从本心意愿，不受他人摆布**\n\n# 为什么说自律才有自由\n\n其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由\n\n举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望\n\n# 为什么要自律 \n\n## 达到自由\n我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己\n\n## 成长\n人的懒惰本质 -- 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）\n\n只要做让自己感觉不舒服的事情才能成长（出自唐宁）\n\n# 自律需要怎么做\n\n**发自内心的想要到达哪一种自由**\n\n“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”\n-- 坚持数年长跑的runner\n\n只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语\n\n\n","source":"_posts/Freedom-of-self-discipline.md","raw":"---\ntitle: 自律才能自由\ndate: 2017-03-02 21:55:57\ntags: 脑子里的小想法\ncategories: 随笔\n---\n我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~\n因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”\n\n<!--more-->\n\n# 初识“自律才有自由”\n第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 [坚持跑步到底有什么改变](https://www.zhihu.com/question/28656794?utm_campaign=official_account&utm_source=weibo&utm_medium=zhihu&utm_content=question)\n\n看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。\n\n其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下\n\n# 什么是自律和自由\n其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！\n\n但其实不然\n\n**自律 -- 懂得约束自己的欲望、自己管理自己**\n\n**自由 -- 只听从本心意愿，不受他人摆布**\n\n# 为什么说自律才有自由\n\n其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由\n\n举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望\n\n# 为什么要自律 \n\n## 达到自由\n我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己\n\n## 成长\n人的懒惰本质 -- 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）\n\n只要做让自己感觉不舒服的事情才能成长（出自唐宁）\n\n# 自律需要怎么做\n\n**发自内心的想要到达哪一种自由**\n\n“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”\n-- 坚持数年长跑的runner\n\n只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语\n\n\n","slug":"Freedom-of-self-discipline","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zu70003vvxipvljqhw7","content":"<p>我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~<br>因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”</p>\n<a id=\"more\"></a>\n<h1 id=\"初识“自律才有自由”\"><a href=\"#初识“自律才有自由”\" class=\"headerlink\" title=\"初识“自律才有自由”\"></a>初识“自律才有自由”</h1><p>第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 <a href=\"https://www.zhihu.com/question/28656794?utm_campaign=official_account&amp;utm_source=weibo&amp;utm_medium=zhihu&amp;utm_content=question\" target=\"_blank\" rel=\"external\">坚持跑步到底有什么改变</a></p>\n<p>看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。</p>\n<p>其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下</p>\n<h1 id=\"什么是自律和自由\"><a href=\"#什么是自律和自由\" class=\"headerlink\" title=\"什么是自律和自由\"></a>什么是自律和自由</h1><p>其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！</p>\n<p>但其实不然</p>\n<p><strong>自律 – 懂得约束自己的欲望、自己管理自己</strong></p>\n<p><strong>自由 – 只听从本心意愿，不受他人摆布</strong></p>\n<h1 id=\"为什么说自律才有自由\"><a href=\"#为什么说自律才有自由\" class=\"headerlink\" title=\"为什么说自律才有自由\"></a>为什么说自律才有自由</h1><p>其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由</p>\n<p>举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望</p>\n<h1 id=\"为什么要自律\"><a href=\"#为什么要自律\" class=\"headerlink\" title=\"为什么要自律\"></a>为什么要自律</h1><h2 id=\"达到自由\"><a href=\"#达到自由\" class=\"headerlink\" title=\"达到自由\"></a>达到自由</h2><p>我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己</p>\n<h2 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h2><p>人的懒惰本质 – 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）</p>\n<p>只要做让自己感觉不舒服的事情才能成长（出自唐宁）</p>\n<h1 id=\"自律需要怎么做\"><a href=\"#自律需要怎么做\" class=\"headerlink\" title=\"自律需要怎么做\"></a>自律需要怎么做</h1><p><strong>发自内心的想要到达哪一种自由</strong></p>\n<p>“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”<br>– 坚持数年长跑的runner</p>\n<p>只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语</p>\n","site":{"data":{}},"excerpt":"<p>我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~<br>因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”</p>","more":"<h1 id=\"初识“自律才有自由”\"><a href=\"#初识“自律才有自由”\" class=\"headerlink\" title=\"初识“自律才有自由”\"></a>初识“自律才有自由”</h1><p>第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 <a href=\"https://www.zhihu.com/question/28656794?utm_campaign=official_account&amp;utm_source=weibo&amp;utm_medium=zhihu&amp;utm_content=question\" target=\"_blank\" rel=\"external\">坚持跑步到底有什么改变</a></p>\n<p>看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。</p>\n<p>其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下</p>\n<h1 id=\"什么是自律和自由\"><a href=\"#什么是自律和自由\" class=\"headerlink\" title=\"什么是自律和自由\"></a>什么是自律和自由</h1><p>其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！</p>\n<p>但其实不然</p>\n<p><strong>自律 – 懂得约束自己的欲望、自己管理自己</strong></p>\n<p><strong>自由 – 只听从本心意愿，不受他人摆布</strong></p>\n<h1 id=\"为什么说自律才有自由\"><a href=\"#为什么说自律才有自由\" class=\"headerlink\" title=\"为什么说自律才有自由\"></a>为什么说自律才有自由</h1><p>其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由</p>\n<p>举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望</p>\n<h1 id=\"为什么要自律\"><a href=\"#为什么要自律\" class=\"headerlink\" title=\"为什么要自律\"></a>为什么要自律</h1><h2 id=\"达到自由\"><a href=\"#达到自由\" class=\"headerlink\" title=\"达到自由\"></a>达到自由</h2><p>我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己</p>\n<h2 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h2><p>人的懒惰本质 – 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）</p>\n<p>只要做让自己感觉不舒服的事情才能成长（出自唐宁）</p>\n<h1 id=\"自律需要怎么做\"><a href=\"#自律需要怎么做\" class=\"headerlink\" title=\"自律需要怎么做\"></a>自律需要怎么做</h1><p><strong>发自内心的想要到达哪一种自由</strong></p>\n<p>“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”<br>– 坚持数年长跑的runner</p>\n<p>只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语</p>"},{"title":"前端面试","date":"2017-03-06T15:15:56.000Z","description":["前端面试","面试题库"],"_content":"最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下\n某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理\n\n<!--more-->\n# Q:rem布局的原理\n\nA：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。\nrem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px\n\n[移动端页面开发适配 rem布局原理](http://www.tuicool.com/articles/FjMfuyM)\n\n> 网易的做法：\n> \n> 1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。\n> \n> \n> ```\n> <meta name=\"viewport\"content=\"initial-scale=1,maximum-scale=1, minimum-scale=1”>\n> ```\n> \n> \n> 2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为`width:6.4rem（640/100）`，当我们将布局视口设置为320时，于是html的 `font-size=deviceWidth / 6.4`。\n> \n> 3) 通过`document.documentElement.clientWidth`获取 `deviceWidth`；\n> \n> 4) 当页面的`dom ready`后设置`html font-size`,\n> \n> \n> ```\n> document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’\n> ```\n> \n> 5) 通过 `mediaQuery` 设置字体大小，字体大小不可以使用rem,原因是误差太大。\n> \n> 以640的设计稿为例最终的设置html `font-size`代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊\n> \n> \n> ```\n> var deviceWidth = document.documentElement.clientWidth;\n> if(deviceWidth > 640) deviceWidth = 640;\n> document.documentElement.style.fontSize = deviceWidth / 6.4 + 'px';\n> 这里if(deviceWidth > 640) deviceWidth = 640;\n> ```\n>  是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；\n\n```\nvar documentElement = document.documentElement;\n\n    if (documentElement.clientWidth >= 750) {\n        documentElement.style.fontSize = '54px';\n    } else {\n        documentElement.style.fontSize = \"${documentElement.getBoundingClientRect().width / 10}px\";\n    }\n\n\n    (function () {\n        document.addEventListener('DOMContentLoaded', function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        }, false);\n        window.onresize = function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        };\n\n        console.log(document.width)\n    })();\n```\n\n# Q:常见的布局方式\n\nA：\n1. 静态布局（Static Layout）\n2. 弹性布局（Flex）\n3. 自适应布局（Adapive Layout）\n4. 流式布局（Liquid Layout）\n5. 响应式布局（Responsive Layout）\n[web前端开发之几种布局方式之响应式布局](http://blog.csdn.net/gertYY/article/details/52764527)\n\n# Q:怎么使用媒体查询\n\n```\n@media screen and (max-width:720px) and (min-width:320px){\n\n      body{\n\n       background-color:red;\n\n       }\n\n@media screen and (max-width:320px){\n\n      body{\n\n         background-color:blue;\n\n       }\n\n}\n```\n\n# Q:移动端优化方法\n# Q：js模块化\n# Q:怎么实现延迟加载\n# Q:你对闭包的理解\n# Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\n\n上交所初试之笔试题：\n# 什么是“use strait”有什么好处有什么坏处\n> ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n> \n> 设立\"严格模式\"的目的，主要有以下几个：\n> \n> 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n> \n> 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n> \n> 3. 提高编译器效率，增加运行速度；\n> \n> 4. 为未来新版本的Javascript做好铺垫。\n> \n> 注：经过测试 IE6,7,8,9 均不支持严格模式。\n> \n> 缺点：\n> \n> 现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。\n\n# 解释下javascript中this是怎么工作的\n> JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：\n> \n> function foo() {\n> \n>   // 在终端输出 this 对象\n>   console.log(this)\n> }\n> \n> foo() // 输出： global 对象 在浏览器中即 window 对象\n> \n> 但是也可以在函数被运行的时候动态指定（call,apply, bind）：\n> \n> var bar = { name: 'bar' }\n> \n> foo.call(bar) // 输出： { name: 'bar' }\n> \n> 存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。\n> \n> new foo() // 输出： {} 在构造函数内部创建一个对象\n> \n> 作者：管斌瑞\n> 链接：https://www.zhihu.com/question/19624483/answer/25745246\n> 来源：知乎\n> 著作权归作者所有，转载请联系作者获得授权。\n\n\n# 有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\n\n```\na.length === 0 ? a.push(1) : a.shift();\n```\n\n\n\n# 描述下`reset`css文件的作用和使用它的好处\n重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果\n\n# 说说前端怎么如何解决异步回调地狱\n\n# 请解释Function.prototype.bind的作用\n> bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。\n\n> 例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。\n\n# 描述以下变量的区别：null，undefined，该如何检测他们\n## null表示\"没有对象\"，即该处不应该有值。典型用法是：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n## undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n\n## 判断undefined: \n复制代码 代码如下:\n\n```\n<span style=\"font-size: small;\">var tmp = undefined; \nif (typeof(tmp) == \"undefined\"){ \nalert(\"undefined\"); \n}</span>\n```\n\n## 判断null: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = null; \nif (!tmp && typeof(tmp)!=\"undefined\" && tmp!=0){ \nalert(\"null\"); \n}　</span>\n```\n\n## 判断NaN: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = 0/0; \nif(isNaN(tmp)){ \nalert(\"NaN\"); \n}</span>\n```\n\n\n\n# 说说类的创建、继承和闭包\n\n# 有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\n\n```\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n sum = 0;\n sum = a.slice(0, 10).reduce(function(pre, current) {\n 　　return pre + current;\n });\n  \n console.log(sum); //55\n```\n\n\n# 下面的代码会输出什么：\n\n```\nvar test = (function(a) {\n    this.a = a;\n    return function(b) {\n        return this.a + b;\n    }\n} (function(a, b) {\n    return a;\n}(1, 2))); \n\nconsole.log(test(4)); //输出什么？？？？\n```\n\n最后发现这大部分都是阿里的面试题= =\n[阿里前端笔试题目](http://www.cnblogs.com/beidan/p/5285742.html)","source":"_posts/Front-interview.md","raw":"---\ntitle: 前端面试\ndate: 2017-03-06 23:15:56\ntags: [面试,js,知识点]\ncategories: 面试题库\ndescription: [前端面试,面试题库]\n---\n最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下\n某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理\n\n<!--more-->\n# Q:rem布局的原理\n\nA：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。\nrem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px\n\n[移动端页面开发适配 rem布局原理](http://www.tuicool.com/articles/FjMfuyM)\n\n> 网易的做法：\n> \n> 1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。\n> \n> \n> ```\n> <meta name=\"viewport\"content=\"initial-scale=1,maximum-scale=1, minimum-scale=1”>\n> ```\n> \n> \n> 2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为`width:6.4rem（640/100）`，当我们将布局视口设置为320时，于是html的 `font-size=deviceWidth / 6.4`。\n> \n> 3) 通过`document.documentElement.clientWidth`获取 `deviceWidth`；\n> \n> 4) 当页面的`dom ready`后设置`html font-size`,\n> \n> \n> ```\n> document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’\n> ```\n> \n> 5) 通过 `mediaQuery` 设置字体大小，字体大小不可以使用rem,原因是误差太大。\n> \n> 以640的设计稿为例最终的设置html `font-size`代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊\n> \n> \n> ```\n> var deviceWidth = document.documentElement.clientWidth;\n> if(deviceWidth > 640) deviceWidth = 640;\n> document.documentElement.style.fontSize = deviceWidth / 6.4 + 'px';\n> 这里if(deviceWidth > 640) deviceWidth = 640;\n> ```\n>  是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；\n\n```\nvar documentElement = document.documentElement;\n\n    if (documentElement.clientWidth >= 750) {\n        documentElement.style.fontSize = '54px';\n    } else {\n        documentElement.style.fontSize = \"${documentElement.getBoundingClientRect().width / 10}px\";\n    }\n\n\n    (function () {\n        document.addEventListener('DOMContentLoaded', function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        }, false);\n        window.onresize = function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        };\n\n        console.log(document.width)\n    })();\n```\n\n# Q:常见的布局方式\n\nA：\n1. 静态布局（Static Layout）\n2. 弹性布局（Flex）\n3. 自适应布局（Adapive Layout）\n4. 流式布局（Liquid Layout）\n5. 响应式布局（Responsive Layout）\n[web前端开发之几种布局方式之响应式布局](http://blog.csdn.net/gertYY/article/details/52764527)\n\n# Q:怎么使用媒体查询\n\n```\n@media screen and (max-width:720px) and (min-width:320px){\n\n      body{\n\n       background-color:red;\n\n       }\n\n@media screen and (max-width:320px){\n\n      body{\n\n         background-color:blue;\n\n       }\n\n}\n```\n\n# Q:移动端优化方法\n# Q：js模块化\n# Q:怎么实现延迟加载\n# Q:你对闭包的理解\n# Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\n\n上交所初试之笔试题：\n# 什么是“use strait”有什么好处有什么坏处\n> ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n> \n> 设立\"严格模式\"的目的，主要有以下几个：\n> \n> 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n> \n> 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n> \n> 3. 提高编译器效率，增加运行速度；\n> \n> 4. 为未来新版本的Javascript做好铺垫。\n> \n> 注：经过测试 IE6,7,8,9 均不支持严格模式。\n> \n> 缺点：\n> \n> 现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。\n\n# 解释下javascript中this是怎么工作的\n> JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：\n> \n> function foo() {\n> \n>   // 在终端输出 this 对象\n>   console.log(this)\n> }\n> \n> foo() // 输出： global 对象 在浏览器中即 window 对象\n> \n> 但是也可以在函数被运行的时候动态指定（call,apply, bind）：\n> \n> var bar = { name: 'bar' }\n> \n> foo.call(bar) // 输出： { name: 'bar' }\n> \n> 存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。\n> \n> new foo() // 输出： {} 在构造函数内部创建一个对象\n> \n> 作者：管斌瑞\n> 链接：https://www.zhihu.com/question/19624483/answer/25745246\n> 来源：知乎\n> 著作权归作者所有，转载请联系作者获得授权。\n\n\n# 有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\n\n```\na.length === 0 ? a.push(1) : a.shift();\n```\n\n\n\n# 描述下`reset`css文件的作用和使用它的好处\n重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果\n\n# 说说前端怎么如何解决异步回调地狱\n\n# 请解释Function.prototype.bind的作用\n> bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。\n\n> 例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。\n\n# 描述以下变量的区别：null，undefined，该如何检测他们\n## null表示\"没有对象\"，即该处不应该有值。典型用法是：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n## undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n\n## 判断undefined: \n复制代码 代码如下:\n\n```\n<span style=\"font-size: small;\">var tmp = undefined; \nif (typeof(tmp) == \"undefined\"){ \nalert(\"undefined\"); \n}</span>\n```\n\n## 判断null: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = null; \nif (!tmp && typeof(tmp)!=\"undefined\" && tmp!=0){ \nalert(\"null\"); \n}　</span>\n```\n\n## 判断NaN: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = 0/0; \nif(isNaN(tmp)){ \nalert(\"NaN\"); \n}</span>\n```\n\n\n\n# 说说类的创建、继承和闭包\n\n# 有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\n\n```\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n sum = 0;\n sum = a.slice(0, 10).reduce(function(pre, current) {\n 　　return pre + current;\n });\n  \n console.log(sum); //55\n```\n\n\n# 下面的代码会输出什么：\n\n```\nvar test = (function(a) {\n    this.a = a;\n    return function(b) {\n        return this.a + b;\n    }\n} (function(a, b) {\n    return a;\n}(1, 2))); \n\nconsole.log(test(4)); //输出什么？？？？\n```\n\n最后发现这大部分都是阿里的面试题= =\n[阿里前端笔试题目](http://www.cnblogs.com/beidan/p/5285742.html)","slug":"Front-interview","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zuo0007vvxilgvmhfib","content":"<p>最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下<br>某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理</p>\n<a id=\"more\"></a>\n<h1 id=\"Q-rem布局的原理\"><a href=\"#Q-rem布局的原理\" class=\"headerlink\" title=\"Q:rem布局的原理\"></a>Q:rem布局的原理</h1><p>A：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。<br>rem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px</p>\n<p><a href=\"http://www.tuicool.com/articles/FjMfuyM\" target=\"_blank\" rel=\"external\">移动端页面开发适配 rem布局原理</a></p>\n<blockquote>\n<p>网易的做法：</p>\n<p>1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; &lt;meta name=&quot;viewport&quot;content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1”&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为<code>width:6.4rem（640/100）</code>，当我们将布局视口设置为320时，于是html的 <code>font-size=deviceWidth / 6.4</code>。</p>\n<p>3) 通过<code>document.documentElement.clientWidth</code>获取 <code>deviceWidth</code>；</p>\n<p>4) 当页面的<code>dom ready</code>后设置<code>html font-size</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>5) 通过 <code>mediaQuery</code> 设置字体大小，字体大小不可以使用rem,原因是误差太大。</p>\n<p>以640的设计稿为例最终的设置html <code>font-size</code>代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">&gt; if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt; document.documentElement.style.fontSize = deviceWidth / 6.4 + &apos;px&apos;;</div><div class=\"line\">&gt; 这里if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p> 是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var documentElement = document.documentElement;</div><div class=\"line\"></div><div class=\"line\">    if (documentElement.clientWidth &gt;= 750) &#123;</div><div class=\"line\">        documentElement.style.fontSize = &apos;54px&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        documentElement.style.fontSize = &quot;$&#123;documentElement.getBoundingClientRect().width / 10&#125;px&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    (function () &#123;</div><div class=\"line\">        document.addEventListener(&apos;DOMContentLoaded&apos;, function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;, false);</div><div class=\"line\">        window.onresize = function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        console.log(document.width)</div><div class=\"line\">    &#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"Q-常见的布局方式\"><a href=\"#Q-常见的布局方式\" class=\"headerlink\" title=\"Q:常见的布局方式\"></a>Q:常见的布局方式</h1><p>A：</p>\n<ol>\n<li>静态布局（Static Layout）</li>\n<li>弹性布局（Flex）</li>\n<li>自适应布局（Adapive Layout）</li>\n<li>流式布局（Liquid Layout）</li>\n<li>响应式布局（Responsive Layout）<br><a href=\"http://blog.csdn.net/gertYY/article/details/52764527\" target=\"_blank\" rel=\"external\">web前端开发之几种布局方式之响应式布局</a></li>\n</ol>\n<h1 id=\"Q-怎么使用媒体查询\"><a href=\"#Q-怎么使用媒体查询\" class=\"headerlink\" title=\"Q:怎么使用媒体查询\"></a>Q:怎么使用媒体查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (max-width:720px) and (min-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">       background-color:red;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">@media screen and (max-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">         background-color:blue;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Q-移动端优化方法\"><a href=\"#Q-移动端优化方法\" class=\"headerlink\" title=\"Q:移动端优化方法\"></a>Q:移动端优化方法</h1><h1 id=\"Q：js模块化\"><a href=\"#Q：js模块化\" class=\"headerlink\" title=\"Q：js模块化\"></a>Q：js模块化</h1><h1 id=\"Q-怎么实现延迟加载\"><a href=\"#Q-怎么实现延迟加载\" class=\"headerlink\" title=\"Q:怎么实现延迟加载\"></a>Q:怎么实现延迟加载</h1><h1 id=\"Q-你对闭包的理解\"><a href=\"#Q-你对闭包的理解\" class=\"headerlink\" title=\"Q:你对闭包的理解\"></a>Q:你对闭包的理解</h1><h1 id=\"Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"><a href=\"#Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\" class=\"headerlink\" title=\"Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"></a>Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制</h1><p>上交所初试之笔试题：</p>\n<h1 id=\"什么是“use-strait”有什么好处有什么坏处\"><a href=\"#什么是“use-strait”有什么好处有什么坏处\" class=\"headerlink\" title=\"什么是“use strait”有什么好处有什么坏处\"></a>什么是“use strait”有什么好处有什么坏处</h1><blockquote>\n<p>ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p>\n<p>设立”严格模式”的目的，主要有以下几个：</p>\n<ol>\n<li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n</li>\n<li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>\n</li>\n<li><p>提高编译器效率，增加运行速度；</p>\n</li>\n<li><p>为未来新版本的Javascript做好铺垫。</p>\n</li>\n</ol>\n<p>注：经过测试 IE6,7,8,9 均不支持严格模式。</p>\n<p>缺点：</p>\n<p>现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p>\n</blockquote>\n<h1 id=\"解释下javascript中this是怎么工作的\"><a href=\"#解释下javascript中this是怎么工作的\" class=\"headerlink\" title=\"解释下javascript中this是怎么工作的\"></a>解释下javascript中this是怎么工作的</h1><blockquote>\n<p>JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：</p>\n<p>function foo() {</p>\n<p>  // 在终端输出 this 对象<br>  console.log(this)<br>}</p>\n<p>foo() // 输出： global 对象 在浏览器中即 window 对象</p>\n<p>但是也可以在函数被运行的时候动态指定（call,apply, bind）：</p>\n<p>var bar = { name: ‘bar’ }</p>\n<p>foo.call(bar) // 输出： { name: ‘bar’ }</p>\n<p>存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。</p>\n<p>new foo() // 输出： {} 在构造函数内部创建一个对象</p>\n<p>作者：管斌瑞<br>链接：<a href=\"https://www.zhihu.com/question/19624483/answer/25745246\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19624483/answer/25745246</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>\n</blockquote>\n<h1 id=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"><a href=\"#有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\" class=\"headerlink\" title=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"></a>有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.length === 0 ? a.push(1) : a.shift();</div></pre></td></tr></table></figure>\n<h1 id=\"描述下resetcss文件的作用和使用它的好处\"><a href=\"#描述下resetcss文件的作用和使用它的好处\" class=\"headerlink\" title=\"描述下resetcss文件的作用和使用它的好处\"></a>描述下<code>reset</code>css文件的作用和使用它的好处</h1><p>重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果</p>\n<h1 id=\"说说前端怎么如何解决异步回调地狱\"><a href=\"#说说前端怎么如何解决异步回调地狱\" class=\"headerlink\" title=\"说说前端怎么如何解决异步回调地狱\"></a>说说前端怎么如何解决异步回调地狱</h1><h1 id=\"请解释Function-prototype-bind的作用\"><a href=\"#请解释Function-prototype-bind的作用\" class=\"headerlink\" title=\"请解释Function.prototype.bind的作用\"></a>请解释Function.prototype.bind的作用</h1><blockquote>\n<p>bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。</p>\n<p>例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。</p>\n</blockquote>\n<h1 id=\"描述以下变量的区别：null，undefined，该如何检测他们\"><a href=\"#描述以下变量的区别：null，undefined，该如何检测他们\" class=\"headerlink\" title=\"描述以下变量的区别：null，undefined，该如何检测他们\"></a>描述以下变量的区别：null，undefined，该如何检测他们</h1><h2 id=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"><a href=\"#null表示”没有对象”，即该处不应该有值。典型用法是：\" class=\"headerlink\" title=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"></a>null表示”没有对象”，即该处不应该有值。典型用法是：</h2><p>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h2 id=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"><a href=\"#undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\" class=\"headerlink\" title=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"></a>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</h2><p>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。</p>\n<h2 id=\"判断undefined\"><a href=\"#判断undefined\" class=\"headerlink\" title=\"判断undefined:\"></a>判断undefined:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = undefined; </div><div class=\"line\">if (typeof(tmp) == &quot;undefined&quot;)&#123; </div><div class=\"line\">alert(&quot;undefined&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null:\"></a>判断null:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = null; </div><div class=\"line\">if (!tmp &amp;&amp; typeof(tmp)!=&quot;undefined&quot; &amp;&amp; tmp!=0)&#123; </div><div class=\"line\">alert(&quot;null&quot;); </div><div class=\"line\">&#125;　&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断NaN\"><a href=\"#判断NaN\" class=\"headerlink\" title=\"判断NaN:\"></a>判断NaN:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = 0/0; </div><div class=\"line\">if(isNaN(tmp))&#123; </div><div class=\"line\">alert(&quot;NaN&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"说说类的创建、继承和闭包\"><a href=\"#说说类的创建、继承和闭包\" class=\"headerlink\" title=\"说说类的创建、继承和闭包\"></a>说说类的创建、继承和闭包</h1><h1 id=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"><a href=\"#有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\" class=\"headerlink\" title=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"></a>有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],</div><div class=\"line\"> sum = 0;</div><div class=\"line\"> sum = a.slice(0, 10).reduce(function(pre, current) &#123;</div><div class=\"line\"> 　　return pre + current;</div><div class=\"line\"> &#125;);</div><div class=\"line\">  </div><div class=\"line\"> console.log(sum); //55</div></pre></td></tr></table></figure>\n<h1 id=\"下面的代码会输出什么：\"><a href=\"#下面的代码会输出什么：\" class=\"headerlink\" title=\"下面的代码会输出什么：\"></a>下面的代码会输出什么：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var test = (function(a) &#123;</div><div class=\"line\">    this.a = a;</div><div class=\"line\">    return function(b) &#123;</div><div class=\"line\">        return this.a + b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; (function(a, b) &#123;</div><div class=\"line\">    return a;</div><div class=\"line\">&#125;(1, 2))); </div><div class=\"line\"></div><div class=\"line\">console.log(test(4)); //输出什么？？？？</div></pre></td></tr></table></figure>\n<p>最后发现这大部分都是阿里的面试题= =<br><a href=\"http://www.cnblogs.com/beidan/p/5285742.html\" target=\"_blank\" rel=\"external\">阿里前端笔试题目</a></p>\n","site":{"data":{}},"excerpt":"<p>最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下<br>某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理</p>","more":"<h1 id=\"Q-rem布局的原理\"><a href=\"#Q-rem布局的原理\" class=\"headerlink\" title=\"Q:rem布局的原理\"></a>Q:rem布局的原理</h1><p>A：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。<br>rem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px</p>\n<p><a href=\"http://www.tuicool.com/articles/FjMfuyM\" target=\"_blank\" rel=\"external\">移动端页面开发适配 rem布局原理</a></p>\n<blockquote>\n<p>网易的做法：</p>\n<p>1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; &lt;meta name=&quot;viewport&quot;content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1”&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为<code>width:6.4rem（640/100）</code>，当我们将布局视口设置为320时，于是html的 <code>font-size=deviceWidth / 6.4</code>。</p>\n<p>3) 通过<code>document.documentElement.clientWidth</code>获取 <code>deviceWidth</code>；</p>\n<p>4) 当页面的<code>dom ready</code>后设置<code>html font-size</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>5) 通过 <code>mediaQuery</code> 设置字体大小，字体大小不可以使用rem,原因是误差太大。</p>\n<p>以640的设计稿为例最终的设置html <code>font-size</code>代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">&gt; if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt; document.documentElement.style.fontSize = deviceWidth / 6.4 + &apos;px&apos;;</div><div class=\"line\">&gt; 这里if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p> 是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var documentElement = document.documentElement;</div><div class=\"line\"></div><div class=\"line\">    if (documentElement.clientWidth &gt;= 750) &#123;</div><div class=\"line\">        documentElement.style.fontSize = &apos;54px&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        documentElement.style.fontSize = &quot;$&#123;documentElement.getBoundingClientRect().width / 10&#125;px&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    (function () &#123;</div><div class=\"line\">        document.addEventListener(&apos;DOMContentLoaded&apos;, function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;, false);</div><div class=\"line\">        window.onresize = function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        console.log(document.width)</div><div class=\"line\">    &#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"Q-常见的布局方式\"><a href=\"#Q-常见的布局方式\" class=\"headerlink\" title=\"Q:常见的布局方式\"></a>Q:常见的布局方式</h1><p>A：</p>\n<ol>\n<li>静态布局（Static Layout）</li>\n<li>弹性布局（Flex）</li>\n<li>自适应布局（Adapive Layout）</li>\n<li>流式布局（Liquid Layout）</li>\n<li>响应式布局（Responsive Layout）<br><a href=\"http://blog.csdn.net/gertYY/article/details/52764527\" target=\"_blank\" rel=\"external\">web前端开发之几种布局方式之响应式布局</a></li>\n</ol>\n<h1 id=\"Q-怎么使用媒体查询\"><a href=\"#Q-怎么使用媒体查询\" class=\"headerlink\" title=\"Q:怎么使用媒体查询\"></a>Q:怎么使用媒体查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (max-width:720px) and (min-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">       background-color:red;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">@media screen and (max-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">         background-color:blue;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Q-移动端优化方法\"><a href=\"#Q-移动端优化方法\" class=\"headerlink\" title=\"Q:移动端优化方法\"></a>Q:移动端优化方法</h1><h1 id=\"Q：js模块化\"><a href=\"#Q：js模块化\" class=\"headerlink\" title=\"Q：js模块化\"></a>Q：js模块化</h1><h1 id=\"Q-怎么实现延迟加载\"><a href=\"#Q-怎么实现延迟加载\" class=\"headerlink\" title=\"Q:怎么实现延迟加载\"></a>Q:怎么实现延迟加载</h1><h1 id=\"Q-你对闭包的理解\"><a href=\"#Q-你对闭包的理解\" class=\"headerlink\" title=\"Q:你对闭包的理解\"></a>Q:你对闭包的理解</h1><h1 id=\"Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"><a href=\"#Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\" class=\"headerlink\" title=\"Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"></a>Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制</h1><p>上交所初试之笔试题：</p>\n<h1 id=\"什么是“use-strait”有什么好处有什么坏处\"><a href=\"#什么是“use-strait”有什么好处有什么坏处\" class=\"headerlink\" title=\"什么是“use strait”有什么好处有什么坏处\"></a>什么是“use strait”有什么好处有什么坏处</h1><blockquote>\n<p>ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p>\n<p>设立”严格模式”的目的，主要有以下几个：</p>\n<ol>\n<li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n</li>\n<li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>\n</li>\n<li><p>提高编译器效率，增加运行速度；</p>\n</li>\n<li><p>为未来新版本的Javascript做好铺垫。</p>\n</li>\n</ol>\n<p>注：经过测试 IE6,7,8,9 均不支持严格模式。</p>\n<p>缺点：</p>\n<p>现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p>\n</blockquote>\n<h1 id=\"解释下javascript中this是怎么工作的\"><a href=\"#解释下javascript中this是怎么工作的\" class=\"headerlink\" title=\"解释下javascript中this是怎么工作的\"></a>解释下javascript中this是怎么工作的</h1><blockquote>\n<p>JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：</p>\n<p>function foo() {</p>\n<p>  // 在终端输出 this 对象<br>  console.log(this)<br>}</p>\n<p>foo() // 输出： global 对象 在浏览器中即 window 对象</p>\n<p>但是也可以在函数被运行的时候动态指定（call,apply, bind）：</p>\n<p>var bar = { name: ‘bar’ }</p>\n<p>foo.call(bar) // 输出： { name: ‘bar’ }</p>\n<p>存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。</p>\n<p>new foo() // 输出： {} 在构造函数内部创建一个对象</p>\n<p>作者：管斌瑞<br>链接：<a href=\"https://www.zhihu.com/question/19624483/answer/25745246\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19624483/answer/25745246</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>\n</blockquote>\n<h1 id=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"><a href=\"#有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\" class=\"headerlink\" title=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"></a>有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.length === 0 ? a.push(1) : a.shift();</div></pre></td></tr></table></figure>\n<h1 id=\"描述下resetcss文件的作用和使用它的好处\"><a href=\"#描述下resetcss文件的作用和使用它的好处\" class=\"headerlink\" title=\"描述下resetcss文件的作用和使用它的好处\"></a>描述下<code>reset</code>css文件的作用和使用它的好处</h1><p>重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果</p>\n<h1 id=\"说说前端怎么如何解决异步回调地狱\"><a href=\"#说说前端怎么如何解决异步回调地狱\" class=\"headerlink\" title=\"说说前端怎么如何解决异步回调地狱\"></a>说说前端怎么如何解决异步回调地狱</h1><h1 id=\"请解释Function-prototype-bind的作用\"><a href=\"#请解释Function-prototype-bind的作用\" class=\"headerlink\" title=\"请解释Function.prototype.bind的作用\"></a>请解释Function.prototype.bind的作用</h1><blockquote>\n<p>bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。</p>\n<p>例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。</p>\n</blockquote>\n<h1 id=\"描述以下变量的区别：null，undefined，该如何检测他们\"><a href=\"#描述以下变量的区别：null，undefined，该如何检测他们\" class=\"headerlink\" title=\"描述以下变量的区别：null，undefined，该如何检测他们\"></a>描述以下变量的区别：null，undefined，该如何检测他们</h1><h2 id=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"><a href=\"#null表示”没有对象”，即该处不应该有值。典型用法是：\" class=\"headerlink\" title=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"></a>null表示”没有对象”，即该处不应该有值。典型用法是：</h2><p>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h2 id=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"><a href=\"#undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\" class=\"headerlink\" title=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"></a>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</h2><p>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。</p>\n<h2 id=\"判断undefined\"><a href=\"#判断undefined\" class=\"headerlink\" title=\"判断undefined:\"></a>判断undefined:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = undefined; </div><div class=\"line\">if (typeof(tmp) == &quot;undefined&quot;)&#123; </div><div class=\"line\">alert(&quot;undefined&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null:\"></a>判断null:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = null; </div><div class=\"line\">if (!tmp &amp;&amp; typeof(tmp)!=&quot;undefined&quot; &amp;&amp; tmp!=0)&#123; </div><div class=\"line\">alert(&quot;null&quot;); </div><div class=\"line\">&#125;　&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断NaN\"><a href=\"#判断NaN\" class=\"headerlink\" title=\"判断NaN:\"></a>判断NaN:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = 0/0; </div><div class=\"line\">if(isNaN(tmp))&#123; </div><div class=\"line\">alert(&quot;NaN&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"说说类的创建、继承和闭包\"><a href=\"#说说类的创建、继承和闭包\" class=\"headerlink\" title=\"说说类的创建、继承和闭包\"></a>说说类的创建、继承和闭包</h1><h1 id=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"><a href=\"#有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\" class=\"headerlink\" title=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"></a>有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],</div><div class=\"line\"> sum = 0;</div><div class=\"line\"> sum = a.slice(0, 10).reduce(function(pre, current) &#123;</div><div class=\"line\"> 　　return pre + current;</div><div class=\"line\"> &#125;);</div><div class=\"line\">  </div><div class=\"line\"> console.log(sum); //55</div></pre></td></tr></table></figure>\n<h1 id=\"下面的代码会输出什么：\"><a href=\"#下面的代码会输出什么：\" class=\"headerlink\" title=\"下面的代码会输出什么：\"></a>下面的代码会输出什么：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var test = (function(a) &#123;</div><div class=\"line\">    this.a = a;</div><div class=\"line\">    return function(b) &#123;</div><div class=\"line\">        return this.a + b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; (function(a, b) &#123;</div><div class=\"line\">    return a;</div><div class=\"line\">&#125;(1, 2))); </div><div class=\"line\"></div><div class=\"line\">console.log(test(4)); //输出什么？？？？</div></pre></td></tr></table></figure>\n<p>最后发现这大部分都是阿里的面试题= =<br><a href=\"http://www.cnblogs.com/beidan/p/5285742.html\" target=\"_blank\" rel=\"external\">阿里前端笔试题目</a></p>"},{"title":"Git常用命令and完成一个小工作流","date":"2017-03-15T14:32:30.000Z","description":["git常用命令","git使用技巧","git实战"],"_content":"![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n\n本篇长期更新，记录一些常用的git命令和使用git团队合作的命令\n\n<!--more-->\n# git的工作步骤\n1. 修改文件的工作目录\n2. 将这些文件添加到暂存区\n3. 执行commit操作，发布版本\n4. push将发布的版本推送到git仓库\n\n# git常见术语\n## commit\n提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。\n\n## branches\n分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交\n\n## tags\ngit中的tag指向一次commit的id。通常用来给开发做版本号。\n\n### 打标签\n```\ngit tag -a v1.01 -m \"Relase version 1.01\"\n```\n\n`git tags `是打标签的命令，`-a`是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释\n\n### 提交标签到远端仓库\n```\ngit push origin -tags\n```\n\n就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。\n\n### 删除标签\n```\ngit tag -d v1.01\n```\n`-d`表示删除，后面跟版本号\n\n### 删除远程标签\n\n```\ngit push origin :refs/tags/v1.01\n```\n### 查看标签\n`git tag`\n或者\n`git tag -l`\n\n# clone\n克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息\n\n# pull\npull操作是用于两个存储库实例之间的同步\n\n# push\n将本地仓库中的文件同步到远端库中\n\n# head\nHEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中\n\n# git常用命令\n\n```\n初始化新版本库：git init\n全局设置：git config   --global user.name \"xzavier\"  git config --global user.email \"xzavier.xxx.com\"\n克隆版本库：git clone \"url\"\n查看分支：git branch\n创建分支：git branch branch_nema\n切换分支：git checkout branch_name\n创建+切换分支：git checkout -b branch_name\n合并某分支到当前分支：git merge branch_name\n重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支\n重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支\n删除分支：git branch -d branch_name \n强制删除分支： git branch -D branch_name\n删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支\n拉取代码：git pull orgin branch_name\n查看更改：git status\n查看更改细节：git diff file_name\n查看谁修改过代码：git blame filename\n回到上次修改：git reset --hard\n添加单个文件：git add filename.js\n添加所有js文件：git add *.js\n添加所有文件：git add .\n提交添加的文件：git commit -m \"your description about this branch\"\n提交单个文件：git commit -m \"your description about this branch\" filename.js\npush分支：git push orgin your_branch_name\n备份当前分支内容：git stash\n查看历史记录：git log\n创建标签：git tag 1.0.0  //标签无法重命名\n显示标签列表：git tag\n切出标签：git checkout 1.0.0\n删除标签：git tag -d 1.0.0\n查看git远程地址：git remote -v\n更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git\n\n```\n\n# git+gulp小工作流\n早上上班的时候切换到master分支，拉一下代码\n```\ngit pull origin master\n\n```\n开始写代码，新建一个分支\n```\ngit checkout -b branch_name\n\n```\n正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：\n```\ngit stash\n```\n切换到别的分支修改代码：\n```\ngit checkout -b branch_name\n\n```\n修复bug后提交代码查看修改：\n```\ngit status\n```\n需要查看修改的细节：\n```\ngit diff file_name\n```\n没有问题就提交：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n解决完bug切换到原来的分支\n```\ngit checkout -b you_old_branch\n```\n恢复刚刚保存的内容：\n```\ngit stash   //备份当前的工作区的内容，保存到git栈\n\ngit stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复\ngit stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复\ngit stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了\n```\n\n恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）\n```\ngit pull orgin master\n\n```\n或者\n```\ngit pull orgin his/her_branch_name\n```\n\n\n用gulp构建工具\n在修改bug的时候将环境调成本地环境\n`protected`<`config`<`dev.php`下的`#当前环境  'env' => ''`\n`env`为空为上线环境，`env`为`dev`为本地环境\n\n先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交\n\n然后查看完线上环境没有问题了可以进行`gulp build`，可能会报错\n\n```\nError: ENOENT: no such file or directory, open 'C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json'\n    at Error (native)\n```\n这是要clean一下，`gulp clean:temp`\n然后在`gulp build`\n之后就可以git三件套了\n\n\n摘自：[前端资源系列（1）-Git常用命令&设置快捷命令&小工作流](https://segmentfault.com/a/1190000005945614)\n\n\n","source":"_posts/GitCommands.md","raw":"---\ntitle: Git常用命令and完成一个小工作流\ndate: 2017-03-15 22:32:30\ntags: git \ncategories: git\ndescription: [git常用命令,git使用技巧,git实战]\n---\n![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n\n本篇长期更新，记录一些常用的git命令和使用git团队合作的命令\n\n<!--more-->\n# git的工作步骤\n1. 修改文件的工作目录\n2. 将这些文件添加到暂存区\n3. 执行commit操作，发布版本\n4. push将发布的版本推送到git仓库\n\n# git常见术语\n## commit\n提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。\n\n## branches\n分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交\n\n## tags\ngit中的tag指向一次commit的id。通常用来给开发做版本号。\n\n### 打标签\n```\ngit tag -a v1.01 -m \"Relase version 1.01\"\n```\n\n`git tags `是打标签的命令，`-a`是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释\n\n### 提交标签到远端仓库\n```\ngit push origin -tags\n```\n\n就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。\n\n### 删除标签\n```\ngit tag -d v1.01\n```\n`-d`表示删除，后面跟版本号\n\n### 删除远程标签\n\n```\ngit push origin :refs/tags/v1.01\n```\n### 查看标签\n`git tag`\n或者\n`git tag -l`\n\n# clone\n克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息\n\n# pull\npull操作是用于两个存储库实例之间的同步\n\n# push\n将本地仓库中的文件同步到远端库中\n\n# head\nHEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中\n\n# git常用命令\n\n```\n初始化新版本库：git init\n全局设置：git config   --global user.name \"xzavier\"  git config --global user.email \"xzavier.xxx.com\"\n克隆版本库：git clone \"url\"\n查看分支：git branch\n创建分支：git branch branch_nema\n切换分支：git checkout branch_name\n创建+切换分支：git checkout -b branch_name\n合并某分支到当前分支：git merge branch_name\n重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支\n重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支\n删除分支：git branch -d branch_name \n强制删除分支： git branch -D branch_name\n删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支\n拉取代码：git pull orgin branch_name\n查看更改：git status\n查看更改细节：git diff file_name\n查看谁修改过代码：git blame filename\n回到上次修改：git reset --hard\n添加单个文件：git add filename.js\n添加所有js文件：git add *.js\n添加所有文件：git add .\n提交添加的文件：git commit -m \"your description about this branch\"\n提交单个文件：git commit -m \"your description about this branch\" filename.js\npush分支：git push orgin your_branch_name\n备份当前分支内容：git stash\n查看历史记录：git log\n创建标签：git tag 1.0.0  //标签无法重命名\n显示标签列表：git tag\n切出标签：git checkout 1.0.0\n删除标签：git tag -d 1.0.0\n查看git远程地址：git remote -v\n更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git\n\n```\n\n# git+gulp小工作流\n早上上班的时候切换到master分支，拉一下代码\n```\ngit pull origin master\n\n```\n开始写代码，新建一个分支\n```\ngit checkout -b branch_name\n\n```\n正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：\n```\ngit stash\n```\n切换到别的分支修改代码：\n```\ngit checkout -b branch_name\n\n```\n修复bug后提交代码查看修改：\n```\ngit status\n```\n需要查看修改的细节：\n```\ngit diff file_name\n```\n没有问题就提交：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n解决完bug切换到原来的分支\n```\ngit checkout -b you_old_branch\n```\n恢复刚刚保存的内容：\n```\ngit stash   //备份当前的工作区的内容，保存到git栈\n\ngit stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复\ngit stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复\ngit stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了\n```\n\n恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）\n```\ngit pull orgin master\n\n```\n或者\n```\ngit pull orgin his/her_branch_name\n```\n\n\n用gulp构建工具\n在修改bug的时候将环境调成本地环境\n`protected`<`config`<`dev.php`下的`#当前环境  'env' => ''`\n`env`为空为上线环境，`env`为`dev`为本地环境\n\n先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交\n\n然后查看完线上环境没有问题了可以进行`gulp build`，可能会报错\n\n```\nError: ENOENT: no such file or directory, open 'C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json'\n    at Error (native)\n```\n这是要clean一下，`gulp clean:temp`\n然后在`gulp build`\n之后就可以git三件套了\n\n\n摘自：[前端资源系列（1）-Git常用命令&设置快捷命令&小工作流](https://segmentfault.com/a/1190000005945614)\n\n\n","slug":"GitCommands","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zux0009vvxi0ao41554","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493224022490&amp;di=4b9c36844b17e0c6116d1fd5aa883baf&amp;imgtype=0&amp;src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png\" alt=\"git图片\"></p>\n<p>本篇长期更新，记录一些常用的git命令和使用git团队合作的命令</p>\n<a id=\"more\"></a>\n<h1 id=\"git的工作步骤\"><a href=\"#git的工作步骤\" class=\"headerlink\" title=\"git的工作步骤\"></a>git的工作步骤</h1><ol>\n<li>修改文件的工作目录</li>\n<li>将这些文件添加到暂存区</li>\n<li>执行commit操作，发布版本</li>\n<li>push将发布的版本推送到git仓库</li>\n</ol>\n<h1 id=\"git常见术语\"><a href=\"#git常见术语\" class=\"headerlink\" title=\"git常见术语\"></a>git常见术语</h1><h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><p>提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。</p>\n<h2 id=\"branches\"><a href=\"#branches\" class=\"headerlink\" title=\"branches\"></a>branches</h2><p>分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交</p>\n<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h2><p>git中的tag指向一次commit的id。通常用来给开发做版本号。</p>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -a v1.01 -m &quot;Relase version 1.01&quot;</div></pre></td></tr></table></figure>\n<p><code>git tags</code>是打标签的命令，<code>-a</code>是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释</p>\n<h3 id=\"提交标签到远端仓库\"><a href=\"#提交标签到远端仓库\" class=\"headerlink\" title=\"提交标签到远端仓库\"></a>提交标签到远端仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin -tags</div></pre></td></tr></table></figure>\n<p>就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。</p>\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -d v1.01</div></pre></td></tr></table></figure>\n<p><code>-d</code>表示删除，后面跟版本号</p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :refs/tags/v1.01</div></pre></td></tr></table></figure>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><p><code>git tag</code><br>或者<br><code>git tag -l</code></p>\n<h1 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h1><p>克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息</p>\n<h1 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h1><p>pull操作是用于两个存储库实例之间的同步</p>\n<h1 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h1><p>将本地仓库中的文件同步到远端库中</p>\n<h1 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h1><p>HEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中</p>\n<h1 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">初始化新版本库：git init</div><div class=\"line\">全局设置：git config   --global user.name &quot;xzavier&quot;  git config --global user.email &quot;xzavier.xxx.com&quot;</div><div class=\"line\">克隆版本库：git clone &quot;url&quot;</div><div class=\"line\">查看分支：git branch</div><div class=\"line\">创建分支：git branch branch_nema</div><div class=\"line\">切换分支：git checkout branch_name</div><div class=\"line\">创建+切换分支：git checkout -b branch_name</div><div class=\"line\">合并某分支到当前分支：git merge branch_name</div><div class=\"line\">重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支</div><div class=\"line\">重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支</div><div class=\"line\">删除分支：git branch -d branch_name </div><div class=\"line\">强制删除分支： git branch -D branch_name</div><div class=\"line\">删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支</div><div class=\"line\">拉取代码：git pull orgin branch_name</div><div class=\"line\">查看更改：git status</div><div class=\"line\">查看更改细节：git diff file_name</div><div class=\"line\">查看谁修改过代码：git blame filename</div><div class=\"line\">回到上次修改：git reset --hard</div><div class=\"line\">添加单个文件：git add filename.js</div><div class=\"line\">添加所有js文件：git add *.js</div><div class=\"line\">添加所有文件：git add .</div><div class=\"line\">提交添加的文件：git commit -m &quot;your description about this branch&quot;</div><div class=\"line\">提交单个文件：git commit -m &quot;your description about this branch&quot; filename.js</div><div class=\"line\">push分支：git push orgin your_branch_name</div><div class=\"line\">备份当前分支内容：git stash</div><div class=\"line\">查看历史记录：git log</div><div class=\"line\">创建标签：git tag 1.0.0  //标签无法重命名</div><div class=\"line\">显示标签列表：git tag</div><div class=\"line\">切出标签：git checkout 1.0.0</div><div class=\"line\">删除标签：git tag -d 1.0.0</div><div class=\"line\">查看git远程地址：git remote -v</div><div class=\"line\">更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git</div></pre></td></tr></table></figure>\n<h1 id=\"git-gulp小工作流\"><a href=\"#git-gulp小工作流\" class=\"headerlink\" title=\"git+gulp小工作流\"></a>git+gulp小工作流</h1><p>早上上班的时候切换到master分支，拉一下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure></p>\n<p>开始写代码，新建一个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure></p>\n<p>切换到别的分支修改代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>修复bug后提交代码查看修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure></p>\n<p>需要查看修改的细节：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff file_name</div></pre></td></tr></table></figure></p>\n<p>没有问题就提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>解决完bug切换到原来的分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b you_old_branch</div></pre></td></tr></table></figure></p>\n<p>恢复刚刚保存的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash   //备份当前的工作区的内容，保存到git栈</div><div class=\"line\"></div><div class=\"line\">git stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复</div><div class=\"line\">git stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复</div><div class=\"line\">git stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了</div></pre></td></tr></table></figure></p>\n<p>恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin master</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin his/her_branch_name</div></pre></td></tr></table></figure></p>\n<p>用gulp构建工具<br>在修改bug的时候将环境调成本地环境<br><code>protected</code>&lt;<code>config</code>&lt;<code>dev.php</code>下的<code>#当前环境  &#39;env&#39; =&gt; &#39;&#39;</code><br><code>env</code>为空为上线环境，<code>env</code>为<code>dev</code>为本地环境</p>\n<p>先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交</p>\n<p>然后查看完线上环境没有问题了可以进行<code>gulp build</code>，可能会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: ENOENT: no such file or directory, open &apos;C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json&apos;</div><div class=\"line\">    at Error (native)</div></pre></td></tr></table></figure>\n<p>这是要clean一下，<code>gulp clean:temp</code><br>然后在<code>gulp build</code><br>之后就可以git三件套了</p>\n<p>摘自：<a href=\"https://segmentfault.com/a/1190000005945614\" target=\"_blank\" rel=\"external\">前端资源系列（1）-Git常用命令&amp;设置快捷命令&amp;小工作流</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493224022490&amp;di=4b9c36844b17e0c6116d1fd5aa883baf&amp;imgtype=0&amp;src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png\" alt=\"git图片\"></p>\n<p>本篇长期更新，记录一些常用的git命令和使用git团队合作的命令</p>","more":"<h1 id=\"git的工作步骤\"><a href=\"#git的工作步骤\" class=\"headerlink\" title=\"git的工作步骤\"></a>git的工作步骤</h1><ol>\n<li>修改文件的工作目录</li>\n<li>将这些文件添加到暂存区</li>\n<li>执行commit操作，发布版本</li>\n<li>push将发布的版本推送到git仓库</li>\n</ol>\n<h1 id=\"git常见术语\"><a href=\"#git常见术语\" class=\"headerlink\" title=\"git常见术语\"></a>git常见术语</h1><h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><p>提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。</p>\n<h2 id=\"branches\"><a href=\"#branches\" class=\"headerlink\" title=\"branches\"></a>branches</h2><p>分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交</p>\n<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h2><p>git中的tag指向一次commit的id。通常用来给开发做版本号。</p>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -a v1.01 -m &quot;Relase version 1.01&quot;</div></pre></td></tr></table></figure>\n<p><code>git tags</code>是打标签的命令，<code>-a</code>是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释</p>\n<h3 id=\"提交标签到远端仓库\"><a href=\"#提交标签到远端仓库\" class=\"headerlink\" title=\"提交标签到远端仓库\"></a>提交标签到远端仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin -tags</div></pre></td></tr></table></figure>\n<p>就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。</p>\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -d v1.01</div></pre></td></tr></table></figure>\n<p><code>-d</code>表示删除，后面跟版本号</p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :refs/tags/v1.01</div></pre></td></tr></table></figure>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><p><code>git tag</code><br>或者<br><code>git tag -l</code></p>\n<h1 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h1><p>克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息</p>\n<h1 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h1><p>pull操作是用于两个存储库实例之间的同步</p>\n<h1 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h1><p>将本地仓库中的文件同步到远端库中</p>\n<h1 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h1><p>HEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中</p>\n<h1 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">初始化新版本库：git init</div><div class=\"line\">全局设置：git config   --global user.name &quot;xzavier&quot;  git config --global user.email &quot;xzavier.xxx.com&quot;</div><div class=\"line\">克隆版本库：git clone &quot;url&quot;</div><div class=\"line\">查看分支：git branch</div><div class=\"line\">创建分支：git branch branch_nema</div><div class=\"line\">切换分支：git checkout branch_name</div><div class=\"line\">创建+切换分支：git checkout -b branch_name</div><div class=\"line\">合并某分支到当前分支：git merge branch_name</div><div class=\"line\">重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支</div><div class=\"line\">重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支</div><div class=\"line\">删除分支：git branch -d branch_name </div><div class=\"line\">强制删除分支： git branch -D branch_name</div><div class=\"line\">删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支</div><div class=\"line\">拉取代码：git pull orgin branch_name</div><div class=\"line\">查看更改：git status</div><div class=\"line\">查看更改细节：git diff file_name</div><div class=\"line\">查看谁修改过代码：git blame filename</div><div class=\"line\">回到上次修改：git reset --hard</div><div class=\"line\">添加单个文件：git add filename.js</div><div class=\"line\">添加所有js文件：git add *.js</div><div class=\"line\">添加所有文件：git add .</div><div class=\"line\">提交添加的文件：git commit -m &quot;your description about this branch&quot;</div><div class=\"line\">提交单个文件：git commit -m &quot;your description about this branch&quot; filename.js</div><div class=\"line\">push分支：git push orgin your_branch_name</div><div class=\"line\">备份当前分支内容：git stash</div><div class=\"line\">查看历史记录：git log</div><div class=\"line\">创建标签：git tag 1.0.0  //标签无法重命名</div><div class=\"line\">显示标签列表：git tag</div><div class=\"line\">切出标签：git checkout 1.0.0</div><div class=\"line\">删除标签：git tag -d 1.0.0</div><div class=\"line\">查看git远程地址：git remote -v</div><div class=\"line\">更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git</div></pre></td></tr></table></figure>\n<h1 id=\"git-gulp小工作流\"><a href=\"#git-gulp小工作流\" class=\"headerlink\" title=\"git+gulp小工作流\"></a>git+gulp小工作流</h1><p>早上上班的时候切换到master分支，拉一下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure></p>\n<p>开始写代码，新建一个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure></p>\n<p>切换到别的分支修改代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>修复bug后提交代码查看修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure></p>\n<p>需要查看修改的细节：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff file_name</div></pre></td></tr></table></figure></p>\n<p>没有问题就提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>解决完bug切换到原来的分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b you_old_branch</div></pre></td></tr></table></figure></p>\n<p>恢复刚刚保存的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash   //备份当前的工作区的内容，保存到git栈</div><div class=\"line\"></div><div class=\"line\">git stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复</div><div class=\"line\">git stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复</div><div class=\"line\">git stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了</div></pre></td></tr></table></figure></p>\n<p>恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin master</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin his/her_branch_name</div></pre></td></tr></table></figure></p>\n<p>用gulp构建工具<br>在修改bug的时候将环境调成本地环境<br><code>protected</code>&lt;<code>config</code>&lt;<code>dev.php</code>下的<code>#当前环境  &#39;env&#39; =&gt; &#39;&#39;</code><br><code>env</code>为空为上线环境，<code>env</code>为<code>dev</code>为本地环境</p>\n<p>先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交</p>\n<p>然后查看完线上环境没有问题了可以进行<code>gulp build</code>，可能会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: ENOENT: no such file or directory, open &apos;C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json&apos;</div><div class=\"line\">    at Error (native)</div></pre></td></tr></table></figure>\n<p>这是要clean一下，<code>gulp clean:temp</code><br>然后在<code>gulp build</code><br>之后就可以git三件套了</p>\n<p>摘自：<a href=\"https://segmentfault.com/a/1190000005945614\" target=\"_blank\" rel=\"external\">前端资源系列（1）-Git常用命令&amp;设置快捷命令&amp;小工作流</a></p>"},{"title":"了解githubPages+hexo搭建博客的原理","date":"2017-02-26T06:30:15.000Z","_content":"之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","source":"_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","raw":"---\ntitle: 了解githubPages+hexo搭建博客的原理\ndate: 2017-02-26 14:30:15\ntags: hexo \ncategories: git\n---\n之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","slug":"Hexo-Understand-the-principles-of-githubPages-hexoblog","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zv4000bvvxiail0rbsy","content":"<p>之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。<br><a id=\"more\"></a></p>\n<h2 id=\"什么是github-pages\"><a href=\"#什么是github-pages\" class=\"headerlink\" title=\"什么是github pages\"></a>什么是github pages</h2><ol>\n<li><p>什么是github pages<br>github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面</p>\n<blockquote>\n<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>\n</blockquote>\n</li>\n<li><p>下面是GitHub Pages 官方文档:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">https://pages.github.com/</a> </li>\n<li><a href=\"http://help.github.com/pages\" target=\"_blank\" rel=\"external\">http://help.github.com/pages</a></li>\n</ul>\n<ol>\n<li><p>GitHub提供两种类型的主页(<a href=\"https://help.github.com/articles/user-organization-and-project-pages\" target=\"_blank\" rel=\"external\">https://help.github.com/articles/user-organization-and-project-pages</a>):</p>\n<ul>\n<li>个人或组织主页 - 页面内容位于 master 下 </li>\n<li>项目主页 - 页面内容位于每个项目的master下</li>\n</ul>\n<p>我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）</p>\n</li>\n</ol>\n<h2 id=\"怎么使用github-pages\"><a href=\"#怎么使用github-pages\" class=\"headerlink\" title=\"怎么使用github pages\"></a>怎么使用github pages</h2><ol>\n<li>使用个人或组织页面<br>使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：<a href=\"http://sunshine940326.github.io来访问我的个人博客。\" target=\"_blank\" rel=\"external\">http://sunshine940326.github.io来访问我的个人博客。</a></li>\n<li><p>使用项目主页的方法如下</p>\n<ul>\n<li>设置的方法很简单，只需要在你项目的右上角点击setting<br><img src=\"http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>找到下方的pages，将默认的none改成master分支<img src=\"http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容<img src=\"http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.</p>\n</blockquote>\n<h2 id=\"什么是hexo以及安装hexo\"><a href=\"#什么是hexo以及安装hexo\" class=\"headerlink\" title=\"什么是hexo以及安装hexo\"></a>什么是hexo以及安装hexo</h2><p>说完了githubpages，继续来说一下什么是hexo</p>\n<ol>\n<li>什么是Hexo<br>google的第一条结果的解释是这样的<br><img src=\"http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点开这个链接就是中文版的官网了，<strong>强烈建议大家多看看官方教程</strong>，比看其他的教程有用多了</li>\n</ol>\n<p>hexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash<br>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p>\n<ol>\n<li>安装 Git<ul>\n<li>Windows：下载并安装 git.<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">百度云git下载地址</a></li>\n<li>Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n</li>\n<li><p>安装node<br>安装node的方式有很多种，我建议直接使用安装程序安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node安装程序</a></p>\n<blockquote>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br><strong>安装node是需要配置环境变量的</strong></p>\n</blockquote>\n<p>安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功</p>\n</li>\n<li>安装Hexo<br>当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =<br>只需要输入下面的代码就可以安装hexo<br>在任意位置新建一个文件夹名为hexo <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd d:/hexo</div><div class=\"line\">$ npm install hexo-cli -g</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div><div class=\"line\">$ npm install</div><div class=\"line\">$ hexo g # 或者hexo generate</div><div class=\"line\">$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看</div></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你可以在浏览器输入<a href=\"http://localhost:4000/，预览你的博客了，通常都是一篇hello\" target=\"_blank\" rel=\"external\">http://localhost:4000/，预览你的博客了，通常都是一篇hello</a> world= =<br>然后我们就需要将我们的项目部署到github上</p>\n<p><strong>首先需要明白所谓部署到github的原理。</strong><br><strong>之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。</strong><br><strong>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</strong><br><strong>需要将hexo生成的静态网站，提交(git commit)到github上。</strong><br>然后我们需要配置_config.yml配置文件<br>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<code>$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h</code><br>要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）<br><strong>注意type:后面有一个空格</strong><br>将repository后面的链接换成你的博客名字<code># Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</code><br>然后在执行<br><code>$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d</code></p>\n<ol>\n<li><p>命令解释：</p>\n<ul>\n<li>hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>\n<li>hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，</li>\n<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>\n<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！</li>\n<li>是的，现在你拥有了自己的博客！<br>然后你就可以输入<a href=\"http://sunshine940326.github.io来查看你的博客啦~\" target=\"_blank\" rel=\"external\">http://sunshine940326.github.io来查看你的博客啦~</a><br>注意需要提前安装一个扩展：<code>$ npm install hexo-deployer-git --save</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"装饰你的个人博客\"><a href=\"#装饰你的个人博客\" class=\"headerlink\" title=\"装饰你的个人博客\"></a>装饰你的个人博客</h2><p>至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客</p>\n<ol>\n<li>Hexo 主题配置<br>就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好<br>这里以主题NexT为例进行说明。</li>\n<li>安装主题 <code>$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>\n<li>启用主题</li>\n</ol>\n<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n<ol>\n<li>更新主题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd themes/next</div><div class=\"line\">$ git pull</div><div class=\"line\">$ hexo g # 生成</div><div class=\"line\">$ hexo s # 启动本地web服务器</div></pre></td></tr></table></figure></li>\n</ol>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Themes·Hexo</a>上选择你的主题，我使用的Next主题<br>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next官方文档</a>,内容十分详尽</p>\n","site":{"data":{}},"excerpt":"<p>之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。<br>","more":"</p>\n<h2 id=\"什么是github-pages\"><a href=\"#什么是github-pages\" class=\"headerlink\" title=\"什么是github pages\"></a>什么是github pages</h2><ol>\n<li><p>什么是github pages<br>github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面</p>\n<blockquote>\n<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>\n</blockquote>\n</li>\n<li><p>下面是GitHub Pages 官方文档:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">https://pages.github.com/</a> </li>\n<li><a href=\"http://help.github.com/pages\" target=\"_blank\" rel=\"external\">http://help.github.com/pages</a></li>\n</ul>\n<ol>\n<li><p>GitHub提供两种类型的主页(<a href=\"https://help.github.com/articles/user-organization-and-project-pages\" target=\"_blank\" rel=\"external\">https://help.github.com/articles/user-organization-and-project-pages</a>):</p>\n<ul>\n<li>个人或组织主页 - 页面内容位于 master 下 </li>\n<li>项目主页 - 页面内容位于每个项目的master下</li>\n</ul>\n<p>我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）</p>\n</li>\n</ol>\n<h2 id=\"怎么使用github-pages\"><a href=\"#怎么使用github-pages\" class=\"headerlink\" title=\"怎么使用github pages\"></a>怎么使用github pages</h2><ol>\n<li>使用个人或组织页面<br>使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：<a href=\"http://sunshine940326.github.io来访问我的个人博客。\" target=\"_blank\" rel=\"external\">http://sunshine940326.github.io来访问我的个人博客。</a></li>\n<li><p>使用项目主页的方法如下</p>\n<ul>\n<li>设置的方法很简单，只需要在你项目的右上角点击setting<br><img src=\"http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>找到下方的pages，将默认的none改成master分支<img src=\"http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容<img src=\"http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.</p>\n</blockquote>\n<h2 id=\"什么是hexo以及安装hexo\"><a href=\"#什么是hexo以及安装hexo\" class=\"headerlink\" title=\"什么是hexo以及安装hexo\"></a>什么是hexo以及安装hexo</h2><p>说完了githubpages，继续来说一下什么是hexo</p>\n<ol>\n<li>什么是Hexo<br>google的第一条结果的解释是这样的<br><img src=\"http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点开这个链接就是中文版的官网了，<strong>强烈建议大家多看看官方教程</strong>，比看其他的教程有用多了</li>\n</ol>\n<p>hexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash<br>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p>\n<ol>\n<li>安装 Git<ul>\n<li>Windows：下载并安装 git.<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">百度云git下载地址</a></li>\n<li>Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n</li>\n<li><p>安装node<br>安装node的方式有很多种，我建议直接使用安装程序安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node安装程序</a></p>\n<blockquote>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br><strong>安装node是需要配置环境变量的</strong></p>\n</blockquote>\n<p>安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功</p>\n</li>\n<li>安装Hexo<br>当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =<br>只需要输入下面的代码就可以安装hexo<br>在任意位置新建一个文件夹名为hexo <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd d:/hexo</div><div class=\"line\">$ npm install hexo-cli -g</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div><div class=\"line\">$ npm install</div><div class=\"line\">$ hexo g # 或者hexo generate</div><div class=\"line\">$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看</div></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你可以在浏览器输入<a href=\"http://localhost:4000/，预览你的博客了，通常都是一篇hello\" target=\"_blank\" rel=\"external\">http://localhost:4000/，预览你的博客了，通常都是一篇hello</a> world= =<br>然后我们就需要将我们的项目部署到github上</p>\n<p><strong>首先需要明白所谓部署到github的原理。</strong><br><strong>之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。</strong><br><strong>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</strong><br><strong>需要将hexo生成的静态网站，提交(git commit)到github上。</strong><br>然后我们需要配置_config.yml配置文件<br>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<code>$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h</code><br>要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）<br><strong>注意type:后面有一个空格</strong><br>将repository后面的链接换成你的博客名字<code># Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</code><br>然后在执行<br><code>$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d</code></p>\n<ol>\n<li><p>命令解释：</p>\n<ul>\n<li>hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>\n<li>hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，</li>\n<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>\n<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！</li>\n<li>是的，现在你拥有了自己的博客！<br>然后你就可以输入<a href=\"http://sunshine940326.github.io来查看你的博客啦~\" target=\"_blank\" rel=\"external\">http://sunshine940326.github.io来查看你的博客啦~</a><br>注意需要提前安装一个扩展：<code>$ npm install hexo-deployer-git --save</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"装饰你的个人博客\"><a href=\"#装饰你的个人博客\" class=\"headerlink\" title=\"装饰你的个人博客\"></a>装饰你的个人博客</h2><p>至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客</p>\n<ol>\n<li>Hexo 主题配置<br>就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好<br>这里以主题NexT为例进行说明。</li>\n<li>安装主题 <code>$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>\n<li>启用主题</li>\n</ol>\n<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n<ol>\n<li>更新主题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd themes/next</div><div class=\"line\">$ git pull</div><div class=\"line\">$ hexo g # 生成</div><div class=\"line\">$ hexo s # 启动本地web服务器</div></pre></td></tr></table></figure></li>\n</ol>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Themes·Hexo</a>上选择你的主题，我使用的Next主题<br>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next官方文档</a>,内容十分详尽</p>"},{"title":"hexo高级进阶","date":"2016-09-16T17:14:19.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","source":"_posts/Hexo-advanced.md","raw":"---\ntitle: hexo高级进阶\ndate: 2016-09-17 01:14:19\ntags: hexo \ncategories: git\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","slug":"Hexo-advanced","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zvd000gvvxitmtwtxir","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<p>这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。<br><a id=\"more\"></a></p>\n<h1 id=\"1、永久链接\"><a href=\"#1、永久链接\" class=\"headerlink\" title=\"1、永久链接\"></a>1、永久链接</h1><p>你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。</p>\n<h2 id=\"（1）变量\"><a href=\"#（1）变量\" class=\"headerlink\" title=\"（1）变量\"></a>（1）变量</h2><p>下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。</p>\n<pre><code>:year 4位的年，比如2015\n:month 2位的月，比如06\n:i_month 去掉前面0的月，比如9代表9月\n:day 两位的天，比如05代表5号\n:i_day 同理\n:title 文件名\n:id 文章ID\n:category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n</code></pre><p>你也可以自定义每个变量，在 permalink_defaults 中这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink_defaults:</div><div class=\"line\">    lang: en</div></pre></td></tr></table></figure></p>\n<h2 id=\"（2）举例说明\"><a href=\"#（2）举例说明\" class=\"headerlink\" title=\"（2）举例说明\"></a>（2）举例说明</h2><p>假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2015-06-01</div><div class=\"line\">categories:</div><div class=\"line\">- foo</div><div class=\"line\">- bar</div></pre></td></tr></table></figure></p>\n<pre><code>设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n设置为： :category/:title 结果为： foo/bar/hello-world\n</code></pre><h2 id=\"（3）多语言支持\"><a href=\"#（3）多语言支持\" class=\"headerlink\" title=\"（3）多语言支持\"></a>（3）多语言支持</h2><p>你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new_post_name: :lang/:title.md</div><div class=\"line\">permalink: :lang/:title/</div></pre></td></tr></table></figure></p>\n<p>当你创建一个新的文章的时候， hexo new “Hello World” –lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 <a href=\"http://localhost:4000/tw/hello-world/\" target=\"_blank\" rel=\"external\">http://localhost:4000/tw/hello-world/</a> 便会指向该文章。</p>\n<h1 id=\"2、主题\"><a href=\"#2、主题\" class=\"headerlink\" title=\"2、主题\"></a>2、主题</h1><p>hexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── languages</div><div class=\"line\">├── layout</div><div class=\"line\">├── scripts</div><div class=\"line\">└── source</div></pre></td></tr></table></figure></p>\n<h2 id=\"（1）主题全局设置\"><a href=\"#（1）主题全局设置\" class=\"headerlink\" title=\"（1）主题全局设置\"></a>（1）主题全局设置</h2><p>_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。</p>\n<h2 id=\"（2）语言\"><a href=\"#（2）语言\" class=\"headerlink\" title=\"（2）语言\"></a>（2）语言</h2><p>语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。</p>\n<h1 id=\"3、模版\"><a href=\"#3、模版\" class=\"headerlink\" title=\"3、模版\"></a>3、模版</h1><p>模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>\n<pre><code>index 首页\npost 文章\npage 分页\narchive 归档\ncategory 分类归档\ntag 标签归档\n</code></pre><h2 id=\"（1）Layouts（布局）\"><a href=\"#（1）Layouts（布局）\" class=\"headerlink\" title=\"（1）Layouts（布局）\"></a>（1）Layouts（布局）</h2><p>如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">index</div><div class=\"line\"></div><div class=\"line\">&lt;!--layout.ejs--&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>生成的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;index&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n<p>也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。</p>\n<h2 id=\"（2）Partials（局部模版）\"><a href=\"#（2）Partials（局部模版）\" class=\"headerlink\" title=\"（2）Partials（局部模版）\"></a>（2）Partials（局部模版）</h2><p>局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>\n<h2 id=\"（3）Local-Variables（本地变量）\"><a href=\"#（3）Local-Variables（本地变量）\" class=\"headerlink\" title=\"（3）Local Variables（本地变量）\"></a>（3）Local Variables（本地变量）</h2><p>这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个也不难理解，就是传递变量的过程。</p>\n<h2 id=\"（4）Optimization（最优化）\"><a href=\"#（4）Optimization（最优化）\" class=\"headerlink\" title=\"（4）Optimization（最优化）\"></a>（4）Optimization（最优化）</h2><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;</div><div class=\"line\">  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果使用局部模版的话，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</div></pre></td></tr></table></figure></p>\n<p>但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>\n<h1 id=\"4、变量\"><a href=\"#4、变量\" class=\"headerlink\" title=\"4、变量\"></a>4、变量</h1><h2 id=\"（1）全局变量\"><a href=\"#（1）全局变量\" class=\"headerlink\" title=\"（1）全局变量\"></a>（1）全局变量</h2><pre><code>site 网站变量\n    site.posts 所有文章\n    site.pages 所有分页\n    site.categories 所有分类\n    site.tags 所有标签\npage 针对改页面的内容以及前置申明中所设定的变量\nconfig 配置文件中的变量\ntheme 主题配置文件中的变量\n_ lodash 函数库\npath 当前页面的路径（不含根路径）\nurl 页面完整网址\nenv 环境变量\n</code></pre><h2 id=\"（2）页面变量\"><a href=\"#（2）页面变量\" class=\"headerlink\" title=\"（2）页面变量\"></a>（2）页面变量</h2><p>Page(page)这里指的是 hexo new page 创建的那个页面</p>\n<pre><code>page.title 文章标题\npage.date 文章建立日期\npage.updated 文章更新日期\npage.comments 留言是否开启\npage.layout 布局名称\npage.content 文章完整内容\npage.excerpt 文章摘要\npage.more 除了摘要的其他内容\npage.source 文章原始路劲\npage.full_source 文章完整原始路径\npage.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\npage.permalink 文章永久网址\npage.prev 上一篇文章，如果此为第一篇文章则为 null\npage.next 下一篇文章，如果此为最后一篇文章则为 null\npage.raw 文章原始内容\npage.photos 文章的照片（用于相册）\npage.link 文章的外链（用于链接文章）\n</code></pre><p>Post(post)这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<pre><code>page.pulished 文章非草稿为true\npage.categories 文章分类\npage.tags 文章标签\n</code></pre><p><strong>首页(index)</strong></p>\n<pre><code>page.per_page 每一页显示的文章数\npage.total 文章数量\npage.current 当前页码\npage.current_url 当前页的URL\npage.posts 当前页的文章\npage.prev 前一页页码，如果为第一页，该值为0\npage.prev_link 前一页URL，如果为第一页，则为&apos;&apos;\npage.next 后一页页码，如果为最后一页，则为0\npage.next_link 后一页URL，如果为最后一页，则为&apos;&apos;\npage.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n</code></pre><p>归档页(archive)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>archive 为true\nyear 归档年份（4位）\nmonth 归档月份（不包含0）\n</code></pre><p>分类页(category)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>category 分类名称\n</code></pre><p>标签页(tag)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>tag 标签名称\n</code></pre><h1 id=\"5、帮助函数\"><a href=\"#5、帮助函数\" class=\"headerlink\" title=\"5、帮助函数\"></a>5、帮助函数</h1><p>帮助函数被用于在模版中快速插入内容。</p>\n<h2 id=\"（1）URL\"><a href=\"#（1）URL\" class=\"headerlink\" title=\"（1）URL\"></a>（1）URL</h2><pre><code>url_for 返回一个带root路径的url，用法： &lt;%- url_for(path) %&gt;\nrelative_url 返回from相对的to路径，用法： &lt;%- relative_url(from, to) %&gt;\n\ngravatar 插入Gravatar图片，用法： &lt;%- gravatar(email, [size])%&gt; ，例如：\n\n&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n</code></pre><h2 id=\"（2）HTML\"><a href=\"#（2）HTML\" class=\"headerlink\" title=\"（2）HTML\"></a>（2）HTML</h2><p>   1 css 载入CSS文件。用法： &lt;%- css(path, …)%&gt; ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：</p>\n<pre><code>&lt;%- css(&apos;style.css&apos;) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n\n\n&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>   2 js 载入 JavaScript 文件。用法： &lt;%- js(path, …) %&gt; ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。</p>\n<pre><code>&lt;%- js(&apos;script.js&apos;) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>   3 link_to 插入链接。用法： &lt;%- link_to(path, [text], [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>external 在新窗口中打开链接，默认值为false</li>\n<li>class Class名称，也就是html标签a的class名</li>\n<li><p>id ID名，也就是html标签a的id名</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;\n // &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;\n\n\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, {external: true, class: &quot;link&quot;}) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;\n</code></pre><p>   4 mail_to 插入电子邮件链接。用法： &lt;%- mail_to(path, [text], [options])%&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>subject 邮件主题</li>\n<li>cc 抄送（CC）</li>\n<li>bcc 密送（BCC）</li>\n<li><p>body 邮件内容</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;\n&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;\n</code></pre><p>   5 image_tag 插入图片。用法： &lt;%- image_tag(path, [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>alt 替代文字</li>\n<li>width 宽度</li>\n<li><p>height 高度</p>\n<p>基本上就是 img 标签里的属性值。</p>\n</li>\n</ul>\n<p>6 favicon_tag 插入favicon。用法：<br><figure class=\"highlight plain\"><figcaption><span>favicon_tag(path) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">7 feed_tag 插入feed链接。用法：</div><div class=\"line\">```&lt;%- feed_tag(path, [options]) %&gt; ```，参数有： title 和 type (默认值为atom)</div><div class=\"line\"></div><div class=\"line\">（3）条件函数</div><div class=\"line\">---</div><div class=\"line\">    is_current 判断 path 是否符合目前页面的网址。 &lt;%- is_current(path, [strict]) %&gt;</div><div class=\"line\">    is_home 判断目前是否为首页。</div><div class=\"line\">    is_post 检查目前是否为文章。 &lt;%- is_post() %&gt;</div><div class=\"line\">    is_archive 检查目前是否为存档页面。 &lt;%- is_archive() %&gt;</div><div class=\"line\">    is_year 检查目前是否为年度归档页面。 &lt;%- is_year() %&gt;</div><div class=\"line\">    is_month 检查目前是否为月度归档页面。 &lt;%- is_month() %&gt;</div><div class=\"line\">    is_category 检查目前是否为分类归档页面。 &lt;%- is_category() %&gt;</div><div class=\"line\">    is_tag 检查目前是否为标签归档页面。 &lt;%- is_tag() %&gt;</div><div class=\"line\"></div><div class=\"line\">（4）字符串处理</div><div class=\"line\">---</div><div class=\"line\">   - trim 清除字符串开头和结尾的空格。 ```&lt;%- trim(string) %&gt;`</div><div class=\"line\"></div><div class=\"line\">   - strip_html 清除字符串中的 HTML 标签。``` &lt;%- strip_html(string) %&gt; ```，示例：</div></pre></td></tr></table></figure></p>\n<pre><code>&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;\n// It&apos;s not important anymore!\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- titlecase 把字符串转换为正确的 Title case。 ```&lt;%- titlecase(string) %&gt; ```示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;\n# This is an Apple\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- markdown 使用 Markdown 解析字符串。 &lt;%- markdown(str) %&gt; 示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;\n// make me &lt;strong&gt;strong&lt;/strong&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- render 解析字符串。``` &lt;%- render(str, engine, [options]) %&gt;</div></pre></td></tr></table></figure>\n<pre><code>word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 <figure class=\"highlight plain\"><figcaption><span>word_wrap(str, [length]) %> ```，示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;</div><div class=\"line\">    // Once upon\\n a time</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>truncate 移除超过 length 长度的字符串。 <figure class=\"highlight plain\"><figcaption><span>truncate(text, length) %> ```示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, 16) %&gt;</div><div class=\"line\"></div><div class=\"line\">    // Once upon a time</div></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"（5）模板\"><a href=\"#（5）模板\" class=\"headerlink\" title=\"（5）模板\"></a>（5）模板</h2><ul>\n<li><p>partial 载入其他模板文件，您可在 locals 设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt;</p>\n<p>参数 | 描述 | 默认值 — | — | — cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false</p>\n</li>\n<li><p>fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); 示例：</p>\n<p>&lt;%- fragment_cache(‘header’, function(){</p>\n<pre><code>return &apos;&lt;header&gt;&lt;/header&gt;&apos;;\n</code></pre><p>}) %&gt;</p>\n</li>\n</ul>\n<h2 id=\"（6）日期与时间\"><a href=\"#（6）日期与时间\" class=\"headerlink\" title=\"（6）日期与时间\"></a>（6）日期与时间</h2><ul>\n<li>date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 &lt;%- date(date, [format]) %&gt; 示例：</li>\n</ul>\n<pre><code>&lt;%- date(Date.now()) %&gt;\n// Jan 1, 2013\n&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;\n// 2013/1/1\n</code></pre><ul>\n<li><p>date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 &lt;%- date_xml(date) %&gt; ，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- date_xml(Date.now()) %&gt;</div><div class=\"line\">// 2013-01-01T00:00:00.000Z</div></pre></td></tr></table></figure>\n</li>\n<li><p>time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <figure class=\"highlight plain\"><figcaption><span>time(date, [format]) %>``` 示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- time(Date.now()) %&gt;</div><div class=\"line\">    // 13:05:12</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // 1:05:12 pm</div><div class=\"line\"></div><div class=\"line\">   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 &lt;%- full_date(date, [format]) %&gt; 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- full_date(new Date()) %&gt;</div><div class=\"line\">    // Jan 1, 2013 0:00:00</div><div class=\"line\">    &lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // Tuesday, January 1st 2013, 12:00:00 am</div><div class=\"line\"></div><div class=\"line\">（7）列表</div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">   - list_categories 插入分类列表。 &lt;%- list_categories([categories], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">   - list_tags 插入标签列表。 &lt;%- list_tags([tags], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0</div><div class=\"line\"></div><div class=\"line\">   - list_archives 插入归档列表。 ```&lt;%- list_archives([options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |</p>\n</li>\n<li><p>list_posts 插入文章列表。 <figure class=\"highlight plain\"><figcaption><span>list_posts([options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">- tagcloud 插入标签云。 ```&lt;%- tagcloud([tags], [options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |</p>\n</li>\n</ul>\n<h2 id=\"（8）其他\"><a href=\"#（8）其他\" class=\"headerlink\" title=\"（8）其他\"></a>（8）其他</h2><ul>\n<li><p>paginator 插入分页链接。 <figure class=\"highlight plain\"><figcaption><span>paginator(options) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &amp;hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false</div><div class=\"line\"></div><div class=\"line\">- search_form 插入 Google 搜索框。 ```&lt;%- search_form(options) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false</p>\n</li>\n<li><p>number_format 格式化数字。 <figure class=\"highlight plain\"><figcaption><span>number_format(number, [options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .</div><div class=\"line\"> 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</div><div class=\"line\"> // 12,345.68</div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</div><div class=\"line\"> // 12,345.6700</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</div><div class=\"line\"> // 12,345</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;</div><div class=\"line\"> // 12345.67</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;</div><div class=\"line\"> // 12,345/67</div><div class=\"line\"></div><div class=\"line\">- open_graph 插入 open graph 资源。 &lt;%- open_graph([options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |</div><div class=\"line\"></div><div class=\"line\">- toc 解析内容中的标题标签 (h1~h6) 并插入目录。 &lt;%- toc(str, [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true</div><div class=\"line\"></div><div class=\"line\"> 下面示例就是解析文章内容，并生成目录列表：</div></pre></td></tr></table></figure></p>\n<p>&lt;%- toc(page.content) %&gt;```</p>\n</li>\n</ul>\n<h1 id=\"6、本地化\"><a href=\"#6、本地化\" class=\"headerlink\" title=\"6、本地化\"></a>6、本地化</h1><p>所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。</p>\n<p>例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：<code>&lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&#39;comment&#39;) %&gt;&lt;/h1&gt;</code>，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。</p>\n<p>这一块知道这些就基本上满足了自定义主题的需求了。</p>\n<h1 id=\"7、插件\"><a href=\"#7、插件\" class=\"headerlink\" title=\"7、插件\"></a>7、插件</h1><p>这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：</p>\n<pre><code>Generator\nRenderer\nHelper\nDeployer\nProcessor\nTag\nConsole\nMigrator\nFilter\n</code></pre><p>注意</p>\n<p>1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；</p>\n<p>2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<p>这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。<br>","more":"</p>\n<h1 id=\"1、永久链接\"><a href=\"#1、永久链接\" class=\"headerlink\" title=\"1、永久链接\"></a>1、永久链接</h1><p>你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。</p>\n<h2 id=\"（1）变量\"><a href=\"#（1）变量\" class=\"headerlink\" title=\"（1）变量\"></a>（1）变量</h2><p>下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。</p>\n<pre><code>:year 4位的年，比如2015\n:month 2位的月，比如06\n:i_month 去掉前面0的月，比如9代表9月\n:day 两位的天，比如05代表5号\n:i_day 同理\n:title 文件名\n:id 文章ID\n:category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n</code></pre><p>你也可以自定义每个变量，在 permalink_defaults 中这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink_defaults:</div><div class=\"line\">    lang: en</div></pre></td></tr></table></figure></p>\n<h2 id=\"（2）举例说明\"><a href=\"#（2）举例说明\" class=\"headerlink\" title=\"（2）举例说明\"></a>（2）举例说明</h2><p>假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2015-06-01</div><div class=\"line\">categories:</div><div class=\"line\">- foo</div><div class=\"line\">- bar</div></pre></td></tr></table></figure></p>\n<pre><code>设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n设置为： :category/:title 结果为： foo/bar/hello-world\n</code></pre><h2 id=\"（3）多语言支持\"><a href=\"#（3）多语言支持\" class=\"headerlink\" title=\"（3）多语言支持\"></a>（3）多语言支持</h2><p>你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new_post_name: :lang/:title.md</div><div class=\"line\">permalink: :lang/:title/</div></pre></td></tr></table></figure></p>\n<p>当你创建一个新的文章的时候， hexo new “Hello World” –lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 <a href=\"http://localhost:4000/tw/hello-world/\" target=\"_blank\" rel=\"external\">http://localhost:4000/tw/hello-world/</a> 便会指向该文章。</p>\n<h1 id=\"2、主题\"><a href=\"#2、主题\" class=\"headerlink\" title=\"2、主题\"></a>2、主题</h1><p>hexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── languages</div><div class=\"line\">├── layout</div><div class=\"line\">├── scripts</div><div class=\"line\">└── source</div></pre></td></tr></table></figure></p>\n<h2 id=\"（1）主题全局设置\"><a href=\"#（1）主题全局设置\" class=\"headerlink\" title=\"（1）主题全局设置\"></a>（1）主题全局设置</h2><p>_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。</p>\n<h2 id=\"（2）语言\"><a href=\"#（2）语言\" class=\"headerlink\" title=\"（2）语言\"></a>（2）语言</h2><p>语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。</p>\n<h1 id=\"3、模版\"><a href=\"#3、模版\" class=\"headerlink\" title=\"3、模版\"></a>3、模版</h1><p>模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>\n<pre><code>index 首页\npost 文章\npage 分页\narchive 归档\ncategory 分类归档\ntag 标签归档\n</code></pre><h2 id=\"（1）Layouts（布局）\"><a href=\"#（1）Layouts（布局）\" class=\"headerlink\" title=\"（1）Layouts（布局）\"></a>（1）Layouts（布局）</h2><p>如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">index</div><div class=\"line\"></div><div class=\"line\">&lt;!--layout.ejs--&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>生成的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;index&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n<p>也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。</p>\n<h2 id=\"（2）Partials（局部模版）\"><a href=\"#（2）Partials（局部模版）\" class=\"headerlink\" title=\"（2）Partials（局部模版）\"></a>（2）Partials（局部模版）</h2><p>局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>\n<h2 id=\"（3）Local-Variables（本地变量）\"><a href=\"#（3）Local-Variables（本地变量）\" class=\"headerlink\" title=\"（3）Local Variables（本地变量）\"></a>（3）Local Variables（本地变量）</h2><p>这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个也不难理解，就是传递变量的过程。</p>\n<h2 id=\"（4）Optimization（最优化）\"><a href=\"#（4）Optimization（最优化）\" class=\"headerlink\" title=\"（4）Optimization（最优化）\"></a>（4）Optimization（最优化）</h2><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;</div><div class=\"line\">  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果使用局部模版的话，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</div></pre></td></tr></table></figure></p>\n<p>但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>\n<h1 id=\"4、变量\"><a href=\"#4、变量\" class=\"headerlink\" title=\"4、变量\"></a>4、变量</h1><h2 id=\"（1）全局变量\"><a href=\"#（1）全局变量\" class=\"headerlink\" title=\"（1）全局变量\"></a>（1）全局变量</h2><pre><code>site 网站变量\n    site.posts 所有文章\n    site.pages 所有分页\n    site.categories 所有分类\n    site.tags 所有标签\npage 针对改页面的内容以及前置申明中所设定的变量\nconfig 配置文件中的变量\ntheme 主题配置文件中的变量\n_ lodash 函数库\npath 当前页面的路径（不含根路径）\nurl 页面完整网址\nenv 环境变量\n</code></pre><h2 id=\"（2）页面变量\"><a href=\"#（2）页面变量\" class=\"headerlink\" title=\"（2）页面变量\"></a>（2）页面变量</h2><p>Page(page)这里指的是 hexo new page 创建的那个页面</p>\n<pre><code>page.title 文章标题\npage.date 文章建立日期\npage.updated 文章更新日期\npage.comments 留言是否开启\npage.layout 布局名称\npage.content 文章完整内容\npage.excerpt 文章摘要\npage.more 除了摘要的其他内容\npage.source 文章原始路劲\npage.full_source 文章完整原始路径\npage.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\npage.permalink 文章永久网址\npage.prev 上一篇文章，如果此为第一篇文章则为 null\npage.next 下一篇文章，如果此为最后一篇文章则为 null\npage.raw 文章原始内容\npage.photos 文章的照片（用于相册）\npage.link 文章的外链（用于链接文章）\n</code></pre><p>Post(post)这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<pre><code>page.pulished 文章非草稿为true\npage.categories 文章分类\npage.tags 文章标签\n</code></pre><p><strong>首页(index)</strong></p>\n<pre><code>page.per_page 每一页显示的文章数\npage.total 文章数量\npage.current 当前页码\npage.current_url 当前页的URL\npage.posts 当前页的文章\npage.prev 前一页页码，如果为第一页，该值为0\npage.prev_link 前一页URL，如果为第一页，则为&apos;&apos;\npage.next 后一页页码，如果为最后一页，则为0\npage.next_link 后一页URL，如果为最后一页，则为&apos;&apos;\npage.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n</code></pre><p>归档页(archive)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>archive 为true\nyear 归档年份（4位）\nmonth 归档月份（不包含0）\n</code></pre><p>分类页(category)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>category 分类名称\n</code></pre><p>标签页(tag)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>tag 标签名称\n</code></pre><h1 id=\"5、帮助函数\"><a href=\"#5、帮助函数\" class=\"headerlink\" title=\"5、帮助函数\"></a>5、帮助函数</h1><p>帮助函数被用于在模版中快速插入内容。</p>\n<h2 id=\"（1）URL\"><a href=\"#（1）URL\" class=\"headerlink\" title=\"（1）URL\"></a>（1）URL</h2><pre><code>url_for 返回一个带root路径的url，用法： &lt;%- url_for(path) %&gt;\nrelative_url 返回from相对的to路径，用法： &lt;%- relative_url(from, to) %&gt;\n\ngravatar 插入Gravatar图片，用法： &lt;%- gravatar(email, [size])%&gt; ，例如：\n\n&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n</code></pre><h2 id=\"（2）HTML\"><a href=\"#（2）HTML\" class=\"headerlink\" title=\"（2）HTML\"></a>（2）HTML</h2><p>   1 css 载入CSS文件。用法： &lt;%- css(path, …)%&gt; ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：</p>\n<pre><code>&lt;%- css(&apos;style.css&apos;) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n\n\n&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>   2 js 载入 JavaScript 文件。用法： &lt;%- js(path, …) %&gt; ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。</p>\n<pre><code>&lt;%- js(&apos;script.js&apos;) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>   3 link_to 插入链接。用法： &lt;%- link_to(path, [text], [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>external 在新窗口中打开链接，默认值为false</li>\n<li>class Class名称，也就是html标签a的class名</li>\n<li><p>id ID名，也就是html标签a的id名</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;\n // &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;\n\n\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, {external: true, class: &quot;link&quot;}) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;\n</code></pre><p>   4 mail_to 插入电子邮件链接。用法： &lt;%- mail_to(path, [text], [options])%&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>subject 邮件主题</li>\n<li>cc 抄送（CC）</li>\n<li>bcc 密送（BCC）</li>\n<li><p>body 邮件内容</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;\n&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;\n</code></pre><p>   5 image_tag 插入图片。用法： &lt;%- image_tag(path, [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>alt 替代文字</li>\n<li>width 宽度</li>\n<li><p>height 高度</p>\n<p>基本上就是 img 标签里的属性值。</p>\n</li>\n</ul>\n<p>6 favicon_tag 插入favicon。用法：<br><figure class=\"highlight plain\"><figcaption><span>favicon_tag(path) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">7 feed_tag 插入feed链接。用法：</div><div class=\"line\">```&lt;%- feed_tag(path, [options]) %&gt; ```，参数有： title 和 type (默认值为atom)</div><div class=\"line\"></div><div class=\"line\">（3）条件函数</div><div class=\"line\">---</div><div class=\"line\">    is_current 判断 path 是否符合目前页面的网址。 &lt;%- is_current(path, [strict]) %&gt;</div><div class=\"line\">    is_home 判断目前是否为首页。</div><div class=\"line\">    is_post 检查目前是否为文章。 &lt;%- is_post() %&gt;</div><div class=\"line\">    is_archive 检查目前是否为存档页面。 &lt;%- is_archive() %&gt;</div><div class=\"line\">    is_year 检查目前是否为年度归档页面。 &lt;%- is_year() %&gt;</div><div class=\"line\">    is_month 检查目前是否为月度归档页面。 &lt;%- is_month() %&gt;</div><div class=\"line\">    is_category 检查目前是否为分类归档页面。 &lt;%- is_category() %&gt;</div><div class=\"line\">    is_tag 检查目前是否为标签归档页面。 &lt;%- is_tag() %&gt;</div><div class=\"line\"></div><div class=\"line\">（4）字符串处理</div><div class=\"line\">---</div><div class=\"line\">   - trim 清除字符串开头和结尾的空格。 ```&lt;%- trim(string) %&gt;`</div><div class=\"line\"></div><div class=\"line\">   - strip_html 清除字符串中的 HTML 标签。``` &lt;%- strip_html(string) %&gt; ```，示例：</div></pre></td></tr></table></figure></p>\n<pre><code>&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;\n// It&apos;s not important anymore!\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- titlecase 把字符串转换为正确的 Title case。 ```&lt;%- titlecase(string) %&gt; ```示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;\n# This is an Apple\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- markdown 使用 Markdown 解析字符串。 &lt;%- markdown(str) %&gt; 示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;\n// make me &lt;strong&gt;strong&lt;/strong&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- render 解析字符串。``` &lt;%- render(str, engine, [options]) %&gt;</div></pre></td></tr></table></figure>\n<pre><code>word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 <figure class=\"highlight plain\"><figcaption><span>word_wrap(str, [length]) %> ```，示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;</div><div class=\"line\">    // Once upon\\n a time</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>truncate 移除超过 length 长度的字符串。 <figure class=\"highlight plain\"><figcaption><span>truncate(text, length) %> ```示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, 16) %&gt;</div><div class=\"line\"></div><div class=\"line\">    // Once upon a time</div></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"（5）模板\"><a href=\"#（5）模板\" class=\"headerlink\" title=\"（5）模板\"></a>（5）模板</h2><ul>\n<li><p>partial 载入其他模板文件，您可在 locals 设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt;</p>\n<p>参数 | 描述 | 默认值 — | — | — cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false</p>\n</li>\n<li><p>fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); 示例：</p>\n<p>&lt;%- fragment_cache(‘header’, function(){</p>\n<pre><code>return &apos;&lt;header&gt;&lt;/header&gt;&apos;;\n</code></pre><p>}) %&gt;</p>\n</li>\n</ul>\n<h2 id=\"（6）日期与时间\"><a href=\"#（6）日期与时间\" class=\"headerlink\" title=\"（6）日期与时间\"></a>（6）日期与时间</h2><ul>\n<li>date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 &lt;%- date(date, [format]) %&gt; 示例：</li>\n</ul>\n<pre><code>&lt;%- date(Date.now()) %&gt;\n// Jan 1, 2013\n&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;\n// 2013/1/1\n</code></pre><ul>\n<li><p>date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 &lt;%- date_xml(date) %&gt; ，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- date_xml(Date.now()) %&gt;</div><div class=\"line\">// 2013-01-01T00:00:00.000Z</div></pre></td></tr></table></figure>\n</li>\n<li><p>time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <figure class=\"highlight plain\"><figcaption><span>time(date, [format]) %>``` 示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- time(Date.now()) %&gt;</div><div class=\"line\">    // 13:05:12</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // 1:05:12 pm</div><div class=\"line\"></div><div class=\"line\">   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 &lt;%- full_date(date, [format]) %&gt; 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- full_date(new Date()) %&gt;</div><div class=\"line\">    // Jan 1, 2013 0:00:00</div><div class=\"line\">    &lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // Tuesday, January 1st 2013, 12:00:00 am</div><div class=\"line\"></div><div class=\"line\">（7）列表</div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">   - list_categories 插入分类列表。 &lt;%- list_categories([categories], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">   - list_tags 插入标签列表。 &lt;%- list_tags([tags], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0</div><div class=\"line\"></div><div class=\"line\">   - list_archives 插入归档列表。 ```&lt;%- list_archives([options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |</p>\n</li>\n<li><p>list_posts 插入文章列表。 <figure class=\"highlight plain\"><figcaption><span>list_posts([options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">- tagcloud 插入标签云。 ```&lt;%- tagcloud([tags], [options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |</p>\n</li>\n</ul>\n<h2 id=\"（8）其他\"><a href=\"#（8）其他\" class=\"headerlink\" title=\"（8）其他\"></a>（8）其他</h2><ul>\n<li><p>paginator 插入分页链接。 <figure class=\"highlight plain\"><figcaption><span>paginator(options) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &amp;hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false</div><div class=\"line\"></div><div class=\"line\">- search_form 插入 Google 搜索框。 ```&lt;%- search_form(options) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false</p>\n</li>\n<li><p>number_format 格式化数字。 <figure class=\"highlight plain\"><figcaption><span>number_format(number, [options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .</div><div class=\"line\"> 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</div><div class=\"line\"> // 12,345.68</div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</div><div class=\"line\"> // 12,345.6700</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</div><div class=\"line\"> // 12,345</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;</div><div class=\"line\"> // 12345.67</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;</div><div class=\"line\"> // 12,345/67</div><div class=\"line\"></div><div class=\"line\">- open_graph 插入 open graph 资源。 &lt;%- open_graph([options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |</div><div class=\"line\"></div><div class=\"line\">- toc 解析内容中的标题标签 (h1~h6) 并插入目录。 &lt;%- toc(str, [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true</div><div class=\"line\"></div><div class=\"line\"> 下面示例就是解析文章内容，并生成目录列表：</div></pre></td></tr></table></figure></p>\n<p>&lt;%- toc(page.content) %&gt;```</p>\n</li>\n</ul>\n<h1 id=\"6、本地化\"><a href=\"#6、本地化\" class=\"headerlink\" title=\"6、本地化\"></a>6、本地化</h1><p>所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。</p>\n<p>例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：<code>&lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&#39;comment&#39;) %&gt;&lt;/h1&gt;</code>，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。</p>\n<p>这一块知道这些就基本上满足了自定义主题的需求了。</p>\n<h1 id=\"7、插件\"><a href=\"#7、插件\" class=\"headerlink\" title=\"7、插件\"></a>7、插件</h1><p>这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：</p>\n<pre><code>Generator\nRenderer\nHelper\nDeployer\nProcessor\nTag\nConsole\nMigrator\nFilter\n</code></pre><p>注意</p>\n<p>1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；</p>\n<p>2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。</p>"},{"title":"hexo附件插入音乐、分享、评论、标签页、搜索","date":"2016-09-16T17:01:48.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","source":"_posts/Hexo-insert-music-share-comment-tab-search.md","raw":"---\ntitle: hexo附件插入音乐、分享、评论、标签页、搜索\ndate: 2016-09-17 01:01:48\ntags: hexo \ncategories: git\n\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","slug":"Hexo-insert-music-share-comment-tab-search","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zvk000jvvxi8idimxfg","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<p>hexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页<br><a id=\"more\"></a></p>\n<h2 id=\"博客中插入图片\"><a href=\"#博客中插入图片\" class=\"headerlink\" title=\"博客中插入图片\"></a>博客中插入图片</h2><p>基本分为两种办法</p>\n<ol>\n<li>放在本地文件<br>首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行<code>$ npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>\n</ol>\n<p>之后再使用 hexo new ‘new’ 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候<br><code>![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)</code></p>\n<ol>\n<li>放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</li>\n<li>也可以放在服务器上，在图片链接输入绝对路径就可以</li>\n<li>我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径</li>\n</ol>\n<h2 id=\"插入音乐\"><a href=\"#插入音乐\" class=\"headerlink\" title=\"插入音乐\"></a>插入音乐</h2><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\"></div><div class=\"line\">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</div></pre></td></tr></table></figure>\n<h2 id=\"集成多说评论，分享\"><a href=\"#集成多说评论，分享\" class=\"headerlink\" title=\"集成多说评论，分享\"></a>集成多说评论，分享</h2><p>申请多说帐号,打开页面点击我要安装注册帐号</p>\n<p>在themes/next目录下打开 _config.yml，设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname:  nanshanyi //上面多说域名中填的内容</div><div class=\"line\">需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信</div></pre></td></tr></table></figure>\n<p>然后打开themes\\landscape\\layout_partial\\article.ejs文件<br>把以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</div><div class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</div><div class=\"line\">  &lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 start --&gt;</div><div class=\"line\">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 end --&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;;</div><div class=\"line\">      (function() &#123;</div><div class=\"line\">        var ds = document.createElement(&apos;script&apos;);</div><div class=\"line\">        ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class=\"line\">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</div><div class=\"line\">        ds.charset = &apos;UTF-8&apos;;</div><div class=\"line\">        (document.getElementsByTagName(&apos;head&apos;)[0]</div><div class=\"line\">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class=\"line\">      &#125;)();</div><div class=\"line\">      &lt;/script&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 end --&gt;</div><div class=\"line\">  &lt;/section&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后你hexo s ,打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 打开文章看一下，评论和分享已经静静的躺在那了</p>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><p>创建标签页或者创建分类页面方法具体请查看官方文档：<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">hexo-主题引用</a></p>\n<p>概括一下分为三步：</p>\n<ol>\n<li>新建页面</li>\n<li>在菜单中将其显示</li>\n<li>给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白<br><strong>分类页面同理</strong></li>\n</ol>\n<p>在username.github.io文件目录下执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹</div></pre></td></tr></table></figure></p>\n<p>修改username.github.io/themes/next/_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: /      //主页</div><div class=\"line\">  #categories: /categories //分类</div><div class=\"line\">  archives: /archives   //归档</div><div class=\"line\">  tags: /tags   //标签（添加此行即可）</div><div class=\"line\">  about: /about   //关于</div><div class=\"line\">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>\n<p>首页菜单就会有便签项，点击即可进入标签页。</p>\n<h2 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h2><p>next支持Swiftype 、微搜索和Local Search</p>\n<ol>\n<li>Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址<br>然后选择</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"Swiftype注册页面\"></p>\n<p>选择 install Search</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<p>途中的即为swiftype_key<br>修改nanshanyi.github.io/themes/next/_config.yml中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swiftype_key:上面红圈中的内容</div></pre></td></tr></table></figure></p>\n<p>点击 resume Configuration 选择 search field edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"swiftype\"></p>\n<p>save<br>发布即可看到效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<ol>\n<li>添加本地搜索<br>安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在nanshanyi.github.io/themes/next/_config.yml添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\">      path: search.xml</div><div class=\"line\">      field: post</div></pre></td></tr></table></figure></p>\n<p>发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。</p>\n<p>文／_南山忆（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/a52b68794a6b\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/a52b68794a6b</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<p>hexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页<br>","more":"</p>\n<h2 id=\"博客中插入图片\"><a href=\"#博客中插入图片\" class=\"headerlink\" title=\"博客中插入图片\"></a>博客中插入图片</h2><p>基本分为两种办法</p>\n<ol>\n<li>放在本地文件<br>首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行<code>$ npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>\n</ol>\n<p>之后再使用 hexo new ‘new’ 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候<br><code>![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)</code></p>\n<ol>\n<li>放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</li>\n<li>也可以放在服务器上，在图片链接输入绝对路径就可以</li>\n<li>我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径</li>\n</ol>\n<h2 id=\"插入音乐\"><a href=\"#插入音乐\" class=\"headerlink\" title=\"插入音乐\"></a>插入音乐</h2><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\"></div><div class=\"line\">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</div></pre></td></tr></table></figure>\n<h2 id=\"集成多说评论，分享\"><a href=\"#集成多说评论，分享\" class=\"headerlink\" title=\"集成多说评论，分享\"></a>集成多说评论，分享</h2><p>申请多说帐号,打开页面点击我要安装注册帐号</p>\n<p>在themes/next目录下打开 _config.yml，设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname:  nanshanyi //上面多说域名中填的内容</div><div class=\"line\">需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信</div></pre></td></tr></table></figure>\n<p>然后打开themes\\landscape\\layout_partial\\article.ejs文件<br>把以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</div><div class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</div><div class=\"line\">  &lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 start --&gt;</div><div class=\"line\">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 end --&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;;</div><div class=\"line\">      (function() &#123;</div><div class=\"line\">        var ds = document.createElement(&apos;script&apos;);</div><div class=\"line\">        ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class=\"line\">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</div><div class=\"line\">        ds.charset = &apos;UTF-8&apos;;</div><div class=\"line\">        (document.getElementsByTagName(&apos;head&apos;)[0]</div><div class=\"line\">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class=\"line\">      &#125;)();</div><div class=\"line\">      &lt;/script&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 end --&gt;</div><div class=\"line\">  &lt;/section&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后你hexo s ,打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 打开文章看一下，评论和分享已经静静的躺在那了</p>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><p>创建标签页或者创建分类页面方法具体请查看官方文档：<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">hexo-主题引用</a></p>\n<p>概括一下分为三步：</p>\n<ol>\n<li>新建页面</li>\n<li>在菜单中将其显示</li>\n<li>给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白<br><strong>分类页面同理</strong></li>\n</ol>\n<p>在username.github.io文件目录下执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹</div></pre></td></tr></table></figure></p>\n<p>修改username.github.io/themes/next/_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: /      //主页</div><div class=\"line\">  #categories: /categories //分类</div><div class=\"line\">  archives: /archives   //归档</div><div class=\"line\">  tags: /tags   //标签（添加此行即可）</div><div class=\"line\">  about: /about   //关于</div><div class=\"line\">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>\n<p>首页菜单就会有便签项，点击即可进入标签页。</p>\n<h2 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h2><p>next支持Swiftype 、微搜索和Local Search</p>\n<ol>\n<li>Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址<br>然后选择</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"Swiftype注册页面\"></p>\n<p>选择 install Search</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<p>途中的即为swiftype_key<br>修改nanshanyi.github.io/themes/next/_config.yml中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swiftype_key:上面红圈中的内容</div></pre></td></tr></table></figure></p>\n<p>点击 resume Configuration 选择 search field edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"swiftype\"></p>\n<p>save<br>发布即可看到效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<ol>\n<li>添加本地搜索<br>安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在nanshanyi.github.io/themes/next/_config.yml添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\">      path: search.xml</div><div class=\"line\">      field: post</div></pre></td></tr></table></figure></p>\n<p>发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。</p>\n<p>文／_南山忆（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/a52b68794a6b\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/a52b68794a6b</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>"},{"title":"hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能","date":"2017-04-09T14:32:30.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n> 2017.5.8更新，具体过程往下看**仿知乎动态背景**\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 仿知乎动态背景\n------------------------\n> 2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新\n，完整步骤如下\n\n1：首先在主题文件的layout中的_layout.swig`C:\\Hexo\\themes\\next\\layout\\_layout.swig`中加入\n```\n  <div class=\"bg_content\">\n       <canvas id=\"canvas\"></canvas>\n  </div>\n 'use strict';\n\n    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Circle = function () {\n       function Circle(x, y) {\n            _classCallCheck(this, Circle);\n\n            this.x = x;\n            this.y = y;\n            this.r = Math.random() * 10;\n            this._mx = Math.random();\n            this._my = Math.random();\n        }\n\n       _createClass(Circle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n                //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n                ctx.fill();\n            }\n        }, {\n            key: 'drawLine',\n            value: function drawLine(ctx, _circle) {\n                var dx = this.x - _circle.x;\n                var dy = this.y - _circle.y;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                if (d < 150) {\n                    ctx.beginPath();\n\n                    ctx.moveTo(this.x, this.y); //起始点\n                    ctx.lineTo(_circle.x, _circle.y); //终点\n                    ctx.closePath();\n                    ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n                    ctx.stroke();\n                }\n            }\n\n\n        }, {\n            key: 'move',\n            value: function move(w, h) {\n                this._mx = this.x < w && this.x > 0 ? this._mx : -this._mx;\n                this._my = this.y < h && this.y > 0 ? this._my : -this._my;\n                this.x += this._mx / 2;\n                this.y += this._my / 2;\n            }\n        }]);\n\n        return Circle;\n    }();\n\n\n\n    var currentCirle = function (_Circle) {\n        _inherits(currentCirle, _Circle);\n\n        function currentCirle(x, y) {\n            _classCallCheck(this, currentCirle);\n\n            return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));\n        }\n\n        _createClass(currentCirle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n\n                //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n                this.r = 8;\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n                ctx.fillStyle = 'rgba(255, 77, 54, 0.6)';\n                ctx.fill();\n            }\n        }]);\n\n        return currentCirle;\n    }(Circle);\n\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var w = canvas.width = canvas.offsetWidth;\n    var h = canvas.height = canvas.offsetHeight;\n    var circles = [];\n    var current_circle = new currentCirle(0, 0);\n\n    var draw = function draw() {\n        ctx.clearRect(0, 0, w, h);\n        for (var i = 0; i < circles.length; i++) {\n            circles[i].move(w, h);\n            circles[i].drawCircle(ctx);\n            for (j = i + 1; j < circles.length; j++) {\n                circles[i].drawLine(ctx, circles[j]);\n            }\n        }\n        if (current_circle.x) {\n            current_circle.drawCircle(ctx);\n            for (var k = 1; k < circles.length; k++) {\n                current_circle.drawLine(ctx, circles[k]);\n            }\n        }\n        requestAnimationFrame(draw);\n    };\n\n    var init = function init(num) {\n        for (var i = 0; i < num; i++) {\n            circles.push(new Circle(Math.random() * w, Math.random() * h));\n        }\n        draw();\n    };\n    window.addEventListener('load', init(60));\n    window.onmousemove = function (e) {\n        e = e || window.event;\n        current_circle.x = e.clientX;\n        current_circle.y = e.clientY;\n    };\n    window.onmouseout = function () {\n        current_circle.x = null;\n        current_circle.y = null;\n    };\n```\n2：在主题文件的`C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl`文件中加上css代码\n```\n/*设置背景*/\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","source":"_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","raw":"---\ntitle: hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能\ndate: 2017-04-09 22:32:30\ntags: [git,hexo教程] \ncategories: git\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n> 2017.5.8更新，具体过程往下看**仿知乎动态背景**\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 仿知乎动态背景\n------------------------\n> 2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新\n，完整步骤如下\n\n1：首先在主题文件的layout中的_layout.swig`C:\\Hexo\\themes\\next\\layout\\_layout.swig`中加入\n```\n  <div class=\"bg_content\">\n       <canvas id=\"canvas\"></canvas>\n  </div>\n 'use strict';\n\n    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Circle = function () {\n       function Circle(x, y) {\n            _classCallCheck(this, Circle);\n\n            this.x = x;\n            this.y = y;\n            this.r = Math.random() * 10;\n            this._mx = Math.random();\n            this._my = Math.random();\n        }\n\n       _createClass(Circle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n                //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n                ctx.fill();\n            }\n        }, {\n            key: 'drawLine',\n            value: function drawLine(ctx, _circle) {\n                var dx = this.x - _circle.x;\n                var dy = this.y - _circle.y;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                if (d < 150) {\n                    ctx.beginPath();\n\n                    ctx.moveTo(this.x, this.y); //起始点\n                    ctx.lineTo(_circle.x, _circle.y); //终点\n                    ctx.closePath();\n                    ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n                    ctx.stroke();\n                }\n            }\n\n\n        }, {\n            key: 'move',\n            value: function move(w, h) {\n                this._mx = this.x < w && this.x > 0 ? this._mx : -this._mx;\n                this._my = this.y < h && this.y > 0 ? this._my : -this._my;\n                this.x += this._mx / 2;\n                this.y += this._my / 2;\n            }\n        }]);\n\n        return Circle;\n    }();\n\n\n\n    var currentCirle = function (_Circle) {\n        _inherits(currentCirle, _Circle);\n\n        function currentCirle(x, y) {\n            _classCallCheck(this, currentCirle);\n\n            return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));\n        }\n\n        _createClass(currentCirle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n\n                //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n                this.r = 8;\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n                ctx.fillStyle = 'rgba(255, 77, 54, 0.6)';\n                ctx.fill();\n            }\n        }]);\n\n        return currentCirle;\n    }(Circle);\n\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var w = canvas.width = canvas.offsetWidth;\n    var h = canvas.height = canvas.offsetHeight;\n    var circles = [];\n    var current_circle = new currentCirle(0, 0);\n\n    var draw = function draw() {\n        ctx.clearRect(0, 0, w, h);\n        for (var i = 0; i < circles.length; i++) {\n            circles[i].move(w, h);\n            circles[i].drawCircle(ctx);\n            for (j = i + 1; j < circles.length; j++) {\n                circles[i].drawLine(ctx, circles[j]);\n            }\n        }\n        if (current_circle.x) {\n            current_circle.drawCircle(ctx);\n            for (var k = 1; k < circles.length; k++) {\n                current_circle.drawLine(ctx, circles[k]);\n            }\n        }\n        requestAnimationFrame(draw);\n    };\n\n    var init = function init(num) {\n        for (var i = 0; i < num; i++) {\n            circles.push(new Circle(Math.random() * w, Math.random() * h));\n        }\n        draw();\n    };\n    window.addEventListener('load', init(60));\n    window.onmousemove = function (e) {\n        e = e || window.event;\n        current_circle.x = e.clientX;\n        current_circle.y = e.clientY;\n    };\n    window.onmouseout = function () {\n        current_circle.x = null;\n        current_circle.y = null;\n    };\n```\n2：在主题文件的`C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl`文件中加上css代码\n```\n/*设置背景*/\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","slug":"Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zvt000nvvxi2sbv2hjk","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：<a href=\"http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/\">了解githubPages+hexo搭建博客的原理</a> 或者<a href=\"http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\">利用Gitpage+hexo开发自己的博客</a>，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容</p>\n<ul>\n<li>域名绑定，将github博客和你的独有域名绑定</li>\n<li>添加更多的menu内容</li>\n<li>添加头像</li>\n<li>定义网站个性logo</li>\n<li>自定义样式，重写默认样式，个性化定制你的博客</li>\n<li>炫酷动态背景制作</li>\n<li>添加网易云音乐</li>\n<li>添加网易云跟帖</li>\n<li>添加leancloud阅读次数统计功能</li>\n<li>添加wordcount页面字数统计</li>\n<li>添加fork me on github功能</li>\n</ul>\n<p>要想最快的知道这些功能的效果，请移步我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ<br><a id=\"more\"></a><br>首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／</p>\n<blockquote>\n<p>hexo  v3.2.2<br>next  v5.1.0<br>node v4.5.0</p>\n</blockquote>\n<p>在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">next官网</a><img src=\"http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p>\n</blockquote>\n<p> 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~<br> 默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>我们最先修改的应该是在hexo根目录下的配置文件<code>_config.yml</code>文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~<br> 其次就是我们的主题配置文件<br> 在对应的主题下的<code>_config.yml</code> 因为我使用的是next主题，所以目录的路径为<code>C:\\Hexo\\themes\\next\\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)<br> 然后我们需要修改样式的话是需要设置css和甚至是修改模板，<br> 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── .github            #git信息</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-Hans.yml      #简体中文</div><div class=\"line\">|   └── zh-tw.yml      #繁体中文</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── _header.swig    #头部样式</div><div class=\"line\">|   |   ├── _sidebar.swig   #侧边栏样式</div><div class=\"line\">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── post.swig    #文章模板</div><div class=\"line\">|   |   ├── reward.swig    #打赏模板</div><div class=\"line\">|   |   ├── sidebar.swig   #侧边栏模板</div><div class=\"line\">|   ├── _partial       #局部的布局</div><div class=\"line\">|   |   ├── head       #头部模板</div><div class=\"line\">|   |   ├── search     #搜索模板</div><div class=\"line\">|   |   ├── share      #分享模板</div><div class=\"line\">|   ├── _script        #局部的布局</div><div class=\"line\">|   ├── _third-party   #第三方模板</div><div class=\"line\">|   ├── _layout.swig   #主页面模板</div><div class=\"line\">|   ├── index.swig     #主页面模板</div><div class=\"line\">|   ├── page           #页面模板</div><div class=\"line\">|   └── tag.swig       #tag模板</div><div class=\"line\">├── scripts            #script源码</div><div class=\"line\">|   ├── tags           #tags的script源码</div><div class=\"line\">|   ├── marge.js       #页面模板</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _common    #*.styl基础css</div><div class=\"line\">|   |   ├── _custom    #*.styl局部css</div><div class=\"line\">|   |   └── _mixins    #mixins的css</div><div class=\"line\">|   ├── fonts          #字体</div><div class=\"line\">|   ├── images         #图片</div><div class=\"line\">|   ├── uploads        #添加的文件</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>绑定域名的思路如下：</p>\n<ul>\n<li>在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）</li>\n<li>解析DNS</li>\n<li>在hexo中添加CNAME文件</li>\n</ul>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。<br>我选择的是<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"external\">万网</a>，阿里下面的。我选择了一个<code>.site</code>的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~<br>按照官网的步骤一步一来就可以了~</p>\n<h2 id=\"解析DNS\"><a href=\"#解析DNS\" class=\"headerlink\" title=\"解析DNS\"></a>解析DNS</h2><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src=\"http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  点击添加解析，记录类型选A或CNAME，</p>\n<blockquote>\n<p>A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，<br>解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。</p>\n</blockquote>\n<h2 id=\"在hexo中添加CNAME文件\"><a href=\"#在hexo中添加CNAME文件\" class=\"headerlink\" title=\"在hexo中添加CNAME文件\"></a>在hexo中添加CNAME文件</h2><p>接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的<code>cherryblog.site</code><br><img src=\"http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后你就可以<code>hexo clean</code>,<code>hexo g</code>，<code>hexo d</code> 发布你的博客看看效果啦~<br><img src=\"http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =</strong> </p>\n<h1 id=\"添加菜单页\"><a href=\"#添加菜单页\" class=\"headerlink\" title=\"添加菜单页\"></a>添加菜单页</h1><p>添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令<code>hexo new page &quot;photo&quot;</code> 就直接创建了<code>C:\\Hexo\\source\\photo\\index.md</code>文件，然后编辑index.md 文件就可以了~<br><img src=\"http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>第二种：手动创建上面的文件= =</p>\n<ul>\n<li>在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下</li>\n<li>在hexo的source文件下添加对应的文件夹</li>\n<li>在主题的配置文件添加menu_icon字段设置对应的icon</li>\n<li>修改language文件下zh-hans语言包</li>\n<li>在发表文章的时候添加对应的menu字段就可以看到</li>\n</ul>\n<p>刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建<strong>首先我们要分清什么是页面，什么是文章，</strong><br><strong>在hexo中menu下的内容都是新的页面</strong>我们可以通过<code>hexo new page &quot;pagename&quot;</code> 创建，hexo默认的页面只有<code>home</code>,<code>archives</code>,<code>tags</code> 三个，之后我们写的博文就是文章，通过<code>hexo new &quot;name&quot;</code> 创建的<code>name.md</code> 文件在根目录的<code>source\\_posts</code> 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 </p>\n<h2 id=\"在配置文件中添加menu索引路径\"><a href=\"#在配置文件中添加menu索引路径\" class=\"headerlink\" title=\"在配置文件中添加menu索引路径\"></a>在配置文件中添加menu索引路径</h2><p>我们可以在主题配置的_config文件下找到相应的字段，字段前加<code>#</code> 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu<code>life</code> 和<code>photo</code><br><img src=\"http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是<code>hexo/source</code> 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了<br><img src=\"http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">,<br>没有明白什么意思的同学看下图</p>\n<h2 id=\"在source文件添加menu文件夹\"><a href=\"#在source文件添加menu文件夹\" class=\"headerlink\" title=\"在source文件添加menu文件夹\"></a>在source文件添加menu文件夹</h2><p>我们需要在这个路径下自己建立对应的页面，比如说我新建了menu<code>life</code> 和<code>photos</code>，然后再source文件夹下面新建两个名字为<code>life</code> 和<code>photo</code> 的文件夹，里面添加一个<code>index.md</code> markdown文件，内容是类似这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: photo</div><div class=\"line\">date: 2017-04-04 22:14:07</div><div class=\"line\">type: &quot;photo&quot;</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">啦啦啦~</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下</p>\n<h2 id=\"给menu添加icon\"><a href=\"#给menu添加icon\" class=\"headerlink\" title=\"给menu添加icon\"></a>给menu添加icon</h2><p>如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：<img src=\"http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了<code>FontAwsome</code> 所以我们只需要在主题的配置文件中加入相应的icon名字即可<br><img src=\"http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h2><p> 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"external\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~<br> <img src=\"http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h2 id=\"在language添加zh-hans翻译字段\"><a href=\"#在language添加zh-hans翻译字段\" class=\"headerlink\" title=\"在language添加zh-hans翻译字段\"></a>在language添加zh-hans翻译字段</h2><p>上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~<br> <img src=\"http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在发表文章的时候添加对应的menu字段\"><a href=\"#在发表文章的时候添加对应的menu字段\" class=\"headerlink\" title=\"在发表文章的时候添加对应的menu字段\"></a>在发表文章的时候添加对应的menu字段</h2><p>在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Git使用中的报错情况</div><div class=\"line\">date: 2017-03-11 23:54:11</div><div class=\"line\">tags: [git,实战经验] </div><div class=\"line\">categories: git</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了<br><img src=\"http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h1><p>我使用的主题头像是位于侧边栏，显示的效果如下，<br><img src=\"http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Sidebar Avatar</div><div class=\"line\"># in theme directory(source/images): /images/avatar.jpg</div><div class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class=\"line\">avatar: /uploads/avatar.png</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"设置网站logo\"><a href=\"#设置网站logo\" class=\"headerlink\" title=\"设置网站logo\"></a>设置网站logo</h1><p>跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在<a href=\"http://tool.lu/favicon/\" target=\"_blank\" rel=\"external\">Favicon在线制作</a>工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：<code>favicon: images/favicon.ico</code></p>\n<h1 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h1><p>不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~<br><img src=\"http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"炫酷动态背景\"><a href=\"#炫酷动态背景\" class=\"headerlink\" title=\"炫酷动态背景\"></a>炫酷动态背景</h1><blockquote>\n<p>2017.5.8更新，具体过程往下看<strong>仿知乎动态背景</strong><br>之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。<br>添加修改代码<code>next/layout/_layout.swig</code>在<code>&lt;/body&gt;</code>之前加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.canvas_nest %&#125;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>打开<code>next/_config.yml</code>，添加以下代码就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Canvas-nest</div><div class=\"line\">canvas_nest: true</div></pre></td></tr></table></figure></p>\n<p>这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~<br><img src=\"http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>所以我们需要在layout下面的<code>_layout.swig</code> 添加一个canvas</p>\n<p>然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：<br><a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvas-nest</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">class Circle &#123;</div><div class=\"line\">    //创建对象</div><div class=\"line\">    //以一个圆为对象</div><div class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</div><div class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</div><div class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.random() * 10 ;</div><div class=\"line\">        this._mx = Math.random() ;</div><div class=\"line\">        this._my = Math.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //canvas 画圆和画直线</div><div class=\"line\">    //画圆就是正常的用canvas画一个圆</div><div class=\"line\">    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360)</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawLine(ctx, _circle) &#123;</div><div class=\"line\">        let dx = this.x - _circle.x;</div><div class=\"line\">        let dy = this.y - _circle.y;</div><div class=\"line\">        let d = Math.sqrt(dx * dx + dy * dy)</div><div class=\"line\">        if (d &lt; 150) &#123;</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</div><div class=\"line\">            ctx.moveTo(this.x, this.y);   //起始点</div><div class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   //终点</div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">            ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 圆圈移动</div><div class=\"line\">    // 圆圈移动的距离必须在屏幕范围内</div><div class=\"line\">    move(w, h) &#123;</div><div class=\"line\">        this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);</div><div class=\"line\">        this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);</div><div class=\"line\">        this.x += this._mx / 2;</div><div class=\"line\">        this.y += this._my / 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//鼠标点画圆闪烁变动</div><div class=\"line\">class currentCirle extends Circle &#123;</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        super(x, y)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //注释内容为鼠标焦点的地方圆圈半径变化</div><div class=\"line\">        //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</div><div class=\"line\">        this.r = 8;</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//更新页面用requestAnimationFrame替代setTimeout</div><div class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\">let canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">let w = canvas.width = canvas.offsetWidth;</div><div class=\"line\">let h = canvas.height = canvas.offsetHeight;</div><div class=\"line\">let circles = [];</div><div class=\"line\">let current_circle = new currentCirle(0, 0)</div><div class=\"line\"></div><div class=\"line\">let draw = function () &#123;</div><div class=\"line\">    ctx.clearRect(0, 0, w, h);</div><div class=\"line\">    for (let i = 0; i &lt; circles.length; i++) &#123;</div><div class=\"line\">        circles[i].move(w, h);</div><div class=\"line\">        circles[i].drawCircle(ctx);</div><div class=\"line\">        for (j = i + 1; j &lt; circles.length; j++) &#123;</div><div class=\"line\">            circles[i].drawLine(ctx, circles[j])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (current_circle.x) &#123;</div><div class=\"line\">        current_circle.drawCircle(ctx);</div><div class=\"line\">        for (var k = 1; k &lt; circles.length; k++) &#123;</div><div class=\"line\">            current_circle.drawLine(ctx, circles[k])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    requestAnimationFrame(draw)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let init = function (num) &#123;</div><div class=\"line\">    for (var i = 0; i &lt; num; i++) &#123;</div><div class=\"line\">        circles.push(new Circle(Math.random() * w, Math.random() * h));</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw();</div><div class=\"line\">&#125;</div><div class=\"line\">window.addEventListener(&apos;load&apos;, init(60));</div><div class=\"line\">window.onmousemove = function (e) &#123;</div><div class=\"line\">    e = e || window.event;</div><div class=\"line\">    current_circle.x = e.clientX;</div><div class=\"line\">    current_circle.y = e.clientY;</div><div class=\"line\">&#125;</div><div class=\"line\">window.onmouseout = function () &#123;</div><div class=\"line\">    current_circle.x = null;</div><div class=\"line\">    current_circle.y = null;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"仿知乎动态背景\"><a href=\"#仿知乎动态背景\" class=\"headerlink\" title=\"仿知乎动态背景\"></a>仿知乎动态背景</h1><hr>\n<blockquote>\n<p>2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新<br>，完整步骤如下</p>\n</blockquote>\n<p>1：首先在主题文件的layout中的_layout.swig<code>C:\\Hexo\\themes\\next\\layout\\_layout.swig</code>中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;div class=&quot;bg_content&quot;&gt;</div><div class=\"line\">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\"> &lt;/div&gt;</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">   var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();</div><div class=\"line\"></div><div class=\"line\">   function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;); &#125; return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self; &#125;</div><div class=\"line\"></div><div class=\"line\">   function _inherits(subClass, superClass) &#123; if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123; throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass); &#125; subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</div><div class=\"line\"></div><div class=\"line\">   function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;</div><div class=\"line\"></div><div class=\"line\">   var Circle = function () &#123;</div><div class=\"line\">      function Circle(x, y) &#123;</div><div class=\"line\">           _classCallCheck(this, Circle);</div><div class=\"line\"></div><div class=\"line\">           this.x = x;</div><div class=\"line\">           this.y = y;</div><div class=\"line\">           this.r = Math.random() * 10;</div><div class=\"line\">           this._mx = Math.random();</div><div class=\"line\">           this._my = Math.random();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">      _createClass(Circle, [&#123;</div><div class=\"line\">           key: &apos;drawCircle&apos;,</div><div class=\"line\">           value: function drawCircle(ctx) &#123;</div><div class=\"line\">               ctx.beginPath();</div><div class=\"line\">               //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">               ctx.closePath();</div><div class=\"line\">               ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">               ctx.fill();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;, &#123;</div><div class=\"line\">           key: &apos;drawLine&apos;,</div><div class=\"line\">           value: function drawLine(ctx, _circle) &#123;</div><div class=\"line\">               var dx = this.x - _circle.x;</div><div class=\"line\">               var dy = this.y - _circle.y;</div><div class=\"line\">               var d = Math.sqrt(dx * dx + dy * dy);</div><div class=\"line\">               if (d &lt; 150) &#123;</div><div class=\"line\">                   ctx.beginPath();</div><div class=\"line\"></div><div class=\"line\">                   ctx.moveTo(this.x, this.y); //起始点</div><div class=\"line\">                   ctx.lineTo(_circle.x, _circle.y); //终点</div><div class=\"line\">                   ctx.closePath();</div><div class=\"line\">                   ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">                   ctx.stroke();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       &#125;, &#123;</div><div class=\"line\">           key: &apos;move&apos;,</div><div class=\"line\">           value: function move(w, h) &#123;</div><div class=\"line\">               this._mx = this.x &lt; w &amp;&amp; this.x &gt; 0 ? this._mx : -this._mx;</div><div class=\"line\">               this._my = this.y &lt; h &amp;&amp; this.y &gt; 0 ? this._my : -this._my;</div><div class=\"line\">               this.x += this._mx / 2;</div><div class=\"line\">               this.y += this._my / 2;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;]);</div><div class=\"line\"></div><div class=\"line\">       return Circle;</div><div class=\"line\">   &#125;();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   var currentCirle = function (_Circle) &#123;</div><div class=\"line\">       _inherits(currentCirle, _Circle);</div><div class=\"line\"></div><div class=\"line\">       function currentCirle(x, y) &#123;</div><div class=\"line\">           _classCallCheck(this, currentCirle);</div><div class=\"line\"></div><div class=\"line\">           return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       _createClass(currentCirle, [&#123;</div><div class=\"line\">           key: &apos;drawCircle&apos;,</div><div class=\"line\">           value: function drawCircle(ctx) &#123;</div><div class=\"line\">               ctx.beginPath();</div><div class=\"line\"></div><div class=\"line\">               //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</div><div class=\"line\">               this.r = 8;</div><div class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">               ctx.closePath();</div><div class=\"line\">               //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</div><div class=\"line\">               ctx.fillStyle = &apos;rgba(255, 77, 54, 0.6)&apos;;</div><div class=\"line\">               ctx.fill();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;]);</div><div class=\"line\"></div><div class=\"line\">       return currentCirle;</div><div class=\"line\">   &#125;(Circle);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\">   var canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">   var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">   var w = canvas.width = canvas.offsetWidth;</div><div class=\"line\">   var h = canvas.height = canvas.offsetHeight;</div><div class=\"line\">   var circles = [];</div><div class=\"line\">   var current_circle = new currentCirle(0, 0);</div><div class=\"line\"></div><div class=\"line\">   var draw = function draw() &#123;</div><div class=\"line\">       ctx.clearRect(0, 0, w, h);</div><div class=\"line\">       for (var i = 0; i &lt; circles.length; i++) &#123;</div><div class=\"line\">           circles[i].move(w, h);</div><div class=\"line\">           circles[i].drawCircle(ctx);</div><div class=\"line\">           for (j = i + 1; j &lt; circles.length; j++) &#123;</div><div class=\"line\">               circles[i].drawLine(ctx, circles[j]);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (current_circle.x) &#123;</div><div class=\"line\">           current_circle.drawCircle(ctx);</div><div class=\"line\">           for (var k = 1; k &lt; circles.length; k++) &#123;</div><div class=\"line\">               current_circle.drawLine(ctx, circles[k]);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       requestAnimationFrame(draw);</div><div class=\"line\">   &#125;;</div><div class=\"line\"></div><div class=\"line\">   var init = function init(num) &#123;</div><div class=\"line\">       for (var i = 0; i &lt; num; i++) &#123;</div><div class=\"line\">           circles.push(new Circle(Math.random() * w, Math.random() * h));</div><div class=\"line\">       &#125;</div><div class=\"line\">       draw();</div><div class=\"line\">   &#125;;</div><div class=\"line\">   window.addEventListener(&apos;load&apos;, init(60));</div><div class=\"line\">   window.onmousemove = function (e) &#123;</div><div class=\"line\">       e = e || window.event;</div><div class=\"line\">       current_circle.x = e.clientX;</div><div class=\"line\">       current_circle.y = e.clientY;</div><div class=\"line\">   &#125;;</div><div class=\"line\">   window.onmouseout = function () &#123;</div><div class=\"line\">       current_circle.x = null;</div><div class=\"line\">       current_circle.y = null;</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure></p>\n<p>2：在主题文件的<code>C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl</code>文件中加上css代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*设置背景*/</div><div class=\"line\">.bg_content&#123;</div><div class=\"line\">  position: fixed;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  z-index: -1;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">#canvas&#123;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height:100%;</div><div class=\"line\">&#125;</div><div class=\"line\">/*将头部背景变为透明*/</div><div class=\"line\">.header&#123;</div><div class=\"line\">  background: transparent ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，<br>我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可<br><img src=\"http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我放在了<code>layout/_macro/sidebar.swig</code> 文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;music163player&quot;&gt;</div><div class=\"line\">    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt;</div><div class=\"line\">    &lt;/iframe&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>然后就可以在侧边栏看见我的播放器了~<br><img src=\"http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"网易云跟帖\"><a href=\"#网易云跟帖\" class=\"headerlink\" title=\"网易云跟帖\"></a>网易云跟帖</h1><p>之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网<a href=\"https://manage.gentie.163.com/\" target=\"_blank\" rel=\"external\">网易云跟帖</a>中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~</p>\n<p>#添加Fork me on GitHub<br>去网址<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可<br>记得把里面的url换成自己的!</p>\n<h1 id=\"hexo-wordcount实现统计功能\"><a href=\"#hexo-wordcount实现统计功能\" class=\"headerlink\" title=\"hexo-wordcount实现统计功能\"></a>hexo-wordcount实现统计功能</h1><p><img src=\"http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>wordcount可以实现字数统计，阅读时常还有总字数的统计功能<br>只需要<code>npm install hexo-wordcount --save</code> 就可以安装wordcount插件，<br>主要功能<br>字数统计:WordCount<br>阅读时长预计:Min2Read<br>总字数统计: TotalCount<br>安装完插件之后在主题的配置文件中开启该功能就可以~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Post wordcount display settings</div><div class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</div><div class=\"line\">post_wordcount:</div><div class=\"line\">  item_text: true</div><div class=\"line\">  wordcount: true</div><div class=\"line\">  min2read: true</div></pre></td></tr></table></figure></p>\n<h1 id=\"leancloud阅读次数统计\"><a href=\"#leancloud阅读次数统计\" class=\"headerlink\" title=\"leancloud阅读次数统计\"></a>leancloud阅读次数统计</h1><p>next也集成了leancloud，在<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">leancloud官网</a><br>中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Show number of visitors to each article.</div><div class=\"line\"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class=\"line\">leancloud_visitors:</div><div class=\"line\">  enable: true</div><div class=\"line\">  app_id: yourapp_id</div><div class=\"line\">  app_key: yourapp_key</div></pre></td></tr></table></figure></p>\n<p>然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示<br><img src=\"http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"个人网站地址：http-cherryblog-site-，顺便求个fork\"><a href=\"#个人网站地址：http-cherryblog-site-，顺便求个fork\" class=\"headerlink\" title=\"个人网站地址：http://cherryblog.site/，顺便求个fork\"></a>个人网站地址：<a href=\"http://cherryblog.site/，顺便求个fork\">http://cherryblog.site/，顺便求个fork</a></h1><h1 id=\"附录1：站点配置文件\"><a href=\"#附录1：站点配置文件\" class=\"headerlink\" title=\"附录1：站点配置文件\"></a>附录1：站点配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site   站点信息</div><div class=\"line\">title: Cherry&apos;s Blog    #站点名字</div><div class=\"line\">subtitle: To Be a Batter Me  #副标题</div><div class=\"line\">description: 做更好的自己   #站点描述，在侧边栏显示</div><div class=\"line\">author: Cherry   #博主名字</div><div class=\"line\">email: 991939332@qq.com #联系邮箱</div><div class=\"line\">language: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：<a href=\"http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/\">了解githubPages+hexo搭建博客的原理</a> 或者<a href=\"http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\">利用Gitpage+hexo开发自己的博客</a>，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容</p>\n<ul>\n<li>域名绑定，将github博客和你的独有域名绑定</li>\n<li>添加更多的menu内容</li>\n<li>添加头像</li>\n<li>定义网站个性logo</li>\n<li>自定义样式，重写默认样式，个性化定制你的博客</li>\n<li>炫酷动态背景制作</li>\n<li>添加网易云音乐</li>\n<li>添加网易云跟帖</li>\n<li>添加leancloud阅读次数统计功能</li>\n<li>添加wordcount页面字数统计</li>\n<li>添加fork me on github功能</li>\n</ul>\n<p>要想最快的知道这些功能的效果，请移步我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ<br>","more":"<br>首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／</p>\n<blockquote>\n<p>hexo  v3.2.2<br>next  v5.1.0<br>node v4.5.0</p>\n</blockquote>\n<p>在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">next官网</a><img src=\"http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p>\n</blockquote>\n<p> 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~<br> 默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>我们最先修改的应该是在hexo根目录下的配置文件<code>_config.yml</code>文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~<br> 其次就是我们的主题配置文件<br> 在对应的主题下的<code>_config.yml</code> 因为我使用的是next主题，所以目录的路径为<code>C:\\Hexo\\themes\\next\\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)<br> 然后我们需要修改样式的话是需要设置css和甚至是修改模板，<br> 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── .github            #git信息</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-Hans.yml      #简体中文</div><div class=\"line\">|   └── zh-tw.yml      #繁体中文</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── _header.swig    #头部样式</div><div class=\"line\">|   |   ├── _sidebar.swig   #侧边栏样式</div><div class=\"line\">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── post.swig    #文章模板</div><div class=\"line\">|   |   ├── reward.swig    #打赏模板</div><div class=\"line\">|   |   ├── sidebar.swig   #侧边栏模板</div><div class=\"line\">|   ├── _partial       #局部的布局</div><div class=\"line\">|   |   ├── head       #头部模板</div><div class=\"line\">|   |   ├── search     #搜索模板</div><div class=\"line\">|   |   ├── share      #分享模板</div><div class=\"line\">|   ├── _script        #局部的布局</div><div class=\"line\">|   ├── _third-party   #第三方模板</div><div class=\"line\">|   ├── _layout.swig   #主页面模板</div><div class=\"line\">|   ├── index.swig     #主页面模板</div><div class=\"line\">|   ├── page           #页面模板</div><div class=\"line\">|   └── tag.swig       #tag模板</div><div class=\"line\">├── scripts            #script源码</div><div class=\"line\">|   ├── tags           #tags的script源码</div><div class=\"line\">|   ├── marge.js       #页面模板</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _common    #*.styl基础css</div><div class=\"line\">|   |   ├── _custom    #*.styl局部css</div><div class=\"line\">|   |   └── _mixins    #mixins的css</div><div class=\"line\">|   ├── fonts          #字体</div><div class=\"line\">|   ├── images         #图片</div><div class=\"line\">|   ├── uploads        #添加的文件</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>绑定域名的思路如下：</p>\n<ul>\n<li>在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）</li>\n<li>解析DNS</li>\n<li>在hexo中添加CNAME文件</li>\n</ul>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。<br>我选择的是<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"external\">万网</a>，阿里下面的。我选择了一个<code>.site</code>的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~<br>按照官网的步骤一步一来就可以了~</p>\n<h2 id=\"解析DNS\"><a href=\"#解析DNS\" class=\"headerlink\" title=\"解析DNS\"></a>解析DNS</h2><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src=\"http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  点击添加解析，记录类型选A或CNAME，</p>\n<blockquote>\n<p>A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，<br>解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。</p>\n</blockquote>\n<h2 id=\"在hexo中添加CNAME文件\"><a href=\"#在hexo中添加CNAME文件\" class=\"headerlink\" title=\"在hexo中添加CNAME文件\"></a>在hexo中添加CNAME文件</h2><p>接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的<code>cherryblog.site</code><br><img src=\"http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后你就可以<code>hexo clean</code>,<code>hexo g</code>，<code>hexo d</code> 发布你的博客看看效果啦~<br><img src=\"http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =</strong> </p>\n<h1 id=\"添加菜单页\"><a href=\"#添加菜单页\" class=\"headerlink\" title=\"添加菜单页\"></a>添加菜单页</h1><p>添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令<code>hexo new page &quot;photo&quot;</code> 就直接创建了<code>C:\\Hexo\\source\\photo\\index.md</code>文件，然后编辑index.md 文件就可以了~<br><img src=\"http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>第二种：手动创建上面的文件= =</p>\n<ul>\n<li>在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下</li>\n<li>在hexo的source文件下添加对应的文件夹</li>\n<li>在主题的配置文件添加menu_icon字段设置对应的icon</li>\n<li>修改language文件下zh-hans语言包</li>\n<li>在发表文章的时候添加对应的menu字段就可以看到</li>\n</ul>\n<p>刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建<strong>首先我们要分清什么是页面，什么是文章，</strong><br><strong>在hexo中menu下的内容都是新的页面</strong>我们可以通过<code>hexo new page &quot;pagename&quot;</code> 创建，hexo默认的页面只有<code>home</code>,<code>archives</code>,<code>tags</code> 三个，之后我们写的博文就是文章，通过<code>hexo new &quot;name&quot;</code> 创建的<code>name.md</code> 文件在根目录的<code>source\\_posts</code> 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 </p>\n<h2 id=\"在配置文件中添加menu索引路径\"><a href=\"#在配置文件中添加menu索引路径\" class=\"headerlink\" title=\"在配置文件中添加menu索引路径\"></a>在配置文件中添加menu索引路径</h2><p>我们可以在主题配置的_config文件下找到相应的字段，字段前加<code>#</code> 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu<code>life</code> 和<code>photo</code><br><img src=\"http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是<code>hexo/source</code> 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了<br><img src=\"http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">,<br>没有明白什么意思的同学看下图</p>\n<h2 id=\"在source文件添加menu文件夹\"><a href=\"#在source文件添加menu文件夹\" class=\"headerlink\" title=\"在source文件添加menu文件夹\"></a>在source文件添加menu文件夹</h2><p>我们需要在这个路径下自己建立对应的页面，比如说我新建了menu<code>life</code> 和<code>photos</code>，然后再source文件夹下面新建两个名字为<code>life</code> 和<code>photo</code> 的文件夹，里面添加一个<code>index.md</code> markdown文件，内容是类似这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: photo</div><div class=\"line\">date: 2017-04-04 22:14:07</div><div class=\"line\">type: &quot;photo&quot;</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">啦啦啦~</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下</p>\n<h2 id=\"给menu添加icon\"><a href=\"#给menu添加icon\" class=\"headerlink\" title=\"给menu添加icon\"></a>给menu添加icon</h2><p>如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：<img src=\"http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了<code>FontAwsome</code> 所以我们只需要在主题的配置文件中加入相应的icon名字即可<br><img src=\"http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h2><p> 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"external\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~<br> <img src=\"http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h2 id=\"在language添加zh-hans翻译字段\"><a href=\"#在language添加zh-hans翻译字段\" class=\"headerlink\" title=\"在language添加zh-hans翻译字段\"></a>在language添加zh-hans翻译字段</h2><p>上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~<br> <img src=\"http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在发表文章的时候添加对应的menu字段\"><a href=\"#在发表文章的时候添加对应的menu字段\" class=\"headerlink\" title=\"在发表文章的时候添加对应的menu字段\"></a>在发表文章的时候添加对应的menu字段</h2><p>在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Git使用中的报错情况</div><div class=\"line\">date: 2017-03-11 23:54:11</div><div class=\"line\">tags: [git,实战经验] </div><div class=\"line\">categories: git</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了<br><img src=\"http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h1><p>我使用的主题头像是位于侧边栏，显示的效果如下，<br><img src=\"http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Sidebar Avatar</div><div class=\"line\"># in theme directory(source/images): /images/avatar.jpg</div><div class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class=\"line\">avatar: /uploads/avatar.png</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"设置网站logo\"><a href=\"#设置网站logo\" class=\"headerlink\" title=\"设置网站logo\"></a>设置网站logo</h1><p>跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在<a href=\"http://tool.lu/favicon/\" target=\"_blank\" rel=\"external\">Favicon在线制作</a>工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：<code>favicon: images/favicon.ico</code></p>\n<h1 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h1><p>不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~<br><img src=\"http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"炫酷动态背景\"><a href=\"#炫酷动态背景\" class=\"headerlink\" title=\"炫酷动态背景\"></a>炫酷动态背景</h1><blockquote>\n<p>2017.5.8更新，具体过程往下看<strong>仿知乎动态背景</strong><br>之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。<br>添加修改代码<code>next/layout/_layout.swig</code>在<code>&lt;/body&gt;</code>之前加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.canvas_nest %&#125;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>打开<code>next/_config.yml</code>，添加以下代码就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Canvas-nest</div><div class=\"line\">canvas_nest: true</div></pre></td></tr></table></figure></p>\n<p>这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~<br><img src=\"http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>所以我们需要在layout下面的<code>_layout.swig</code> 添加一个canvas</p>\n<p>然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：<br><a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvas-nest</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">class Circle &#123;</div><div class=\"line\">    //创建对象</div><div class=\"line\">    //以一个圆为对象</div><div class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</div><div class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</div><div class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.random() * 10 ;</div><div class=\"line\">        this._mx = Math.random() ;</div><div class=\"line\">        this._my = Math.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //canvas 画圆和画直线</div><div class=\"line\">    //画圆就是正常的用canvas画一个圆</div><div class=\"line\">    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360)</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawLine(ctx, _circle) &#123;</div><div class=\"line\">        let dx = this.x - _circle.x;</div><div class=\"line\">        let dy = this.y - _circle.y;</div><div class=\"line\">        let d = Math.sqrt(dx * dx + dy * dy)</div><div class=\"line\">        if (d &lt; 150) &#123;</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</div><div class=\"line\">            ctx.moveTo(this.x, this.y);   //起始点</div><div class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   //终点</div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">            ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 圆圈移动</div><div class=\"line\">    // 圆圈移动的距离必须在屏幕范围内</div><div class=\"line\">    move(w, h) &#123;</div><div class=\"line\">        this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);</div><div class=\"line\">        this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);</div><div class=\"line\">        this.x += this._mx / 2;</div><div class=\"line\">        this.y += this._my / 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//鼠标点画圆闪烁变动</div><div class=\"line\">class currentCirle extends Circle &#123;</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        super(x, y)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //注释内容为鼠标焦点的地方圆圈半径变化</div><div class=\"line\">        //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</div><div class=\"line\">        this.r = 8;</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//更新页面用requestAnimationFrame替代setTimeout</div><div class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\">let canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">let w = canvas.width = canvas.offsetWidth;</div><div class=\"line\">let h = canvas.height = canvas.offsetHeight;</div><div class=\"line\">let circles = [];</div><div class=\"line\">let current_circle = new currentCirle(0, 0)</div><div class=\"line\"></div><div class=\"line\">let draw = function () &#123;</div><div class=\"line\">    ctx.clearRect(0, 0, w, h);</div><div class=\"line\">    for (let i = 0; i &lt; circles.length; i++) &#123;</div><div class=\"line\">        circles[i].move(w, h);</div><div class=\"line\">        circles[i].drawCircle(ctx);</div><div class=\"line\">        for (j = i + 1; j &lt; circles.length; j++) &#123;</div><div class=\"line\">            circles[i].drawLine(ctx, circles[j])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (current_circle.x) &#123;</div><div class=\"line\">        current_circle.drawCircle(ctx);</div><div class=\"line\">        for (var k = 1; k &lt; circles.length; k++) &#123;</div><div class=\"line\">            current_circle.drawLine(ctx, circles[k])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    requestAnimationFrame(draw)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let init = function (num) &#123;</div><div class=\"line\">    for (var i = 0; i &lt; num; i++) &#123;</div><div class=\"line\">        circles.push(new Circle(Math.random() * w, Math.random() * h));</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw();</div><div class=\"line\">&#125;</div><div class=\"line\">window.addEventListener(&apos;load&apos;, init(60));</div><div class=\"line\">window.onmousemove = function (e) &#123;</div><div class=\"line\">    e = e || window.event;</div><div class=\"line\">    current_circle.x = e.clientX;</div><div class=\"line\">    current_circle.y = e.clientY;</div><div class=\"line\">&#125;</div><div class=\"line\">window.onmouseout = function () &#123;</div><div class=\"line\">    current_circle.x = null;</div><div class=\"line\">    current_circle.y = null;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"仿知乎动态背景\"><a href=\"#仿知乎动态背景\" class=\"headerlink\" title=\"仿知乎动态背景\"></a>仿知乎动态背景</h1><hr>\n<blockquote>\n<p>2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新<br>，完整步骤如下</p>\n</blockquote>\n<p>1：首先在主题文件的layout中的_layout.swig<code>C:\\Hexo\\themes\\next\\layout\\_layout.swig</code>中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div></pre></td><td class=\"code\"><pre><div class=\"line\"> &lt;div class=&quot;bg_content&quot;&gt;</div><div class=\"line\">      &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\"> &lt;/div&gt;</div><div class=\"line\">&apos;use strict&apos;;</div><div class=\"line\"></div><div class=\"line\">   var _createClass = function () &#123; function defineProperties(target, props) &#123; for (var i = 0; i &lt; props.length; i++) &#123; var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (&quot;value&quot; in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); &#125; &#125; return function (Constructor, protoProps, staticProps) &#123; if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; &#125;; &#125;();</div><div class=\"line\"></div><div class=\"line\">   function _possibleConstructorReturn(self, call) &#123; if (!self) &#123; throw new ReferenceError(&quot;this hasn&apos;t been initialised - super() hasn&apos;t been called&quot;); &#125; return call &amp;&amp; (typeof call === &quot;object&quot; || typeof call === &quot;function&quot;) ? call : self; &#125;</div><div class=\"line\"></div><div class=\"line\">   function _inherits(subClass, superClass) &#123; if (typeof superClass !== &quot;function&quot; &amp;&amp; superClass !== null) &#123; throw new TypeError(&quot;Super expression must either be null or a function, not &quot; + typeof superClass); &#125; subClass.prototype = Object.create(superClass &amp;&amp; superClass.prototype, &#123; constructor: &#123; value: subClass, enumerable: false, writable: true, configurable: true &#125; &#125;); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</div><div class=\"line\"></div><div class=\"line\">   function _classCallCheck(instance, Constructor) &#123; if (!(instance instanceof Constructor)) &#123; throw new TypeError(&quot;Cannot call a class as a function&quot;); &#125; &#125;</div><div class=\"line\"></div><div class=\"line\">   var Circle = function () &#123;</div><div class=\"line\">      function Circle(x, y) &#123;</div><div class=\"line\">           _classCallCheck(this, Circle);</div><div class=\"line\"></div><div class=\"line\">           this.x = x;</div><div class=\"line\">           this.y = y;</div><div class=\"line\">           this.r = Math.random() * 10;</div><div class=\"line\">           this._mx = Math.random();</div><div class=\"line\">           this._my = Math.random();</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">      _createClass(Circle, [&#123;</div><div class=\"line\">           key: &apos;drawCircle&apos;,</div><div class=\"line\">           value: function drawCircle(ctx) &#123;</div><div class=\"line\">               ctx.beginPath();</div><div class=\"line\">               //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">               ctx.closePath();</div><div class=\"line\">               ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">               ctx.fill();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;, &#123;</div><div class=\"line\">           key: &apos;drawLine&apos;,</div><div class=\"line\">           value: function drawLine(ctx, _circle) &#123;</div><div class=\"line\">               var dx = this.x - _circle.x;</div><div class=\"line\">               var dy = this.y - _circle.y;</div><div class=\"line\">               var d = Math.sqrt(dx * dx + dy * dy);</div><div class=\"line\">               if (d &lt; 150) &#123;</div><div class=\"line\">                   ctx.beginPath();</div><div class=\"line\"></div><div class=\"line\">                   ctx.moveTo(this.x, this.y); //起始点</div><div class=\"line\">                   ctx.lineTo(_circle.x, _circle.y); //终点</div><div class=\"line\">                   ctx.closePath();</div><div class=\"line\">                   ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">                   ctx.stroke();</div><div class=\"line\">               &#125;</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">       &#125;, &#123;</div><div class=\"line\">           key: &apos;move&apos;,</div><div class=\"line\">           value: function move(w, h) &#123;</div><div class=\"line\">               this._mx = this.x &lt; w &amp;&amp; this.x &gt; 0 ? this._mx : -this._mx;</div><div class=\"line\">               this._my = this.y &lt; h &amp;&amp; this.y &gt; 0 ? this._my : -this._my;</div><div class=\"line\">               this.x += this._mx / 2;</div><div class=\"line\">               this.y += this._my / 2;</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;]);</div><div class=\"line\"></div><div class=\"line\">       return Circle;</div><div class=\"line\">   &#125;();</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   var currentCirle = function (_Circle) &#123;</div><div class=\"line\">       _inherits(currentCirle, _Circle);</div><div class=\"line\"></div><div class=\"line\">       function currentCirle(x, y) &#123;</div><div class=\"line\">           _classCallCheck(this, currentCirle);</div><div class=\"line\"></div><div class=\"line\">           return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));</div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">       _createClass(currentCirle, [&#123;</div><div class=\"line\">           key: &apos;drawCircle&apos;,</div><div class=\"line\">           value: function drawCircle(ctx) &#123;</div><div class=\"line\">               ctx.beginPath();</div><div class=\"line\"></div><div class=\"line\">               //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</div><div class=\"line\">               this.r = 8;</div><div class=\"line\">               ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">               ctx.closePath();</div><div class=\"line\">               //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</div><div class=\"line\">               ctx.fillStyle = &apos;rgba(255, 77, 54, 0.6)&apos;;</div><div class=\"line\">               ctx.fill();</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;]);</div><div class=\"line\"></div><div class=\"line\">       return currentCirle;</div><div class=\"line\">   &#125;(Circle);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">   window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\">   var canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">   var ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">   var w = canvas.width = canvas.offsetWidth;</div><div class=\"line\">   var h = canvas.height = canvas.offsetHeight;</div><div class=\"line\">   var circles = [];</div><div class=\"line\">   var current_circle = new currentCirle(0, 0);</div><div class=\"line\"></div><div class=\"line\">   var draw = function draw() &#123;</div><div class=\"line\">       ctx.clearRect(0, 0, w, h);</div><div class=\"line\">       for (var i = 0; i &lt; circles.length; i++) &#123;</div><div class=\"line\">           circles[i].move(w, h);</div><div class=\"line\">           circles[i].drawCircle(ctx);</div><div class=\"line\">           for (j = i + 1; j &lt; circles.length; j++) &#123;</div><div class=\"line\">               circles[i].drawLine(ctx, circles[j]);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       if (current_circle.x) &#123;</div><div class=\"line\">           current_circle.drawCircle(ctx);</div><div class=\"line\">           for (var k = 1; k &lt; circles.length; k++) &#123;</div><div class=\"line\">               current_circle.drawLine(ctx, circles[k]);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">       requestAnimationFrame(draw);</div><div class=\"line\">   &#125;;</div><div class=\"line\"></div><div class=\"line\">   var init = function init(num) &#123;</div><div class=\"line\">       for (var i = 0; i &lt; num; i++) &#123;</div><div class=\"line\">           circles.push(new Circle(Math.random() * w, Math.random() * h));</div><div class=\"line\">       &#125;</div><div class=\"line\">       draw();</div><div class=\"line\">   &#125;;</div><div class=\"line\">   window.addEventListener(&apos;load&apos;, init(60));</div><div class=\"line\">   window.onmousemove = function (e) &#123;</div><div class=\"line\">       e = e || window.event;</div><div class=\"line\">       current_circle.x = e.clientX;</div><div class=\"line\">       current_circle.y = e.clientY;</div><div class=\"line\">   &#125;;</div><div class=\"line\">   window.onmouseout = function () &#123;</div><div class=\"line\">       current_circle.x = null;</div><div class=\"line\">       current_circle.y = null;</div><div class=\"line\">   &#125;;</div></pre></td></tr></table></figure></p>\n<p>2：在主题文件的<code>C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl</code>文件中加上css代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*设置背景*/</div><div class=\"line\">.bg_content&#123;</div><div class=\"line\">  position: fixed;</div><div class=\"line\">  top: 0;</div><div class=\"line\">  z-index: -1;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">#canvas&#123;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  height:100%;</div><div class=\"line\">&#125;</div><div class=\"line\">/*将头部背景变为透明*/</div><div class=\"line\">.header&#123;</div><div class=\"line\">  background: transparent ;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，<br>我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可<br><img src=\"http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我放在了<code>layout/_macro/sidebar.swig</code> 文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;music163player&quot;&gt;</div><div class=\"line\">    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt;</div><div class=\"line\">    &lt;/iframe&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>然后就可以在侧边栏看见我的播放器了~<br><img src=\"http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"网易云跟帖\"><a href=\"#网易云跟帖\" class=\"headerlink\" title=\"网易云跟帖\"></a>网易云跟帖</h1><p>之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网<a href=\"https://manage.gentie.163.com/\" target=\"_blank\" rel=\"external\">网易云跟帖</a>中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~</p>\n<p>#添加Fork me on GitHub<br>去网址<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可<br>记得把里面的url换成自己的!</p>\n<h1 id=\"hexo-wordcount实现统计功能\"><a href=\"#hexo-wordcount实现统计功能\" class=\"headerlink\" title=\"hexo-wordcount实现统计功能\"></a>hexo-wordcount实现统计功能</h1><p><img src=\"http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>wordcount可以实现字数统计，阅读时常还有总字数的统计功能<br>只需要<code>npm install hexo-wordcount --save</code> 就可以安装wordcount插件，<br>主要功能<br>字数统计:WordCount<br>阅读时长预计:Min2Read<br>总字数统计: TotalCount<br>安装完插件之后在主题的配置文件中开启该功能就可以~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Post wordcount display settings</div><div class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</div><div class=\"line\">post_wordcount:</div><div class=\"line\">  item_text: true</div><div class=\"line\">  wordcount: true</div><div class=\"line\">  min2read: true</div></pre></td></tr></table></figure></p>\n<h1 id=\"leancloud阅读次数统计\"><a href=\"#leancloud阅读次数统计\" class=\"headerlink\" title=\"leancloud阅读次数统计\"></a>leancloud阅读次数统计</h1><p>next也集成了leancloud，在<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">leancloud官网</a><br>中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Show number of visitors to each article.</div><div class=\"line\"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class=\"line\">leancloud_visitors:</div><div class=\"line\">  enable: true</div><div class=\"line\">  app_id: yourapp_id</div><div class=\"line\">  app_key: yourapp_key</div></pre></td></tr></table></figure></p>\n<p>然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示<br><img src=\"http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"个人网站地址：http-cherryblog-site-，顺便求个fork\"><a href=\"#个人网站地址：http-cherryblog-site-，顺便求个fork\" class=\"headerlink\" title=\"个人网站地址：http://cherryblog.site/，顺便求个fork\"></a>个人网站地址：<a href=\"http://cherryblog.site/，顺便求个fork\">http://cherryblog.site/，顺便求个fork</a></h1><h1 id=\"附录1：站点配置文件\"><a href=\"#附录1：站点配置文件\" class=\"headerlink\" title=\"附录1：站点配置文件\"></a>附录1：站点配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site   站点信息</div><div class=\"line\">title: Cherry&apos;s Blog    #站点名字</div><div class=\"line\">subtitle: To Be a Batter Me  #副标题</div><div class=\"line\">description: 做更好的自己   #站点描述，在侧边栏显示</div><div class=\"line\">author: Cherry   #博主名字</div><div class=\"line\">email: 991939332@qq.com #联系邮箱</div><div class=\"line\">language: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io</div></pre></td></tr></table></figure>"},{"title":"javascript设计模式（一）","date":"2017-03-11T15:54:11.000Z","_content":" \n\n在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的[学习javascript设计模式](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)，本文的所有demo地址见本人的github：https://github.com/sunshine940326/js-object-demo\n<!--more-->\n\njavascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）\n\n#定义函数\n# 构造器模式\njs不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。\n\n在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。\n\n对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。\n\n## 创建对象\n在js中创建对象有三种基本方式：\n下面的每一种方式都会创建一个新对象\n1. 对象直接量\n\n```\nvar empty = {};\n    console.log(empty);\n    var point = {\n        x:0,\n        y:1\n    }\n    console.log(point.x,+point.y)\n    var point2 = {\n        x:point.x,\n        y:point.y+1\n    }\n    console.log(\"point2.x\" + \":\"+ point2.x + \",\"+ \"point2.y\" +\":\"+ point2.y)\n\n    var book = {\n        \"main_title\":\"javascript\",\n        \"sub_title\" : \"The Definitive Guide\",\n        \"for\":\"all\",\n        \"author\":{\n            \"firstName\":\"cherry\",\n            \"lastName\":\"Li\"\n        }\n    }\n    console.log(book.author.firstName,book.author.lastName)\n    console.log(book.main_title)\n    console.log(book.sub_title)\n    console.log(book.for)\n```\n2. Object.create\n```\nvar newObject = Object.create(null)\n```\n`Object.create()` 方法创建一个拥有指定原型和若干个指定属性的对象。\n语法\n>Object.create(proto, [ propertiesObject ])\n参数\n\n- proto\n一个对象，作为新创建对象的原型。或者为 null。\n- propertiesObject\n可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。\n```\n\n    var myCar = {\n        name:\"Fort\",\n        drive:function () {\n            console.log(\"I'm driving!\")\n        },\n        panic:function () {\n            console.log(\"wait\")\n        }\n    }\n\n    // Use Object.create to instantiate a new car\n    var youCar = Object.create(myCar);\n    // Now we can see that one is a prototype of the other\n    console.log(youCar.name)\n\n    var vehicle = {\n        getModel:function () {\n            console.log(\"The model of this vehicle is..\" +this.model)\n        }\n    }\n\n    var car = Object.create(vehicle,{\n        \"id\":{\n            value:'car1',\n\n        },\n        \"model\":{\n            value:'Ford',\n\n        }\n    })\n\n```\n3. 构造函数方式（new）\n通过new创建对象，new后跟一个函数调用（构造函数）\n```\nvar newObject = new Object();\n```\n\n---\n其实这三种方式都可以相互转化\n\n通过字面量方式创建的空对象相当于`Object.create(Object.prototype)`\n```\no = {}\n\no = Object.create(Object.prototype) \n```\n下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n```\nfunction Constructor() {};\no = new Constructor();\no = Object.create(Constructor.prototype) \n```\n\n## 给对象设置属性和获取属性值\n### 使用.的方式\n```\nnewObject.sayHello = \"Hello\";\nconsole.log(newObject.sayHello)\n```\n### 使用[]方式\n```\nnewObject['sayHello'] = 'Hello';\nconsole.log(newObject['sayHello']);\n```\n这两种设置属性的区别\n- 使用保留字作为属性名的时候，必须用方括号\n- . 不能修改，因为属性名是标识符\n- []为字符串，可以修改和创建\n\n### Object.defineProperty方式\n>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n>Object.defineProperty(obj, prop, descriptor)\n\n>obj\n需要定义属性的对象。\nprop\n需定义或修改的属性的名字。\ndescriptor\n将被定义或修改的属性的描述符。\n\n\n#### 创建属性\n如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。\n\n通过`.` `[]`设置的属性，可以使用`delete`删除,通过`Object.defineProperty()`设置的属性不能被delete删除，使用  `Object.defineProperty()` 增加的属性值是不可改变的。\n```\n//删除对象的属性\n    //通过. []设置的属性，可以使用delete删除\n    function fun() {\n        this.name = 'name';\n        this['age'] = 12;\n    }\n\n    var obj = new fun();\n    console.log(obj.name);   //name\n    console.log(obj.age)\n    delete obj.name;\n    delete obj.age;\n    console.log(obj.name);    //undefined\n    console.log(obj.age);\n\n    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。\n    var o = {} //创建一个空对象\n    Object.defineProperty(o,'a',{    //给o设置一个属性a，值为37\n        value:37,\n        writable:true,\n        configurable:true\n    });\n\n    var bValue ;\n    Object.defineProperty(o,'b',{\n        get:function () {\n            return bValue\n        },\n        set:function (newValue) {\n            bValue = newValue;\n        },\n        enumerable:true,\n        configurable:true,\n    })\n    o.b = 38;\n\n    //数据描述符和存取描述符不能混合使用\n    Object.defineProperty(o,\"conflict\",{\n        value:11111,\n        get:function () {\n            return 11111\n        }\n    })// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n```\n\n#### 修改属性\n如果属性已经存在，`Object.defineProperty()`将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。\n\n##### Writable 属性\n\n当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。\n\n```\nvar o = {}; // 创建一个新对象\n\nObject.defineProperty(o, \"a\", { value : 37,\n                                writable : false });\n\nconsole.log(o.a); // 打印 37\no.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）\nconsole.log(o.a); // 打印 37， 赋值不起作用。\n```\n\n##### Enumerable 特性\n\n属性特性 enumerable 定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n\n\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { value : 1, enumerable:true });\nObject.defineProperty(o, \"b\", { value : 2, enumerable:false });\nObject.defineProperty(o, \"c\", { value : 3 }); // enumerable defaults to false\no.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true\n\nfor (var i in o) {    \n  console.log(i);  \n}\n// 打印 'a' 和 'd' (in undefined order)\n\nObject.keys(o); // [\"a\", \"d\"]\n\no.propertyIsEnumerable('a'); // true\no.propertyIsEnumerable('b'); // false\no.propertyIsEnumerable('c'); // false\n```\n\n##### Configurable 特性\n\nconfigurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { get : function(){return 1;}, \n                                configurable : false } );\n\n// throws a TypeError\nObject.defineProperty(o, \"a\", {configurable : true}); \n// throws a TypeError\nObject.defineProperty(o, \"a\", {enumerable : true}); \n// throws a TypeError (set was undefined previously) \nObject.defineProperty(o, \"a\", {set : function(){}}); \n// throws a TypeError (even though the new get does exactly the same thing) \nObject.defineProperty(o, \"a\", {get : function(){return 1;}});\n// throws a TypeError\nObject.defineProperty(o, \"a\", {value : 12});\n\nconsole.log(o.a); // logs 1\ndelete o.a; // Nothing happens\nconsole.log(o.a); // logs 1\n```\n#### 添加多个属性和默认值\n\n考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的\n```\nvar o = {};\n\no.a = 1;\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : true,\n  configurable : true,\n  enumerable : true\n});\n\n\n// 另一方面，\nObject.defineProperty(o, \"a\", { value : 1 });\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : false,\n  configurable : false,\n  enumerable : false\n});\n```\n### Object.defineProperties方式\n\n```\n// 设置属性\nObject.defineProperties( newObject, {\n\n  \"someKey\": { \n    value: \"Hello World\", \n    writable: true \n  },\n\n  \"anotherKey\": { \n    value: \"Foo bar\", \n    writable: false \n  } \n\n});\n\n```\n","source":"_posts/JavaScript-Design-Pattern.md","raw":"---\ntitle: javascript设计模式（一）\ndate: 2017-03-11 23:54:11\ntags: [js,js设计模式] \ncategories: js\n---\n \n\n在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的[学习javascript设计模式](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)，本文的所有demo地址见本人的github：https://github.com/sunshine940326/js-object-demo\n<!--more-->\n\njavascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）\n\n#定义函数\n# 构造器模式\njs不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。\n\n在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。\n\n对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。\n\n## 创建对象\n在js中创建对象有三种基本方式：\n下面的每一种方式都会创建一个新对象\n1. 对象直接量\n\n```\nvar empty = {};\n    console.log(empty);\n    var point = {\n        x:0,\n        y:1\n    }\n    console.log(point.x,+point.y)\n    var point2 = {\n        x:point.x,\n        y:point.y+1\n    }\n    console.log(\"point2.x\" + \":\"+ point2.x + \",\"+ \"point2.y\" +\":\"+ point2.y)\n\n    var book = {\n        \"main_title\":\"javascript\",\n        \"sub_title\" : \"The Definitive Guide\",\n        \"for\":\"all\",\n        \"author\":{\n            \"firstName\":\"cherry\",\n            \"lastName\":\"Li\"\n        }\n    }\n    console.log(book.author.firstName,book.author.lastName)\n    console.log(book.main_title)\n    console.log(book.sub_title)\n    console.log(book.for)\n```\n2. Object.create\n```\nvar newObject = Object.create(null)\n```\n`Object.create()` 方法创建一个拥有指定原型和若干个指定属性的对象。\n语法\n>Object.create(proto, [ propertiesObject ])\n参数\n\n- proto\n一个对象，作为新创建对象的原型。或者为 null。\n- propertiesObject\n可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。\n```\n\n    var myCar = {\n        name:\"Fort\",\n        drive:function () {\n            console.log(\"I'm driving!\")\n        },\n        panic:function () {\n            console.log(\"wait\")\n        }\n    }\n\n    // Use Object.create to instantiate a new car\n    var youCar = Object.create(myCar);\n    // Now we can see that one is a prototype of the other\n    console.log(youCar.name)\n\n    var vehicle = {\n        getModel:function () {\n            console.log(\"The model of this vehicle is..\" +this.model)\n        }\n    }\n\n    var car = Object.create(vehicle,{\n        \"id\":{\n            value:'car1',\n\n        },\n        \"model\":{\n            value:'Ford',\n\n        }\n    })\n\n```\n3. 构造函数方式（new）\n通过new创建对象，new后跟一个函数调用（构造函数）\n```\nvar newObject = new Object();\n```\n\n---\n其实这三种方式都可以相互转化\n\n通过字面量方式创建的空对象相当于`Object.create(Object.prototype)`\n```\no = {}\n\no = Object.create(Object.prototype) \n```\n下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n```\nfunction Constructor() {};\no = new Constructor();\no = Object.create(Constructor.prototype) \n```\n\n## 给对象设置属性和获取属性值\n### 使用.的方式\n```\nnewObject.sayHello = \"Hello\";\nconsole.log(newObject.sayHello)\n```\n### 使用[]方式\n```\nnewObject['sayHello'] = 'Hello';\nconsole.log(newObject['sayHello']);\n```\n这两种设置属性的区别\n- 使用保留字作为属性名的时候，必须用方括号\n- . 不能修改，因为属性名是标识符\n- []为字符串，可以修改和创建\n\n### Object.defineProperty方式\n>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n>Object.defineProperty(obj, prop, descriptor)\n\n>obj\n需要定义属性的对象。\nprop\n需定义或修改的属性的名字。\ndescriptor\n将被定义或修改的属性的描述符。\n\n\n#### 创建属性\n如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。\n\n通过`.` `[]`设置的属性，可以使用`delete`删除,通过`Object.defineProperty()`设置的属性不能被delete删除，使用  `Object.defineProperty()` 增加的属性值是不可改变的。\n```\n//删除对象的属性\n    //通过. []设置的属性，可以使用delete删除\n    function fun() {\n        this.name = 'name';\n        this['age'] = 12;\n    }\n\n    var obj = new fun();\n    console.log(obj.name);   //name\n    console.log(obj.age)\n    delete obj.name;\n    delete obj.age;\n    console.log(obj.name);    //undefined\n    console.log(obj.age);\n\n    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。\n    var o = {} //创建一个空对象\n    Object.defineProperty(o,'a',{    //给o设置一个属性a，值为37\n        value:37,\n        writable:true,\n        configurable:true\n    });\n\n    var bValue ;\n    Object.defineProperty(o,'b',{\n        get:function () {\n            return bValue\n        },\n        set:function (newValue) {\n            bValue = newValue;\n        },\n        enumerable:true,\n        configurable:true,\n    })\n    o.b = 38;\n\n    //数据描述符和存取描述符不能混合使用\n    Object.defineProperty(o,\"conflict\",{\n        value:11111,\n        get:function () {\n            return 11111\n        }\n    })// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n```\n\n#### 修改属性\n如果属性已经存在，`Object.defineProperty()`将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。\n\n##### Writable 属性\n\n当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。\n\n```\nvar o = {}; // 创建一个新对象\n\nObject.defineProperty(o, \"a\", { value : 37,\n                                writable : false });\n\nconsole.log(o.a); // 打印 37\no.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）\nconsole.log(o.a); // 打印 37， 赋值不起作用。\n```\n\n##### Enumerable 特性\n\n属性特性 enumerable 定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n\n\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { value : 1, enumerable:true });\nObject.defineProperty(o, \"b\", { value : 2, enumerable:false });\nObject.defineProperty(o, \"c\", { value : 3 }); // enumerable defaults to false\no.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true\n\nfor (var i in o) {    \n  console.log(i);  \n}\n// 打印 'a' 和 'd' (in undefined order)\n\nObject.keys(o); // [\"a\", \"d\"]\n\no.propertyIsEnumerable('a'); // true\no.propertyIsEnumerable('b'); // false\no.propertyIsEnumerable('c'); // false\n```\n\n##### Configurable 特性\n\nconfigurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { get : function(){return 1;}, \n                                configurable : false } );\n\n// throws a TypeError\nObject.defineProperty(o, \"a\", {configurable : true}); \n// throws a TypeError\nObject.defineProperty(o, \"a\", {enumerable : true}); \n// throws a TypeError (set was undefined previously) \nObject.defineProperty(o, \"a\", {set : function(){}}); \n// throws a TypeError (even though the new get does exactly the same thing) \nObject.defineProperty(o, \"a\", {get : function(){return 1;}});\n// throws a TypeError\nObject.defineProperty(o, \"a\", {value : 12});\n\nconsole.log(o.a); // logs 1\ndelete o.a; // Nothing happens\nconsole.log(o.a); // logs 1\n```\n#### 添加多个属性和默认值\n\n考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的\n```\nvar o = {};\n\no.a = 1;\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : true,\n  configurable : true,\n  enumerable : true\n});\n\n\n// 另一方面，\nObject.defineProperty(o, \"a\", { value : 1 });\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : false,\n  configurable : false,\n  enumerable : false\n});\n```\n### Object.defineProperties方式\n\n```\n// 设置属性\nObject.defineProperties( newObject, {\n\n  \"someKey\": { \n    value: \"Hello World\", \n    writable: true \n  },\n\n  \"anotherKey\": { \n    value: \"Foo bar\", \n    writable: false \n  } \n\n});\n\n```\n","slug":"JavaScript-Design-Pattern","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zvx000qvvxi1rnpjll3","content":"<p>在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的<a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"external\">学习javascript设计模式</a>，本文的所有demo地址见本人的github：<a href=\"https://github.com/sunshine940326/js-object-demo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/js-object-demo</a><br><a id=\"more\"></a></p>\n<p>javascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）</p>\n<p>#定义函数</p>\n<h1 id=\"构造器模式\"><a href=\"#构造器模式\" class=\"headerlink\" title=\"构造器模式\"></a>构造器模式</h1><p>js不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。</p>\n<p>在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。</p>\n<p>对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><p>在js中创建对象有三种基本方式：<br>下面的每一种方式都会创建一个新对象</p>\n<ol>\n<li>对象直接量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var empty = &#123;&#125;;</div><div class=\"line\">    console.log(empty);</div><div class=\"line\">    var point = &#123;</div><div class=\"line\">        x:0,</div><div class=\"line\">        y:1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(point.x,+point.y)</div><div class=\"line\">    var point2 = &#123;</div><div class=\"line\">        x:point.x,</div><div class=\"line\">        y:point.y+1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&quot;point2.x&quot; + &quot;:&quot;+ point2.x + &quot;,&quot;+ &quot;point2.y&quot; +&quot;:&quot;+ point2.y)</div><div class=\"line\"></div><div class=\"line\">    var book = &#123;</div><div class=\"line\">        &quot;main_title&quot;:&quot;javascript&quot;,</div><div class=\"line\">        &quot;sub_title&quot; : &quot;The Definitive Guide&quot;,</div><div class=\"line\">        &quot;for&quot;:&quot;all&quot;,</div><div class=\"line\">        &quot;author&quot;:&#123;</div><div class=\"line\">            &quot;firstName&quot;:&quot;cherry&quot;,</div><div class=\"line\">            &quot;lastName&quot;:&quot;Li&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(book.author.firstName,book.author.lastName)</div><div class=\"line\">    console.log(book.main_title)</div><div class=\"line\">    console.log(book.sub_title)</div><div class=\"line\">    console.log(book.for)</div></pre></td></tr></table></figure>\n<ol>\n<li>Object.create<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = Object.create(null)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法</p>\n<blockquote>\n<p>Object.create(proto, [ propertiesObject ])<br>参数</p>\n</blockquote>\n<ul>\n<li>proto<br>一个对象，作为新创建对象的原型。或者为 null。</li>\n<li>propertiesObject<br>可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var myCar = &#123;</div><div class=\"line\">    name:&quot;Fort&quot;,</div><div class=\"line\">    drive:function () &#123;</div><div class=\"line\">        console.log(&quot;I&apos;m driving!&quot;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    panic:function () &#123;</div><div class=\"line\">        console.log(&quot;wait&quot;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var youCar = Object.create(myCar);</div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log(youCar.name)</div><div class=\"line\"></div><div class=\"line\">var vehicle = &#123;</div><div class=\"line\">    getModel:function () &#123;</div><div class=\"line\">        console.log(&quot;The model of this vehicle is..&quot; +this.model)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = Object.create(vehicle,&#123;</div><div class=\"line\">    &quot;id&quot;:&#123;</div><div class=\"line\">        value:&apos;car1&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;model&quot;:&#123;</div><div class=\"line\">        value:&apos;Ford&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>构造函数方式（new）<br>通过new创建对象，new后跟一个函数调用（构造函数）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = new Object();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>其实这三种方式都可以相互转化</p>\n<p>通过字面量方式创建的空对象相当于<code>Object.create(Object.prototype)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">o = Object.create(Object.prototype)</div></pre></td></tr></table></figure></p>\n<p>下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Constructor() &#123;&#125;;</div><div class=\"line\">o = new Constructor();</div><div class=\"line\">o = Object.create(Constructor.prototype)</div></pre></td></tr></table></figure></p>\n<h2 id=\"给对象设置属性和获取属性值\"><a href=\"#给对象设置属性和获取属性值\" class=\"headerlink\" title=\"给对象设置属性和获取属性值\"></a>给对象设置属性和获取属性值</h2><h3 id=\"使用-的方式\"><a href=\"#使用-的方式\" class=\"headerlink\" title=\"使用.的方式\"></a>使用.的方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject.sayHello = &quot;Hello&quot;;</div><div class=\"line\">console.log(newObject.sayHello)</div></pre></td></tr></table></figure>\n<h3 id=\"使用-方式\"><a href=\"#使用-方式\" class=\"headerlink\" title=\"使用[]方式\"></a>使用[]方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject[&apos;sayHello&apos;] = &apos;Hello&apos;;</div><div class=\"line\">console.log(newObject[&apos;sayHello&apos;]);</div></pre></td></tr></table></figure>\n<p>这两种设置属性的区别</p>\n<ul>\n<li>使用保留字作为属性名的时候，必须用方括号</li>\n<li>. 不能修改，因为属性名是标识符</li>\n<li>[]为字符串，可以修改和创建</li>\n</ul>\n<h3 id=\"Object-defineProperty方式\"><a href=\"#Object-defineProperty方式\" class=\"headerlink\" title=\"Object.defineProperty方式\"></a>Object.defineProperty方式</h3><blockquote>\n<p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<p>Object.defineProperty(obj, prop, descriptor)</p>\n<p>obj<br>需要定义属性的对象。<br>prop<br>需定义或修改的属性的名字。<br>descriptor<br>将被定义或修改的属性的描述符。</p>\n</blockquote>\n<h4 id=\"创建属性\"><a href=\"#创建属性\" class=\"headerlink\" title=\"创建属性\"></a>创建属性</h4><p>如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。</p>\n<p>通过<code>.</code> <code>[]</code>设置的属性，可以使用<code>delete</code>删除,通过<code>Object.defineProperty()</code>设置的属性不能被delete删除，使用  <code>Object.defineProperty()</code> 增加的属性值是不可改变的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除对象的属性</div><div class=\"line\">    //通过. []设置的属性，可以使用delete删除</div><div class=\"line\">    function fun() &#123;</div><div class=\"line\">        this.name = &apos;name&apos;;</div><div class=\"line\">        this[&apos;age&apos;] = 12;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var obj = new fun();</div><div class=\"line\">    console.log(obj.name);   //name</div><div class=\"line\">    console.log(obj.age)</div><div class=\"line\">    delete obj.name;</div><div class=\"line\">    delete obj.age;</div><div class=\"line\">    console.log(obj.name);    //undefined</div><div class=\"line\">    console.log(obj.age);</div><div class=\"line\"></div><div class=\"line\">    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。</div><div class=\"line\">    var o = &#123;&#125; //创建一个空对象</div><div class=\"line\">    Object.defineProperty(o,&apos;a&apos;,&#123;    //给o设置一个属性a，值为37</div><div class=\"line\">        value:37,</div><div class=\"line\">        writable:true,</div><div class=\"line\">        configurable:true</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    var bValue ;</div><div class=\"line\">    Object.defineProperty(o,&apos;b&apos;,&#123;</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return bValue</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set:function (newValue) &#123;</div><div class=\"line\">            bValue = newValue;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable:true,</div><div class=\"line\">        configurable:true,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    o.b = 38;</div><div class=\"line\"></div><div class=\"line\">    //数据描述符和存取描述符不能混合使用</div><div class=\"line\">    Object.defineProperty(o,&quot;conflict&quot;,&#123;</div><div class=\"line\">        value:11111,</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return 11111</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改属性\"><a href=\"#修改属性\" class=\"headerlink\" title=\"修改属性\"></a>修改属性</h4><p>如果属性已经存在，<code>Object.defineProperty()</code>将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。</p>\n<h5 id=\"Writable-属性\"><a href=\"#Writable-属性\" class=\"headerlink\" title=\"Writable 属性\"></a>Writable 属性</h5><p>当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;; // 创建一个新对象</div><div class=\"line\"></div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 37,</div><div class=\"line\">                                writable : false &#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // 打印 37</div><div class=\"line\">o.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）</div><div class=\"line\">console.log(o.a); // 打印 37， 赋值不起作用。</div></pre></td></tr></table></figure>\n<h5 id=\"Enumerable-特性\"><a href=\"#Enumerable-特性\" class=\"headerlink\" title=\"Enumerable 特性\"></a>Enumerable 特性</h5><p>属性特性 enumerable 定义了对象的属性是否可以在 for…in 循环和 Object.keys() 中被枚举。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1, enumerable:true &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;b&quot;, &#123; value : 2, enumerable:false &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;c&quot;, &#123; value : 3 &#125;); // enumerable defaults to false</div><div class=\"line\">o.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true</div><div class=\"line\"></div><div class=\"line\">for (var i in o) &#123;    </div><div class=\"line\">  console.log(i);  </div><div class=\"line\">&#125;</div><div class=\"line\">// 打印 &apos;a&apos; 和 &apos;d&apos; (in undefined order)</div><div class=\"line\"></div><div class=\"line\">Object.keys(o); // [&quot;a&quot;, &quot;d&quot;]</div><div class=\"line\"></div><div class=\"line\">o.propertyIsEnumerable(&apos;a&apos;); // true</div><div class=\"line\">o.propertyIsEnumerable(&apos;b&apos;); // false</div><div class=\"line\">o.propertyIsEnumerable(&apos;c&apos;); // false</div></pre></td></tr></table></figure>\n<h5 id=\"Configurable-特性\"><a href=\"#Configurable-特性\" class=\"headerlink\" title=\"Configurable 特性\"></a>Configurable 特性</h5><p>configurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; get : function()&#123;return 1;&#125;, </div><div class=\"line\">                                configurable : false &#125; );</div><div class=\"line\"></div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;configurable : true&#125;); </div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;enumerable : true&#125;); </div><div class=\"line\">// throws a TypeError (set was undefined previously) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;set : function()&#123;&#125;&#125;); </div><div class=\"line\">// throws a TypeError (even though the new get does exactly the same thing) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;get : function()&#123;return 1;&#125;&#125;);</div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;value : 12&#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // logs 1</div><div class=\"line\">delete o.a; // Nothing happens</div><div class=\"line\">console.log(o.a); // logs 1</div></pre></td></tr></table></figure></p>\n<h4 id=\"添加多个属性和默认值\"><a href=\"#添加多个属性和默认值\" class=\"headerlink\" title=\"添加多个属性和默认值\"></a>添加多个属性和默认值</h4><p>考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">o.a = 1;</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : true,</div><div class=\"line\">  configurable : true,</div><div class=\"line\">  enumerable : true</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 另一方面，</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1 &#125;);</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : false,</div><div class=\"line\">  configurable : false,</div><div class=\"line\">  enumerable : false</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Object-defineProperties方式\"><a href=\"#Object-defineProperties方式\" class=\"headerlink\" title=\"Object.defineProperties方式\"></a>Object.defineProperties方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置属性</div><div class=\"line\">Object.defineProperties( newObject, &#123;</div><div class=\"line\"></div><div class=\"line\">  &quot;someKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Hello World&quot;, </div><div class=\"line\">    writable: true </div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  &quot;anotherKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Foo bar&quot;, </div><div class=\"line\">    writable: false </div><div class=\"line\">  &#125; </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的<a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"external\">学习javascript设计模式</a>，本文的所有demo地址见本人的github：<a href=\"https://github.com/sunshine940326/js-object-demo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/js-object-demo</a><br>","more":"</p>\n<p>javascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）</p>\n<p>#定义函数</p>\n<h1 id=\"构造器模式\"><a href=\"#构造器模式\" class=\"headerlink\" title=\"构造器模式\"></a>构造器模式</h1><p>js不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。</p>\n<p>在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。</p>\n<p>对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><p>在js中创建对象有三种基本方式：<br>下面的每一种方式都会创建一个新对象</p>\n<ol>\n<li>对象直接量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var empty = &#123;&#125;;</div><div class=\"line\">    console.log(empty);</div><div class=\"line\">    var point = &#123;</div><div class=\"line\">        x:0,</div><div class=\"line\">        y:1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(point.x,+point.y)</div><div class=\"line\">    var point2 = &#123;</div><div class=\"line\">        x:point.x,</div><div class=\"line\">        y:point.y+1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&quot;point2.x&quot; + &quot;:&quot;+ point2.x + &quot;,&quot;+ &quot;point2.y&quot; +&quot;:&quot;+ point2.y)</div><div class=\"line\"></div><div class=\"line\">    var book = &#123;</div><div class=\"line\">        &quot;main_title&quot;:&quot;javascript&quot;,</div><div class=\"line\">        &quot;sub_title&quot; : &quot;The Definitive Guide&quot;,</div><div class=\"line\">        &quot;for&quot;:&quot;all&quot;,</div><div class=\"line\">        &quot;author&quot;:&#123;</div><div class=\"line\">            &quot;firstName&quot;:&quot;cherry&quot;,</div><div class=\"line\">            &quot;lastName&quot;:&quot;Li&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(book.author.firstName,book.author.lastName)</div><div class=\"line\">    console.log(book.main_title)</div><div class=\"line\">    console.log(book.sub_title)</div><div class=\"line\">    console.log(book.for)</div></pre></td></tr></table></figure>\n<ol>\n<li>Object.create<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = Object.create(null)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法</p>\n<blockquote>\n<p>Object.create(proto, [ propertiesObject ])<br>参数</p>\n</blockquote>\n<ul>\n<li>proto<br>一个对象，作为新创建对象的原型。或者为 null。</li>\n<li>propertiesObject<br>可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var myCar = &#123;</div><div class=\"line\">    name:&quot;Fort&quot;,</div><div class=\"line\">    drive:function () &#123;</div><div class=\"line\">        console.log(&quot;I&apos;m driving!&quot;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    panic:function () &#123;</div><div class=\"line\">        console.log(&quot;wait&quot;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var youCar = Object.create(myCar);</div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log(youCar.name)</div><div class=\"line\"></div><div class=\"line\">var vehicle = &#123;</div><div class=\"line\">    getModel:function () &#123;</div><div class=\"line\">        console.log(&quot;The model of this vehicle is..&quot; +this.model)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = Object.create(vehicle,&#123;</div><div class=\"line\">    &quot;id&quot;:&#123;</div><div class=\"line\">        value:&apos;car1&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;model&quot;:&#123;</div><div class=\"line\">        value:&apos;Ford&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>构造函数方式（new）<br>通过new创建对象，new后跟一个函数调用（构造函数）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = new Object();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>其实这三种方式都可以相互转化</p>\n<p>通过字面量方式创建的空对象相当于<code>Object.create(Object.prototype)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">o = Object.create(Object.prototype)</div></pre></td></tr></table></figure></p>\n<p>下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Constructor() &#123;&#125;;</div><div class=\"line\">o = new Constructor();</div><div class=\"line\">o = Object.create(Constructor.prototype)</div></pre></td></tr></table></figure></p>\n<h2 id=\"给对象设置属性和获取属性值\"><a href=\"#给对象设置属性和获取属性值\" class=\"headerlink\" title=\"给对象设置属性和获取属性值\"></a>给对象设置属性和获取属性值</h2><h3 id=\"使用-的方式\"><a href=\"#使用-的方式\" class=\"headerlink\" title=\"使用.的方式\"></a>使用.的方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject.sayHello = &quot;Hello&quot;;</div><div class=\"line\">console.log(newObject.sayHello)</div></pre></td></tr></table></figure>\n<h3 id=\"使用-方式\"><a href=\"#使用-方式\" class=\"headerlink\" title=\"使用[]方式\"></a>使用[]方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject[&apos;sayHello&apos;] = &apos;Hello&apos;;</div><div class=\"line\">console.log(newObject[&apos;sayHello&apos;]);</div></pre></td></tr></table></figure>\n<p>这两种设置属性的区别</p>\n<ul>\n<li>使用保留字作为属性名的时候，必须用方括号</li>\n<li>. 不能修改，因为属性名是标识符</li>\n<li>[]为字符串，可以修改和创建</li>\n</ul>\n<h3 id=\"Object-defineProperty方式\"><a href=\"#Object-defineProperty方式\" class=\"headerlink\" title=\"Object.defineProperty方式\"></a>Object.defineProperty方式</h3><blockquote>\n<p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<p>Object.defineProperty(obj, prop, descriptor)</p>\n<p>obj<br>需要定义属性的对象。<br>prop<br>需定义或修改的属性的名字。<br>descriptor<br>将被定义或修改的属性的描述符。</p>\n</blockquote>\n<h4 id=\"创建属性\"><a href=\"#创建属性\" class=\"headerlink\" title=\"创建属性\"></a>创建属性</h4><p>如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。</p>\n<p>通过<code>.</code> <code>[]</code>设置的属性，可以使用<code>delete</code>删除,通过<code>Object.defineProperty()</code>设置的属性不能被delete删除，使用  <code>Object.defineProperty()</code> 增加的属性值是不可改变的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除对象的属性</div><div class=\"line\">    //通过. []设置的属性，可以使用delete删除</div><div class=\"line\">    function fun() &#123;</div><div class=\"line\">        this.name = &apos;name&apos;;</div><div class=\"line\">        this[&apos;age&apos;] = 12;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var obj = new fun();</div><div class=\"line\">    console.log(obj.name);   //name</div><div class=\"line\">    console.log(obj.age)</div><div class=\"line\">    delete obj.name;</div><div class=\"line\">    delete obj.age;</div><div class=\"line\">    console.log(obj.name);    //undefined</div><div class=\"line\">    console.log(obj.age);</div><div class=\"line\"></div><div class=\"line\">    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。</div><div class=\"line\">    var o = &#123;&#125; //创建一个空对象</div><div class=\"line\">    Object.defineProperty(o,&apos;a&apos;,&#123;    //给o设置一个属性a，值为37</div><div class=\"line\">        value:37,</div><div class=\"line\">        writable:true,</div><div class=\"line\">        configurable:true</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    var bValue ;</div><div class=\"line\">    Object.defineProperty(o,&apos;b&apos;,&#123;</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return bValue</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set:function (newValue) &#123;</div><div class=\"line\">            bValue = newValue;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable:true,</div><div class=\"line\">        configurable:true,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    o.b = 38;</div><div class=\"line\"></div><div class=\"line\">    //数据描述符和存取描述符不能混合使用</div><div class=\"line\">    Object.defineProperty(o,&quot;conflict&quot;,&#123;</div><div class=\"line\">        value:11111,</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return 11111</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改属性\"><a href=\"#修改属性\" class=\"headerlink\" title=\"修改属性\"></a>修改属性</h4><p>如果属性已经存在，<code>Object.defineProperty()</code>将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。</p>\n<h5 id=\"Writable-属性\"><a href=\"#Writable-属性\" class=\"headerlink\" title=\"Writable 属性\"></a>Writable 属性</h5><p>当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;; // 创建一个新对象</div><div class=\"line\"></div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 37,</div><div class=\"line\">                                writable : false &#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // 打印 37</div><div class=\"line\">o.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）</div><div class=\"line\">console.log(o.a); // 打印 37， 赋值不起作用。</div></pre></td></tr></table></figure>\n<h5 id=\"Enumerable-特性\"><a href=\"#Enumerable-特性\" class=\"headerlink\" title=\"Enumerable 特性\"></a>Enumerable 特性</h5><p>属性特性 enumerable 定义了对象的属性是否可以在 for…in 循环和 Object.keys() 中被枚举。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1, enumerable:true &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;b&quot;, &#123; value : 2, enumerable:false &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;c&quot;, &#123; value : 3 &#125;); // enumerable defaults to false</div><div class=\"line\">o.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true</div><div class=\"line\"></div><div class=\"line\">for (var i in o) &#123;    </div><div class=\"line\">  console.log(i);  </div><div class=\"line\">&#125;</div><div class=\"line\">// 打印 &apos;a&apos; 和 &apos;d&apos; (in undefined order)</div><div class=\"line\"></div><div class=\"line\">Object.keys(o); // [&quot;a&quot;, &quot;d&quot;]</div><div class=\"line\"></div><div class=\"line\">o.propertyIsEnumerable(&apos;a&apos;); // true</div><div class=\"line\">o.propertyIsEnumerable(&apos;b&apos;); // false</div><div class=\"line\">o.propertyIsEnumerable(&apos;c&apos;); // false</div></pre></td></tr></table></figure>\n<h5 id=\"Configurable-特性\"><a href=\"#Configurable-特性\" class=\"headerlink\" title=\"Configurable 特性\"></a>Configurable 特性</h5><p>configurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; get : function()&#123;return 1;&#125;, </div><div class=\"line\">                                configurable : false &#125; );</div><div class=\"line\"></div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;configurable : true&#125;); </div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;enumerable : true&#125;); </div><div class=\"line\">// throws a TypeError (set was undefined previously) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;set : function()&#123;&#125;&#125;); </div><div class=\"line\">// throws a TypeError (even though the new get does exactly the same thing) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;get : function()&#123;return 1;&#125;&#125;);</div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;value : 12&#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // logs 1</div><div class=\"line\">delete o.a; // Nothing happens</div><div class=\"line\">console.log(o.a); // logs 1</div></pre></td></tr></table></figure></p>\n<h4 id=\"添加多个属性和默认值\"><a href=\"#添加多个属性和默认值\" class=\"headerlink\" title=\"添加多个属性和默认值\"></a>添加多个属性和默认值</h4><p>考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">o.a = 1;</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : true,</div><div class=\"line\">  configurable : true,</div><div class=\"line\">  enumerable : true</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 另一方面，</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1 &#125;);</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : false,</div><div class=\"line\">  configurable : false,</div><div class=\"line\">  enumerable : false</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Object-defineProperties方式\"><a href=\"#Object-defineProperties方式\" class=\"headerlink\" title=\"Object.defineProperties方式\"></a>Object.defineProperties方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置属性</div><div class=\"line\">Object.defineProperties( newObject, &#123;</div><div class=\"line\"></div><div class=\"line\">  &quot;someKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Hello World&quot;, </div><div class=\"line\">    writable: true </div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  &quot;anotherKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Foo bar&quot;, </div><div class=\"line\">    writable: false </div><div class=\"line\">  &#125; </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"javascript设计模式（二）：模块化模式","date":"2017-03-24T15:09:08.000Z","_content":"\n在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量\n<!--more-->\n# 模块化模式\n所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法\n\n通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量\n\n模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。\n\n这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数\n\n## 闭包实现模块模式基础版\n下面就是一个最简单的用闭包实现模块模式的栗子~\n```\nvar testModule = (function(){\n    var counter = 0;\n    \n    return{\n        incrementCounter:function(){\n            return counter++;\n        }\n        resetCounter:function(){\n            console.log(\"counter value prior to reset:\"+counter);\n            counter = 0;\n        }\n    }\n})();\n\n//use\n\ntestModule.incrementCounter();\n\ntestModule.resetCounter();\n```\n这个栗子中，在函数体内定义的变量`counter`就是一个“私有变量”，在函数外部是不能直接访问到的。在`return`中给我们提供了这个函数的两个`public`方法：`incrementCounter()`和`resetCounter()`。我们想要使用这个函数的功能就直接调用`testModule.incrementCounter();`就可以了\n\n## 包含命名空间、公有变量和私有变量\n下面是一个包含了命名空间、公有变量和私有变量的一个栗子~\n```\nvar myNamespace = (function(){\n    var myPrivateVar,myPrivateMethod\n\n    myPrivateVar = 0;\n    \n    myPrivateMethod = function(foo){\n        console.log(foo)\n    }\n    \n    return{\n        myPublicVar:\"foo\",\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            \n            myPrivateMethod(bar)\n        }\n    }\n})()\n```\n\n## 升级版使用模块模式实现购物车\n```\nvar basketModule = (function () {\n\n  // privates\n\n  var basket = [];\n\n  function doSomethingPrivate() {\n    //...\n  }\n\n  function doSomethingElsePrivate() {\n    //...\n  }\n\n  // Return an object exposed to the public\n  return {\n\n    // Add items to our basket\n    addItem: function( values ) {\n      basket.push(values);\n    },\n\n    // Get the count of items in the basket\n    getItemCount: function () {\n      return basket.length;\n    },\n\n    // Public alias to a  private function\n    doSomething: doSomethingPrivate,\n\n    // Get the total value of items in the basket\n    getTotal: function () {\n\n      var q = this.getItemCount(),\n          p = 0;\n\n      while (q--) {\n        p += basket[q].price;\n      }\n\n      return p;\n    }\n  };\n}());\n```\n在这个栗子中，这个模块完全自包含在`basketModule`这个模块中，其中的`basket`数组是私有的，在外部访问不到，我们需要访问`basketModule`中return的方法使用对应的功能，使用方法如下\n```\n// basketModule returns an object with a public API we can use\n\nbasketModule.addItem({\n  item: \"bread\",\n  price: 0.5\n});\n\nbasketModule.addItem({\n  item: \"butter\",\n  price: 0.3\n});\n\n// Outputs: 2\nconsole.log( basketModule.getItemCount() );\n\n// Outputs: 0.8\nconsole.log( basketModule.getTotal() );\n\n// However, the following will not work:\n\n// Outputs: undefined\n// This is because the basket itself is not exposed as a part of our\n// the public API\nconsole.log( basketModule.basket );\n\n// This also won't work as it only exists within the scope of our\n// basketModule closure, but not the returned public object\nconsole.log( basket );\n```\n\n","source":"_posts/JavaScript-Design-Pattern2modular-mode.md","raw":"---\ntitle: javascript设计模式（二）：模块化模式\ndate: 2017-03-24 23:09:08\ntags: [js,js设计模式] \ncategories: js\n---\n\n在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量\n<!--more-->\n# 模块化模式\n所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法\n\n通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量\n\n模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。\n\n这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数\n\n## 闭包实现模块模式基础版\n下面就是一个最简单的用闭包实现模块模式的栗子~\n```\nvar testModule = (function(){\n    var counter = 0;\n    \n    return{\n        incrementCounter:function(){\n            return counter++;\n        }\n        resetCounter:function(){\n            console.log(\"counter value prior to reset:\"+counter);\n            counter = 0;\n        }\n    }\n})();\n\n//use\n\ntestModule.incrementCounter();\n\ntestModule.resetCounter();\n```\n这个栗子中，在函数体内定义的变量`counter`就是一个“私有变量”，在函数外部是不能直接访问到的。在`return`中给我们提供了这个函数的两个`public`方法：`incrementCounter()`和`resetCounter()`。我们想要使用这个函数的功能就直接调用`testModule.incrementCounter();`就可以了\n\n## 包含命名空间、公有变量和私有变量\n下面是一个包含了命名空间、公有变量和私有变量的一个栗子~\n```\nvar myNamespace = (function(){\n    var myPrivateVar,myPrivateMethod\n\n    myPrivateVar = 0;\n    \n    myPrivateMethod = function(foo){\n        console.log(foo)\n    }\n    \n    return{\n        myPublicVar:\"foo\",\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            \n            myPrivateMethod(bar)\n        }\n    }\n})()\n```\n\n## 升级版使用模块模式实现购物车\n```\nvar basketModule = (function () {\n\n  // privates\n\n  var basket = [];\n\n  function doSomethingPrivate() {\n    //...\n  }\n\n  function doSomethingElsePrivate() {\n    //...\n  }\n\n  // Return an object exposed to the public\n  return {\n\n    // Add items to our basket\n    addItem: function( values ) {\n      basket.push(values);\n    },\n\n    // Get the count of items in the basket\n    getItemCount: function () {\n      return basket.length;\n    },\n\n    // Public alias to a  private function\n    doSomething: doSomethingPrivate,\n\n    // Get the total value of items in the basket\n    getTotal: function () {\n\n      var q = this.getItemCount(),\n          p = 0;\n\n      while (q--) {\n        p += basket[q].price;\n      }\n\n      return p;\n    }\n  };\n}());\n```\n在这个栗子中，这个模块完全自包含在`basketModule`这个模块中，其中的`basket`数组是私有的，在外部访问不到，我们需要访问`basketModule`中return的方法使用对应的功能，使用方法如下\n```\n// basketModule returns an object with a public API we can use\n\nbasketModule.addItem({\n  item: \"bread\",\n  price: 0.5\n});\n\nbasketModule.addItem({\n  item: \"butter\",\n  price: 0.3\n});\n\n// Outputs: 2\nconsole.log( basketModule.getItemCount() );\n\n// Outputs: 0.8\nconsole.log( basketModule.getTotal() );\n\n// However, the following will not work:\n\n// Outputs: undefined\n// This is because the basket itself is not exposed as a part of our\n// the public API\nconsole.log( basketModule.basket );\n\n// This also won't work as it only exists within the scope of our\n// basketModule closure, but not the returned public object\nconsole.log( basket );\n```\n\n","slug":"JavaScript-Design-Pattern2modular-mode","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zw4000uvvxijtie5gxe","content":"<p>在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量<br><a id=\"more\"></a></p>\n<h1 id=\"模块化模式\"><a href=\"#模块化模式\" class=\"headerlink\" title=\"模块化模式\"></a>模块化模式</h1><p>所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法</p>\n<p>通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量</p>\n<p>模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。</p>\n<p>这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数</p>\n<h2 id=\"闭包实现模块模式基础版\"><a href=\"#闭包实现模块模式基础版\" class=\"headerlink\" title=\"闭包实现模块模式基础版\"></a>闭包实现模块模式基础版</h2><p>下面就是一个最简单的用闭包实现模块模式的栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var testModule = (function()&#123;</div><div class=\"line\">    var counter = 0;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        incrementCounter:function()&#123;</div><div class=\"line\">            return counter++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        resetCounter:function()&#123;</div><div class=\"line\">            console.log(&quot;counter value prior to reset:&quot;+counter);</div><div class=\"line\">            counter = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">//use</div><div class=\"line\"></div><div class=\"line\">testModule.incrementCounter();</div><div class=\"line\"></div><div class=\"line\">testModule.resetCounter();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，在函数体内定义的变量<code>counter</code>就是一个“私有变量”，在函数外部是不能直接访问到的。在<code>return</code>中给我们提供了这个函数的两个<code>public</code>方法：<code>incrementCounter()</code>和<code>resetCounter()</code>。我们想要使用这个函数的功能就直接调用<code>testModule.incrementCounter();</code>就可以了</p>\n<h2 id=\"包含命名空间、公有变量和私有变量\"><a href=\"#包含命名空间、公有变量和私有变量\" class=\"headerlink\" title=\"包含命名空间、公有变量和私有变量\"></a>包含命名空间、公有变量和私有变量</h2><p>下面是一个包含了命名空间、公有变量和私有变量的一个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myNamespace = (function()&#123;</div><div class=\"line\">    var myPrivateVar,myPrivateMethod</div><div class=\"line\"></div><div class=\"line\">    myPrivateVar = 0;</div><div class=\"line\">    </div><div class=\"line\">    myPrivateMethod = function(foo)&#123;</div><div class=\"line\">        console.log(foo)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        myPublicVar:&quot;foo&quot;,</div><div class=\"line\">        myPublicFunction:function(bar)&#123;</div><div class=\"line\">            myPrivateVar++;</div><div class=\"line\">            </div><div class=\"line\">            myPrivateMethod(bar)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<h2 id=\"升级版使用模块模式实现购物车\"><a href=\"#升级版使用模块模式实现购物车\" class=\"headerlink\" title=\"升级版使用模块模式实现购物车\"></a>升级版使用模块模式实现购物车</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">var basketModule = (function () &#123;</div><div class=\"line\"></div><div class=\"line\">  // privates</div><div class=\"line\"></div><div class=\"line\">  var basket = [];</div><div class=\"line\"></div><div class=\"line\">  function doSomethingPrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function doSomethingElsePrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Return an object exposed to the public</div><div class=\"line\">  return &#123;</div><div class=\"line\"></div><div class=\"line\">    // Add items to our basket</div><div class=\"line\">    addItem: function( values ) &#123;</div><div class=\"line\">      basket.push(values);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Get the count of items in the basket</div><div class=\"line\">    getItemCount: function () &#123;</div><div class=\"line\">      return basket.length;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Public alias to a  private function</div><div class=\"line\">    doSomething: doSomethingPrivate,</div><div class=\"line\"></div><div class=\"line\">    // Get the total value of items in the basket</div><div class=\"line\">    getTotal: function () &#123;</div><div class=\"line\"></div><div class=\"line\">      var q = this.getItemCount(),</div><div class=\"line\">          p = 0;</div><div class=\"line\"></div><div class=\"line\">      while (q--) &#123;</div><div class=\"line\">        p += basket[q].price;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      return p;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>在这个栗子中，这个模块完全自包含在<code>basketModule</code>这个模块中，其中的<code>basket</code>数组是私有的，在外部访问不到，我们需要访问<code>basketModule</code>中return的方法使用对应的功能，使用方法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// basketModule returns an object with a public API we can use</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;bread&quot;,</div><div class=\"line\">  price: 0.5</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;butter&quot;,</div><div class=\"line\">  price: 0.3</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Outputs: 2</div><div class=\"line\">console.log( basketModule.getItemCount() );</div><div class=\"line\"></div><div class=\"line\">// Outputs: 0.8</div><div class=\"line\">console.log( basketModule.getTotal() );</div><div class=\"line\"></div><div class=\"line\">// However, the following will not work:</div><div class=\"line\"></div><div class=\"line\">// Outputs: undefined</div><div class=\"line\">// This is because the basket itself is not exposed as a part of our</div><div class=\"line\">// the public API</div><div class=\"line\">console.log( basketModule.basket );</div><div class=\"line\"></div><div class=\"line\">// This also won&apos;t work as it only exists within the scope of our</div><div class=\"line\">// basketModule closure, but not the returned public object</div><div class=\"line\">console.log( basket );</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量<br>","more":"</p>\n<h1 id=\"模块化模式\"><a href=\"#模块化模式\" class=\"headerlink\" title=\"模块化模式\"></a>模块化模式</h1><p>所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法</p>\n<p>通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量</p>\n<p>模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。</p>\n<p>这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数</p>\n<h2 id=\"闭包实现模块模式基础版\"><a href=\"#闭包实现模块模式基础版\" class=\"headerlink\" title=\"闭包实现模块模式基础版\"></a>闭包实现模块模式基础版</h2><p>下面就是一个最简单的用闭包实现模块模式的栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var testModule = (function()&#123;</div><div class=\"line\">    var counter = 0;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        incrementCounter:function()&#123;</div><div class=\"line\">            return counter++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        resetCounter:function()&#123;</div><div class=\"line\">            console.log(&quot;counter value prior to reset:&quot;+counter);</div><div class=\"line\">            counter = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">//use</div><div class=\"line\"></div><div class=\"line\">testModule.incrementCounter();</div><div class=\"line\"></div><div class=\"line\">testModule.resetCounter();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，在函数体内定义的变量<code>counter</code>就是一个“私有变量”，在函数外部是不能直接访问到的。在<code>return</code>中给我们提供了这个函数的两个<code>public</code>方法：<code>incrementCounter()</code>和<code>resetCounter()</code>。我们想要使用这个函数的功能就直接调用<code>testModule.incrementCounter();</code>就可以了</p>\n<h2 id=\"包含命名空间、公有变量和私有变量\"><a href=\"#包含命名空间、公有变量和私有变量\" class=\"headerlink\" title=\"包含命名空间、公有变量和私有变量\"></a>包含命名空间、公有变量和私有变量</h2><p>下面是一个包含了命名空间、公有变量和私有变量的一个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myNamespace = (function()&#123;</div><div class=\"line\">    var myPrivateVar,myPrivateMethod</div><div class=\"line\"></div><div class=\"line\">    myPrivateVar = 0;</div><div class=\"line\">    </div><div class=\"line\">    myPrivateMethod = function(foo)&#123;</div><div class=\"line\">        console.log(foo)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        myPublicVar:&quot;foo&quot;,</div><div class=\"line\">        myPublicFunction:function(bar)&#123;</div><div class=\"line\">            myPrivateVar++;</div><div class=\"line\">            </div><div class=\"line\">            myPrivateMethod(bar)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<h2 id=\"升级版使用模块模式实现购物车\"><a href=\"#升级版使用模块模式实现购物车\" class=\"headerlink\" title=\"升级版使用模块模式实现购物车\"></a>升级版使用模块模式实现购物车</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">var basketModule = (function () &#123;</div><div class=\"line\"></div><div class=\"line\">  // privates</div><div class=\"line\"></div><div class=\"line\">  var basket = [];</div><div class=\"line\"></div><div class=\"line\">  function doSomethingPrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function doSomethingElsePrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Return an object exposed to the public</div><div class=\"line\">  return &#123;</div><div class=\"line\"></div><div class=\"line\">    // Add items to our basket</div><div class=\"line\">    addItem: function( values ) &#123;</div><div class=\"line\">      basket.push(values);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Get the count of items in the basket</div><div class=\"line\">    getItemCount: function () &#123;</div><div class=\"line\">      return basket.length;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Public alias to a  private function</div><div class=\"line\">    doSomething: doSomethingPrivate,</div><div class=\"line\"></div><div class=\"line\">    // Get the total value of items in the basket</div><div class=\"line\">    getTotal: function () &#123;</div><div class=\"line\"></div><div class=\"line\">      var q = this.getItemCount(),</div><div class=\"line\">          p = 0;</div><div class=\"line\"></div><div class=\"line\">      while (q--) &#123;</div><div class=\"line\">        p += basket[q].price;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      return p;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>在这个栗子中，这个模块完全自包含在<code>basketModule</code>这个模块中，其中的<code>basket</code>数组是私有的，在外部访问不到，我们需要访问<code>basketModule</code>中return的方法使用对应的功能，使用方法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// basketModule returns an object with a public API we can use</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;bread&quot;,</div><div class=\"line\">  price: 0.5</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;butter&quot;,</div><div class=\"line\">  price: 0.3</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Outputs: 2</div><div class=\"line\">console.log( basketModule.getItemCount() );</div><div class=\"line\"></div><div class=\"line\">// Outputs: 0.8</div><div class=\"line\">console.log( basketModule.getTotal() );</div><div class=\"line\"></div><div class=\"line\">// However, the following will not work:</div><div class=\"line\"></div><div class=\"line\">// Outputs: undefined</div><div class=\"line\">// This is because the basket itself is not exposed as a part of our</div><div class=\"line\">// the public API</div><div class=\"line\">console.log( basketModule.basket );</div><div class=\"line\"></div><div class=\"line\">// This also won&apos;t work as it only exists within the scope of our</div><div class=\"line\">// basketModule closure, but not the returned public object</div><div class=\"line\">console.log( basket );</div></pre></td></tr></table></figure></p>"},{"layout":"w","title":"javascript设计模式（四）：工厂模式","date":"2017-03-26T14:01:41.000Z","_content":"\n我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。\n<!--more-->\n## 使用工厂模式\n下面通过使用构造器模式逻辑来定义一个汽车。\n```\n// Types.js - Constructors used behind the scenes\n\n// A constructor for defining new cars\nfunction Car( options ) {\n\n  // some defaults\n  this.doors = options.doors || 4;\n  this.state = options.state || \"brand new\";\n  this.color = options.color || \"silver\";\n\n}\n\n// A constructor for defining new trucks\nfunction Truck( options){\n\n  this.state = options.state || \"used\";\n  this.wheelSize = options.wheelSize || \"large\";\n  this.color = options.color || \"blue\";\n}\n\n// FactoryExample.js\n\n// Define a skeleton vehicle factory\nfunction VehicleFactory() {}\n\n// Define the prototypes and utilities for this factory\n\n// Our default vehicleClass is Car\nVehicleFactory.prototype.vehicleClass = Car;\n\n// Our Factory method for creating new Vehicle instances\nVehicleFactory.prototype.createVehicle = function ( options ) {\n\n  if( options.vehicleType === \"car\" ){\n    this.vehicleClass = Car;\n  }else{\n    this.vehicleClass = Truck;\n  }\n\n  return new this.vehicleClass( options );\n\n};\n\n// Create an instance of our factory that makes cars\nvar carFactory = new VehicleFactory();\nvar car = carFactory.createVehicle( {\n            vehicleType: \"car\",\n            color: \"yellow\",\n            doors: 6 } );\n\n// Test to confirm our car was created using the vehicleClass/prototype Car\n\n// Outputs: true\nconsole.log( car instanceof Car );\n\n// Outputs: Car object of color \"yellow\", doors: 6 in a \"brand new\" state\nconsole.log( car );\n```\n在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法\n\n然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，","source":"_posts/JavaScript-Design-Pattern4factory-mode.md","raw":"layout: w\ntitle: javascript设计模式（四）：工厂模式\ndate: 2017-03-26 22:01:41\ntags: [js,js设计模式] \ncategories: js\n---\n\n我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。\n<!--more-->\n## 使用工厂模式\n下面通过使用构造器模式逻辑来定义一个汽车。\n```\n// Types.js - Constructors used behind the scenes\n\n// A constructor for defining new cars\nfunction Car( options ) {\n\n  // some defaults\n  this.doors = options.doors || 4;\n  this.state = options.state || \"brand new\";\n  this.color = options.color || \"silver\";\n\n}\n\n// A constructor for defining new trucks\nfunction Truck( options){\n\n  this.state = options.state || \"used\";\n  this.wheelSize = options.wheelSize || \"large\";\n  this.color = options.color || \"blue\";\n}\n\n// FactoryExample.js\n\n// Define a skeleton vehicle factory\nfunction VehicleFactory() {}\n\n// Define the prototypes and utilities for this factory\n\n// Our default vehicleClass is Car\nVehicleFactory.prototype.vehicleClass = Car;\n\n// Our Factory method for creating new Vehicle instances\nVehicleFactory.prototype.createVehicle = function ( options ) {\n\n  if( options.vehicleType === \"car\" ){\n    this.vehicleClass = Car;\n  }else{\n    this.vehicleClass = Truck;\n  }\n\n  return new this.vehicleClass( options );\n\n};\n\n// Create an instance of our factory that makes cars\nvar carFactory = new VehicleFactory();\nvar car = carFactory.createVehicle( {\n            vehicleType: \"car\",\n            color: \"yellow\",\n            doors: 6 } );\n\n// Test to confirm our car was created using the vehicleClass/prototype Car\n\n// Outputs: true\nconsole.log( car instanceof Car );\n\n// Outputs: Car object of color \"yellow\", doors: 6 in a \"brand new\" state\nconsole.log( car );\n```\n在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法\n\n然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，","slug":"JavaScript-Design-Pattern4factory-mode","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"photos":[],"link":"","_id":"cj63j7zw7000yvvxilr2h9yld","content":"<p>我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。<br><a id=\"more\"></a></p>\n<h2 id=\"使用工厂模式\"><a href=\"#使用工厂模式\" class=\"headerlink\" title=\"使用工厂模式\"></a>使用工厂模式</h2><p>下面通过使用构造器模式逻辑来定义一个汽车。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Types.js - Constructors used behind the scenes</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new cars</div><div class=\"line\">function Car( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  // some defaults</div><div class=\"line\">  this.doors = options.doors || 4;</div><div class=\"line\">  this.state = options.state || &quot;brand new&quot;;</div><div class=\"line\">  this.color = options.color || &quot;silver&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new trucks</div><div class=\"line\">function Truck( options)&#123;</div><div class=\"line\"></div><div class=\"line\">  this.state = options.state || &quot;used&quot;;</div><div class=\"line\">  this.wheelSize = options.wheelSize || &quot;large&quot;;</div><div class=\"line\">  this.color = options.color || &quot;blue&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// FactoryExample.js</div><div class=\"line\"></div><div class=\"line\">// Define a skeleton vehicle factory</div><div class=\"line\">function VehicleFactory() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// Define the prototypes and utilities for this factory</div><div class=\"line\"></div><div class=\"line\">// Our default vehicleClass is Car</div><div class=\"line\">VehicleFactory.prototype.vehicleClass = Car;</div><div class=\"line\"></div><div class=\"line\">// Our Factory method for creating new Vehicle instances</div><div class=\"line\">VehicleFactory.prototype.createVehicle = function ( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  if( options.vehicleType === &quot;car&quot; )&#123;</div><div class=\"line\">    this.vehicleClass = Car;</div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\">    this.vehicleClass = Truck;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return new this.vehicleClass( options );</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Create an instance of our factory that makes cars</div><div class=\"line\">var carFactory = new VehicleFactory();</div><div class=\"line\">var car = carFactory.createVehicle( &#123;</div><div class=\"line\">            vehicleType: &quot;car&quot;,</div><div class=\"line\">            color: &quot;yellow&quot;,</div><div class=\"line\">            doors: 6 &#125; );</div><div class=\"line\"></div><div class=\"line\">// Test to confirm our car was created using the vehicleClass/prototype Car</div><div class=\"line\"></div><div class=\"line\">// Outputs: true</div><div class=\"line\">console.log( car instanceof Car );</div><div class=\"line\"></div><div class=\"line\">// Outputs: Car object of color &quot;yellow&quot;, doors: 6 in a &quot;brand new&quot; state</div><div class=\"line\">console.log( car );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法</p>\n<p>然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，</p>\n","site":{"data":{}},"excerpt":"<p>我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。<br>","more":"</p>\n<h2 id=\"使用工厂模式\"><a href=\"#使用工厂模式\" class=\"headerlink\" title=\"使用工厂模式\"></a>使用工厂模式</h2><p>下面通过使用构造器模式逻辑来定义一个汽车。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Types.js - Constructors used behind the scenes</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new cars</div><div class=\"line\">function Car( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  // some defaults</div><div class=\"line\">  this.doors = options.doors || 4;</div><div class=\"line\">  this.state = options.state || &quot;brand new&quot;;</div><div class=\"line\">  this.color = options.color || &quot;silver&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new trucks</div><div class=\"line\">function Truck( options)&#123;</div><div class=\"line\"></div><div class=\"line\">  this.state = options.state || &quot;used&quot;;</div><div class=\"line\">  this.wheelSize = options.wheelSize || &quot;large&quot;;</div><div class=\"line\">  this.color = options.color || &quot;blue&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// FactoryExample.js</div><div class=\"line\"></div><div class=\"line\">// Define a skeleton vehicle factory</div><div class=\"line\">function VehicleFactory() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// Define the prototypes and utilities for this factory</div><div class=\"line\"></div><div class=\"line\">// Our default vehicleClass is Car</div><div class=\"line\">VehicleFactory.prototype.vehicleClass = Car;</div><div class=\"line\"></div><div class=\"line\">// Our Factory method for creating new Vehicle instances</div><div class=\"line\">VehicleFactory.prototype.createVehicle = function ( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  if( options.vehicleType === &quot;car&quot; )&#123;</div><div class=\"line\">    this.vehicleClass = Car;</div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\">    this.vehicleClass = Truck;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return new this.vehicleClass( options );</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Create an instance of our factory that makes cars</div><div class=\"line\">var carFactory = new VehicleFactory();</div><div class=\"line\">var car = carFactory.createVehicle( &#123;</div><div class=\"line\">            vehicleType: &quot;car&quot;,</div><div class=\"line\">            color: &quot;yellow&quot;,</div><div class=\"line\">            doors: 6 &#125; );</div><div class=\"line\"></div><div class=\"line\">// Test to confirm our car was created using the vehicleClass/prototype Car</div><div class=\"line\"></div><div class=\"line\">// Outputs: true</div><div class=\"line\">console.log( car instanceof Car );</div><div class=\"line\"></div><div class=\"line\">// Outputs: Car object of color &quot;yellow&quot;, doors: 6 in a &quot;brand new&quot; state</div><div class=\"line\">console.log( car );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法</p>\n<p>然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，</p>"},{"title":"javascript设计模式（三）：原型模式","date":"2017-03-25T15:05:28.000Z","_content":"原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用`Object.create(prototype)`方法或者是使用字面量的方式创建对象\n<!--more-->\n# 原型模式\n\n原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力--原型链，使用原型链来实现继承。\n\n我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性\n\n##　使用`Object.create(prototype)`方法\n举个栗子~\n```\nvar myCar = {\n\n  name: \"Ford Escort\",\n\n  drive: function () {\n    console.log( \"Weeee. I'm driving!\" );\n  },\n\n  panic: function () {\n    console.log( \"Wait. How do you stop this thing?\" );\n  }\n\n};\n\n// Use Object.create to instantiate a new car\nvar yourCar = Object.create( myCar );\n\n// Now we can see that one is a prototype of the other\nconsole.log( yourCar.name );\n```\n在这个例子中，我们定义了一个作为原型的对象`myCar`，这个对象中有两个属性`name`和`drive`，然后用`Object.create()`方法来创建了一个拥有`myCar`原型的对象`yourCar`，这样新创建的`yourCar`就继承了`myCar`中的属性和方法，我们可以直接调用\n\n当然，`Object.create()`方法也可以传入第二个参数(第一个参数是要继承的原型)`Object.create(prototype,optionalDescriptorObject))。`第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对\n\n## 使用面向字面量方法创建\n如果不希望在不直接使用`Object.create`的前提下实现原型链，我们可以模拟原型链实现继承\n```\nvar vehiclePrototype = {\n\n  init: function ( carModel ) {\n    this.model = carModel;\n  },\n\n  getModel: function () {\n    console.log( \"The model of this vehicle is..\" + this.model);\n  }\n};\n\nfunction vehicle( model ) {\n\n  function F() {};\n  \n  var f = new F();\n\n  f.init( model );\n  return f;\n\n}\n\nvar car = vehicle( \"Ford Escort\" );\ncar.getModel();\n```\n这个栗子中，对象`vehiclePrototype`中有两个方法`init`和`getModel`,然后`vehicle`继承了`vehiclePrototype`，继承的方法是先创建一个空函数`F`然后`F`的`prototype`属性指向`vehiclePrototype`，然后创建`F`类的一个实例`f`,`f`使用了`vehiclePrototype`的`init`方法，最后返回`f`,所以`vehicle`函数内部就完成了对`vehiclePrototype`的继承，最后将对象`f`返回.\n\n**其实`var f = new F();`就相当于`f = Object.create(F.prototype);`**\n\n```\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n```\n\n","source":"_posts/JavaScript-Design-Pattern3prototype-model.md","raw":"---\ntitle: javascript设计模式（三）：原型模式\ndate: 2017-03-25 23:05:28\ntags: [js,js设计模式] \ncategories: js\n---\n原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用`Object.create(prototype)`方法或者是使用字面量的方式创建对象\n<!--more-->\n# 原型模式\n\n原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力--原型链，使用原型链来实现继承。\n\n我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性\n\n##　使用`Object.create(prototype)`方法\n举个栗子~\n```\nvar myCar = {\n\n  name: \"Ford Escort\",\n\n  drive: function () {\n    console.log( \"Weeee. I'm driving!\" );\n  },\n\n  panic: function () {\n    console.log( \"Wait. How do you stop this thing?\" );\n  }\n\n};\n\n// Use Object.create to instantiate a new car\nvar yourCar = Object.create( myCar );\n\n// Now we can see that one is a prototype of the other\nconsole.log( yourCar.name );\n```\n在这个例子中，我们定义了一个作为原型的对象`myCar`，这个对象中有两个属性`name`和`drive`，然后用`Object.create()`方法来创建了一个拥有`myCar`原型的对象`yourCar`，这样新创建的`yourCar`就继承了`myCar`中的属性和方法，我们可以直接调用\n\n当然，`Object.create()`方法也可以传入第二个参数(第一个参数是要继承的原型)`Object.create(prototype,optionalDescriptorObject))。`第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对\n\n## 使用面向字面量方法创建\n如果不希望在不直接使用`Object.create`的前提下实现原型链，我们可以模拟原型链实现继承\n```\nvar vehiclePrototype = {\n\n  init: function ( carModel ) {\n    this.model = carModel;\n  },\n\n  getModel: function () {\n    console.log( \"The model of this vehicle is..\" + this.model);\n  }\n};\n\nfunction vehicle( model ) {\n\n  function F() {};\n  \n  var f = new F();\n\n  f.init( model );\n  return f;\n\n}\n\nvar car = vehicle( \"Ford Escort\" );\ncar.getModel();\n```\n这个栗子中，对象`vehiclePrototype`中有两个方法`init`和`getModel`,然后`vehicle`继承了`vehiclePrototype`，继承的方法是先创建一个空函数`F`然后`F`的`prototype`属性指向`vehiclePrototype`，然后创建`F`类的一个实例`f`,`f`使用了`vehiclePrototype`的`init`方法，最后返回`f`,所以`vehicle`函数内部就完成了对`vehiclePrototype`的继承，最后将对象`f`返回.\n\n**其实`var f = new F();`就相当于`f = Object.create(F.prototype);`**\n\n```\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n```\n\n","slug":"JavaScript-Design-Pattern3prototype-model","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zwb0011vvxijr4425tr","content":"<p>原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用<code>Object.create(prototype)</code>方法或者是使用字面量的方式创建对象<br><a id=\"more\"></a></p>\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力–原型链，使用原型链来实现继承。</p>\n<p>我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性</p>\n<p>##　使用<code>Object.create(prototype)</code>方法<br>举个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myCar = &#123;</div><div class=\"line\"></div><div class=\"line\">  name: &quot;Ford Escort&quot;,</div><div class=\"line\"></div><div class=\"line\">  drive: function () &#123;</div><div class=\"line\">    console.log( &quot;Weeee. I&apos;m driving!&quot; );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  panic: function () &#123;</div><div class=\"line\">    console.log( &quot;Wait. How do you stop this thing?&quot; );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var yourCar = Object.create( myCar );</div><div class=\"line\"></div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log( yourCar.name );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义了一个作为原型的对象<code>myCar</code>，这个对象中有两个属性<code>name</code>和<code>drive</code>，然后用<code>Object.create()</code>方法来创建了一个拥有<code>myCar</code>原型的对象<code>yourCar</code>，这样新创建的<code>yourCar</code>就继承了<code>myCar</code>中的属性和方法，我们可以直接调用</p>\n<p>当然，<code>Object.create()</code>方法也可以传入第二个参数(第一个参数是要继承的原型)<code>Object.create(prototype,optionalDescriptorObject))。</code>第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对</p>\n<h2 id=\"使用面向字面量方法创建\"><a href=\"#使用面向字面量方法创建\" class=\"headerlink\" title=\"使用面向字面量方法创建\"></a>使用面向字面量方法创建</h2><p>如果不希望在不直接使用<code>Object.create</code>的前提下实现原型链，我们可以模拟原型链实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vehiclePrototype = &#123;</div><div class=\"line\"></div><div class=\"line\">  init: function ( carModel ) &#123;</div><div class=\"line\">    this.model = carModel;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getModel: function () &#123;</div><div class=\"line\">    console.log( &quot;The model of this vehicle is..&quot; + this.model);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function vehicle( model ) &#123;</div><div class=\"line\"></div><div class=\"line\">  function F() &#123;&#125;;</div><div class=\"line\">  </div><div class=\"line\">  var f = new F();</div><div class=\"line\"></div><div class=\"line\">  f.init( model );</div><div class=\"line\">  return f;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = vehicle( &quot;Ford Escort&quot; );</div><div class=\"line\">car.getModel();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，对象<code>vehiclePrototype</code>中有两个方法<code>init</code>和<code>getModel</code>,然后<code>vehicle</code>继承了<code>vehiclePrototype</code>，继承的方法是先创建一个空函数<code>F</code>然后<code>F</code>的<code>prototype</code>属性指向<code>vehiclePrototype</code>，然后创建<code>F</code>类的一个实例<code>f</code>,<code>f</code>使用了<code>vehiclePrototype</code>的<code>init</code>方法，最后返回<code>f</code>,所以<code>vehicle</code>函数内部就完成了对<code>vehiclePrototype</code>的继承，最后将对象<code>f</code>返回.</p>\n<p><strong>其实<code>var f = new F();</code>就相当于<code>f = Object.create(F.prototype);</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;;</div><div class=\"line\">// 以字面量方式创建的空对象就相当于:</div><div class=\"line\">o = Object.create(Object.prototype);</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用<code>Object.create(prototype)</code>方法或者是使用字面量的方式创建对象<br>","more":"</p>\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力–原型链，使用原型链来实现继承。</p>\n<p>我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性</p>\n<p>##　使用<code>Object.create(prototype)</code>方法<br>举个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myCar = &#123;</div><div class=\"line\"></div><div class=\"line\">  name: &quot;Ford Escort&quot;,</div><div class=\"line\"></div><div class=\"line\">  drive: function () &#123;</div><div class=\"line\">    console.log( &quot;Weeee. I&apos;m driving!&quot; );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  panic: function () &#123;</div><div class=\"line\">    console.log( &quot;Wait. How do you stop this thing?&quot; );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var yourCar = Object.create( myCar );</div><div class=\"line\"></div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log( yourCar.name );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义了一个作为原型的对象<code>myCar</code>，这个对象中有两个属性<code>name</code>和<code>drive</code>，然后用<code>Object.create()</code>方法来创建了一个拥有<code>myCar</code>原型的对象<code>yourCar</code>，这样新创建的<code>yourCar</code>就继承了<code>myCar</code>中的属性和方法，我们可以直接调用</p>\n<p>当然，<code>Object.create()</code>方法也可以传入第二个参数(第一个参数是要继承的原型)<code>Object.create(prototype,optionalDescriptorObject))。</code>第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对</p>\n<h2 id=\"使用面向字面量方法创建\"><a href=\"#使用面向字面量方法创建\" class=\"headerlink\" title=\"使用面向字面量方法创建\"></a>使用面向字面量方法创建</h2><p>如果不希望在不直接使用<code>Object.create</code>的前提下实现原型链，我们可以模拟原型链实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vehiclePrototype = &#123;</div><div class=\"line\"></div><div class=\"line\">  init: function ( carModel ) &#123;</div><div class=\"line\">    this.model = carModel;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getModel: function () &#123;</div><div class=\"line\">    console.log( &quot;The model of this vehicle is..&quot; + this.model);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function vehicle( model ) &#123;</div><div class=\"line\"></div><div class=\"line\">  function F() &#123;&#125;;</div><div class=\"line\">  </div><div class=\"line\">  var f = new F();</div><div class=\"line\"></div><div class=\"line\">  f.init( model );</div><div class=\"line\">  return f;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = vehicle( &quot;Ford Escort&quot; );</div><div class=\"line\">car.getModel();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，对象<code>vehiclePrototype</code>中有两个方法<code>init</code>和<code>getModel</code>,然后<code>vehicle</code>继承了<code>vehiclePrototype</code>，继承的方法是先创建一个空函数<code>F</code>然后<code>F</code>的<code>prototype</code>属性指向<code>vehiclePrototype</code>，然后创建<code>F</code>类的一个实例<code>f</code>,<code>f</code>使用了<code>vehiclePrototype</code>的<code>init</code>方法，最后返回<code>f</code>,所以<code>vehicle</code>函数内部就完成了对<code>vehiclePrototype</code>的继承，最后将对象<code>f</code>返回.</p>\n<p><strong>其实<code>var f = new F();</code>就相当于<code>f = Object.create(F.prototype);</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;;</div><div class=\"line\">// 以字面量方式创建的空对象就相当于:</div><div class=\"line\">o = Object.create(Object.prototype);</div></pre></td></tr></table></figure>"},{"title":"javascript模块化编程（二）：js模块化发展史","date":"2017-03-07T15:04:40.000Z","_content":"在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）\n<!--more-->\n# js在发展过程\n有几个阶段：\n过程式的JavaScript→面向对象的javascript→面相模块的javascript\n1. 原始写法：\n模块就是实现特定功能的一组写法：\n\n```\nfunction m1(){\n    //do something\n}\n\nfunction m2(){\n    //do something\n}\n```\n上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。\n\n这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系\n2. 对象写法\n这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容\n\n```\nvar module1 = new Object({\n        _count:0,\n\n        m1 : function () {\n            console.log(module1._count)\n        },\n\n        m2 : function () {\n            for(var i=0;i<5;i++){\n                module1._count += i;\n                console.log(module1._count)\n            }\n        }\n    });\n\n    module1.m1();\n    module1.m2();\n    module1._count=5;\n    console.log(module1._count)\n```\n上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了`module1.m1()`,\n但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如\n\n```\nmodule1._count = 5;   //外部代码可以直接改变内部计数器的值\n```\n3. 立即执行函数写法\n这种写法可以达到不暴露私有成员的目的\n\n```\n   var module1 = (function () {\n        var _count = 0;\n        var m1 = function () {\n            console.log(_count)\n        };\n\n        var m2 = function () {\n            for(var i=0;i<5;i++){\n                _count += i;\n                console.log(_count)\n            }\n        };\n\n        return{\n            r1 : m1,\n            r2 : m2,\n        }\n    })();\n\n    module1.r1();   //0\n    module1.r2();\n    console.log(module1._count)  //undefined\n```\n这里只能通过return的函数名来调用函数，达到了包装函数的作用\n这里还运用了闭包的思想，在函数`module1`的外部调用了函数内的变量`_count`\n\n## 闭包\n闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量`_count`,然后在`module1`的`return`中又将m1作为返回值，这样就可以在`module1`的外部访问`module1`中的局部变量`_count`\n\n4. 放大模式\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)\n\n```\n    var module1 = function () {\n        console.log(\"原module1模块\")\n    }\n    var module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(module1);\n\n\n    module1.m3()\n\n```\n在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用**方法模式**来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数`module1`“放大”\n\n在执行完这段代码之后，我们的模块就可以拥有一个新的 `module1.m3`的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象\n\n5. 宽放大模式\n宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象\n\n```\nvar module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(window.module1 || {});\n\n\n    module1.m3()\n\n```\n在放大模式中，如果没有上面定义`module1`模块时，是会报错的，经过改进，就算在执行这段代码的时候，`module1`  即使没有定义也不会报错，也会创建`module1.m3()`这个公有方法\n\n\n在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript\n\n# 为什么使用模块化的js\n使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）\n1. 命名冲突，是不是有点同感了！！！\n闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题\n**通过export暴露接口，不需要命名空间，不需要全局变量**\n2. 文件依赖\n文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！\n**js模块化的解决方式是使用require引入依赖，使依赖内置**，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。\n\n# commonJS\n为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的\n## 什么是commonJS\ncommonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）\n\n## 使用commonJS编写node\n以下是node写模块化的一个示例：\n1. math.js\n\n```\nexports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n```\n2.  increment.js\n\n```\nvar add = require('math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n3. main.js，该文件为入口文件\n\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n从上述代码可以看到：\n-  node要求一个js文件对应一个模块。\n- 使用exports导出API\n- 使用require加载其它模块\n\n\n## commonJS的缺点\n因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的\n1. 服务器端的js模块就在本地，浏览器端则需要通过网络请求\n2. 服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多\n\n \n如下\n\n```\nvar event = require(\"event\");\n \nevent.bind(el, 'click', function() {\n    // todo\n});\n```\n\n`event.bind(el, 'click', function()`，在第一行require(\"event\")之后运行，因此必须等`event`加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n> 这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n# AMD\n基于上述两点的commcommonJS的缺点，AMD就孕育而生，\n\n\n## 什么是AMD\nAMD可以理解为异步模块定义，可以认为是浏览器中的模块规范\n> AMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\n为什么说AMD可以解决commonJS在浏览器上的不足呢？\n\n```\n　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。\n\nAMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！\n\n```\ndefine(id?, dependencies?, factory);\n```\n其中：\n- id: 模块标识，可以省略。\n- dependencies: 所依赖的模块，可以省略。\n- factory: 模块的实现，或者一个JavaScript对象。\n- id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。\n\n## 简单的AMD模式应用\n以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）\n`base.js`\n\n```\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n`ui.js`\n\n```\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\n```\n`page.js``\n```\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n`data.js`\n\n```\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n- 定义无依赖的模块（base.js）\n- 定义有依赖的模块（ui.js，page.js）\n- 定义数据对象模块（data.js）\n\n以上的id参数都为空，这是为什么呢？\n\n```\ndefine('index', ['data','base'], function(data, base) {\n    // todo\n});\n```\n这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。\n\n\n\n更多请阅读：\n- [浅谈模块化的JavaScript](http://www.tuicool.com/articles/rqEjEv)\n- [JavaScript模块化开发库之SeaJS](http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html)\n- [Node.js模块风格在浏览器中的尝试](http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html)\n- [JavaScript中模块写法](http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html)\n- [JavaScript中的AMD和CMD模块化](http://caibaojian.com/toutiao/6090)\n- [CMD 模块定义规范](https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com)\n- [JavaScript模块化开发（四）——RequireJS](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/)\n- [Javascript模块化编程](http://note.youdao.com/)\n","source":"_posts/JavaScript-modular-programming2JSmodulardevelopmenthistory.md","raw":"---\ntitle: javascript模块化编程（二）：js模块化发展史\ndate: 2017-03-07 23:04:40\ntags: [js模块化,js]\ncategories: js\n---\n在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）\n<!--more-->\n# js在发展过程\n有几个阶段：\n过程式的JavaScript→面向对象的javascript→面相模块的javascript\n1. 原始写法：\n模块就是实现特定功能的一组写法：\n\n```\nfunction m1(){\n    //do something\n}\n\nfunction m2(){\n    //do something\n}\n```\n上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。\n\n这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系\n2. 对象写法\n这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容\n\n```\nvar module1 = new Object({\n        _count:0,\n\n        m1 : function () {\n            console.log(module1._count)\n        },\n\n        m2 : function () {\n            for(var i=0;i<5;i++){\n                module1._count += i;\n                console.log(module1._count)\n            }\n        }\n    });\n\n    module1.m1();\n    module1.m2();\n    module1._count=5;\n    console.log(module1._count)\n```\n上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了`module1.m1()`,\n但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如\n\n```\nmodule1._count = 5;   //外部代码可以直接改变内部计数器的值\n```\n3. 立即执行函数写法\n这种写法可以达到不暴露私有成员的目的\n\n```\n   var module1 = (function () {\n        var _count = 0;\n        var m1 = function () {\n            console.log(_count)\n        };\n\n        var m2 = function () {\n            for(var i=0;i<5;i++){\n                _count += i;\n                console.log(_count)\n            }\n        };\n\n        return{\n            r1 : m1,\n            r2 : m2,\n        }\n    })();\n\n    module1.r1();   //0\n    module1.r2();\n    console.log(module1._count)  //undefined\n```\n这里只能通过return的函数名来调用函数，达到了包装函数的作用\n这里还运用了闭包的思想，在函数`module1`的外部调用了函数内的变量`_count`\n\n## 闭包\n闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量`_count`,然后在`module1`的`return`中又将m1作为返回值，这样就可以在`module1`的外部访问`module1`中的局部变量`_count`\n\n4. 放大模式\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)\n\n```\n    var module1 = function () {\n        console.log(\"原module1模块\")\n    }\n    var module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(module1);\n\n\n    module1.m3()\n\n```\n在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用**方法模式**来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数`module1`“放大”\n\n在执行完这段代码之后，我们的模块就可以拥有一个新的 `module1.m3`的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象\n\n5. 宽放大模式\n宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象\n\n```\nvar module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(window.module1 || {});\n\n\n    module1.m3()\n\n```\n在放大模式中，如果没有上面定义`module1`模块时，是会报错的，经过改进，就算在执行这段代码的时候，`module1`  即使没有定义也不会报错，也会创建`module1.m3()`这个公有方法\n\n\n在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript\n\n# 为什么使用模块化的js\n使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）\n1. 命名冲突，是不是有点同感了！！！\n闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题\n**通过export暴露接口，不需要命名空间，不需要全局变量**\n2. 文件依赖\n文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！\n**js模块化的解决方式是使用require引入依赖，使依赖内置**，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。\n\n# commonJS\n为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的\n## 什么是commonJS\ncommonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）\n\n## 使用commonJS编写node\n以下是node写模块化的一个示例：\n1. math.js\n\n```\nexports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n```\n2.  increment.js\n\n```\nvar add = require('math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n3. main.js，该文件为入口文件\n\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n从上述代码可以看到：\n-  node要求一个js文件对应一个模块。\n- 使用exports导出API\n- 使用require加载其它模块\n\n\n## commonJS的缺点\n因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的\n1. 服务器端的js模块就在本地，浏览器端则需要通过网络请求\n2. 服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多\n\n \n如下\n\n```\nvar event = require(\"event\");\n \nevent.bind(el, 'click', function() {\n    // todo\n});\n```\n\n`event.bind(el, 'click', function()`，在第一行require(\"event\")之后运行，因此必须等`event`加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n> 这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n# AMD\n基于上述两点的commcommonJS的缺点，AMD就孕育而生，\n\n\n## 什么是AMD\nAMD可以理解为异步模块定义，可以认为是浏览器中的模块规范\n> AMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\n为什么说AMD可以解决commonJS在浏览器上的不足呢？\n\n```\n　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。\n\nAMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！\n\n```\ndefine(id?, dependencies?, factory);\n```\n其中：\n- id: 模块标识，可以省略。\n- dependencies: 所依赖的模块，可以省略。\n- factory: 模块的实现，或者一个JavaScript对象。\n- id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。\n\n## 简单的AMD模式应用\n以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）\n`base.js`\n\n```\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n`ui.js`\n\n```\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\n```\n`page.js``\n```\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n`data.js`\n\n```\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n- 定义无依赖的模块（base.js）\n- 定义有依赖的模块（ui.js，page.js）\n- 定义数据对象模块（data.js）\n\n以上的id参数都为空，这是为什么呢？\n\n```\ndefine('index', ['data','base'], function(data, base) {\n    // todo\n});\n```\n这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。\n\n\n\n更多请阅读：\n- [浅谈模块化的JavaScript](http://www.tuicool.com/articles/rqEjEv)\n- [JavaScript模块化开发库之SeaJS](http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html)\n- [Node.js模块风格在浏览器中的尝试](http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html)\n- [JavaScript中模块写法](http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html)\n- [JavaScript中的AMD和CMD模块化](http://caibaojian.com/toutiao/6090)\n- [CMD 模块定义规范](https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com)\n- [JavaScript模块化开发（四）——RequireJS](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/)\n- [Javascript模块化编程](http://note.youdao.com/)\n","slug":"JavaScript-modular-programming2JSmodulardevelopmenthistory","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zwe0013vvxif8y76swv","content":"<p>在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）<br><a id=\"more\"></a></p>\n<h1 id=\"js在发展过程\"><a href=\"#js在发展过程\" class=\"headerlink\" title=\"js在发展过程\"></a>js在发展过程</h1><p>有几个阶段：<br>过程式的JavaScript→面向对象的javascript→面相模块的javascript</p>\n<ol>\n<li>原始写法：<br>模块就是实现特定功能的一组写法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function m1()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function m2()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。</p>\n<p>这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系</p>\n<ol>\n<li>对象写法<br>这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = new Object(&#123;</div><div class=\"line\">        _count:0,</div><div class=\"line\"></div><div class=\"line\">        m1 : function () &#123;</div><div class=\"line\">            console.log(module1._count)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        m2 : function () &#123;</div><div class=\"line\">            for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">                module1._count += i;</div><div class=\"line\">                console.log(module1._count)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    module1.m1();</div><div class=\"line\">    module1.m2();</div><div class=\"line\">    module1._count=5;</div><div class=\"line\">    console.log(module1._count)</div></pre></td></tr></table></figure>\n<p>上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了<code>module1.m1()</code>,<br>但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module1._count = 5;   //外部代码可以直接改变内部计数器的值</div></pre></td></tr></table></figure>\n<ol>\n<li>立即执行函数写法<br>这种写法可以达到不暴露私有成员的目的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function () &#123;</div><div class=\"line\">     var _count = 0;</div><div class=\"line\">     var m1 = function () &#123;</div><div class=\"line\">         console.log(_count)</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     var m2 = function () &#123;</div><div class=\"line\">         for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">             _count += i;</div><div class=\"line\">             console.log(_count)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     return&#123;</div><div class=\"line\">         r1 : m1,</div><div class=\"line\">         r2 : m2,</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;)();</div><div class=\"line\"></div><div class=\"line\"> module1.r1();   //0</div><div class=\"line\"> module1.r2();</div><div class=\"line\"> console.log(module1._count)  //undefined</div></pre></td></tr></table></figure>\n<p>这里只能通过return的函数名来调用函数，达到了包装函数的作用<br>这里还运用了闭包的思想，在函数<code>module1</code>的外部调用了函数内的变量<code>_count</code></p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量<code>_count</code>,然后在<code>module1</code>的<code>return</code>中又将m1作为返回值，这样就可以在<code>module1</code>的外部访问<code>module1</code>中的局部变量<code>_count</code></p>\n<ol>\n<li>放大模式<br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = function () &#123;</div><div class=\"line\">    console.log(&quot;原module1模块&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">    mod.m3 = function () &#123;</div><div class=\"line\">        console.log(&quot;m3&quot;)</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return mod;</div><div class=\"line\">&#125;)(module1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module1.m3()</div></pre></td></tr></table></figure>\n<p>在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用<strong>方法模式</strong>来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数<code>module1</code>“放大”</p>\n<p>在执行完这段代码之后，我们的模块就可以拥有一个新的 <code>module1.m3</code>的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象</p>\n<ol>\n<li>宽放大模式<br>宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">        mod.m3 = function () &#123;</div><div class=\"line\">            console.log(&quot;m3&quot;)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        return mod;</div><div class=\"line\">    &#125;)(window.module1 || &#123;&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    module1.m3()</div></pre></td></tr></table></figure>\n<p>在放大模式中，如果没有上面定义<code>module1</code>模块时，是会报错的，经过改进，就算在执行这段代码的时候，<code>module1</code>  即使没有定义也不会报错，也会创建<code>module1.m3()</code>这个公有方法</p>\n<p>在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript</p>\n<h1 id=\"为什么使用模块化的js\"><a href=\"#为什么使用模块化的js\" class=\"headerlink\" title=\"为什么使用模块化的js\"></a>为什么使用模块化的js</h1><p>使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）</p>\n<ol>\n<li>命名冲突，是不是有点同感了！！！<br>闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题<br><strong>通过export暴露接口，不需要命名空间，不需要全局变量</strong></li>\n<li>文件依赖<br>文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！<br><strong>js模块化的解决方式是使用require引入依赖，使依赖内置</strong>，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。</li>\n</ol>\n<h1 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h1><p>为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的</p>\n<h2 id=\"什么是commonJS\"><a href=\"#什么是commonJS\" class=\"headerlink\" title=\"什么是commonJS\"></a>什么是commonJS</h2><p>commonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）</p>\n<h2 id=\"使用commonJS编写node\"><a href=\"#使用commonJS编写node\" class=\"headerlink\" title=\"使用commonJS编写node\"></a>使用commonJS编写node</h2><p>以下是node写模块化的一个示例：</p>\n<ol>\n<li>math.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.add = function() &#123;</div><div class=\"line\">    var sum = 0, i = 0, args = arguments, l = args.length;</div><div class=\"line\">    while (i &lt; l) &#123;</div><div class=\"line\">        sum += args[i++];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>increment.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var add = require(&apos;math&apos;).add;</div><div class=\"line\">exports.increment = function(val) &#123;</div><div class=\"line\">    return add(val, 1);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>main.js，该文件为入口文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var inc = require(&apos;increment&apos;).increment;</div><div class=\"line\">var a = 1;</div><div class=\"line\">inc(a); // 2</div></pre></td></tr></table></figure>\n<p>从上述代码可以看到：</p>\n<ul>\n<li>node要求一个js文件对应一个模块。</li>\n<li>使用exports导出API</li>\n<li>使用require加载其它模块</li>\n</ul>\n<h2 id=\"commonJS的缺点\"><a href=\"#commonJS的缺点\" class=\"headerlink\" title=\"commonJS的缺点\"></a>commonJS的缺点</h2><p>因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的</p>\n<ol>\n<li>服务器端的js模块就在本地，浏览器端则需要通过网络请求</li>\n<li>服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多</li>\n</ol>\n<p>如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = require(&quot;event&quot;);</div><div class=\"line\"> </div><div class=\"line\">event.bind(el, &apos;click&apos;, function() &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>event.bind(el, &#39;click&#39;, function()</code>，在第一行require(“event”)之后运行，因此必须等<code>event</code>加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<blockquote>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>\n</blockquote>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>基于上述两点的commcommonJS的缺点，AMD就孕育而生，</p>\n<h2 id=\"什么是AMD\"><a href=\"#什么是AMD\" class=\"headerlink\" title=\"什么是AMD\"></a>什么是AMD</h2><p>AMD可以理解为异步模块定义，可以认为是浏览器中的模块规范</p>\n<blockquote>\n<p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n</blockquote>\n<p>为什么说AMD可以解决commonJS在浏览器上的不足呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　require([&apos;math&apos;], function (math) &#123;</div><div class=\"line\">　　　　math.add(2, 3);</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>\n<p>AMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>id: 模块标识，可以省略。</li>\n<li>dependencies: 所依赖的模块，可以省略。</li>\n<li>factory: 模块的实现，或者一个JavaScript对象。</li>\n<li>id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。</li>\n</ul>\n<h2 id=\"简单的AMD模式应用\"><a href=\"#简单的AMD模式应用\" class=\"headerlink\" title=\"简单的AMD模式应用\"></a>简单的AMD模式应用</h2><p>以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）<br><code>base.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        mix: function(source, target) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>ui.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;base&apos;], function(base) &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        show: function() &#123;</div><div class=\"line\">            // todo with module base</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>`page.js``<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;data&apos;, &apos;ui&apos;], function(data, ui) &#123;</div><div class=\"line\">    // init here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>data.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">    users: [],</div><div class=\"line\">    members: []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上同时演示了define的三种用法</p>\n<ul>\n<li>定义无依赖的模块（base.js）</li>\n<li>定义有依赖的模块（ui.js，page.js）</li>\n<li>定义数据对象模块（data.js）</li>\n</ul>\n<p>以上的id参数都为空，这是为什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&apos;index&apos;, [&apos;data&apos;,&apos;base&apos;], function(data, base) &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。</p>\n<p>更多请阅读：</p>\n<ul>\n<li><a href=\"http://www.tuicool.com/articles/rqEjEv\" target=\"_blank\" rel=\"external\">浅谈模块化的JavaScript</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html\" target=\"_blank\" rel=\"external\">JavaScript模块化开发库之SeaJS</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html\" target=\"_blank\" rel=\"external\">Node.js模块风格在浏览器中的尝试</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html\" target=\"_blank\" rel=\"external\">JavaScript中模块写法</a></li>\n<li><a href=\"http://caibaojian.com/toutiao/6090\" target=\"_blank\" rel=\"external\">JavaScript中的AMD和CMD模块化</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com\" target=\"_blank\" rel=\"external\">CMD 模块定义规范</a></li>\n<li><a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/\" target=\"_blank\" rel=\"external\">JavaScript模块化开发（四）——RequireJS</a></li>\n<li><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"external\">Javascript模块化编程</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）<br>","more":"</p>\n<h1 id=\"js在发展过程\"><a href=\"#js在发展过程\" class=\"headerlink\" title=\"js在发展过程\"></a>js在发展过程</h1><p>有几个阶段：<br>过程式的JavaScript→面向对象的javascript→面相模块的javascript</p>\n<ol>\n<li>原始写法：<br>模块就是实现特定功能的一组写法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function m1()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function m2()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。</p>\n<p>这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系</p>\n<ol>\n<li>对象写法<br>这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = new Object(&#123;</div><div class=\"line\">        _count:0,</div><div class=\"line\"></div><div class=\"line\">        m1 : function () &#123;</div><div class=\"line\">            console.log(module1._count)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        m2 : function () &#123;</div><div class=\"line\">            for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">                module1._count += i;</div><div class=\"line\">                console.log(module1._count)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    module1.m1();</div><div class=\"line\">    module1.m2();</div><div class=\"line\">    module1._count=5;</div><div class=\"line\">    console.log(module1._count)</div></pre></td></tr></table></figure>\n<p>上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了<code>module1.m1()</code>,<br>但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module1._count = 5;   //外部代码可以直接改变内部计数器的值</div></pre></td></tr></table></figure>\n<ol>\n<li>立即执行函数写法<br>这种写法可以达到不暴露私有成员的目的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function () &#123;</div><div class=\"line\">     var _count = 0;</div><div class=\"line\">     var m1 = function () &#123;</div><div class=\"line\">         console.log(_count)</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     var m2 = function () &#123;</div><div class=\"line\">         for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">             _count += i;</div><div class=\"line\">             console.log(_count)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     return&#123;</div><div class=\"line\">         r1 : m1,</div><div class=\"line\">         r2 : m2,</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;)();</div><div class=\"line\"></div><div class=\"line\"> module1.r1();   //0</div><div class=\"line\"> module1.r2();</div><div class=\"line\"> console.log(module1._count)  //undefined</div></pre></td></tr></table></figure>\n<p>这里只能通过return的函数名来调用函数，达到了包装函数的作用<br>这里还运用了闭包的思想，在函数<code>module1</code>的外部调用了函数内的变量<code>_count</code></p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量<code>_count</code>,然后在<code>module1</code>的<code>return</code>中又将m1作为返回值，这样就可以在<code>module1</code>的外部访问<code>module1</code>中的局部变量<code>_count</code></p>\n<ol>\n<li>放大模式<br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = function () &#123;</div><div class=\"line\">    console.log(&quot;原module1模块&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">    mod.m3 = function () &#123;</div><div class=\"line\">        console.log(&quot;m3&quot;)</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return mod;</div><div class=\"line\">&#125;)(module1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module1.m3()</div></pre></td></tr></table></figure>\n<p>在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用<strong>方法模式</strong>来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数<code>module1</code>“放大”</p>\n<p>在执行完这段代码之后，我们的模块就可以拥有一个新的 <code>module1.m3</code>的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象</p>\n<ol>\n<li>宽放大模式<br>宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">        mod.m3 = function () &#123;</div><div class=\"line\">            console.log(&quot;m3&quot;)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        return mod;</div><div class=\"line\">    &#125;)(window.module1 || &#123;&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    module1.m3()</div></pre></td></tr></table></figure>\n<p>在放大模式中，如果没有上面定义<code>module1</code>模块时，是会报错的，经过改进，就算在执行这段代码的时候，<code>module1</code>  即使没有定义也不会报错，也会创建<code>module1.m3()</code>这个公有方法</p>\n<p>在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript</p>\n<h1 id=\"为什么使用模块化的js\"><a href=\"#为什么使用模块化的js\" class=\"headerlink\" title=\"为什么使用模块化的js\"></a>为什么使用模块化的js</h1><p>使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）</p>\n<ol>\n<li>命名冲突，是不是有点同感了！！！<br>闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题<br><strong>通过export暴露接口，不需要命名空间，不需要全局变量</strong></li>\n<li>文件依赖<br>文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！<br><strong>js模块化的解决方式是使用require引入依赖，使依赖内置</strong>，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。</li>\n</ol>\n<h1 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h1><p>为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的</p>\n<h2 id=\"什么是commonJS\"><a href=\"#什么是commonJS\" class=\"headerlink\" title=\"什么是commonJS\"></a>什么是commonJS</h2><p>commonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）</p>\n<h2 id=\"使用commonJS编写node\"><a href=\"#使用commonJS编写node\" class=\"headerlink\" title=\"使用commonJS编写node\"></a>使用commonJS编写node</h2><p>以下是node写模块化的一个示例：</p>\n<ol>\n<li>math.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.add = function() &#123;</div><div class=\"line\">    var sum = 0, i = 0, args = arguments, l = args.length;</div><div class=\"line\">    while (i &lt; l) &#123;</div><div class=\"line\">        sum += args[i++];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>increment.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var add = require(&apos;math&apos;).add;</div><div class=\"line\">exports.increment = function(val) &#123;</div><div class=\"line\">    return add(val, 1);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>main.js，该文件为入口文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var inc = require(&apos;increment&apos;).increment;</div><div class=\"line\">var a = 1;</div><div class=\"line\">inc(a); // 2</div></pre></td></tr></table></figure>\n<p>从上述代码可以看到：</p>\n<ul>\n<li>node要求一个js文件对应一个模块。</li>\n<li>使用exports导出API</li>\n<li>使用require加载其它模块</li>\n</ul>\n<h2 id=\"commonJS的缺点\"><a href=\"#commonJS的缺点\" class=\"headerlink\" title=\"commonJS的缺点\"></a>commonJS的缺点</h2><p>因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的</p>\n<ol>\n<li>服务器端的js模块就在本地，浏览器端则需要通过网络请求</li>\n<li>服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多</li>\n</ol>\n<p>如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = require(&quot;event&quot;);</div><div class=\"line\"> </div><div class=\"line\">event.bind(el, &apos;click&apos;, function() &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>event.bind(el, &#39;click&#39;, function()</code>，在第一行require(“event”)之后运行，因此必须等<code>event</code>加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<blockquote>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>\n</blockquote>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>基于上述两点的commcommonJS的缺点，AMD就孕育而生，</p>\n<h2 id=\"什么是AMD\"><a href=\"#什么是AMD\" class=\"headerlink\" title=\"什么是AMD\"></a>什么是AMD</h2><p>AMD可以理解为异步模块定义，可以认为是浏览器中的模块规范</p>\n<blockquote>\n<p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n</blockquote>\n<p>为什么说AMD可以解决commonJS在浏览器上的不足呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　require([&apos;math&apos;], function (math) &#123;</div><div class=\"line\">　　　　math.add(2, 3);</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>\n<p>AMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>id: 模块标识，可以省略。</li>\n<li>dependencies: 所依赖的模块，可以省略。</li>\n<li>factory: 模块的实现，或者一个JavaScript对象。</li>\n<li>id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。</li>\n</ul>\n<h2 id=\"简单的AMD模式应用\"><a href=\"#简单的AMD模式应用\" class=\"headerlink\" title=\"简单的AMD模式应用\"></a>简单的AMD模式应用</h2><p>以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）<br><code>base.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        mix: function(source, target) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>ui.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;base&apos;], function(base) &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        show: function() &#123;</div><div class=\"line\">            // todo with module base</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>`page.js``<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;data&apos;, &apos;ui&apos;], function(data, ui) &#123;</div><div class=\"line\">    // init here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>data.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">    users: [],</div><div class=\"line\">    members: []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上同时演示了define的三种用法</p>\n<ul>\n<li>定义无依赖的模块（base.js）</li>\n<li>定义有依赖的模块（ui.js，page.js）</li>\n<li>定义数据对象模块（data.js）</li>\n</ul>\n<p>以上的id参数都为空，这是为什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&apos;index&apos;, [&apos;data&apos;,&apos;base&apos;], function(data, base) &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。</p>\n<p>更多请阅读：</p>\n<ul>\n<li><a href=\"http://www.tuicool.com/articles/rqEjEv\" target=\"_blank\" rel=\"external\">浅谈模块化的JavaScript</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html\" target=\"_blank\" rel=\"external\">JavaScript模块化开发库之SeaJS</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html\" target=\"_blank\" rel=\"external\">Node.js模块风格在浏览器中的尝试</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html\" target=\"_blank\" rel=\"external\">JavaScript中模块写法</a></li>\n<li><a href=\"http://caibaojian.com/toutiao/6090\" target=\"_blank\" rel=\"external\">JavaScript中的AMD和CMD模块化</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com\" target=\"_blank\" rel=\"external\">CMD 模块定义规范</a></li>\n<li><a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/\" target=\"_blank\" rel=\"external\">JavaScript模块化开发（四）——RequireJS</a></li>\n<li><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"external\">Javascript模块化编程</a></li>\n</ul>"},{"layout":"ew","title":"Javascript模块化编程（一）：模块的写法","date":"2017-03-07T14:40:16.000Z","_content":"不得不说现在“前端”的知识点实在是太多了，(ಥ_ಥ)\n就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ_ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成\n\n<!--more-->\n\n# 了解基本概念：AMD/CMD/commonJS\n先来大体说一些这些都是什么东西：\nAMD/CMD/commonJS都是JavaScript模块化变的规范\n\n\n> 因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n\n\n\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\n- CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n- commonJS是nodejs在推广过程中对模块定义的规范化产出。\n\n因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。\n\n## AMD(Asynchronous Module Definition)\n全称是Asynchronous Module Definition，即异步模块加载机制。\n\n## commonJS\nCommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。\n\n通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。\n> CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。\n> \n> 由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来\n--[JavaScript模块化开发（二）——CommonJS规范](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com)\n\n\n# 那么AMD/CMD又有什么区别呢？\nAMD和CMD的区别 \n1. 对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. \n2. CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） \n3. AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。\n\n\n# 总结\n不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。\n\n先挖个坑，以后我胡汉三还会回来的~","source":"_posts/Javascript-modular-programming1module-writing.md","raw":"layout: ew\ntitle: Javascript模块化编程（一）：模块的写法\ndate: 2017-03-07 22:40:16\ntags: [js模块化,js]\ncategories: js\n\n---\n不得不说现在“前端”的知识点实在是太多了，(ಥ_ಥ)\n就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ_ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成\n\n<!--more-->\n\n# 了解基本概念：AMD/CMD/commonJS\n先来大体说一些这些都是什么东西：\nAMD/CMD/commonJS都是JavaScript模块化变的规范\n\n\n> 因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n\n\n\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\n- CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n- commonJS是nodejs在推广过程中对模块定义的规范化产出。\n\n因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。\n\n## AMD(Asynchronous Module Definition)\n全称是Asynchronous Module Definition，即异步模块加载机制。\n\n## commonJS\nCommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。\n\n通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。\n> CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。\n> \n> 由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来\n--[JavaScript模块化开发（二）——CommonJS规范](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com)\n\n\n# 那么AMD/CMD又有什么区别呢？\nAMD和CMD的区别 \n1. 对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. \n2. CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） \n3. AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。\n\n\n# 总结\n不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。\n\n先挖个坑，以后我胡汉三还会回来的~","slug":"Javascript-modular-programming1module-writing","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"photos":[],"link":"","_id":"cj63j7zwi0016vvxiotnt93fy","content":"<p>不得不说现在“前端”的知识点实在是太多了，(ಥ<em>ಥ)<br>就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ</em>ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成</p>\n<a id=\"more\"></a>\n<h1 id=\"了解基本概念：AMD-CMD-commonJS\"><a href=\"#了解基本概念：AMD-CMD-commonJS\" class=\"headerlink\" title=\"了解基本概念：AMD/CMD/commonJS\"></a>了解基本概念：AMD/CMD/commonJS</h1><p>先来大体说一些这些都是什么东西：<br>AMD/CMD/commonJS都是JavaScript模块化变的规范</p>\n<blockquote>\n<p>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。<br>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。</p>\n</blockquote>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</li>\n<li>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</li>\n<li>commonJS是nodejs在推广过程中对模块定义的规范化产出。</li>\n</ul>\n<p>因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。</p>\n<h2 id=\"AMD-Asynchronous-Module-Definition\"><a href=\"#AMD-Asynchronous-Module-Definition\" class=\"headerlink\" title=\"AMD(Asynchronous Module Definition)\"></a>AMD(Asynchronous Module Definition)</h2><p>全称是Asynchronous Module Definition，即异步模块加载机制。</p>\n<h2 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h2><p>CommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。</p>\n<p>通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。</p>\n<blockquote>\n<p>CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。</p>\n<p>由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来<br>–<a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com\" target=\"_blank\" rel=\"external\">JavaScript模块化开发（二）——CommonJS规范</a></p>\n</blockquote>\n<h1 id=\"那么AMD-CMD又有什么区别呢？\"><a href=\"#那么AMD-CMD又有什么区别呢？\" class=\"headerlink\" title=\"那么AMD/CMD又有什么区别呢？\"></a>那么AMD/CMD又有什么区别呢？</h1><p>AMD和CMD的区别 </p>\n<ol>\n<li>对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. </li>\n<li>CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） </li>\n<li>AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。</p>\n<p>先挖个坑，以后我胡汉三还会回来的~</p>\n","site":{"data":{}},"excerpt":"<p>不得不说现在“前端”的知识点实在是太多了，(ಥ<em>ಥ)<br>就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ</em>ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成</p>","more":"<h1 id=\"了解基本概念：AMD-CMD-commonJS\"><a href=\"#了解基本概念：AMD-CMD-commonJS\" class=\"headerlink\" title=\"了解基本概念：AMD/CMD/commonJS\"></a>了解基本概念：AMD/CMD/commonJS</h1><p>先来大体说一些这些都是什么东西：<br>AMD/CMD/commonJS都是JavaScript模块化变的规范</p>\n<blockquote>\n<p>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。<br>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。</p>\n</blockquote>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</li>\n<li>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</li>\n<li>commonJS是nodejs在推广过程中对模块定义的规范化产出。</li>\n</ul>\n<p>因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。</p>\n<h2 id=\"AMD-Asynchronous-Module-Definition\"><a href=\"#AMD-Asynchronous-Module-Definition\" class=\"headerlink\" title=\"AMD(Asynchronous Module Definition)\"></a>AMD(Asynchronous Module Definition)</h2><p>全称是Asynchronous Module Definition，即异步模块加载机制。</p>\n<h2 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h2><p>CommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。</p>\n<p>通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。</p>\n<blockquote>\n<p>CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。</p>\n<p>由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来<br>–<a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com\" target=\"_blank\" rel=\"external\">JavaScript模块化开发（二）——CommonJS规范</a></p>\n</blockquote>\n<h1 id=\"那么AMD-CMD又有什么区别呢？\"><a href=\"#那么AMD-CMD又有什么区别呢？\" class=\"headerlink\" title=\"那么AMD/CMD又有什么区别呢？\"></a>那么AMD/CMD又有什么区别呢？</h1><p>AMD和CMD的区别 </p>\n<ol>\n<li>对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. </li>\n<li>CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） </li>\n<li>AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。</p>\n<p>先挖个坑，以后我胡汉三还会回来的~</p>"},{"title":"Javascript模块化编程（三）：require.js的用法","date":"2017-03-08T15:11:42.000Z","_content":"在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的\n本文的源码在个人的github上：https://github.com/sunshine940326/js-module-demo\n<!--more-->\n首先祭上[requireJS的官方api](http://www.requirejs.cn/docs/start.html)\n# 下载requireJS\n我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：http://www.requirejs.cn/docs/download.html\n\n你可以下载最新版本的`require.js`, `r.js`(node中使用)，以及requireJS的插件：\n1. text\n2. domReady\n3. cs(coffeeScript)\n4. i18n（国际化）\n\n# 在html中引入require.js\n使用requireJS的方法很简单，只需要在html中引入`<script src=\"js/require.js\"  data-main=\"js/main\"  async=\"true\"></script>`就可以，和引入普通的js一样。\n\nasync属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应\n\n`data-main=\"js/main`main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以`.js`文件后缀可以省略\n这个`main.js`就是我们程序的js主入口，会第一个被require加载。和c的`main()`一样\n\n\n我们原来的html的`<head>`中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。\n\n并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n所以requireJS解决了这两个问题：\n1. 实现js文件的异步加载，避免网页失去响应；\n2. 管理模块之间的依赖性，便于代码的编写和维护。\n\n# main.js的编写\n我们试着在`main.js`中加入如下代码：\n\n```\nalert(\"Hello world!\")\n```\n\n打开`index,html`看到弹出“Hello world！”就说明我们的require引用成功\n\n这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文\n\n# math.js模块编写\n现在我们来编写一个求和的模块，然后在`main.js`中依赖该模块\n\n```\n//math.js\ndefine(function(){\n   var add = function(x,y){\n       return x+y'\n       \n   }\n   return{\n       add:add\n   }\n})\n```\n# 加载方式\n```\n//main.js\nrequire(['math'],function(){\n    console.log(math.add(1,2))   //3\n})\n```\n\n如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。\n\nrequire()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。\n\n```\n　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　　　// some code here\n　　});\n```\n默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在`main.js`的头部写一个`require.config()`方法就可以了\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n```\nrequire.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n\n```\n如果某个模块在另一台主机上，也可以直接指定它的网址，比如：\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min\"\n　　　　}\n　　});\n\n```\n\n> require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。\n","source":"_posts/Javascript-modular-programming3requirejs-use.md","raw":"---\ntitle: Javascript模块化编程（三）：require.js的用法\ndate: 2017-03-08 23:11:42\ntags: [js模块化,js]\ncategories: js\n---\n在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的\n本文的源码在个人的github上：https://github.com/sunshine940326/js-module-demo\n<!--more-->\n首先祭上[requireJS的官方api](http://www.requirejs.cn/docs/start.html)\n# 下载requireJS\n我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：http://www.requirejs.cn/docs/download.html\n\n你可以下载最新版本的`require.js`, `r.js`(node中使用)，以及requireJS的插件：\n1. text\n2. domReady\n3. cs(coffeeScript)\n4. i18n（国际化）\n\n# 在html中引入require.js\n使用requireJS的方法很简单，只需要在html中引入`<script src=\"js/require.js\"  data-main=\"js/main\"  async=\"true\"></script>`就可以，和引入普通的js一样。\n\nasync属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应\n\n`data-main=\"js/main`main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以`.js`文件后缀可以省略\n这个`main.js`就是我们程序的js主入口，会第一个被require加载。和c的`main()`一样\n\n\n我们原来的html的`<head>`中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。\n\n并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n所以requireJS解决了这两个问题：\n1. 实现js文件的异步加载，避免网页失去响应；\n2. 管理模块之间的依赖性，便于代码的编写和维护。\n\n# main.js的编写\n我们试着在`main.js`中加入如下代码：\n\n```\nalert(\"Hello world!\")\n```\n\n打开`index,html`看到弹出“Hello world！”就说明我们的require引用成功\n\n这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文\n\n# math.js模块编写\n现在我们来编写一个求和的模块，然后在`main.js`中依赖该模块\n\n```\n//math.js\ndefine(function(){\n   var add = function(x,y){\n       return x+y'\n       \n   }\n   return{\n       add:add\n   }\n})\n```\n# 加载方式\n```\n//main.js\nrequire(['math'],function(){\n    console.log(math.add(1,2))   //3\n})\n```\n\n如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。\n\nrequire()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。\n\n```\n　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　　　// some code here\n　　});\n```\n默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在`main.js`的头部写一个`require.config()`方法就可以了\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n```\nrequire.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n\n```\n如果某个模块在另一台主机上，也可以直接指定它的网址，比如：\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min\"\n　　　　}\n　　});\n\n```\n\n> require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。\n","slug":"Javascript-modular-programming3requirejs-use","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zwo0019vvxiwx68fpfu","content":"<p>在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的<br>本文的源码在个人的github上：<a href=\"https://github.com/sunshine940326/js-module-demo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/js-module-demo</a><br><a id=\"more\"></a><br>首先祭上<a href=\"http://www.requirejs.cn/docs/start.html\" target=\"_blank\" rel=\"external\">requireJS的官方api</a></p>\n<h1 id=\"下载requireJS\"><a href=\"#下载requireJS\" class=\"headerlink\" title=\"下载requireJS\"></a>下载requireJS</h1><p>我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：<a href=\"http://www.requirejs.cn/docs/download.html\" target=\"_blank\" rel=\"external\">http://www.requirejs.cn/docs/download.html</a></p>\n<p>你可以下载最新版本的<code>require.js</code>, <code>r.js</code>(node中使用)，以及requireJS的插件：</p>\n<ol>\n<li>text</li>\n<li>domReady</li>\n<li>cs(coffeeScript)</li>\n<li>i18n（国际化）</li>\n</ol>\n<h1 id=\"在html中引入require-js\"><a href=\"#在html中引入require-js\" class=\"headerlink\" title=\"在html中引入require.js\"></a>在html中引入require.js</h1><p>使用requireJS的方法很简单，只需要在html中引入<code>&lt;script src=&quot;js/require.js&quot;  data-main=&quot;js/main&quot;  async=&quot;true&quot;&gt;&lt;/script&gt;</code>就可以，和引入普通的js一样。</p>\n<p>async属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应</p>\n<p><code>data-main=&quot;js/main</code>main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以<code>.js</code>文件后缀可以省略<br>这个<code>main.js</code>就是我们程序的js主入口，会第一个被require加载。和c的<code>main()</code>一样</p>\n<p>我们原来的html的<code>&lt;head&gt;</code>中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。</p>\n<p>并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>所以requireJS解决了这两个问题：</p>\n<ol>\n<li>实现js文件的异步加载，避免网页失去响应；</li>\n<li>管理模块之间的依赖性，便于代码的编写和维护。</li>\n</ol>\n<h1 id=\"main-js的编写\"><a href=\"#main-js的编写\" class=\"headerlink\" title=\"main.js的编写\"></a>main.js的编写</h1><p>我们试着在<code>main.js</code>中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&quot;Hello world!&quot;)</div></pre></td></tr></table></figure>\n<p>打开<code>index,html</code>看到弹出“Hello world！”就说明我们的require引用成功</p>\n<p>这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文</p>\n<h1 id=\"math-js模块编写\"><a href=\"#math-js模块编写\" class=\"headerlink\" title=\"math.js模块编写\"></a>math.js模块编写</h1><p>现在我们来编写一个求和的模块，然后在<code>main.js</code>中依赖该模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//math.js</div><div class=\"line\">define(function()&#123;</div><div class=\"line\">   var add = function(x,y)&#123;</div><div class=\"line\">       return x+y&apos;</div><div class=\"line\">       </div><div class=\"line\">   &#125;</div><div class=\"line\">   return&#123;</div><div class=\"line\">       add:add</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js</div><div class=\"line\">require([&apos;math&apos;],function()&#123;</div><div class=\"line\">    console.log(math.add(1,2))   //3</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。</p>\n<p>require()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require([&apos;jquery&apos;, &apos;underscore&apos;, &apos;backbone&apos;], function ($, _, Backbone)&#123;</div><div class=\"line\">　　　　// some code here</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在<code>main.js</code>的头部写一个<code>require.config()</code>方法就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>另一种则是直接改变基目录（baseUrl）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">　　　　baseUrl: &quot;js/lib&quot;,</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的<br>本文的源码在个人的github上：<a href=\"https://github.com/sunshine940326/js-module-demo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/js-module-demo</a><br>","more":"<br>首先祭上<a href=\"http://www.requirejs.cn/docs/start.html\" target=\"_blank\" rel=\"external\">requireJS的官方api</a></p>\n<h1 id=\"下载requireJS\"><a href=\"#下载requireJS\" class=\"headerlink\" title=\"下载requireJS\"></a>下载requireJS</h1><p>我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：<a href=\"http://www.requirejs.cn/docs/download.html\" target=\"_blank\" rel=\"external\">http://www.requirejs.cn/docs/download.html</a></p>\n<p>你可以下载最新版本的<code>require.js</code>, <code>r.js</code>(node中使用)，以及requireJS的插件：</p>\n<ol>\n<li>text</li>\n<li>domReady</li>\n<li>cs(coffeeScript)</li>\n<li>i18n（国际化）</li>\n</ol>\n<h1 id=\"在html中引入require-js\"><a href=\"#在html中引入require-js\" class=\"headerlink\" title=\"在html中引入require.js\"></a>在html中引入require.js</h1><p>使用requireJS的方法很简单，只需要在html中引入<code>&lt;script src=&quot;js/require.js&quot;  data-main=&quot;js/main&quot;  async=&quot;true&quot;&gt;&lt;/script&gt;</code>就可以，和引入普通的js一样。</p>\n<p>async属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应</p>\n<p><code>data-main=&quot;js/main</code>main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以<code>.js</code>文件后缀可以省略<br>这个<code>main.js</code>就是我们程序的js主入口，会第一个被require加载。和c的<code>main()</code>一样</p>\n<p>我们原来的html的<code>&lt;head&gt;</code>中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。</p>\n<p>并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>所以requireJS解决了这两个问题：</p>\n<ol>\n<li>实现js文件的异步加载，避免网页失去响应；</li>\n<li>管理模块之间的依赖性，便于代码的编写和维护。</li>\n</ol>\n<h1 id=\"main-js的编写\"><a href=\"#main-js的编写\" class=\"headerlink\" title=\"main.js的编写\"></a>main.js的编写</h1><p>我们试着在<code>main.js</code>中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&quot;Hello world!&quot;)</div></pre></td></tr></table></figure>\n<p>打开<code>index,html</code>看到弹出“Hello world！”就说明我们的require引用成功</p>\n<p>这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文</p>\n<h1 id=\"math-js模块编写\"><a href=\"#math-js模块编写\" class=\"headerlink\" title=\"math.js模块编写\"></a>math.js模块编写</h1><p>现在我们来编写一个求和的模块，然后在<code>main.js</code>中依赖该模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//math.js</div><div class=\"line\">define(function()&#123;</div><div class=\"line\">   var add = function(x,y)&#123;</div><div class=\"line\">       return x+y&apos;</div><div class=\"line\">       </div><div class=\"line\">   &#125;</div><div class=\"line\">   return&#123;</div><div class=\"line\">       add:add</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js</div><div class=\"line\">require([&apos;math&apos;],function()&#123;</div><div class=\"line\">    console.log(math.add(1,2))   //3</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。</p>\n<p>require()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require([&apos;jquery&apos;, &apos;underscore&apos;, &apos;backbone&apos;], function ($, _, Backbone)&#123;</div><div class=\"line\">　　　　// some code here</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在<code>main.js</code>的头部写一个<code>require.config()</code>方法就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>另一种则是直接改变基目录（baseUrl）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">　　　　baseUrl: &quot;js/lib&quot;,</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</p>\n</blockquote>"},{"title":"移动端调试方法","date":"2017-03-28T15:21:55.000Z","_content":"在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。\n<!--more-->\n# iphone+safari\n之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合\n\n## iphone上设置\n设置 → Safari → 高级 → Web 检查器 → 开。\n![这里写图片描述](http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## pc端safari设置\nSafari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单\n![这里写图片描述](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg)\n\n设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了\n\n![](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg)\n\n# android手机+pc\n安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭\n\n1. 首先需要装chrom浏览器\n2. 打开手机的开发者模式，一般是：设置->关于手机->版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开![](http://img0.tuicool.com/JZjuMnM.png!web)\n3. 将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定![](http://img2.tuicool.com/AbE3E3.png!web)\n4. 在手机chrom上打开要调试的页面\n5. 在电脑上打开chrom，新开一地址栏为`chrome://inspect/`的页面,然后就可以调试了![](http://img0.tuicool.com/IzM7Bnv.png!web)\n6. 点击inspect弹出chrom调试工具\n\n# 微信开发者工具\n由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享\n\n## 前期准备\n这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。\n\n## 官方文档&下载地址\n[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)其中有下载地址\n\n## 模拟微信环境调试\n直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求\n\n## 真机调试\n在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥...\n\n---------------3.29更---------------------\n我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证\n在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png)\n然后根据提示一步一步安装就可以了。\n安装完证书就可以打开网页了\n\n# weinre\n跟着我念三遍weinre大法好，weinre大法好，weinre大法好~\n之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！\n缺点就是配置起来有削微的麻烦~\n## 什么是weinre\nweinre是web inspector remote（远程web检查器）的缩写\n\n## 安装weinre\n目前安装weinre我了解到有两种方式：node和java两种方式\n### node方式安装weinre\n首先确保你的电脑上有node环境，然后使用npm来安装\nwindows下\n`npm install weinre -g --registry=https://registry.npm.taobao.org`\nmac下\n`sudo npm install weinre -g --registry=https://registry.npm.taobao.org`\n### java环境下安装weinre\n首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: https://pan.baidu.com/s/1slRiOl3 密码: dsmp\n\n## 运行weinre\n### node环境下\n`weinre --httpPort 8081 --boundHost -all-`\n`8081`是调试服务器运行的端口号，\n`boundHost`是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具\n### java环境下\n在weinre所在文件夹的地址栏输入代码：`java -jar weinre.jar --httpPort 8081 --boundHost -all-`\n![](http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png)\n\n## 开始调试\n设置好端口之后我们在本地打开`http://192.168.0.126:8081`然后就可以看见weinre的基本信息\n![](http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif)\n\n之后我们需要在需要调试的页面上加上一段script标签\n`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n需要改为你自己的ip地址\n### ip的查询方式\n在cmd输入`ipconfig`，然后ipv4中后面跟的就是本机的ip地址\n\n## 手机打开需要调试的链接\n### 在staticWebDir目录下\n本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：`C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web`，然后手机访问:`http://192.168.0.126/contact_page/index.html`，然后在电脑上打开刚刚的页面`http://196.168.0.126:8081`![](http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png)点击`debug client user interface`之后出现\n![](http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png)，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的`elements`和其他的tag就可以进行调试\n\n### 在xampp下\n因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。\n项目存放的地址是`xampp\\htdocs\\app`\n修改配置：\n`C:\\Windows\\System32\\drivers\\etc\\hosts`文件下\n最后一行\n`127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com`\n然后在`C:\\xampp\\apache\\conf\\extra`文件里面修改\n```\n<VirtualHost *:80>\n    DocumentRoot \"C:\\xampp\\htdocs\\ltrip\"\n    ServerName ltrip.com \n    ServerAlias \n  <Directory \"C:\\xampp\\htdocs\\ltrip\">\n      Options FollowSymLinks ExecCGI\n      AllowOverride All\n      Order allow,deny\n      Allow from all\n      Require all granted\n  </Directory>\n</VirtualHost>\n```\n其中的`ServerName ltrip.com `中的`ltrip.com`就代替了` \"C:\\xampp\\htdocs\\ltrip\"`这个路径，\n所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:`http://192.168.0.168/ltrip.com`\n### 使用wenstorm\n在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如`file:///C:/Users/supfn/Desktop/contact_page/index.html`这样子的，在手机肯定访问不到我的电脑上的路径。\n这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。\nwebstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~\n简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器\n# 使用Fiddle抓包\n如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~\nfiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了\n## 下载fiddler\nFiddler 下载地址 ：https://www.telerik.com/download/fiddler\nFiddler 离线下载地址：http://pan.baidu.com/s/1i3NvE8P 密码：ozem\n## 使用fiddler抓取数据包\n在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888\n在fiddler上，点击菜单栏中的 [Tools] –> [Fiddler Options]\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png)\n 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK\n ![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png)\n## 使用weinre与fiddler组合\n我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签\n在完成配置之后打开要调试的链接，然后在fiddler中设置断点\n我们在fiddler中打下页面断点,bpafter + 想要打断点的网址![](http://img1.tuicool.com/Uvii2aN.png!web)\n再次访问该网站，发现本条请求被block住了\n![这里写图片描述](http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在右边加上weinre需要的script标签`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~\n\n参考文章\n- [Fiddler 抓包工具总结](http://blog.csdn.net/qq_21445563/article/details/51017605)\n- [移动端调试工具weinre安装教程（java版）](http://www.cnblogs.com/jhyxk2007/p/5089997.html)\n- [聊一聊移动调试那些事儿](http://www.tuicool.com/articles/MbYz6fA)","source":"_posts/Mobile-terminal-debugging-method.md","raw":"---\ntitle: 移动端调试方法\ndate: 2017-03-28 23:21:55\ntags: [调试] \ncategories: 日积月累\n---\n在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。\n<!--more-->\n# iphone+safari\n之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合\n\n## iphone上设置\n设置 → Safari → 高级 → Web 检查器 → 开。\n![这里写图片描述](http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## pc端safari设置\nSafari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单\n![这里写图片描述](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg)\n\n设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了\n\n![](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg)\n\n# android手机+pc\n安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭\n\n1. 首先需要装chrom浏览器\n2. 打开手机的开发者模式，一般是：设置->关于手机->版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开![](http://img0.tuicool.com/JZjuMnM.png!web)\n3. 将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定![](http://img2.tuicool.com/AbE3E3.png!web)\n4. 在手机chrom上打开要调试的页面\n5. 在电脑上打开chrom，新开一地址栏为`chrome://inspect/`的页面,然后就可以调试了![](http://img0.tuicool.com/IzM7Bnv.png!web)\n6. 点击inspect弹出chrom调试工具\n\n# 微信开发者工具\n由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享\n\n## 前期准备\n这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。\n\n## 官方文档&下载地址\n[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)其中有下载地址\n\n## 模拟微信环境调试\n直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求\n\n## 真机调试\n在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥...\n\n---------------3.29更---------------------\n我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证\n在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png)\n然后根据提示一步一步安装就可以了。\n安装完证书就可以打开网页了\n\n# weinre\n跟着我念三遍weinre大法好，weinre大法好，weinre大法好~\n之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！\n缺点就是配置起来有削微的麻烦~\n## 什么是weinre\nweinre是web inspector remote（远程web检查器）的缩写\n\n## 安装weinre\n目前安装weinre我了解到有两种方式：node和java两种方式\n### node方式安装weinre\n首先确保你的电脑上有node环境，然后使用npm来安装\nwindows下\n`npm install weinre -g --registry=https://registry.npm.taobao.org`\nmac下\n`sudo npm install weinre -g --registry=https://registry.npm.taobao.org`\n### java环境下安装weinre\n首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: https://pan.baidu.com/s/1slRiOl3 密码: dsmp\n\n## 运行weinre\n### node环境下\n`weinre --httpPort 8081 --boundHost -all-`\n`8081`是调试服务器运行的端口号，\n`boundHost`是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具\n### java环境下\n在weinre所在文件夹的地址栏输入代码：`java -jar weinre.jar --httpPort 8081 --boundHost -all-`\n![](http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png)\n\n## 开始调试\n设置好端口之后我们在本地打开`http://192.168.0.126:8081`然后就可以看见weinre的基本信息\n![](http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif)\n\n之后我们需要在需要调试的页面上加上一段script标签\n`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n需要改为你自己的ip地址\n### ip的查询方式\n在cmd输入`ipconfig`，然后ipv4中后面跟的就是本机的ip地址\n\n## 手机打开需要调试的链接\n### 在staticWebDir目录下\n本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：`C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web`，然后手机访问:`http://192.168.0.126/contact_page/index.html`，然后在电脑上打开刚刚的页面`http://196.168.0.126:8081`![](http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png)点击`debug client user interface`之后出现\n![](http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png)，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的`elements`和其他的tag就可以进行调试\n\n### 在xampp下\n因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。\n项目存放的地址是`xampp\\htdocs\\app`\n修改配置：\n`C:\\Windows\\System32\\drivers\\etc\\hosts`文件下\n最后一行\n`127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com`\n然后在`C:\\xampp\\apache\\conf\\extra`文件里面修改\n```\n<VirtualHost *:80>\n    DocumentRoot \"C:\\xampp\\htdocs\\ltrip\"\n    ServerName ltrip.com \n    ServerAlias \n  <Directory \"C:\\xampp\\htdocs\\ltrip\">\n      Options FollowSymLinks ExecCGI\n      AllowOverride All\n      Order allow,deny\n      Allow from all\n      Require all granted\n  </Directory>\n</VirtualHost>\n```\n其中的`ServerName ltrip.com `中的`ltrip.com`就代替了` \"C:\\xampp\\htdocs\\ltrip\"`这个路径，\n所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:`http://192.168.0.168/ltrip.com`\n### 使用wenstorm\n在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如`file:///C:/Users/supfn/Desktop/contact_page/index.html`这样子的，在手机肯定访问不到我的电脑上的路径。\n这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。\nwebstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~\n简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器\n# 使用Fiddle抓包\n如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~\nfiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了\n## 下载fiddler\nFiddler 下载地址 ：https://www.telerik.com/download/fiddler\nFiddler 离线下载地址：http://pan.baidu.com/s/1i3NvE8P 密码：ozem\n## 使用fiddler抓取数据包\n在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888\n在fiddler上，点击菜单栏中的 [Tools] –> [Fiddler Options]\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png)\n 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK\n ![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png)\n## 使用weinre与fiddler组合\n我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签\n在完成配置之后打开要调试的链接，然后在fiddler中设置断点\n我们在fiddler中打下页面断点,bpafter + 想要打断点的网址![](http://img1.tuicool.com/Uvii2aN.png!web)\n再次访问该网站，发现本条请求被block住了\n![这里写图片描述](http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在右边加上weinre需要的script标签`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~\n\n参考文章\n- [Fiddler 抓包工具总结](http://blog.csdn.net/qq_21445563/article/details/51017605)\n- [移动端调试工具weinre安装教程（java版）](http://www.cnblogs.com/jhyxk2007/p/5089997.html)\n- [聊一聊移动调试那些事儿](http://www.tuicool.com/articles/MbYz6fA)","slug":"Mobile-terminal-debugging-method","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zwr001cvvxiqmnhyg4w","content":"<p>在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。<br><a id=\"more\"></a></p>\n<h1 id=\"iphone-safari\"><a href=\"#iphone-safari\" class=\"headerlink\" title=\"iphone+safari\"></a>iphone+safari</h1><p>之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合</p>\n<h2 id=\"iphone上设置\"><a href=\"#iphone上设置\" class=\"headerlink\" title=\"iphone上设置\"></a>iphone上设置</h2><p>设置 → Safari → 高级 → Web 检查器 → 开。<br><img src=\"http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"pc端safari设置\"><a href=\"#pc端safari设置\" class=\"headerlink\" title=\"pc端safari设置\"></a>pc端safari设置</h2><p>Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单<br><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg\" alt=\"这里写图片描述\"></p>\n<p>设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了</p>\n<p><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg\" alt=\"\"></p>\n<h1 id=\"android手机-pc\"><a href=\"#android手机-pc\" class=\"headerlink\" title=\"android手机+pc\"></a>android手机+pc</h1><p>安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭</p>\n<ol>\n<li>首先需要装chrom浏览器</li>\n<li>打开手机的开发者模式，一般是：设置-&gt;关于手机-&gt;版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开<img src=\"http://img0.tuicool.com/JZjuMnM.png!web\" alt=\"\"></li>\n<li>将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定<img src=\"http://img2.tuicool.com/AbE3E3.png!web\" alt=\"\"></li>\n<li>在手机chrom上打开要调试的页面</li>\n<li>在电脑上打开chrom，新开一地址栏为<code>chrome://inspect/</code>的页面,然后就可以调试了<img src=\"http://img0.tuicool.com/IzM7Bnv.png!web\" alt=\"\"></li>\n<li>点击inspect弹出chrom调试工具</li>\n</ol>\n<h1 id=\"微信开发者工具\"><a href=\"#微信开发者工具\" class=\"headerlink\" title=\"微信开发者工具\"></a>微信开发者工具</h1><p>由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。</p>\n<h2 id=\"官方文档-amp-下载地址\"><a href=\"#官方文档-amp-下载地址\" class=\"headerlink\" title=\"官方文档&amp;下载地址\"></a>官方文档&amp;下载地址</h2><p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140&amp;token=&amp;lang=zh_CN\" target=\"_blank\" rel=\"external\">官方文档</a>其中有下载地址</p>\n<h2 id=\"模拟微信环境调试\"><a href=\"#模拟微信环境调试\" class=\"headerlink\" title=\"模拟微信环境调试\"></a>模拟微信环境调试</h2><p>直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求</p>\n<h2 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h2><p>在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥…</p>\n<p>—————3.29更———————<br>我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证<br>在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png\" alt=\"\"><br>然后根据提示一步一步安装就可以了。<br>安装完证书就可以打开网页了</p>\n<h1 id=\"weinre\"><a href=\"#weinre\" class=\"headerlink\" title=\"weinre\"></a>weinre</h1><p>跟着我念三遍weinre大法好，weinre大法好，weinre大法好~<br>之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！<br>缺点就是配置起来有削微的麻烦~</p>\n<h2 id=\"什么是weinre\"><a href=\"#什么是weinre\" class=\"headerlink\" title=\"什么是weinre\"></a>什么是weinre</h2><p>weinre是web inspector remote（远程web检查器）的缩写</p>\n<h2 id=\"安装weinre\"><a href=\"#安装weinre\" class=\"headerlink\" title=\"安装weinre\"></a>安装weinre</h2><p>目前安装weinre我了解到有两种方式：node和java两种方式</p>\n<h3 id=\"node方式安装weinre\"><a href=\"#node方式安装weinre\" class=\"headerlink\" title=\"node方式安装weinre\"></a>node方式安装weinre</h3><p>首先确保你的电脑上有node环境，然后使用npm来安装<br>windows下<br><code>npm install weinre -g --registry=https://registry.npm.taobao.org</code><br>mac下<br><code>sudo npm install weinre -g --registry=https://registry.npm.taobao.org</code></p>\n<h3 id=\"java环境下安装weinre\"><a href=\"#java环境下安装weinre\" class=\"headerlink\" title=\"java环境下安装weinre\"></a>java环境下安装weinre</h3><p>首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: <a href=\"https://pan.baidu.com/s/1slRiOl3\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/s/1slRiOl3</a> 密码: dsmp</p>\n<h2 id=\"运行weinre\"><a href=\"#运行weinre\" class=\"headerlink\" title=\"运行weinre\"></a>运行weinre</h2><h3 id=\"node环境下\"><a href=\"#node环境下\" class=\"headerlink\" title=\"node环境下\"></a>node环境下</h3><p><code>weinre --httpPort 8081 --boundHost -all-</code><br><code>8081</code>是调试服务器运行的端口号，<br><code>boundHost</code>是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具</p>\n<h3 id=\"java环境下\"><a href=\"#java环境下\" class=\"headerlink\" title=\"java环境下\"></a>java环境下</h3><p>在weinre所在文件夹的地址栏输入代码：<code>java -jar weinre.jar --httpPort 8081 --boundHost -all-</code><br><img src=\"http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png\" alt=\"\"></p>\n<h2 id=\"开始调试\"><a href=\"#开始调试\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>设置好端口之后我们在本地打开<code>http://192.168.0.126:8081</code>然后就可以看见weinre的基本信息<br><img src=\"http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif\" alt=\"\"></p>\n<p>之后我们需要在需要调试的页面上加上一段script标签<br><code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>需要改为你自己的ip地址</p>\n<h3 id=\"ip的查询方式\"><a href=\"#ip的查询方式\" class=\"headerlink\" title=\"ip的查询方式\"></a>ip的查询方式</h3><p>在cmd输入<code>ipconfig</code>，然后ipv4中后面跟的就是本机的ip地址</p>\n<h2 id=\"手机打开需要调试的链接\"><a href=\"#手机打开需要调试的链接\" class=\"headerlink\" title=\"手机打开需要调试的链接\"></a>手机打开需要调试的链接</h2><h3 id=\"在staticWebDir目录下\"><a href=\"#在staticWebDir目录下\" class=\"headerlink\" title=\"在staticWebDir目录下\"></a>在staticWebDir目录下</h3><p>本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：<code>C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web</code>，然后手机访问:<code>http://192.168.0.126/contact_page/index.html</code>，然后在电脑上打开刚刚的页面<code>http://196.168.0.126:8081</code><img src=\"http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png\" alt=\"\">点击<code>debug client user interface</code>之后出现<br><img src=\"http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png\" alt=\"\">，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的<code>elements</code>和其他的tag就可以进行调试</p>\n<h3 id=\"在xampp下\"><a href=\"#在xampp下\" class=\"headerlink\" title=\"在xampp下\"></a>在xampp下</h3><p>因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。<br>项目存放的地址是<code>xampp\\htdocs\\app</code><br>修改配置：<br><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>文件下<br>最后一行<br><code>127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com</code><br>然后在<code>C:\\xampp\\apache\\conf\\extra</code>文件里面修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    DocumentRoot &quot;C:\\xampp\\htdocs\\ltrip&quot;</div><div class=\"line\">    ServerName ltrip.com </div><div class=\"line\">    ServerAlias </div><div class=\"line\">  &lt;Directory &quot;C:\\xampp\\htdocs\\ltrip&quot;&gt;</div><div class=\"line\">      Options FollowSymLinks ExecCGI</div><div class=\"line\">      AllowOverride All</div><div class=\"line\">      Order allow,deny</div><div class=\"line\">      Allow from all</div><div class=\"line\">      Require all granted</div><div class=\"line\">  &lt;/Directory&gt;</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>其中的<code>ServerName ltrip.com</code>中的<code>ltrip.com</code>就代替了<code>&quot;C:\\xampp\\htdocs\\ltrip&quot;</code>这个路径，<br>所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:<code>http://192.168.0.168/ltrip.com</code></p>\n<h3 id=\"使用wenstorm\"><a href=\"#使用wenstorm\" class=\"headerlink\" title=\"使用wenstorm\"></a>使用wenstorm</h3><p>在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如<code>file:///C:/Users/supfn/Desktop/contact_page/index.html</code>这样子的，在手机肯定访问不到我的电脑上的路径。<br>这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。<br>webstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~<br>简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器</p>\n<h1 id=\"使用Fiddle抓包\"><a href=\"#使用Fiddle抓包\" class=\"headerlink\" title=\"使用Fiddle抓包\"></a>使用Fiddle抓包</h1><p>如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~<br>fiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了</p>\n<h2 id=\"下载fiddler\"><a href=\"#下载fiddler\" class=\"headerlink\" title=\"下载fiddler\"></a>下载fiddler</h2><p>Fiddler 下载地址 ：<a href=\"https://www.telerik.com/download/fiddler\" target=\"_blank\" rel=\"external\">https://www.telerik.com/download/fiddler</a><br>Fiddler 离线下载地址：<a href=\"http://pan.baidu.com/s/1i3NvE8P\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1i3NvE8P</a> 密码：ozem</p>\n<h2 id=\"使用fiddler抓取数据包\"><a href=\"#使用fiddler抓取数据包\" class=\"headerlink\" title=\"使用fiddler抓取数据包\"></a>使用fiddler抓取数据包</h2><p>在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888<br>在fiddler上，点击菜单栏中的 [Tools] –&gt; [Fiddler Options]<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png\" alt=\"\"><br> 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK<br> <img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png\" alt=\"\"></p>\n<h2 id=\"使用weinre与fiddler组合\"><a href=\"#使用weinre与fiddler组合\" class=\"headerlink\" title=\"使用weinre与fiddler组合\"></a>使用weinre与fiddler组合</h2><p>我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签<br>在完成配置之后打开要调试的链接，然后在fiddler中设置断点<br>我们在fiddler中打下页面断点,bpafter + 想要打断点的网址<img src=\"http://img1.tuicool.com/Uvii2aN.png!web\" alt=\"\"><br>再次访问该网站，发现本条请求被block住了<br><img src=\"http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在右边加上weinre需要的script标签<code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~</p>\n<p>参考文章</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/qq_21445563/article/details/51017605\" target=\"_blank\" rel=\"external\">Fiddler 抓包工具总结</a></li>\n<li><a href=\"http://www.cnblogs.com/jhyxk2007/p/5089997.html\" target=\"_blank\" rel=\"external\">移动端调试工具weinre安装教程（java版）</a></li>\n<li><a href=\"http://www.tuicool.com/articles/MbYz6fA\" target=\"_blank\" rel=\"external\">聊一聊移动调试那些事儿</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。<br>","more":"</p>\n<h1 id=\"iphone-safari\"><a href=\"#iphone-safari\" class=\"headerlink\" title=\"iphone+safari\"></a>iphone+safari</h1><p>之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合</p>\n<h2 id=\"iphone上设置\"><a href=\"#iphone上设置\" class=\"headerlink\" title=\"iphone上设置\"></a>iphone上设置</h2><p>设置 → Safari → 高级 → Web 检查器 → 开。<br><img src=\"http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"pc端safari设置\"><a href=\"#pc端safari设置\" class=\"headerlink\" title=\"pc端safari设置\"></a>pc端safari设置</h2><p>Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单<br><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg\" alt=\"这里写图片描述\"></p>\n<p>设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了</p>\n<p><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg\" alt=\"\"></p>\n<h1 id=\"android手机-pc\"><a href=\"#android手机-pc\" class=\"headerlink\" title=\"android手机+pc\"></a>android手机+pc</h1><p>安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭</p>\n<ol>\n<li>首先需要装chrom浏览器</li>\n<li>打开手机的开发者模式，一般是：设置-&gt;关于手机-&gt;版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开<img src=\"http://img0.tuicool.com/JZjuMnM.png!web\" alt=\"\"></li>\n<li>将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定<img src=\"http://img2.tuicool.com/AbE3E3.png!web\" alt=\"\"></li>\n<li>在手机chrom上打开要调试的页面</li>\n<li>在电脑上打开chrom，新开一地址栏为<code>chrome://inspect/</code>的页面,然后就可以调试了<img src=\"http://img0.tuicool.com/IzM7Bnv.png!web\" alt=\"\"></li>\n<li>点击inspect弹出chrom调试工具</li>\n</ol>\n<h1 id=\"微信开发者工具\"><a href=\"#微信开发者工具\" class=\"headerlink\" title=\"微信开发者工具\"></a>微信开发者工具</h1><p>由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。</p>\n<h2 id=\"官方文档-amp-下载地址\"><a href=\"#官方文档-amp-下载地址\" class=\"headerlink\" title=\"官方文档&amp;下载地址\"></a>官方文档&amp;下载地址</h2><p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140&amp;token=&amp;lang=zh_CN\" target=\"_blank\" rel=\"external\">官方文档</a>其中有下载地址</p>\n<h2 id=\"模拟微信环境调试\"><a href=\"#模拟微信环境调试\" class=\"headerlink\" title=\"模拟微信环境调试\"></a>模拟微信环境调试</h2><p>直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求</p>\n<h2 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h2><p>在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥…</p>\n<p>—————3.29更———————<br>我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证<br>在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png\" alt=\"\"><br>然后根据提示一步一步安装就可以了。<br>安装完证书就可以打开网页了</p>\n<h1 id=\"weinre\"><a href=\"#weinre\" class=\"headerlink\" title=\"weinre\"></a>weinre</h1><p>跟着我念三遍weinre大法好，weinre大法好，weinre大法好~<br>之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！<br>缺点就是配置起来有削微的麻烦~</p>\n<h2 id=\"什么是weinre\"><a href=\"#什么是weinre\" class=\"headerlink\" title=\"什么是weinre\"></a>什么是weinre</h2><p>weinre是web inspector remote（远程web检查器）的缩写</p>\n<h2 id=\"安装weinre\"><a href=\"#安装weinre\" class=\"headerlink\" title=\"安装weinre\"></a>安装weinre</h2><p>目前安装weinre我了解到有两种方式：node和java两种方式</p>\n<h3 id=\"node方式安装weinre\"><a href=\"#node方式安装weinre\" class=\"headerlink\" title=\"node方式安装weinre\"></a>node方式安装weinre</h3><p>首先确保你的电脑上有node环境，然后使用npm来安装<br>windows下<br><code>npm install weinre -g --registry=https://registry.npm.taobao.org</code><br>mac下<br><code>sudo npm install weinre -g --registry=https://registry.npm.taobao.org</code></p>\n<h3 id=\"java环境下安装weinre\"><a href=\"#java环境下安装weinre\" class=\"headerlink\" title=\"java环境下安装weinre\"></a>java环境下安装weinre</h3><p>首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: <a href=\"https://pan.baidu.com/s/1slRiOl3\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/s/1slRiOl3</a> 密码: dsmp</p>\n<h2 id=\"运行weinre\"><a href=\"#运行weinre\" class=\"headerlink\" title=\"运行weinre\"></a>运行weinre</h2><h3 id=\"node环境下\"><a href=\"#node环境下\" class=\"headerlink\" title=\"node环境下\"></a>node环境下</h3><p><code>weinre --httpPort 8081 --boundHost -all-</code><br><code>8081</code>是调试服务器运行的端口号，<br><code>boundHost</code>是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具</p>\n<h3 id=\"java环境下\"><a href=\"#java环境下\" class=\"headerlink\" title=\"java环境下\"></a>java环境下</h3><p>在weinre所在文件夹的地址栏输入代码：<code>java -jar weinre.jar --httpPort 8081 --boundHost -all-</code><br><img src=\"http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png\" alt=\"\"></p>\n<h2 id=\"开始调试\"><a href=\"#开始调试\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>设置好端口之后我们在本地打开<code>http://192.168.0.126:8081</code>然后就可以看见weinre的基本信息<br><img src=\"http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif\" alt=\"\"></p>\n<p>之后我们需要在需要调试的页面上加上一段script标签<br><code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>需要改为你自己的ip地址</p>\n<h3 id=\"ip的查询方式\"><a href=\"#ip的查询方式\" class=\"headerlink\" title=\"ip的查询方式\"></a>ip的查询方式</h3><p>在cmd输入<code>ipconfig</code>，然后ipv4中后面跟的就是本机的ip地址</p>\n<h2 id=\"手机打开需要调试的链接\"><a href=\"#手机打开需要调试的链接\" class=\"headerlink\" title=\"手机打开需要调试的链接\"></a>手机打开需要调试的链接</h2><h3 id=\"在staticWebDir目录下\"><a href=\"#在staticWebDir目录下\" class=\"headerlink\" title=\"在staticWebDir目录下\"></a>在staticWebDir目录下</h3><p>本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：<code>C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web</code>，然后手机访问:<code>http://192.168.0.126/contact_page/index.html</code>，然后在电脑上打开刚刚的页面<code>http://196.168.0.126:8081</code><img src=\"http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png\" alt=\"\">点击<code>debug client user interface</code>之后出现<br><img src=\"http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png\" alt=\"\">，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的<code>elements</code>和其他的tag就可以进行调试</p>\n<h3 id=\"在xampp下\"><a href=\"#在xampp下\" class=\"headerlink\" title=\"在xampp下\"></a>在xampp下</h3><p>因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。<br>项目存放的地址是<code>xampp\\htdocs\\app</code><br>修改配置：<br><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>文件下<br>最后一行<br><code>127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com</code><br>然后在<code>C:\\xampp\\apache\\conf\\extra</code>文件里面修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    DocumentRoot &quot;C:\\xampp\\htdocs\\ltrip&quot;</div><div class=\"line\">    ServerName ltrip.com </div><div class=\"line\">    ServerAlias </div><div class=\"line\">  &lt;Directory &quot;C:\\xampp\\htdocs\\ltrip&quot;&gt;</div><div class=\"line\">      Options FollowSymLinks ExecCGI</div><div class=\"line\">      AllowOverride All</div><div class=\"line\">      Order allow,deny</div><div class=\"line\">      Allow from all</div><div class=\"line\">      Require all granted</div><div class=\"line\">  &lt;/Directory&gt;</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>其中的<code>ServerName ltrip.com</code>中的<code>ltrip.com</code>就代替了<code>&quot;C:\\xampp\\htdocs\\ltrip&quot;</code>这个路径，<br>所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:<code>http://192.168.0.168/ltrip.com</code></p>\n<h3 id=\"使用wenstorm\"><a href=\"#使用wenstorm\" class=\"headerlink\" title=\"使用wenstorm\"></a>使用wenstorm</h3><p>在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如<code>file:///C:/Users/supfn/Desktop/contact_page/index.html</code>这样子的，在手机肯定访问不到我的电脑上的路径。<br>这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。<br>webstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~<br>简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器</p>\n<h1 id=\"使用Fiddle抓包\"><a href=\"#使用Fiddle抓包\" class=\"headerlink\" title=\"使用Fiddle抓包\"></a>使用Fiddle抓包</h1><p>如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~<br>fiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了</p>\n<h2 id=\"下载fiddler\"><a href=\"#下载fiddler\" class=\"headerlink\" title=\"下载fiddler\"></a>下载fiddler</h2><p>Fiddler 下载地址 ：<a href=\"https://www.telerik.com/download/fiddler\" target=\"_blank\" rel=\"external\">https://www.telerik.com/download/fiddler</a><br>Fiddler 离线下载地址：<a href=\"http://pan.baidu.com/s/1i3NvE8P\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1i3NvE8P</a> 密码：ozem</p>\n<h2 id=\"使用fiddler抓取数据包\"><a href=\"#使用fiddler抓取数据包\" class=\"headerlink\" title=\"使用fiddler抓取数据包\"></a>使用fiddler抓取数据包</h2><p>在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888<br>在fiddler上，点击菜单栏中的 [Tools] –&gt; [Fiddler Options]<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png\" alt=\"\"><br> 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK<br> <img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png\" alt=\"\"></p>\n<h2 id=\"使用weinre与fiddler组合\"><a href=\"#使用weinre与fiddler组合\" class=\"headerlink\" title=\"使用weinre与fiddler组合\"></a>使用weinre与fiddler组合</h2><p>我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签<br>在完成配置之后打开要调试的链接，然后在fiddler中设置断点<br>我们在fiddler中打下页面断点,bpafter + 想要打断点的网址<img src=\"http://img1.tuicool.com/Uvii2aN.png!web\" alt=\"\"><br>再次访问该网站，发现本条请求被block住了<br><img src=\"http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在右边加上weinre需要的script标签<code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~</p>\n<p>参考文章</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/qq_21445563/article/details/51017605\" target=\"_blank\" rel=\"external\">Fiddler 抓包工具总结</a></li>\n<li><a href=\"http://www.cnblogs.com/jhyxk2007/p/5089997.html\" target=\"_blank\" rel=\"external\">移动端调试工具weinre安装教程（java版）</a></li>\n<li><a href=\"http://www.tuicool.com/articles/MbYz6fA\" target=\"_blank\" rel=\"external\">聊一聊移动调试那些事儿</a></li>\n</ul>"},{"title":"react（一）：初识react","date":"2017-03-01T14:01:40.000Z","_content":"这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world\n\n<!--more-->\n\n\n这里是看慕课网初学react做的一些总结[[课程]React入门](http://www.imooc.com/video/9819)，\n\n什么是react\n========\n\n\n在这一个小时内对react的认识中，我有了对react的初步印象\n\n 1. js库\n 2. facebook开发的\n 3. 高度的组件化\n 4. 使用jsx\n 5. 将html和js结合\n 6. 单项传输数据\n 7. 虚拟dom\n 8. 只负责view层\n\nreact并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI\n\nreact应用场景\n========\n\n 1. 复杂场景下的高性能\n 2. 重用组件库，组件组合\n 3. “懒”\n\n使用react\n=======\n最正确的打开方式还是直接看官方api：[react入门教程](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n或者阮一峰老师的教程：[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n\n我们先用React JSFiddle来创建一个最简单的hello world\n\nhtml：\n\n```\n//这里引入的js库只是方便学习和实验的，在正式项目不引入\n<script src=\"https://facebook.github.io/react/js/jsfiddle-integration-babel.js\"></script>\n\n<div id=\"container\">\n    <!-- This element's contents will be replaced with your component. -->\n</div>\n```\n\njs:\n\n```\n\n//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。\n\n//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置\n\n//自定义的componments通过React.createClass来进行创建\n//{}里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合\nvar Hello = React.createClass({\n  render: function() {\n  \n    \n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nReactDOM.render(\n  //生成自定义标签\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n\n为html添加css\n=========\n添加类\n-----\n因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className\n\n内联样式\n-----\n需要使用驼峰写法的键值对\n```\nreturn <div style={{color:'red'}}>Hello {this.props.name}</div>;\n```\n\n","source":"_posts/React-first.md","raw":"---\ntitle: react（一）：初识react\ndate: 2017-03-01 22:01:40\ntags: react\ncategories: react\n---\n这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world\n\n<!--more-->\n\n\n这里是看慕课网初学react做的一些总结[[课程]React入门](http://www.imooc.com/video/9819)，\n\n什么是react\n========\n\n\n在这一个小时内对react的认识中，我有了对react的初步印象\n\n 1. js库\n 2. facebook开发的\n 3. 高度的组件化\n 4. 使用jsx\n 5. 将html和js结合\n 6. 单项传输数据\n 7. 虚拟dom\n 8. 只负责view层\n\nreact并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI\n\nreact应用场景\n========\n\n 1. 复杂场景下的高性能\n 2. 重用组件库，组件组合\n 3. “懒”\n\n使用react\n=======\n最正确的打开方式还是直接看官方api：[react入门教程](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n或者阮一峰老师的教程：[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n\n我们先用React JSFiddle来创建一个最简单的hello world\n\nhtml：\n\n```\n//这里引入的js库只是方便学习和实验的，在正式项目不引入\n<script src=\"https://facebook.github.io/react/js/jsfiddle-integration-babel.js\"></script>\n\n<div id=\"container\">\n    <!-- This element's contents will be replaced with your component. -->\n</div>\n```\n\njs:\n\n```\n\n//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。\n\n//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置\n\n//自定义的componments通过React.createClass来进行创建\n//{}里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合\nvar Hello = React.createClass({\n  render: function() {\n  \n    \n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nReactDOM.render(\n  //生成自定义标签\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n\n为html添加css\n=========\n添加类\n-----\n因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className\n\n内联样式\n-----\n需要使用驼峰写法的键值对\n```\nreturn <div style={{color:'red'}}>Hello {this.props.name}</div>;\n```\n\n","slug":"React-first","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zwv001fvvxizj7fgfxz","content":"<p>这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world</p>\n<a id=\"more\"></a>\n<p>这里是看慕课网初学react做的一些总结<a href=\"http://www.imooc.com/video/9819\" target=\"_blank\" rel=\"external\">[课程]React入门</a>，</p>\n<h1 id=\"什么是react\"><a href=\"#什么是react\" class=\"headerlink\" title=\"什么是react\"></a>什么是react</h1><p>在这一个小时内对react的认识中，我有了对react的初步印象</p>\n<ol>\n<li>js库</li>\n<li>facebook开发的</li>\n<li>高度的组件化</li>\n<li>使用jsx</li>\n<li>将html和js结合</li>\n<li>单项传输数据</li>\n<li>虚拟dom</li>\n<li>只负责view层</li>\n</ol>\n<p>react并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI</p>\n<h1 id=\"react应用场景\"><a href=\"#react应用场景\" class=\"headerlink\" title=\"react应用场景\"></a>react应用场景</h1><ol>\n<li>复杂场景下的高性能</li>\n<li>重用组件库，组件组合</li>\n<li>“懒”</li>\n</ol>\n<h1 id=\"使用react\"><a href=\"#使用react\" class=\"headerlink\" title=\"使用react\"></a>使用react</h1><p>最正确的打开方式还是直接看官方api：<a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\" target=\"_blank\" rel=\"external\">react入门教程</a></p>\n<p>或者阮一峰老师的教程：<a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a></p>\n<p>我们先用React JSFiddle来创建一个最简单的hello world</p>\n<p>html：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这里引入的js库只是方便学习和实验的，在正式项目不引入</div><div class=\"line\">&lt;script src=&quot;https://facebook.github.io/react/js/jsfiddle-integration-babel.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;!-- This element&apos;s contents will be replaced with your component. --&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</div><div class=\"line\"></div><div class=\"line\">//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置</div><div class=\"line\"></div><div class=\"line\">//自定义的componments通过React.createClass来进行创建</div><div class=\"line\">//&#123;&#125;里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合</div><div class=\"line\">var Hello = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\">    return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  //生成自定义标签</div><div class=\"line\">  &lt;Hello name=&quot;World&quot; /&gt;,</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h1 id=\"为html添加css\"><a href=\"#为html添加css\" class=\"headerlink\" title=\"为html添加css\"></a>为html添加css</h1><h2 id=\"添加类\"><a href=\"#添加类\" class=\"headerlink\" title=\"添加类\"></a>添加类</h2><p>因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className</p>\n<h2 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h2><p>需要使用驼峰写法的键值对<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return &lt;div style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world</p>","more":"<p>这里是看慕课网初学react做的一些总结<a href=\"http://www.imooc.com/video/9819\" target=\"_blank\" rel=\"external\">[课程]React入门</a>，</p>\n<h1 id=\"什么是react\"><a href=\"#什么是react\" class=\"headerlink\" title=\"什么是react\"></a>什么是react</h1><p>在这一个小时内对react的认识中，我有了对react的初步印象</p>\n<ol>\n<li>js库</li>\n<li>facebook开发的</li>\n<li>高度的组件化</li>\n<li>使用jsx</li>\n<li>将html和js结合</li>\n<li>单项传输数据</li>\n<li>虚拟dom</li>\n<li>只负责view层</li>\n</ol>\n<p>react并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI</p>\n<h1 id=\"react应用场景\"><a href=\"#react应用场景\" class=\"headerlink\" title=\"react应用场景\"></a>react应用场景</h1><ol>\n<li>复杂场景下的高性能</li>\n<li>重用组件库，组件组合</li>\n<li>“懒”</li>\n</ol>\n<h1 id=\"使用react\"><a href=\"#使用react\" class=\"headerlink\" title=\"使用react\"></a>使用react</h1><p>最正确的打开方式还是直接看官方api：<a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\" target=\"_blank\" rel=\"external\">react入门教程</a></p>\n<p>或者阮一峰老师的教程：<a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a></p>\n<p>我们先用React JSFiddle来创建一个最简单的hello world</p>\n<p>html：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这里引入的js库只是方便学习和实验的，在正式项目不引入</div><div class=\"line\">&lt;script src=&quot;https://facebook.github.io/react/js/jsfiddle-integration-babel.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;!-- This element&apos;s contents will be replaced with your component. --&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</div><div class=\"line\"></div><div class=\"line\">//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置</div><div class=\"line\"></div><div class=\"line\">//自定义的componments通过React.createClass来进行创建</div><div class=\"line\">//&#123;&#125;里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合</div><div class=\"line\">var Hello = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\">    return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  //生成自定义标签</div><div class=\"line\">  &lt;Hello name=&quot;World&quot; /&gt;,</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h1 id=\"为html添加css\"><a href=\"#为html添加css\" class=\"headerlink\" title=\"为html添加css\"></a>为html添加css</h1><h2 id=\"添加类\"><a href=\"#添加类\" class=\"headerlink\" title=\"添加类\"></a>添加类</h2><p>因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className</p>\n<h2 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h2><p>需要使用驼峰写法的键值对<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return &lt;div style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div></pre></td></tr></table></figure></p>"},{"title":"react（二）：用实例认识react","date":"2017-03-02T13:34:44.000Z","_content":"昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！\n然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：[React 入门实例教程](http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html)，希望大家可以看一下老师写的demo\n[github地址](https://github.com/sunshine940326/reactDemo/tree/master)，求fork，求star，(～￣▽￣)～\n<!--more-->\n# HTML模板\n这是一个最简单的react模板\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    ReactDOM.render(\n            <div>\n                hello world\n            </div>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n## 不同版本的react之间的差异\n### jsx和babel\n在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：\n1. script标签由原来的\"text/jsx\"变为\"text/babel\"\n2. 所引入的js库有原来的react.js和jsxTransformer.js变为browser.js\n>   1. JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。\n>   2. 编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。\n>   3. 第二代编译器——babel\n> React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。\n### React.reader和ReactDOM.render\n另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM\n> 这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。\n> \n>  新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 \n> \n> 而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。\n> \n> 总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。\n---\n通过以上的介绍，你应该就清楚了这个demo个行代码的意思了\nscript加载的三个库：`react.js`：React的核心库， `react-dom.js`:react中和dom有关的库，`Browser.js`将将jsx转化为js\n`ReactDOM.render(componments,containerName)`函数是将`componments`插入到`containerName`中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。\nreact中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）\n# 虚拟DOM\n>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\n这里有几点需要注意的：\n1. `componments`只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签\n至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下![image](http://image.beekka.com/blog/2015/bg2015033109.png)\n# JXL语法\n>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n**利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。**\n### 使用 HTML 标签：\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nvar myDivElement = <div className=\"foo\" />;\nrender(myDivElement, document.getElementById('mountNode'));\n```\nHTML 里的 `class` 在 JSX 里要写成 `className`，因为 `class` 在 JS 里是保留关键字。同理某些属性比如 `for` 要写成 `htmlFor`。\n\n### 使用组件：\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport MyComponent from './MyComponet';\n\nvar myElement = <MyComponent someProperty={true} />;\nrender(myElement, document.body);\n\n```\n更多关于使用jsx的方法请见[使用 JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n# component组件\ncomponent在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块\n将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 [demo04](https://github.com/sunshine940326/reactDemo/tree/master/demo4)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div id=\"container\"></div>\n\n<script type=\"text/babel\">\nvar HellOMessage = React.createClass({\n    render:function () {\n        return <h1>Hello {this.props.name}</h1>\n    }\n});\n    \n    ReactDOM.render(\n            <HellOMessage name=\"John\" />\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n**因为这里是插入的组件，所以`HellOMessage`首字母需要大写\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 HelloMessage 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取。上面代码的运行结果如下。\n![image](http://image.beekka.com/blog/2015/bg2015033108.png)\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点（查看 [demo05](https://github.com/sunshine940326/reactDemo/tree/master/demo5)）\n\n\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n\n>这里需要注意， `this.props.children` 的值有三种可能：如果当前组件没有子节点，它就是 `undefined` ;如果有一个子节点，数据类型是 `object` ；如果有多个子节点，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\nReact 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法，[请参考官方文档](https://facebook.github.io/react/docs/react-api.html)。\n# PropTypes\n组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求（查看 [demo06](https://github.com/sunshine940326/reactDemo/tree/master/demo6)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar data = \"123\";\n\n    var TestPropsType = React.createClass({\n        propsType:{\n            title:React.propsType.string.isRequired,\n        },\n        render: function () {\n            return <h1>{this.props.title}</h1>\n        }\n    })\n\n    ReactDOM.render(\n            <TestPropsType title={data}/>\n\n\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这就是验证了在使用`TestPropsType`这个组件时`title`属性是必须的并且传入的参数是字符串，如果将`data` 改为`var data = 123`，`title`属性就通不过验证了,会报错\n# 获取真实的DOM节点\n从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 [demo07](https://github.com/sunshine940326/reactDemo/tree/master/demo7) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var MyComponent = React.createClass({\n        handleClick : function () {\n            this.refs.myTextInput.focus();\n        },\n        render:function () {\n            return(\n                    <div>\n                        <input type=\"text\" ref=\"myTextInput\"/>\n                        <input type=\"text\" value=\"Focus the text input\" onClick={this.handleClick}/>\n                    </div>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <MyComponent/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这个demo中，组件`MyConmponent`的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的`input`标签有一个ref属性，然后`this.refs.[redName]`就会返回这个真实的DOM节点。\n# state\n组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 [demo08](https://github.com/sunshine940326/reactDemo/tree/master/demo8) ）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var LikeBtn = React.createClass({\n        getInitialState: function () {\n            return {liked:false}\n        },\n\n        handleClick:function (event) {\n            this.setState({liked:!this.state.liked})\n        },\n\n        render:function () {\n            var text = this.state.liked ? 'like' : 'haven\\'t liked';\n            return(\n                    <p onClick={this.handleClick}>\n                        You {text} this. click to toggle\n                    </p>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <LikeBtn/>\n            ,document.getElementById('container')\n    )\n\n</script>\n</body>\n</html>\n\n```\n\n在这个demo中，在组件`LikeBtn`中，首先为其定义了`InitialState:liked:false`,就是`liked`初始时的状态为`false`,然后当用户点击时,导致状态的变化，`this.setState`方法就修改`state`,将`liked`修改，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n# React state与props区别\n`state`与`props`都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别\n`state`可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为`false`，然后当我们点击组件（发生了交互，触发事件），然后状态改变`liked`的状态变为`true`，因为状态的改变，所以`p`中的文字就会做出相应的改变\n`props`可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变\n## props属性的用法\n### 键值对：值可以有多种形式<HelloWorld name= ? /> \n- 字符串：\"XiaoWang\";\n- 求值表达式 {123}、{\"XiaoWang\"};\n- 数组{[1,2,3]};\n- 变量{variable};\n- 函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;\n### 展开语法{...props}：\nReact会自动把对象中的属性和值当做属性的赋值\n```\nvar HelloWorld =React.createClass({\n     rencer:function () {\n         return <p>Hello,{this.props.name1 + ' 'this.props.name2}</p>;\n     },\n });\n var HelloUniverse = React.createClass({\n     getInitialState:function () {\n         return {\n             name1:'Tim',\n             name2:'John',\n         };\n     },\n     handleChange: function (event) {\n         this.setState({name: event.target.value});\n     },\n     render: function () {\n         return <div>\n         <HelloWorld name={...this.state}></HelloWorld>\n         <br/>\n         <input type=\"text\" onChange={this.handleChange} />\n         </div>\n     },\n });\n ReactDom.render(<HelloUniverse />,document.body);\n```\n### getDefaultProps\ngetDefaultProps 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(<MyTitle />,document.body);\n\n```\n##  state状态的用法\n### getInitialState\n\n`object getInitialState()`\n\n`getInitialState `方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。在组件挂载之前调用一次。返回值将会作为 `this.state` 的初始值。\n\n### setState\n\n`setState(object nextState[, function callback])`\n合并 `nextState` 和当前 `state`。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 `setState` 执行完毕并且组件重新渲染完成之后调用。`this.setState` 方法用于修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n### replaceState\n\n`replaceState(object nextState[, function callback])`\n类似于 `setState()`，但是删除之前所有已存在的 `state` 键，这些键都不在 `nextState` 中。\n# 表单\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 `this.props` 读取（查看 [demo9](https://github.com/sunshine940326/reactDemo/tree/master/demo9) ）。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar InputTest = React.createClass({\n    getInitialState: function () {\n        return{\n            value : 'hello!'\n        };\n    },\n    handleChange: function (event) {\n        this.setState({\n            value:event.target.value\n        });\n    },\n    render: function () {\n        var value = this.state.value;\n        return(\n                <div>\n                    <input type=\"text\" value={value} onChange={this.handleChange}/>\n                    <p>{value}</p>\n                </div>\n        )\n    }\n});\n\n    ReactDOM.render(\n            <InputTest/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n上述代码的效果是有一个输入框，输入框下面是一个`p`标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。\n\n文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。`textarea` 元素、`select`元素、`radio`元素都属于这种情况\n# componments的生命周期\n组件的生命周期分为三个状态：\n- Mounting：已插入真实DOM\n- Updating： 正在被重新渲染\n- Unmounting：已移除真实的DOM\nReact 为每个状态都提供了两种处理函数，`will` 函数在进入状态之前调用，`did` 函数在进入状态之后调用，三种状态共计五种处理函数。\n- componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n此外，React 还提供两种特殊状态的处理函数。\n- componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n下面是一个例子（查看 [demo10](https://github.com/sunshine940326/reactDemo/tree/master/demo10) )。\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var Hello = React.createClass({\n        getInitialState:function () {\n            alert('init')\n            return{\n                opacity:1.0\n            }\n        },\n\n        componentWillMount:function () {\n          alert('Will')\n        },\n\n        componentDidMount:function () {\n            alert('Did')\n            this.timer = setInterval(function () {\n                var opacity = this.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                this.setState({\n                    opacity: opacity\n                });\n            }.bind(this),100)\n        },\n        render:function () {\n            return(\n                <div style={{opacity:this.state.opacity}}>\n                    Hello {this.props.name}\n                </div>\n            )\n        }\n    });\n\n    ReactDOM.render(\n        <Hello name=\"world!\"/>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。\n\n为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：\n\n```\ncomponentDidMount:function () {\n            alert('Did')\n            var _self  = this;\n            _self.timer = setInterval(function () {\n                var opacity = _self.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                _self.setState({\n                    opacity: opacity\n                });\n            },100)\n        },\n```\n这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)\n# AJAX\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI （查看 [demo11](https://github.com/sunshine940326/reactDemo/tree/master/demo11)) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/jquery.min.js\"></script>\n\n</head>\n<body>\n <div id=\"container\"></div>\n\n <script type=\"text/babel\">\n     var UserGist = React.createClass({\n         getInitialState:function () {\n             return{\n                 username: '',\n                 lastGistUrl: '',\n             }\n         },\n\n         componentDidMount:function () {\n             $.get(this.props.source,function (result) {\n                 var lastGist = result[0];\n                 if(this.isMounted()){\n                     this.setState({\n                         username: lastGist.owner.login,\n                         lastGistUrl: lastGist.html_url\n                     });\n                 }\n             }.bind(this));\n         },\n\n         render: function () {\n             return(\n                 <div>\n                     {this.state.username}'s last gist is <a href={this.lastGistUrl}>here</a>.\n                 </div>\n             )\n         }\n     })\n\n     ReactDOM.render(\n         <UserGist source=\"https://api.github.com/users/octocat/gists\"/>\n         ,document.getElementById('container')\n     )\n </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n","source":"_posts/React2understanding-react-with-examples.md","raw":"---\ntitle: react（二）：用实例认识react\ndate: 2017-03-02 21:34:44\ntags: react\ncategories: react\n---\n昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！\n然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：[React 入门实例教程](http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html)，希望大家可以看一下老师写的demo\n[github地址](https://github.com/sunshine940326/reactDemo/tree/master)，求fork，求star，(～￣▽￣)～\n<!--more-->\n# HTML模板\n这是一个最简单的react模板\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    ReactDOM.render(\n            <div>\n                hello world\n            </div>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n## 不同版本的react之间的差异\n### jsx和babel\n在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：\n1. script标签由原来的\"text/jsx\"变为\"text/babel\"\n2. 所引入的js库有原来的react.js和jsxTransformer.js变为browser.js\n>   1. JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。\n>   2. 编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。\n>   3. 第二代编译器——babel\n> React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。\n### React.reader和ReactDOM.render\n另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM\n> 这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。\n> \n>  新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 \n> \n> 而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。\n> \n> 总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。\n---\n通过以上的介绍，你应该就清楚了这个demo个行代码的意思了\nscript加载的三个库：`react.js`：React的核心库， `react-dom.js`:react中和dom有关的库，`Browser.js`将将jsx转化为js\n`ReactDOM.render(componments,containerName)`函数是将`componments`插入到`containerName`中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。\nreact中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）\n# 虚拟DOM\n>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\n这里有几点需要注意的：\n1. `componments`只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签\n至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下![image](http://image.beekka.com/blog/2015/bg2015033109.png)\n# JXL语法\n>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n**利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。**\n### 使用 HTML 标签：\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nvar myDivElement = <div className=\"foo\" />;\nrender(myDivElement, document.getElementById('mountNode'));\n```\nHTML 里的 `class` 在 JSX 里要写成 `className`，因为 `class` 在 JS 里是保留关键字。同理某些属性比如 `for` 要写成 `htmlFor`。\n\n### 使用组件：\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport MyComponent from './MyComponet';\n\nvar myElement = <MyComponent someProperty={true} />;\nrender(myElement, document.body);\n\n```\n更多关于使用jsx的方法请见[使用 JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n# component组件\ncomponent在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块\n将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 [demo04](https://github.com/sunshine940326/reactDemo/tree/master/demo4)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div id=\"container\"></div>\n\n<script type=\"text/babel\">\nvar HellOMessage = React.createClass({\n    render:function () {\n        return <h1>Hello {this.props.name}</h1>\n    }\n});\n    \n    ReactDOM.render(\n            <HellOMessage name=\"John\" />\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n**因为这里是插入的组件，所以`HellOMessage`首字母需要大写\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 HelloMessage 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取。上面代码的运行结果如下。\n![image](http://image.beekka.com/blog/2015/bg2015033108.png)\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点（查看 [demo05](https://github.com/sunshine940326/reactDemo/tree/master/demo5)）\n\n\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n\n>这里需要注意， `this.props.children` 的值有三种可能：如果当前组件没有子节点，它就是 `undefined` ;如果有一个子节点，数据类型是 `object` ；如果有多个子节点，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\nReact 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法，[请参考官方文档](https://facebook.github.io/react/docs/react-api.html)。\n# PropTypes\n组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求（查看 [demo06](https://github.com/sunshine940326/reactDemo/tree/master/demo6)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar data = \"123\";\n\n    var TestPropsType = React.createClass({\n        propsType:{\n            title:React.propsType.string.isRequired,\n        },\n        render: function () {\n            return <h1>{this.props.title}</h1>\n        }\n    })\n\n    ReactDOM.render(\n            <TestPropsType title={data}/>\n\n\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这就是验证了在使用`TestPropsType`这个组件时`title`属性是必须的并且传入的参数是字符串，如果将`data` 改为`var data = 123`，`title`属性就通不过验证了,会报错\n# 获取真实的DOM节点\n从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 [demo07](https://github.com/sunshine940326/reactDemo/tree/master/demo7) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var MyComponent = React.createClass({\n        handleClick : function () {\n            this.refs.myTextInput.focus();\n        },\n        render:function () {\n            return(\n                    <div>\n                        <input type=\"text\" ref=\"myTextInput\"/>\n                        <input type=\"text\" value=\"Focus the text input\" onClick={this.handleClick}/>\n                    </div>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <MyComponent/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这个demo中，组件`MyConmponent`的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的`input`标签有一个ref属性，然后`this.refs.[redName]`就会返回这个真实的DOM节点。\n# state\n组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 [demo08](https://github.com/sunshine940326/reactDemo/tree/master/demo8) ）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var LikeBtn = React.createClass({\n        getInitialState: function () {\n            return {liked:false}\n        },\n\n        handleClick:function (event) {\n            this.setState({liked:!this.state.liked})\n        },\n\n        render:function () {\n            var text = this.state.liked ? 'like' : 'haven\\'t liked';\n            return(\n                    <p onClick={this.handleClick}>\n                        You {text} this. click to toggle\n                    </p>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <LikeBtn/>\n            ,document.getElementById('container')\n    )\n\n</script>\n</body>\n</html>\n\n```\n\n在这个demo中，在组件`LikeBtn`中，首先为其定义了`InitialState:liked:false`,就是`liked`初始时的状态为`false`,然后当用户点击时,导致状态的变化，`this.setState`方法就修改`state`,将`liked`修改，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n# React state与props区别\n`state`与`props`都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别\n`state`可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为`false`，然后当我们点击组件（发生了交互，触发事件），然后状态改变`liked`的状态变为`true`，因为状态的改变，所以`p`中的文字就会做出相应的改变\n`props`可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变\n## props属性的用法\n### 键值对：值可以有多种形式<HelloWorld name= ? /> \n- 字符串：\"XiaoWang\";\n- 求值表达式 {123}、{\"XiaoWang\"};\n- 数组{[1,2,3]};\n- 变量{variable};\n- 函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;\n### 展开语法{...props}：\nReact会自动把对象中的属性和值当做属性的赋值\n```\nvar HelloWorld =React.createClass({\n     rencer:function () {\n         return <p>Hello,{this.props.name1 + ' 'this.props.name2}</p>;\n     },\n });\n var HelloUniverse = React.createClass({\n     getInitialState:function () {\n         return {\n             name1:'Tim',\n             name2:'John',\n         };\n     },\n     handleChange: function (event) {\n         this.setState({name: event.target.value});\n     },\n     render: function () {\n         return <div>\n         <HelloWorld name={...this.state}></HelloWorld>\n         <br/>\n         <input type=\"text\" onChange={this.handleChange} />\n         </div>\n     },\n });\n ReactDom.render(<HelloUniverse />,document.body);\n```\n### getDefaultProps\ngetDefaultProps 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(<MyTitle />,document.body);\n\n```\n##  state状态的用法\n### getInitialState\n\n`object getInitialState()`\n\n`getInitialState `方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。在组件挂载之前调用一次。返回值将会作为 `this.state` 的初始值。\n\n### setState\n\n`setState(object nextState[, function callback])`\n合并 `nextState` 和当前 `state`。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 `setState` 执行完毕并且组件重新渲染完成之后调用。`this.setState` 方法用于修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n### replaceState\n\n`replaceState(object nextState[, function callback])`\n类似于 `setState()`，但是删除之前所有已存在的 `state` 键，这些键都不在 `nextState` 中。\n# 表单\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 `this.props` 读取（查看 [demo9](https://github.com/sunshine940326/reactDemo/tree/master/demo9) ）。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar InputTest = React.createClass({\n    getInitialState: function () {\n        return{\n            value : 'hello!'\n        };\n    },\n    handleChange: function (event) {\n        this.setState({\n            value:event.target.value\n        });\n    },\n    render: function () {\n        var value = this.state.value;\n        return(\n                <div>\n                    <input type=\"text\" value={value} onChange={this.handleChange}/>\n                    <p>{value}</p>\n                </div>\n        )\n    }\n});\n\n    ReactDOM.render(\n            <InputTest/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n上述代码的效果是有一个输入框，输入框下面是一个`p`标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。\n\n文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。`textarea` 元素、`select`元素、`radio`元素都属于这种情况\n# componments的生命周期\n组件的生命周期分为三个状态：\n- Mounting：已插入真实DOM\n- Updating： 正在被重新渲染\n- Unmounting：已移除真实的DOM\nReact 为每个状态都提供了两种处理函数，`will` 函数在进入状态之前调用，`did` 函数在进入状态之后调用，三种状态共计五种处理函数。\n- componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n此外，React 还提供两种特殊状态的处理函数。\n- componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n下面是一个例子（查看 [demo10](https://github.com/sunshine940326/reactDemo/tree/master/demo10) )。\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var Hello = React.createClass({\n        getInitialState:function () {\n            alert('init')\n            return{\n                opacity:1.0\n            }\n        },\n\n        componentWillMount:function () {\n          alert('Will')\n        },\n\n        componentDidMount:function () {\n            alert('Did')\n            this.timer = setInterval(function () {\n                var opacity = this.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                this.setState({\n                    opacity: opacity\n                });\n            }.bind(this),100)\n        },\n        render:function () {\n            return(\n                <div style={{opacity:this.state.opacity}}>\n                    Hello {this.props.name}\n                </div>\n            )\n        }\n    });\n\n    ReactDOM.render(\n        <Hello name=\"world!\"/>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。\n\n为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：\n\n```\ncomponentDidMount:function () {\n            alert('Did')\n            var _self  = this;\n            _self.timer = setInterval(function () {\n                var opacity = _self.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                _self.setState({\n                    opacity: opacity\n                });\n            },100)\n        },\n```\n这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)\n# AJAX\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI （查看 [demo11](https://github.com/sunshine940326/reactDemo/tree/master/demo11)) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/jquery.min.js\"></script>\n\n</head>\n<body>\n <div id=\"container\"></div>\n\n <script type=\"text/babel\">\n     var UserGist = React.createClass({\n         getInitialState:function () {\n             return{\n                 username: '',\n                 lastGistUrl: '',\n             }\n         },\n\n         componentDidMount:function () {\n             $.get(this.props.source,function (result) {\n                 var lastGist = result[0];\n                 if(this.isMounted()){\n                     this.setState({\n                         username: lastGist.owner.login,\n                         lastGistUrl: lastGist.html_url\n                     });\n                 }\n             }.bind(this));\n         },\n\n         render: function () {\n             return(\n                 <div>\n                     {this.state.username}'s last gist is <a href={this.lastGistUrl}>here</a>.\n                 </div>\n             )\n         }\n     })\n\n     ReactDOM.render(\n         <UserGist source=\"https://api.github.com/users/octocat/gists\"/>\n         ,document.getElementById('container')\n     )\n </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n","slug":"React2understanding-react-with-examples","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zwy001jvvxiaazbgfjb","content":"<p>昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！<br>然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：<a href=\"http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a>，希望大家可以看一下老师写的demo<br><a href=\"https://github.com/sunshine940326/reactDemo/tree/master\" target=\"_blank\" rel=\"external\">github地址</a>，求fork，求star，(～￣▽￣)～<br><a id=\"more\"></a></p>\n<h1 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h1><p>这是一个最简单的react模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                hello world</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"不同版本的react之间的差异\"><a href=\"#不同版本的react之间的差异\" class=\"headerlink\" title=\"不同版本的react之间的差异\"></a>不同版本的react之间的差异</h2><h3 id=\"jsx和babel\"><a href=\"#jsx和babel\" class=\"headerlink\" title=\"jsx和babel\"></a>jsx和babel</h3><p>在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：</p>\n<ol>\n<li>script标签由原来的”text/jsx”变为”text/babel”</li>\n<li>所引入的js库有原来的react.js和jsxTransformer.js变为browser.js<blockquote>\n<ol>\n<li>JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。</li>\n<li>编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。</li>\n<li><p>第二代编译器——babel<br>React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。</p>\n<h3 id=\"React-reader和ReactDOM-render\"><a href=\"#React-reader和ReactDOM-render\" class=\"headerlink\" title=\"React.reader和ReactDOM.render\"></a>React.reader和ReactDOM.render</h3><p>另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM<br>这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。</p>\n<p>新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 </p>\n</li>\n</ol>\n<p>而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。</p>\n<p>总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>通过以上的介绍，你应该就清楚了这个demo个行代码的意思了<br>script加载的三个库：<code>react.js</code>：React的核心库， <code>react-dom.js</code>:react中和dom有关的库，<code>Browser.js</code>将将jsx转化为js<br><code>ReactDOM.render(componments,containerName)</code>函数是将<code>componments</code>插入到<code>containerName</code>中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。<br>react中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）</p>\n<h1 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h1><blockquote>\n<p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。<br>这里有几点需要注意的：</p>\n<ol>\n<li><code>componments</code>只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签<br>至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下<img src=\"http://image.beekka.com/blog/2015/bg2015033109.png\" alt=\"image\"><h1 id=\"JXL语法\"><a href=\"#JXL语法\" class=\"headerlink\" title=\"JXL语法\"></a>JXL语法</h1>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。<br><strong>利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。</strong><h3 id=\"使用-HTML-标签：\"><a href=\"#使用-HTML-标签：\" class=\"headerlink\" title=\"使用 HTML 标签：\"></a>使用 HTML 标签：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\"></div><div class=\"line\">var myDivElement = &lt;div className=&quot;foo&quot; /&gt;;</div><div class=\"line\">render(myDivElement, document.getElementById(&apos;mountNode&apos;));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>HTML 里的 <code>class</code> 在 JSX 里要写成 <code>className</code>，因为 <code>class</code> 在 JS 里是保留关键字。同理某些属性比如 <code>for</code> 要写成 <code>htmlFor</code>。</p>\n<h3 id=\"使用组件：\"><a href=\"#使用组件：\" class=\"headerlink\" title=\"使用组件：\"></a>使用组件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\">import MyComponent from &apos;./MyComponet&apos;;</div><div class=\"line\"></div><div class=\"line\">var myElement = &lt;MyComponent someProperty=&#123;true&#125; /&gt;;</div><div class=\"line\">render(myElement, document.body);</div></pre></td></tr></table></figure>\n<p>更多关于使用jsx的方法请见<a href=\"https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">使用 JSX</a></p>\n<h1 id=\"component组件\"><a href=\"#component组件\" class=\"headerlink\" title=\"component组件\"></a>component组件</h1><p>component在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块<br>将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo4\" target=\"_blank\" rel=\"external\">demo04</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var HellOMessage = React.createClass(&#123;</div><div class=\"line\">    render:function () &#123;</div><div class=\"line\">        return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">    </div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;HellOMessage name=&quot;John&quot; /&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>**因为这里是插入的组件，所以<code>HellOMessage</code>首字母需要大写</p>\n<p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code> 时，会自动生成 HelloMessage 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n<p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取。上面代码的运行结果如下。<br><img src=\"http://image.beekka.com/blog/2015/bg2015033108.png\" alt=\"image\"></p>\n<p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo5\" target=\"_blank\" rel=\"external\">demo05</a>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var NotesList = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ol&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">        React.Children.map(this.props.children, function (child) &#123;</div><div class=\"line\">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">      &lt;/ol&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;NotesList&gt;</div><div class=\"line\">    &lt;span&gt;hello&lt;/span&gt;</div><div class=\"line\">    &lt;span&gt;world&lt;/span&gt;</div><div class=\"line\">  &lt;/NotesList&gt;,</div><div class=\"line\">  document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。<br>React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。更多的 <code>React.Children</code> 的方法，<a href=\"https://facebook.github.io/react/docs/react-api.html\" target=\"_blank\" rel=\"external\">请参考官方文档</a>。</p>\n<h1 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h1><p>组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求<br>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo6\" target=\"_blank\" rel=\"external\">demo06</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var data = &quot;123&quot;;</div><div class=\"line\"></div><div class=\"line\">    var TestPropsType = React.createClass(&#123;</div><div class=\"line\">        propsType:&#123;</div><div class=\"line\">            title:React.propsType.string.isRequired,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render: function () &#123;</div><div class=\"line\">            return &lt;h1&gt;&#123;this.props.title&#125;&lt;/h1&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;TestPropsType title=&#123;data&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这就是验证了在使用<code>TestPropsType</code>这个组件时<code>title</code>属性是必须的并且传入的参数是字符串，如果将<code>data</code> 改为<code>var data = 123</code>，<code>title</code>属性就通不过验证了,会报错</p>\n<h1 id=\"获取真实的DOM节点\"><a href=\"#获取真实的DOM节点\" class=\"headerlink\" title=\"获取真实的DOM节点\"></a>获取真实的DOM节点</h1><p>从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo7\" target=\"_blank\" rel=\"external\">demo07</a> ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var MyComponent = React.createClass(&#123;</div><div class=\"line\">        handleClick : function () &#123;</div><div class=\"line\">            this.refs.myTextInput.focus();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;div&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot;/&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125;/&gt;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;MyComponent/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>这个demo中，组件<code>MyConmponent</code>的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的<code>input</code>标签有一个ref属性，然后<code>this.refs.[redName]</code>就会返回这个真实的DOM节点。</p>\n<h1 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h1><p>组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo8\" target=\"_blank\" rel=\"external\">demo08</a> ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var LikeBtn = React.createClass(&#123;</div><div class=\"line\">        getInitialState: function () &#123;</div><div class=\"line\">            return &#123;liked:false&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        handleClick:function (event) &#123;</div><div class=\"line\">            this.setState(&#123;liked:!this.state.liked&#125;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            var text = this.state.liked ? &apos;like&apos; : &apos;haven\\&apos;t liked&apos;;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;p onClick=&#123;this.handleClick&#125;&gt;</div><div class=\"line\">                        You &#123;text&#125; this. click to toggle</div><div class=\"line\">                    &lt;/p&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;LikeBtn/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>在这个demo中，在组件<code>LikeBtn</code>中，首先为其定义了<code>InitialState:liked:false</code>,就是<code>liked</code>初始时的状态为<code>false</code>,然后当用户点击时,导致状态的变化，<code>this.setState</code>方法就修改<code>state</code>,将<code>liked</code>修改，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h1 id=\"React-state与props区别\"><a href=\"#React-state与props区别\" class=\"headerlink\" title=\"React state与props区别\"></a>React state与props区别</h1><p><code>state</code>与<code>props</code>都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别<br><code>state</code>可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为<code>false</code>，然后当我们点击组件（发生了交互，触发事件），然后状态改变<code>liked</code>的状态变为<code>true</code>，因为状态的改变，所以<code>p</code>中的文字就会做出相应的改变<br><code>props</code>可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变</p>\n<h2 id=\"props属性的用法\"><a href=\"#props属性的用法\" class=\"headerlink\" title=\"props属性的用法\"></a>props属性的用法</h2><h3 id=\"键值对：值可以有多种形式\"><a href=\"#键值对：值可以有多种形式\" class=\"headerlink\" title=\"键值对：值可以有多种形式\"></a>键值对：值可以有多种形式<helloworld name=\"?\"></helloworld></h3><ul>\n<li>字符串：”XiaoWang”;</li>\n<li>求值表达式 {123}、{“XiaoWang”};</li>\n<li>数组{[1,2,3]};</li>\n<li>变量{variable};</li>\n<li>函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;<h3 id=\"展开语法-…props-：\"><a href=\"#展开语法-…props-：\" class=\"headerlink\" title=\"展开语法{…props}：\"></a>展开语法{…props}：</h3>React会自动把对象中的属性和值当做属性的赋值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var HelloWorld =React.createClass(&#123;</div><div class=\"line\">     rencer:function () &#123;</div><div class=\"line\">         return &lt;p&gt;Hello,&#123;this.props.name1 + &apos; &apos;this.props.name2&#125;&lt;/p&gt;;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> var HelloUniverse = React.createClass(&#123;</div><div class=\"line\">     getInitialState:function () &#123;</div><div class=\"line\">         return &#123;</div><div class=\"line\">             name1:&apos;Tim&apos;,</div><div class=\"line\">             name2:&apos;John&apos;,</div><div class=\"line\">         &#125;;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     handleChange: function (event) &#123;</div><div class=\"line\">         this.setState(&#123;name: event.target.value&#125;);</div><div class=\"line\">     &#125;,</div><div class=\"line\">     render: function () &#123;</div><div class=\"line\">         return &lt;div&gt;</div><div class=\"line\">         &lt;HelloWorld name=&#123;...this.state&#125;&gt;&lt;/HelloWorld&gt;</div><div class=\"line\">         &lt;br/&gt;</div><div class=\"line\">         &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange&#125; /&gt;</div><div class=\"line\">         &lt;/div&gt;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> ReactDom.render(&lt;HelloUniverse /&gt;,document.body);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h3><p>getDefaultProps 方法可以用来设置组件属性的默认值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MyTitle = React.createClass(&#123;</div><div class=\"line\">  getDefaultProps : function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      title : &apos;Hello World&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(&lt;MyTitle /&gt;,document.body);</div></pre></td></tr></table></figure></p>\n<h2 id=\"state状态的用法\"><a href=\"#state状态的用法\" class=\"headerlink\" title=\"state状态的用法\"></a>state状态的用法</h2><h3 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h3><p><code>object getInitialState()</code></p>\n<p><code>getInitialState</code>方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。在组件挂载之前调用一次。返回值将会作为 <code>this.state</code> 的初始值。</p>\n<h3 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h3><p><code>setState(object nextState[, function callback])</code><br>合并 <code>nextState</code> 和当前 <code>state</code>。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 <code>setState</code> 执行完毕并且组件重新渲染完成之后调用。<code>this.setState</code> 方法用于修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h3 id=\"replaceState\"><a href=\"#replaceState\" class=\"headerlink\" title=\"replaceState\"></a>replaceState</h3><p><code>replaceState(object nextState[, function callback])</code><br>类似于 <code>setState()</code>，但是删除之前所有已存在的 <code>state</code> 键，这些键都不在 <code>nextState</code> 中。</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 <code>this.props</code> 读取（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo9\" target=\"_blank\" rel=\"external\">demo9</a> ）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var InputTest = React.createClass(&#123;</div><div class=\"line\">    getInitialState: function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            value : &apos;hello!&apos;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    handleChange: function (event) &#123;</div><div class=\"line\">        this.setState(&#123;</div><div class=\"line\">            value:event.target.value</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        var value = this.state.value;</div><div class=\"line\">        return(</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class=\"line\">                    &lt;p&gt;&#123;value&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;InputTest/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>上述代码的效果是有一个输入框，输入框下面是一个<code>p</code>标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。</p>\n<p>文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况</p>\n<h1 id=\"componments的生命周期\"><a href=\"#componments的生命周期\" class=\"headerlink\" title=\"componments的生命周期\"></a>componments的生命周期</h1><p>组件的生命周期分为三个状态：</p>\n<ul>\n<li>Mounting：已插入真实DOM</li>\n<li>Updating： 正在被重新渲染</li>\n<li>Unmounting：已移除真实的DOM<br>React 为每个状态都提供了两种处理函数，<code>will</code> 函数在进入状态之前调用，<code>did</code> 函数在进入状态之后调用，三种状态共计五种处理函数。</li>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()<br>此外，React 还提供两种特殊状态的处理函数。</li>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>下面是一个例子（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo10\" target=\"_blank\" rel=\"external\">demo10</a> )。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var Hello = React.createClass(&#123;</div><div class=\"line\">        getInitialState:function () &#123;</div><div class=\"line\">            alert(&apos;init&apos;)</div><div class=\"line\">            return&#123;</div><div class=\"line\">                opacity:1.0</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentWillMount:function () &#123;</div><div class=\"line\">          alert(&apos;Will&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            this.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = this.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;.bind(this),100)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                &lt;div style=&#123;&#123;opacity:this.state.opacity&#125;&#125;&gt;</div><div class=\"line\">                    Hello &#123;this.props.name&#125;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">        &lt;Hello name=&quot;world!&quot;/&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。</p>\n<p>为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            var _self  = this;</div><div class=\"line\">            _self.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = _self.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                _self.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;,100)</div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<p>这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)</p>\n<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 <code>componentDidMount</code> 方法设置 Ajax 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI （查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo11\" target=\"_blank\" rel=\"external\">demo11</a>) ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">     var UserGist = React.createClass(&#123;</div><div class=\"line\">         getInitialState:function () &#123;</div><div class=\"line\">             return&#123;</div><div class=\"line\">                 username: &apos;&apos;,</div><div class=\"line\">                 lastGistUrl: &apos;&apos;,</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         componentDidMount:function () &#123;</div><div class=\"line\">             $.get(this.props.source,function (result) &#123;</div><div class=\"line\">                 var lastGist = result[0];</div><div class=\"line\">                 if(this.isMounted())&#123;</div><div class=\"line\">                     this.setState(&#123;</div><div class=\"line\">                         username: lastGist.owner.login,</div><div class=\"line\">                         lastGistUrl: lastGist.html_url</div><div class=\"line\">                     &#125;);</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;.bind(this));</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         render: function () &#123;</div><div class=\"line\">             return(</div><div class=\"line\">                 &lt;div&gt;</div><div class=\"line\">                     &#123;this.state.username&#125;&apos;s last gist is &lt;a href=&#123;this.lastGistUrl&#125;&gt;here&lt;/a&gt;.</div><div class=\"line\">                 &lt;/div&gt;</div><div class=\"line\">             )</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\"></div><div class=\"line\">     ReactDOM.render(</div><div class=\"line\">         &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot;/&gt;</div><div class=\"line\">         ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">     )</div><div class=\"line\"> &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！<br>然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：<a href=\"http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a>，希望大家可以看一下老师写的demo<br><a href=\"https://github.com/sunshine940326/reactDemo/tree/master\" target=\"_blank\" rel=\"external\">github地址</a>，求fork，求star，(～￣▽￣)～<br>","more":"</p>\n<h1 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h1><p>这是一个最简单的react模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                hello world</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"不同版本的react之间的差异\"><a href=\"#不同版本的react之间的差异\" class=\"headerlink\" title=\"不同版本的react之间的差异\"></a>不同版本的react之间的差异</h2><h3 id=\"jsx和babel\"><a href=\"#jsx和babel\" class=\"headerlink\" title=\"jsx和babel\"></a>jsx和babel</h3><p>在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：</p>\n<ol>\n<li>script标签由原来的”text/jsx”变为”text/babel”</li>\n<li>所引入的js库有原来的react.js和jsxTransformer.js变为browser.js<blockquote>\n<ol>\n<li>JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。</li>\n<li>编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。</li>\n<li><p>第二代编译器——babel<br>React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。</p>\n<h3 id=\"React-reader和ReactDOM-render\"><a href=\"#React-reader和ReactDOM-render\" class=\"headerlink\" title=\"React.reader和ReactDOM.render\"></a>React.reader和ReactDOM.render</h3><p>另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM<br>这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。</p>\n<p>新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 </p>\n</li>\n</ol>\n<p>而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。</p>\n<p>总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>通过以上的介绍，你应该就清楚了这个demo个行代码的意思了<br>script加载的三个库：<code>react.js</code>：React的核心库， <code>react-dom.js</code>:react中和dom有关的库，<code>Browser.js</code>将将jsx转化为js<br><code>ReactDOM.render(componments,containerName)</code>函数是将<code>componments</code>插入到<code>containerName</code>中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。<br>react中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）</p>\n<h1 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h1><blockquote>\n<p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。<br>这里有几点需要注意的：</p>\n<ol>\n<li><code>componments</code>只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签<br>至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下<img src=\"http://image.beekka.com/blog/2015/bg2015033109.png\" alt=\"image\"><h1 id=\"JXL语法\"><a href=\"#JXL语法\" class=\"headerlink\" title=\"JXL语法\"></a>JXL语法</h1>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。<br><strong>利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。</strong><h3 id=\"使用-HTML-标签：\"><a href=\"#使用-HTML-标签：\" class=\"headerlink\" title=\"使用 HTML 标签：\"></a>使用 HTML 标签：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\"></div><div class=\"line\">var myDivElement = &lt;div className=&quot;foo&quot; /&gt;;</div><div class=\"line\">render(myDivElement, document.getElementById(&apos;mountNode&apos;));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>HTML 里的 <code>class</code> 在 JSX 里要写成 <code>className</code>，因为 <code>class</code> 在 JS 里是保留关键字。同理某些属性比如 <code>for</code> 要写成 <code>htmlFor</code>。</p>\n<h3 id=\"使用组件：\"><a href=\"#使用组件：\" class=\"headerlink\" title=\"使用组件：\"></a>使用组件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\">import MyComponent from &apos;./MyComponet&apos;;</div><div class=\"line\"></div><div class=\"line\">var myElement = &lt;MyComponent someProperty=&#123;true&#125; /&gt;;</div><div class=\"line\">render(myElement, document.body);</div></pre></td></tr></table></figure>\n<p>更多关于使用jsx的方法请见<a href=\"https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">使用 JSX</a></p>\n<h1 id=\"component组件\"><a href=\"#component组件\" class=\"headerlink\" title=\"component组件\"></a>component组件</h1><p>component在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块<br>将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo4\" target=\"_blank\" rel=\"external\">demo04</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var HellOMessage = React.createClass(&#123;</div><div class=\"line\">    render:function () &#123;</div><div class=\"line\">        return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">    </div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;HellOMessage name=&quot;John&quot; /&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>**因为这里是插入的组件，所以<code>HellOMessage</code>首字母需要大写</p>\n<p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code> 时，会自动生成 HelloMessage 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n<p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取。上面代码的运行结果如下。<br><img src=\"http://image.beekka.com/blog/2015/bg2015033108.png\" alt=\"image\"></p>\n<p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo5\" target=\"_blank\" rel=\"external\">demo05</a>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var NotesList = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ol&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">        React.Children.map(this.props.children, function (child) &#123;</div><div class=\"line\">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">      &lt;/ol&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;NotesList&gt;</div><div class=\"line\">    &lt;span&gt;hello&lt;/span&gt;</div><div class=\"line\">    &lt;span&gt;world&lt;/span&gt;</div><div class=\"line\">  &lt;/NotesList&gt;,</div><div class=\"line\">  document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。<br>React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。更多的 <code>React.Children</code> 的方法，<a href=\"https://facebook.github.io/react/docs/react-api.html\" target=\"_blank\" rel=\"external\">请参考官方文档</a>。</p>\n<h1 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h1><p>组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求<br>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo6\" target=\"_blank\" rel=\"external\">demo06</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var data = &quot;123&quot;;</div><div class=\"line\"></div><div class=\"line\">    var TestPropsType = React.createClass(&#123;</div><div class=\"line\">        propsType:&#123;</div><div class=\"line\">            title:React.propsType.string.isRequired,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render: function () &#123;</div><div class=\"line\">            return &lt;h1&gt;&#123;this.props.title&#125;&lt;/h1&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;TestPropsType title=&#123;data&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这就是验证了在使用<code>TestPropsType</code>这个组件时<code>title</code>属性是必须的并且传入的参数是字符串，如果将<code>data</code> 改为<code>var data = 123</code>，<code>title</code>属性就通不过验证了,会报错</p>\n<h1 id=\"获取真实的DOM节点\"><a href=\"#获取真实的DOM节点\" class=\"headerlink\" title=\"获取真实的DOM节点\"></a>获取真实的DOM节点</h1><p>从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo7\" target=\"_blank\" rel=\"external\">demo07</a> ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var MyComponent = React.createClass(&#123;</div><div class=\"line\">        handleClick : function () &#123;</div><div class=\"line\">            this.refs.myTextInput.focus();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;div&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot;/&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125;/&gt;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;MyComponent/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>这个demo中，组件<code>MyConmponent</code>的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的<code>input</code>标签有一个ref属性，然后<code>this.refs.[redName]</code>就会返回这个真实的DOM节点。</p>\n<h1 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h1><p>组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo8\" target=\"_blank\" rel=\"external\">demo08</a> ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var LikeBtn = React.createClass(&#123;</div><div class=\"line\">        getInitialState: function () &#123;</div><div class=\"line\">            return &#123;liked:false&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        handleClick:function (event) &#123;</div><div class=\"line\">            this.setState(&#123;liked:!this.state.liked&#125;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            var text = this.state.liked ? &apos;like&apos; : &apos;haven\\&apos;t liked&apos;;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;p onClick=&#123;this.handleClick&#125;&gt;</div><div class=\"line\">                        You &#123;text&#125; this. click to toggle</div><div class=\"line\">                    &lt;/p&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;LikeBtn/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>在这个demo中，在组件<code>LikeBtn</code>中，首先为其定义了<code>InitialState:liked:false</code>,就是<code>liked</code>初始时的状态为<code>false</code>,然后当用户点击时,导致状态的变化，<code>this.setState</code>方法就修改<code>state</code>,将<code>liked</code>修改，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h1 id=\"React-state与props区别\"><a href=\"#React-state与props区别\" class=\"headerlink\" title=\"React state与props区别\"></a>React state与props区别</h1><p><code>state</code>与<code>props</code>都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别<br><code>state</code>可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为<code>false</code>，然后当我们点击组件（发生了交互，触发事件），然后状态改变<code>liked</code>的状态变为<code>true</code>，因为状态的改变，所以<code>p</code>中的文字就会做出相应的改变<br><code>props</code>可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变</p>\n<h2 id=\"props属性的用法\"><a href=\"#props属性的用法\" class=\"headerlink\" title=\"props属性的用法\"></a>props属性的用法</h2><h3 id=\"键值对：值可以有多种形式\"><a href=\"#键值对：值可以有多种形式\" class=\"headerlink\" title=\"键值对：值可以有多种形式\"></a>键值对：值可以有多种形式<helloworld name=\"?\"></helloworld></h3><ul>\n<li>字符串：”XiaoWang”;</li>\n<li>求值表达式 {123}、{“XiaoWang”};</li>\n<li>数组{[1,2,3]};</li>\n<li>变量{variable};</li>\n<li>函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;<h3 id=\"展开语法-…props-：\"><a href=\"#展开语法-…props-：\" class=\"headerlink\" title=\"展开语法{…props}：\"></a>展开语法{…props}：</h3>React会自动把对象中的属性和值当做属性的赋值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var HelloWorld =React.createClass(&#123;</div><div class=\"line\">     rencer:function () &#123;</div><div class=\"line\">         return &lt;p&gt;Hello,&#123;this.props.name1 + &apos; &apos;this.props.name2&#125;&lt;/p&gt;;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> var HelloUniverse = React.createClass(&#123;</div><div class=\"line\">     getInitialState:function () &#123;</div><div class=\"line\">         return &#123;</div><div class=\"line\">             name1:&apos;Tim&apos;,</div><div class=\"line\">             name2:&apos;John&apos;,</div><div class=\"line\">         &#125;;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     handleChange: function (event) &#123;</div><div class=\"line\">         this.setState(&#123;name: event.target.value&#125;);</div><div class=\"line\">     &#125;,</div><div class=\"line\">     render: function () &#123;</div><div class=\"line\">         return &lt;div&gt;</div><div class=\"line\">         &lt;HelloWorld name=&#123;...this.state&#125;&gt;&lt;/HelloWorld&gt;</div><div class=\"line\">         &lt;br/&gt;</div><div class=\"line\">         &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange&#125; /&gt;</div><div class=\"line\">         &lt;/div&gt;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> ReactDom.render(&lt;HelloUniverse /&gt;,document.body);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h3><p>getDefaultProps 方法可以用来设置组件属性的默认值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MyTitle = React.createClass(&#123;</div><div class=\"line\">  getDefaultProps : function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      title : &apos;Hello World&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(&lt;MyTitle /&gt;,document.body);</div></pre></td></tr></table></figure></p>\n<h2 id=\"state状态的用法\"><a href=\"#state状态的用法\" class=\"headerlink\" title=\"state状态的用法\"></a>state状态的用法</h2><h3 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h3><p><code>object getInitialState()</code></p>\n<p><code>getInitialState</code>方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。在组件挂载之前调用一次。返回值将会作为 <code>this.state</code> 的初始值。</p>\n<h3 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h3><p><code>setState(object nextState[, function callback])</code><br>合并 <code>nextState</code> 和当前 <code>state</code>。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 <code>setState</code> 执行完毕并且组件重新渲染完成之后调用。<code>this.setState</code> 方法用于修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h3 id=\"replaceState\"><a href=\"#replaceState\" class=\"headerlink\" title=\"replaceState\"></a>replaceState</h3><p><code>replaceState(object nextState[, function callback])</code><br>类似于 <code>setState()</code>，但是删除之前所有已存在的 <code>state</code> 键，这些键都不在 <code>nextState</code> 中。</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 <code>this.props</code> 读取（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo9\" target=\"_blank\" rel=\"external\">demo9</a> ）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var InputTest = React.createClass(&#123;</div><div class=\"line\">    getInitialState: function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            value : &apos;hello!&apos;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    handleChange: function (event) &#123;</div><div class=\"line\">        this.setState(&#123;</div><div class=\"line\">            value:event.target.value</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        var value = this.state.value;</div><div class=\"line\">        return(</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class=\"line\">                    &lt;p&gt;&#123;value&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;InputTest/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>上述代码的效果是有一个输入框，输入框下面是一个<code>p</code>标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。</p>\n<p>文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况</p>\n<h1 id=\"componments的生命周期\"><a href=\"#componments的生命周期\" class=\"headerlink\" title=\"componments的生命周期\"></a>componments的生命周期</h1><p>组件的生命周期分为三个状态：</p>\n<ul>\n<li>Mounting：已插入真实DOM</li>\n<li>Updating： 正在被重新渲染</li>\n<li>Unmounting：已移除真实的DOM<br>React 为每个状态都提供了两种处理函数，<code>will</code> 函数在进入状态之前调用，<code>did</code> 函数在进入状态之后调用，三种状态共计五种处理函数。</li>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()<br>此外，React 还提供两种特殊状态的处理函数。</li>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>下面是一个例子（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo10\" target=\"_blank\" rel=\"external\">demo10</a> )。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var Hello = React.createClass(&#123;</div><div class=\"line\">        getInitialState:function () &#123;</div><div class=\"line\">            alert(&apos;init&apos;)</div><div class=\"line\">            return&#123;</div><div class=\"line\">                opacity:1.0</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentWillMount:function () &#123;</div><div class=\"line\">          alert(&apos;Will&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            this.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = this.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;.bind(this),100)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                &lt;div style=&#123;&#123;opacity:this.state.opacity&#125;&#125;&gt;</div><div class=\"line\">                    Hello &#123;this.props.name&#125;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">        &lt;Hello name=&quot;world!&quot;/&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。</p>\n<p>为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            var _self  = this;</div><div class=\"line\">            _self.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = _self.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                _self.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;,100)</div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<p>这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)</p>\n<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 <code>componentDidMount</code> 方法设置 Ajax 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI （查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo11\" target=\"_blank\" rel=\"external\">demo11</a>) ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">     var UserGist = React.createClass(&#123;</div><div class=\"line\">         getInitialState:function () &#123;</div><div class=\"line\">             return&#123;</div><div class=\"line\">                 username: &apos;&apos;,</div><div class=\"line\">                 lastGistUrl: &apos;&apos;,</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         componentDidMount:function () &#123;</div><div class=\"line\">             $.get(this.props.source,function (result) &#123;</div><div class=\"line\">                 var lastGist = result[0];</div><div class=\"line\">                 if(this.isMounted())&#123;</div><div class=\"line\">                     this.setState(&#123;</div><div class=\"line\">                         username: lastGist.owner.login,</div><div class=\"line\">                         lastGistUrl: lastGist.html_url</div><div class=\"line\">                     &#125;);</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;.bind(this));</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         render: function () &#123;</div><div class=\"line\">             return(</div><div class=\"line\">                 &lt;div&gt;</div><div class=\"line\">                     &#123;this.state.username&#125;&apos;s last gist is &lt;a href=&#123;this.lastGistUrl&#125;&gt;here&lt;/a&gt;.</div><div class=\"line\">                 &lt;/div&gt;</div><div class=\"line\">             )</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\"></div><div class=\"line\">     ReactDOM.render(</div><div class=\"line\">         &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot;/&gt;</div><div class=\"line\">         ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">     )</div><div class=\"line\"> &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>"},{"title":"将项目上传至github","date":"2017-02-25T09:35:35.000Z","_content":"概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题\n<!--more-->\n\n什么是git：\n-------\n\n之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统\n有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。\n\n关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程[Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n\n对github的初步认识\n---------\n因为现在使用github还不是特别熟练，只指出最基本的，\ngithub是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门[怎么使用Github](https://www.zhihu.com/question/20070065)\n\n我现在的使用有两个方面：\n 1. 使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）\n 但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~\n 2. 第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库\n 3. 当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~\n 4. 和海内外同胞共享资源，\n\n使用github遇到的问题，ssh秘钥变为灰色\n----------------\n先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：\n“Git”->“Git Bash”，输入\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email email@example.com\n$ ssh -T Git@github.com\n```\n\ngit config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n\n执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的\n\n但是在最后一步的时候报错了\n\n```\nssh: connect to host github.com port 22: Connection timed out\n```\n解决方法是\n在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：\n\n```\nHost github.com\nUser YourEmail@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\nYourEmail为您的邮箱\n再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。 \n![这里写图片描述](http://img.blog.csdn.net/20160113200605078)\n\n这时验证就可以通过。 \n\n\n将你的项目托管至github的方式\n---------------\n这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：\n 1. 网页版的github网页\n 2. 客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n 3. 我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度\n\n首先要新建一个项目，然后有三种上传项目的方式：\n\n 1. …or create a new repository on the command line  新建一个项目\n\n```\necho \"# 2017-02-23\" >> README.md     新建一个README.md文件并在里面写入 2017-02-23\ngit init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件\ngit add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)\ngit commit -m \"first commit\"         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m \"有意义的附加说明\"）\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系\ngit push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master\n```\n 2. …or push an existing repository from the command line  通过命令行提交一个已有的项目\n\n```\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git\ngit push -u origin master\n```\n 3. …or import code from another repository   从其他项目引入\n\n```\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n```\n\n这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时\n网上的解决方法没有看懂，先贴出来：[git遇到的诡异错误: Failed connect to github.com:443](http://blog.csdn.net/u011249920/article/details/55190409)\n\n总结一下用命令行提交项目的步骤（已经init过了）：\n 1. git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）\n 2. git commit -m \"first commit\"\n 3. push origin master\n \n 可以使用git status查看文件状态\n","source":"_posts/Upload-project-to-GitHub.md","raw":"---\ntitle: 将项目上传至github\ndate: 2017-02-25 17:35:35\ntags: git \ncategories: git\n---\n概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题\n<!--more-->\n\n什么是git：\n-------\n\n之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统\n有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。\n\n关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程[Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n\n对github的初步认识\n---------\n因为现在使用github还不是特别熟练，只指出最基本的，\ngithub是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门[怎么使用Github](https://www.zhihu.com/question/20070065)\n\n我现在的使用有两个方面：\n 1. 使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）\n 但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~\n 2. 第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库\n 3. 当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~\n 4. 和海内外同胞共享资源，\n\n使用github遇到的问题，ssh秘钥变为灰色\n----------------\n先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：\n“Git”->“Git Bash”，输入\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email email@example.com\n$ ssh -T Git@github.com\n```\n\ngit config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n\n执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的\n\n但是在最后一步的时候报错了\n\n```\nssh: connect to host github.com port 22: Connection timed out\n```\n解决方法是\n在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：\n\n```\nHost github.com\nUser YourEmail@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\nYourEmail为您的邮箱\n再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。 \n![这里写图片描述](http://img.blog.csdn.net/20160113200605078)\n\n这时验证就可以通过。 \n\n\n将你的项目托管至github的方式\n---------------\n这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：\n 1. 网页版的github网页\n 2. 客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n 3. 我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度\n\n首先要新建一个项目，然后有三种上传项目的方式：\n\n 1. …or create a new repository on the command line  新建一个项目\n\n```\necho \"# 2017-02-23\" >> README.md     新建一个README.md文件并在里面写入 2017-02-23\ngit init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件\ngit add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)\ngit commit -m \"first commit\"         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m \"有意义的附加说明\"）\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系\ngit push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master\n```\n 2. …or push an existing repository from the command line  通过命令行提交一个已有的项目\n\n```\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git\ngit push -u origin master\n```\n 3. …or import code from another repository   从其他项目引入\n\n```\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n```\n\n这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时\n网上的解决方法没有看懂，先贴出来：[git遇到的诡异错误: Failed connect to github.com:443](http://blog.csdn.net/u011249920/article/details/55190409)\n\n总结一下用命令行提交项目的步骤（已经init过了）：\n 1. git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）\n 2. git commit -m \"first commit\"\n 3. push origin master\n \n 可以使用git status查看文件状态\n","slug":"Upload-project-to-GitHub","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxb001nvvxiwaympzom","content":"<p>概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题<br><a id=\"more\"></a></p>\n<h2 id=\"什么是git：\"><a href=\"#什么是git：\" class=\"headerlink\" title=\"什么是git：\"></a>什么是git：</h2><p>之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统<br>有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。</p>\n<p>关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"external\">Git教程 - 廖雪峰的官方网站</a></p>\n<h2 id=\"对github的初步认识\"><a href=\"#对github的初步认识\" class=\"headerlink\" title=\"对github的初步认识\"></a>对github的初步认识</h2><p>因为现在使用github还不是特别熟练，只指出最基本的，<br>github是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门<a href=\"https://www.zhihu.com/question/20070065\" target=\"_blank\" rel=\"external\">怎么使用Github</a></p>\n<p>我现在的使用有两个方面：</p>\n<ol>\n<li>使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）<br>但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~</li>\n<li>第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库</li>\n<li>当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~</li>\n<li>和海内外同胞共享资源，</li>\n</ol>\n<h2 id=\"使用github遇到的问题，ssh秘钥变为灰色\"><a href=\"#使用github遇到的问题，ssh秘钥变为灰色\" class=\"headerlink\" title=\"使用github遇到的问题，ssh秘钥变为灰色\"></a>使用github遇到的问题，ssh秘钥变为灰色</h2><p>先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：<br>“Git”-&gt;“Git Bash”，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email email@example.com</div><div class=\"line\">$ ssh -T Git@github.com</div></pre></td></tr></table></figure>\n<p>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的</p>\n<p>但是在最后一步的时候报错了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh: connect to host github.com port 22: Connection timed out</div></pre></td></tr></table></figure>\n<p>解决方法是<br>在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">User YourEmail@163.com</div><div class=\"line\">Hostname ssh.github.com</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">Port 443</div></pre></td></tr></table></figure>\n<p>YourEmail为您的邮箱<br>再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。<br><img src=\"http://img.blog.csdn.net/20160113200605078\" alt=\"这里写图片描述\"></p>\n<p>这时验证就可以通过。 </p>\n<h2 id=\"将你的项目托管至github的方式\"><a href=\"#将你的项目托管至github的方式\" class=\"headerlink\" title=\"将你的项目托管至github的方式\"></a>将你的项目托管至github的方式</h2><p>这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：</p>\n<ol>\n<li>网页版的github网页</li>\n<li>客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</li>\n<li>我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度</li>\n</ol>\n<p>首先要新建一个项目，然后有三种上传项目的方式：</p>\n<ol>\n<li>…or create a new repository on the command line  新建一个项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;# 2017-02-23&quot; &gt;&gt; README.md     新建一个README.md文件并在里面写入 2017-02-23</div><div class=\"line\">git init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件</div><div class=\"line\">git add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)</div><div class=\"line\">git commit -m &quot;first commit&quot;         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m &quot;有意义的附加说明&quot;）</div><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系</div><div class=\"line\">git push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or push an existing repository from the command line  通过命令行提交一个已有的项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or import code from another repository   从其他项目引入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</div></pre></td></tr></table></figure>\n<p>这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时<br>网上的解决方法没有看懂，先贴出来：<a href=\"http://blog.csdn.net/u011249920/article/details/55190409\" target=\"_blank\" rel=\"external\">git遇到的诡异错误: Failed connect to github.com:443</a></p>\n<p>总结一下用命令行提交项目的步骤（已经init过了）：</p>\n<ol>\n<li>git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）</li>\n<li>git commit -m “first commit”</li>\n<li><p>push origin master</p>\n<p>可以使用git status查看文件状态</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题<br>","more":"</p>\n<h2 id=\"什么是git：\"><a href=\"#什么是git：\" class=\"headerlink\" title=\"什么是git：\"></a>什么是git：</h2><p>之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统<br>有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。</p>\n<p>关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"external\">Git教程 - 廖雪峰的官方网站</a></p>\n<h2 id=\"对github的初步认识\"><a href=\"#对github的初步认识\" class=\"headerlink\" title=\"对github的初步认识\"></a>对github的初步认识</h2><p>因为现在使用github还不是特别熟练，只指出最基本的，<br>github是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门<a href=\"https://www.zhihu.com/question/20070065\" target=\"_blank\" rel=\"external\">怎么使用Github</a></p>\n<p>我现在的使用有两个方面：</p>\n<ol>\n<li>使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）<br>但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~</li>\n<li>第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库</li>\n<li>当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~</li>\n<li>和海内外同胞共享资源，</li>\n</ol>\n<h2 id=\"使用github遇到的问题，ssh秘钥变为灰色\"><a href=\"#使用github遇到的问题，ssh秘钥变为灰色\" class=\"headerlink\" title=\"使用github遇到的问题，ssh秘钥变为灰色\"></a>使用github遇到的问题，ssh秘钥变为灰色</h2><p>先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：<br>“Git”-&gt;“Git Bash”，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email email@example.com</div><div class=\"line\">$ ssh -T Git@github.com</div></pre></td></tr></table></figure>\n<p>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的</p>\n<p>但是在最后一步的时候报错了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh: connect to host github.com port 22: Connection timed out</div></pre></td></tr></table></figure>\n<p>解决方法是<br>在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">User YourEmail@163.com</div><div class=\"line\">Hostname ssh.github.com</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">Port 443</div></pre></td></tr></table></figure>\n<p>YourEmail为您的邮箱<br>再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。<br><img src=\"http://img.blog.csdn.net/20160113200605078\" alt=\"这里写图片描述\"></p>\n<p>这时验证就可以通过。 </p>\n<h2 id=\"将你的项目托管至github的方式\"><a href=\"#将你的项目托管至github的方式\" class=\"headerlink\" title=\"将你的项目托管至github的方式\"></a>将你的项目托管至github的方式</h2><p>这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：</p>\n<ol>\n<li>网页版的github网页</li>\n<li>客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</li>\n<li>我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度</li>\n</ol>\n<p>首先要新建一个项目，然后有三种上传项目的方式：</p>\n<ol>\n<li>…or create a new repository on the command line  新建一个项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;# 2017-02-23&quot; &gt;&gt; README.md     新建一个README.md文件并在里面写入 2017-02-23</div><div class=\"line\">git init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件</div><div class=\"line\">git add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)</div><div class=\"line\">git commit -m &quot;first commit&quot;         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m &quot;有意义的附加说明&quot;）</div><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系</div><div class=\"line\">git push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or push an existing repository from the command line  通过命令行提交一个已有的项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or import code from another repository   从其他项目引入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</div></pre></td></tr></table></figure>\n<p>这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时<br>网上的解决方法没有看懂，先贴出来：<a href=\"http://blog.csdn.net/u011249920/article/details/55190409\" target=\"_blank\" rel=\"external\">git遇到的诡异错误: Failed connect to github.com:443</a></p>\n<p>总结一下用命令行提交项目的步骤（已经init过了）：</p>\n<ol>\n<li>git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）</li>\n<li>git commit -m “first commit”</li>\n<li><p>push origin master</p>\n<p>可以使用git status查看文件状态</p>\n</li>\n</ol>"},{"title":"利用Gitpage+hexo开发自己的博客","date":"2016-09-15T17:07:17.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。\n<!--more-->\n\nGitpage+hexo\n------------\n\n想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。\n\n环境准备\n====\n\n1 安装Node\n--------\n\n到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi\n\n2 安装Git\n-------\n安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n\n安装步骤\n====\n\n1 安装Hexo\n------\n\n使用git shell,依次输入以下代码命令：\n\n```\ncd /\nnpm install hexo-cli -g\n```\n\n\n命令解释：\n\n**cd和/之间要有空格**，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。\n\n2 安装博客所需文件\n----------\n\n```\ncd /\nhexo init Hexo\ncd /Hexo\nnpm instal\nhexo generate（可简写为hexo g）\nhexo sever（可简写为hexo s）\n```\n\n命令解释:\n\n- cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。\n\n- Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。\n\n- 指向Hexo目录\n\n- 安装依赖文件\n\n- 编译\n\n- 开启本地服务(第5、6步的操作可以合并成hexo s -g)\n\n此时打开浏览器，在地址栏输入http://localhost:4000/\n即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。\n\n那么如何翻墙呢？ 下面提供我所知道的两种方法：\n\n这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: http://pan.baidu.com/s/1c2x7eRu\n密码: z3kw\n\n这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：http://blog.my-eclipse.cn/host-google.html\n\n如果你不想翻墙，可以采用这种方法：\n进入你刚新建好的 blog根目录\n\n```\n themes/landscape/layout/_partial\n\n```\n1，找到 after-footer.ejs把\n\n```\n<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>\n```\n替换成\n\n> `<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>`\n\n2，找到 header.ejs\n注释掉或者删掉 下面这句css引用\n`<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=”stylesheet” type=”text/css”>`\nhexo server 之后。访问 http://localhost:4000 就会看到blog主页了。\n\n如果你成功在http://localhost:4000/\n下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！\n\n> 行百里者半九十\n\n不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：\n\n3 部署博客到服务器\n--------\n\n也就是把博客部署到github page提供的服务器上。\n\n步骤\n\n- 首先回到git shell按ctrl+c，之后输入y即可\n\n\n- 修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：`deploy:  type: github  repo: https://github.com/yourname/blog.git`\n\n\n继续回到git shell输入命令：\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n命令解释:\n\n- 清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n- 开启本地服务，\n- 部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n是的，现在你拥有了自己的博客！\n\n发表博文\n====\n\n千辛万苦建立了博客，那么我们来学习一下如何发表博文。\n\n新建博文\n----\n\n继续回到git shell输入：\n\nhexo new \"新博文的名字\"\n即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。\n\n**Markdown编辑器**\n\n推荐两款我所使用的markdown编辑器：\n\n**MIU**，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：\n链接: http://pan.baidu.com/s/1slMPeTR\n密码: 2pnk\n**正在使用的Atom:**更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。\n可能会遇到的问题\n\n> hexo new [layout] \"postName\" #新建文章\n\n其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md\n\n```\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行\n\n```\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n\npostName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。\n\n注意，所有文件：后面都必须有个空格，不然会报错。\n\n看一下刚才生成的文件hexo\\source\\_posts\\postName.md\n\n```\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n```\n\n始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。\n\n**fancybox**\n可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。\n很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：\n```\nlayout: photo\ntitle: 我的阅历\ndate: 2085-01-16 07:33:44\ntags: [hexo]\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n```\n\n经过测试，文件头上的layout: photo可以省略。\n\n不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md\n```\nlayout: { { layout } }\ntitle: { { title } }\ndate: { { date } }\ntags:\nphotos:\n-\n---\n```\n然后每次可以执行带layout的new命令生成照片文章：\n\n```\nhexo new photo \"photoPostName\" #新建照片文章\n```\ndescription\nmarkdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。\n```\ntitle: hexo你的博客\ndate: 2013-11-22 17:11:54\ncategories: default\ntags: [hexo]\ndescription: 你对本页的描述\n---\n```\nhexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。\n\n**文章摘要**\n在需要显示摘要的地方添加如下代码即可：\n\n```\n以上是摘要\n<!--more-->\n以下是余下全文\n```\nmore以上内容即是文章摘要，在主页显示，more以下内容点击『> Read More』链接打开全文才显示。\n\nhexo中所有文件的编码格式均是UTF-8。\n\n\n优雅的在博客上插入图片\n-----------\n\n看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：\n\n首先确认 _config.yml 中更改 post_asset_folder:true 。\n回到git shell，输入\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n继续执行\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹\n\n\n然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？\n提醒：\n\n写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！\n\n预览和发表\n-----\n\n继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！\n\n```\n1.  hexo clean\n2.  hexo g\n3.  hexo s\n4.  hexo d\n```\n\n更高大上的发表博文的方法\n\n使用Travis CI自动部署你的Hexo博客到Github,请参考[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客\n\n安装主题\n----\n\n如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：\n\n选择主题\n\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你喜欢的主题，我使用的Next主题\n\n安装Next主题\n---\n\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽！\n\n安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist\n```\n\n目录是否是modernist无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为modernist\n\n```\ntheme: modernist\n```\n打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n```\n更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n评论框\n---\n\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用[多说](https://hexo.io/plugins/)\n直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置->域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以[参考这里](http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017)，我是在HeroicYang的基础上修改的。\n\n如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout\\_partial\\comment.ejs里面，如下：\n\n```\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n构建新页面\n-----\n\n那些小图标都是一个新页面，需要手动创建，那么如何创建？\n\n回到git shell，\n\nhexo new page \"页面名称\"\n比如你要创建一个about页面，就输入hexo new page “about”\n\n正确显示各页面内容\n\n发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！\n\n解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：\n\n\n\ncomments: false即关闭此页面的评论功能\n\ntype: “tags”这里的值根据你想更改的页面决定\n\n更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！\n\n安装插件\n----\n\nhexo支持的插件：[Plugins | Hexo](https://hexo.io/plugins/)\n想安装什么插件，按照相关README.md中介绍操作即可。\n\n安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:[第三方服务集成](http://theme-next.iissnan.com/third-party-services.html#swfitype)，介绍非常全面！好好用来装饰你的博客吧！\n\n安装sitemap和feed插件时，如果遇到问题，可以参考:[博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)，安装sitemap后要到[百度站长](http://zhanzhang.baidu.com/?castk=LTE=)提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:[为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n安装swiftype插件，如果遇到问题，可以参考[利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n图床\n---\n\n考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。\n\n免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里[关于key-value存储系统](https://support.qiniu.com/hc/)。\n\n七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇[Linux中国采用七牛云存储支撑图片访问](https://linux.cn/article-2311-1.html)。\n\n如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。\n\n如果你对七牛web版的文件管理界面不满意，可以用官方的[七牛云存储工具](http://docs.qiniu.com/tools/v6/index.html)。\n\n您还可以使用如下图床服务 FarBox，Dropbox，又拍云\n主题优化\n----\n\nNext主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！\n\n[提升Hexo的NexT主题加载速度](http://www.gfwsb.com/2016/improveNexTspeed/)\n\n[使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n绑定域名\n---\n\n购买域名，我是在[万网](https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist)购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个[网站](http://www.xiaoerguo.com/),但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！\n\n如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：\n\n192.30.252.153\n\n192.30.252.154\n\n制作ICO图标\n---\n\nfavicon.ico一般用于作为缩略图的网站标志，[在线制作网站](http://www.bitbug.net/)\n关于是否绑定域名\n\n经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考[单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/),这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！\n\n#至此，基本操作介绍完毕，以下内容普通用户无需了解。\n默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n接下来是重头戏_config.yml，做个简单说明：\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site #整站的基本信息\ntitle: 不如 #网站标题\nsubtitle: 码农，程序猿，未来的昏析师 #网站副标题\ndescription: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head->meta中可看到\nauthor: bruce #网站作者，在下方显示\nemail: bu.ru@qq.com #联系邮箱\nlanguage: zh-CN #语言\n\n# URL #域名和文件结构\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://ibruce.info #你的域名\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing #写文章选项\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post #默认layout方式\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight: #代码高亮\n  enable: true #是否启用\n  line_number: false #是否显示行号\n  tab_replace:\n\n# Category & Tag #分类与标签\ndefault_category: uncategorized # default\ncategory_map:\ntag_map:\n\n# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server #本地服务参数\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: true\nlogger_format:\n\n# Date / Time format #日期显示格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination #分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页10篇文章\npagination_dir: page\n\n# Disqus #社会化评论disqus，我使用多说，在主题中配置\ndisqus_shortname:\n\n# Extensions #插件，暂时未安装插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\n## 主题\ntheme: modernist # raytaylorism # pacman # modernist # light\nexclude_generator:\n\n# Deployment #部署\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库\n```\n修改局部页面\n---\n\n页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：\n```\n.\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-CN.yml      #中文语言\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   └── _widget        #小挂件的布局，页面下方小挂件的控制\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _base      #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts      #字体\n|   |   ├── images     #图片\n|   |   └── style.styl #*.styl引入需要的css源码\n|   ├── fancybox       #fancybox效果源码\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout\\_partial\\header.ejs，比如头上加个搜索框：\n```\n<div>\n<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n <input type=\"search\" name=\"q\" id=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" maxlength=\"20\" placeholder=\"Search\" />\n <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n</form>\n</div>\n```\n将如上代码加入即可，您需要修改css以便这个搜索框比较美观。\n\n再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout\\_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。\n\n统计\n---\n\n页面上显示访问次数可以使用 [不蒜子](http://busuanzi.ibruce.info/)，两行代码即可搞定。\n\n因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。\n编辑文件hexo\\themes\\modernist\\_config.yml，增加配置选项：\n\n```\nbaidu_tongji: true\n```\n新建文件hexo\\themes\\modernist\\layout\\_partial\\baidu_tongji.ejs，内容如下：\n\n```\n<% if (theme.baidu_tongji){ %>\n<script type=\"text/javascript\">\n#你的百度统计代码\n</script>\n<% } %>\n```\n注册并登录百度统计获取你的统计代码。\n\n编辑文件hexo\\themes\\modernist\\layout\\_partial\\head.ejs，在『/head』之前增加：\n\n```\n<%- partial('baidu_tongji') %>\n```\n重新生成并部署你的站点。\n\n不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页->网站列表->获取代码->系统管理设置->统计图标设置->显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。\n\n分享\n---\n\n我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：\n\n- 在hexo\\themes\\modernist\\layout\\_partial\\post下新建jiathis.ejs文件。\n注册加网获得你的分享代码，写入jiathis.ejs。\n- 在hexo\\themes\\modernist\\layout\\_partial\\article.ejs中，添加<%-partial(‘post/jiathis’)%>。\n-分享服务还可以使用如下企业提供的技术[加网](http://www.jiathis.com/)，[bShare](http://www.bshare.cn/)，[百度分享](http://share.baidu.com/)。\n\n网站图标\n\n看一下hexo\\themes\\modernist\\layout\\_partial\\head.ejs，找到这句：\n\n```\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%- config.root %>favicon.ico\">\n```\n你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以[在Faviconer](http://www.faviconer.com/)制作你的ico图标，国内有[比特虫](http://www.bitbug.net/)。\n\n自定义挂件\n---\n\n除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout\\_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist\\_config.yml中配置。\n```\nwidgets:\n  - myWidget\n```\n用上述方法可以添加新浪微博小挂件。\n\n- 生成自己的微博组件。\n- 添加hexo\\themes\\modernist\\layout\\_widget\\weibo.ejs文件。\n- 配置hexo\\themes\\modernist\\_config.yml。\n插件\n--\n\n安装插件：\n```\nnpm install <plugin-name> --save\n```\n启用插件：在*hexo\\_config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\nRSS插件\n将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。\n\n你可以用rss作为迁移工具，用如下命令读取其他位置的rss：\n\n```\nhexo migrate rss <source>\n```\n『source』是本地或网络文件路径。\n\nSitemap插件\n将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。\n\n更多插件的安装方法，请参考[官方Wiki](https://github.com/hexojs/hexo/wiki/Plugins)。\n\n如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。\n\n迁移\n---\n\nhexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。\n\n搜索引擎\n---\n\n你可以到[屈站长](http://www.sousuoyinqingtijiao.com/)提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。\n\n更新\n---\n\n更新hexo：\n\n```\nnpm update -g hexo\n```\n更新主题：\n```\ncd themes/你的主题\ngit pull\n```\n更新插件：\n```\nnpm update\n```\n干掉IE\n\nKill IE6 提示的javascript代码，请自行搜索。\n\n换机器\n---\n\n你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。\n\n我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。\n\n统计功能\n---\n\n为hexo博客添加访问次数统计功能\n\n其它\n\n网站加速\n\n[Webluker-CDN 网站加速 免费CDN DNS解析](http://www.webluker.com/)\n\nWebluker-FAQ索引\n\n网站监控\n\n[监控宝-网站监控 网页监控 服务器监控](http://www.jiankongbao.com/)\n\n[监控宝-常见问题](http://www.jiankongbao.com/faq)\n\n参考文献\n====\n\n\n\n- [hexo + github + 多说 来搭建免费博客](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n\n- [利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n- [博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)\n\n- [在 hexo中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n\n- [手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n- [为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n\n- [使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n- [单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/)\n\n- [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","source":"_posts/Use-Gitpagehexo-to-develop-their-own-blog.md","raw":"---\ntitle: 利用Gitpage+hexo开发自己的博客\ndate: 2016-09-16 01:07:17\ntags: hexo \ncategories: git\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。\n<!--more-->\n\nGitpage+hexo\n------------\n\n想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。\n\n环境准备\n====\n\n1 安装Node\n--------\n\n到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi\n\n2 安装Git\n-------\n安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n\n安装步骤\n====\n\n1 安装Hexo\n------\n\n使用git shell,依次输入以下代码命令：\n\n```\ncd /\nnpm install hexo-cli -g\n```\n\n\n命令解释：\n\n**cd和/之间要有空格**，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。\n\n2 安装博客所需文件\n----------\n\n```\ncd /\nhexo init Hexo\ncd /Hexo\nnpm instal\nhexo generate（可简写为hexo g）\nhexo sever（可简写为hexo s）\n```\n\n命令解释:\n\n- cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。\n\n- Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。\n\n- 指向Hexo目录\n\n- 安装依赖文件\n\n- 编译\n\n- 开启本地服务(第5、6步的操作可以合并成hexo s -g)\n\n此时打开浏览器，在地址栏输入http://localhost:4000/\n即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。\n\n那么如何翻墙呢？ 下面提供我所知道的两种方法：\n\n这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: http://pan.baidu.com/s/1c2x7eRu\n密码: z3kw\n\n这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：http://blog.my-eclipse.cn/host-google.html\n\n如果你不想翻墙，可以采用这种方法：\n进入你刚新建好的 blog根目录\n\n```\n themes/landscape/layout/_partial\n\n```\n1，找到 after-footer.ejs把\n\n```\n<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>\n```\n替换成\n\n> `<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>`\n\n2，找到 header.ejs\n注释掉或者删掉 下面这句css引用\n`<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=”stylesheet” type=”text/css”>`\nhexo server 之后。访问 http://localhost:4000 就会看到blog主页了。\n\n如果你成功在http://localhost:4000/\n下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！\n\n> 行百里者半九十\n\n不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：\n\n3 部署博客到服务器\n--------\n\n也就是把博客部署到github page提供的服务器上。\n\n步骤\n\n- 首先回到git shell按ctrl+c，之后输入y即可\n\n\n- 修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：`deploy:  type: github  repo: https://github.com/yourname/blog.git`\n\n\n继续回到git shell输入命令：\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n命令解释:\n\n- 清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n- 开启本地服务，\n- 部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n是的，现在你拥有了自己的博客！\n\n发表博文\n====\n\n千辛万苦建立了博客，那么我们来学习一下如何发表博文。\n\n新建博文\n----\n\n继续回到git shell输入：\n\nhexo new \"新博文的名字\"\n即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。\n\n**Markdown编辑器**\n\n推荐两款我所使用的markdown编辑器：\n\n**MIU**，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：\n链接: http://pan.baidu.com/s/1slMPeTR\n密码: 2pnk\n**正在使用的Atom:**更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。\n可能会遇到的问题\n\n> hexo new [layout] \"postName\" #新建文章\n\n其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md\n\n```\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行\n\n```\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n\npostName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。\n\n注意，所有文件：后面都必须有个空格，不然会报错。\n\n看一下刚才生成的文件hexo\\source\\_posts\\postName.md\n\n```\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n```\n\n始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。\n\n**fancybox**\n可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。\n很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：\n```\nlayout: photo\ntitle: 我的阅历\ndate: 2085-01-16 07:33:44\ntags: [hexo]\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n```\n\n经过测试，文件头上的layout: photo可以省略。\n\n不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md\n```\nlayout: { { layout } }\ntitle: { { title } }\ndate: { { date } }\ntags:\nphotos:\n-\n---\n```\n然后每次可以执行带layout的new命令生成照片文章：\n\n```\nhexo new photo \"photoPostName\" #新建照片文章\n```\ndescription\nmarkdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。\n```\ntitle: hexo你的博客\ndate: 2013-11-22 17:11:54\ncategories: default\ntags: [hexo]\ndescription: 你对本页的描述\n---\n```\nhexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。\n\n**文章摘要**\n在需要显示摘要的地方添加如下代码即可：\n\n```\n以上是摘要\n<!--more-->\n以下是余下全文\n```\nmore以上内容即是文章摘要，在主页显示，more以下内容点击『> Read More』链接打开全文才显示。\n\nhexo中所有文件的编码格式均是UTF-8。\n\n\n优雅的在博客上插入图片\n-----------\n\n看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：\n\n首先确认 _config.yml 中更改 post_asset_folder:true 。\n回到git shell，输入\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n继续执行\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹\n\n\n然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？\n提醒：\n\n写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！\n\n预览和发表\n-----\n\n继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！\n\n```\n1.  hexo clean\n2.  hexo g\n3.  hexo s\n4.  hexo d\n```\n\n更高大上的发表博文的方法\n\n使用Travis CI自动部署你的Hexo博客到Github,请参考[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客\n\n安装主题\n----\n\n如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：\n\n选择主题\n\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你喜欢的主题，我使用的Next主题\n\n安装Next主题\n---\n\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽！\n\n安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist\n```\n\n目录是否是modernist无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为modernist\n\n```\ntheme: modernist\n```\n打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n```\n更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n评论框\n---\n\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用[多说](https://hexo.io/plugins/)\n直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置->域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以[参考这里](http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017)，我是在HeroicYang的基础上修改的。\n\n如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout\\_partial\\comment.ejs里面，如下：\n\n```\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n构建新页面\n-----\n\n那些小图标都是一个新页面，需要手动创建，那么如何创建？\n\n回到git shell，\n\nhexo new page \"页面名称\"\n比如你要创建一个about页面，就输入hexo new page “about”\n\n正确显示各页面内容\n\n发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！\n\n解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：\n\n\n\ncomments: false即关闭此页面的评论功能\n\ntype: “tags”这里的值根据你想更改的页面决定\n\n更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！\n\n安装插件\n----\n\nhexo支持的插件：[Plugins | Hexo](https://hexo.io/plugins/)\n想安装什么插件，按照相关README.md中介绍操作即可。\n\n安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:[第三方服务集成](http://theme-next.iissnan.com/third-party-services.html#swfitype)，介绍非常全面！好好用来装饰你的博客吧！\n\n安装sitemap和feed插件时，如果遇到问题，可以参考:[博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)，安装sitemap后要到[百度站长](http://zhanzhang.baidu.com/?castk=LTE=)提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:[为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n安装swiftype插件，如果遇到问题，可以参考[利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n图床\n---\n\n考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。\n\n免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里[关于key-value存储系统](https://support.qiniu.com/hc/)。\n\n七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇[Linux中国采用七牛云存储支撑图片访问](https://linux.cn/article-2311-1.html)。\n\n如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。\n\n如果你对七牛web版的文件管理界面不满意，可以用官方的[七牛云存储工具](http://docs.qiniu.com/tools/v6/index.html)。\n\n您还可以使用如下图床服务 FarBox，Dropbox，又拍云\n主题优化\n----\n\nNext主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！\n\n[提升Hexo的NexT主题加载速度](http://www.gfwsb.com/2016/improveNexTspeed/)\n\n[使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n绑定域名\n---\n\n购买域名，我是在[万网](https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist)购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个[网站](http://www.xiaoerguo.com/),但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！\n\n如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：\n\n192.30.252.153\n\n192.30.252.154\n\n制作ICO图标\n---\n\nfavicon.ico一般用于作为缩略图的网站标志，[在线制作网站](http://www.bitbug.net/)\n关于是否绑定域名\n\n经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考[单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/),这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！\n\n#至此，基本操作介绍完毕，以下内容普通用户无需了解。\n默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n接下来是重头戏_config.yml，做个简单说明：\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site #整站的基本信息\ntitle: 不如 #网站标题\nsubtitle: 码农，程序猿，未来的昏析师 #网站副标题\ndescription: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head->meta中可看到\nauthor: bruce #网站作者，在下方显示\nemail: bu.ru@qq.com #联系邮箱\nlanguage: zh-CN #语言\n\n# URL #域名和文件结构\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://ibruce.info #你的域名\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing #写文章选项\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post #默认layout方式\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight: #代码高亮\n  enable: true #是否启用\n  line_number: false #是否显示行号\n  tab_replace:\n\n# Category & Tag #分类与标签\ndefault_category: uncategorized # default\ncategory_map:\ntag_map:\n\n# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server #本地服务参数\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: true\nlogger_format:\n\n# Date / Time format #日期显示格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination #分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页10篇文章\npagination_dir: page\n\n# Disqus #社会化评论disqus，我使用多说，在主题中配置\ndisqus_shortname:\n\n# Extensions #插件，暂时未安装插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\n## 主题\ntheme: modernist # raytaylorism # pacman # modernist # light\nexclude_generator:\n\n# Deployment #部署\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库\n```\n修改局部页面\n---\n\n页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：\n```\n.\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-CN.yml      #中文语言\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   └── _widget        #小挂件的布局，页面下方小挂件的控制\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _base      #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts      #字体\n|   |   ├── images     #图片\n|   |   └── style.styl #*.styl引入需要的css源码\n|   ├── fancybox       #fancybox效果源码\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout\\_partial\\header.ejs，比如头上加个搜索框：\n```\n<div>\n<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n <input type=\"search\" name=\"q\" id=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" maxlength=\"20\" placeholder=\"Search\" />\n <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n</form>\n</div>\n```\n将如上代码加入即可，您需要修改css以便这个搜索框比较美观。\n\n再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout\\_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。\n\n统计\n---\n\n页面上显示访问次数可以使用 [不蒜子](http://busuanzi.ibruce.info/)，两行代码即可搞定。\n\n因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。\n编辑文件hexo\\themes\\modernist\\_config.yml，增加配置选项：\n\n```\nbaidu_tongji: true\n```\n新建文件hexo\\themes\\modernist\\layout\\_partial\\baidu_tongji.ejs，内容如下：\n\n```\n<% if (theme.baidu_tongji){ %>\n<script type=\"text/javascript\">\n#你的百度统计代码\n</script>\n<% } %>\n```\n注册并登录百度统计获取你的统计代码。\n\n编辑文件hexo\\themes\\modernist\\layout\\_partial\\head.ejs，在『/head』之前增加：\n\n```\n<%- partial('baidu_tongji') %>\n```\n重新生成并部署你的站点。\n\n不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页->网站列表->获取代码->系统管理设置->统计图标设置->显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。\n\n分享\n---\n\n我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：\n\n- 在hexo\\themes\\modernist\\layout\\_partial\\post下新建jiathis.ejs文件。\n注册加网获得你的分享代码，写入jiathis.ejs。\n- 在hexo\\themes\\modernist\\layout\\_partial\\article.ejs中，添加<%-partial(‘post/jiathis’)%>。\n-分享服务还可以使用如下企业提供的技术[加网](http://www.jiathis.com/)，[bShare](http://www.bshare.cn/)，[百度分享](http://share.baidu.com/)。\n\n网站图标\n\n看一下hexo\\themes\\modernist\\layout\\_partial\\head.ejs，找到这句：\n\n```\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%- config.root %>favicon.ico\">\n```\n你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以[在Faviconer](http://www.faviconer.com/)制作你的ico图标，国内有[比特虫](http://www.bitbug.net/)。\n\n自定义挂件\n---\n\n除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout\\_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist\\_config.yml中配置。\n```\nwidgets:\n  - myWidget\n```\n用上述方法可以添加新浪微博小挂件。\n\n- 生成自己的微博组件。\n- 添加hexo\\themes\\modernist\\layout\\_widget\\weibo.ejs文件。\n- 配置hexo\\themes\\modernist\\_config.yml。\n插件\n--\n\n安装插件：\n```\nnpm install <plugin-name> --save\n```\n启用插件：在*hexo\\_config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\nRSS插件\n将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。\n\n你可以用rss作为迁移工具，用如下命令读取其他位置的rss：\n\n```\nhexo migrate rss <source>\n```\n『source』是本地或网络文件路径。\n\nSitemap插件\n将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。\n\n更多插件的安装方法，请参考[官方Wiki](https://github.com/hexojs/hexo/wiki/Plugins)。\n\n如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。\n\n迁移\n---\n\nhexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。\n\n搜索引擎\n---\n\n你可以到[屈站长](http://www.sousuoyinqingtijiao.com/)提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。\n\n更新\n---\n\n更新hexo：\n\n```\nnpm update -g hexo\n```\n更新主题：\n```\ncd themes/你的主题\ngit pull\n```\n更新插件：\n```\nnpm update\n```\n干掉IE\n\nKill IE6 提示的javascript代码，请自行搜索。\n\n换机器\n---\n\n你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。\n\n我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。\n\n统计功能\n---\n\n为hexo博客添加访问次数统计功能\n\n其它\n\n网站加速\n\n[Webluker-CDN 网站加速 免费CDN DNS解析](http://www.webluker.com/)\n\nWebluker-FAQ索引\n\n网站监控\n\n[监控宝-网站监控 网页监控 服务器监控](http://www.jiankongbao.com/)\n\n[监控宝-常见问题](http://www.jiankongbao.com/faq)\n\n参考文献\n====\n\n\n\n- [hexo + github + 多说 来搭建免费博客](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n\n- [利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n- [博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)\n\n- [在 hexo中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n\n- [手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n- [为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n\n- [使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n- [单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/)\n\n- [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","slug":"Use-Gitpagehexo-to-develop-their-own-blog","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxe001qvvxitx7eb1tp","content":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<p>进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。<br><a id=\"more\"></a></p>\n<h2 id=\"Gitpage-hexo\"><a href=\"#Gitpage-hexo\" class=\"headerlink\" title=\"Gitpage+hexo\"></a>Gitpage+hexo</h2><p>想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"1-安装Node\"><a href=\"#1-安装Node\" class=\"headerlink\" title=\"1 安装Node\"></a>1 安装Node</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi</p>\n<h2 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2 安装Git\"></a>2 安装Git</h2><p>安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</p>\n<h1 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h1><h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1 安装Hexo\"></a>1 安装Hexo</h2><p>使用git shell,依次输入以下代码命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>命令解释：</p>\n<p><strong>cd和/之间要有空格</strong>，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。</p>\n<h2 id=\"2-安装博客所需文件\"><a href=\"#2-安装博客所需文件\" class=\"headerlink\" title=\"2 安装博客所需文件\"></a>2 安装博客所需文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">hexo init Hexo</div><div class=\"line\">cd /Hexo</div><div class=\"line\">npm instal</div><div class=\"line\">hexo generate（可简写为hexo g）</div><div class=\"line\">hexo sever（可简写为hexo s）</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li><p>cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。</p>\n</li>\n<li><p>Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。</p>\n</li>\n<li><p>指向Hexo目录</p>\n</li>\n<li><p>安装依赖文件</p>\n</li>\n<li><p>编译</p>\n</li>\n<li><p>开启本地服务(第5、6步的操作可以合并成hexo s -g)</p>\n</li>\n</ul>\n<p>此时打开浏览器，在地址栏输入<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。</p>\n<p>那么如何翻墙呢？ 下面提供我所知道的两种方法：</p>\n<p>这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: <a href=\"http://pan.baidu.com/s/1c2x7eRu\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1c2x7eRu</a><br>密码: z3kw</p>\n<p>这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：<a href=\"http://blog.my-eclipse.cn/host-google.html\" target=\"_blank\" rel=\"external\">http://blog.my-eclipse.cn/host-google.html</a></p>\n<p>如果你不想翻墙，可以采用这种方法：<br>进入你刚新建好的 blog根目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">themes/landscape/layout/_partial</div></pre></td></tr></table></figure>\n<p>1，找到 after-footer.ejs把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>替换成</p>\n<blockquote>\n<p><code>&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</code></p>\n</blockquote>\n<p>2，找到 header.ejs<br>注释掉或者删掉 下面这句css引用<br><code>&lt;link href=&quot;//fonts.googleapis.com/css?family=Source+Code+Pro&quot; rel=”stylesheet” type=”text/css”&gt;</code><br>hexo server 之后。访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 就会看到blog主页了。</p>\n<p>如果你成功在<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！</p>\n<blockquote>\n<p>行百里者半九十</p>\n</blockquote>\n<p>不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：</p>\n<h2 id=\"3-部署博客到服务器\"><a href=\"#3-部署博客到服务器\" class=\"headerlink\" title=\"3 部署博客到服务器\"></a>3 部署博客到服务器</h2><p>也就是把博客部署到github page提供的服务器上。</p>\n<p>步骤</p>\n<ul>\n<li>首先回到git shell按ctrl+c，之后输入y即可</li>\n</ul>\n<ul>\n<li>修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：<code>deploy:  type: github  repo: https://github.com/yourname/blog.git</code></li>\n</ul>\n<p>继续回到git shell输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li>清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。<br>编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</li>\n<li>开启本地服务，</li>\n<li>部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！<br>是的，现在你拥有了自己的博客！</li>\n</ul>\n<h1 id=\"发表博文\"><a href=\"#发表博文\" class=\"headerlink\" title=\"发表博文\"></a>发表博文</h1><p>千辛万苦建立了博客，那么我们来学习一下如何发表博文。</p>\n<h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>继续回到git shell输入：</p>\n<p>hexo new “新博文的名字”<br>即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。</p>\n<p><strong>Markdown编辑器</strong></p>\n<p>推荐两款我所使用的markdown编辑器：</p>\n<p><strong>MIU</strong>，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：<br>链接: <a href=\"http://pan.baidu.com/s/1slMPeTR\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1slMPeTR</a><br>密码: 2pnk<br><strong>正在使用的Atom:</strong>更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。<br>可能会遇到的问题</p>\n<blockquote>\n<p>hexo new [layout] “postName” #新建文章</p>\n</blockquote>\n<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。<br>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">categories:</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。</p>\n<p>注意，所有文件：后面都必须有个空格，不然会报错。</p>\n<p>看一下刚才生成的文件hexo\\source_posts\\postName.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class=\"line\">categories: #文章分类目录，可以为空，注意:后面有个空格</div><div class=\"line\">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。</p>\n<p><strong>fancybox</strong><br>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: photo</div><div class=\"line\">title: 我的阅历</div><div class=\"line\">date: 2085-01-16 07:33:44</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">photos:</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</div></pre></td></tr></table></figure></p>\n<p>经过测试，文件头上的layout: photo可以省略。</p>\n<p>不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: &#123; &#123; layout &#125; &#125;</div><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">photos:</div><div class=\"line\">-</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>然后每次可以执行带layout的new命令生成照片文章：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new photo &quot;photoPostName&quot; #新建照片文章</div></pre></td></tr></table></figure>\n<p>description<br>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: hexo你的博客</div><div class=\"line\">date: 2013-11-22 17:11:54</div><div class=\"line\">categories: default</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">description: 你对本页的描述</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。</p>\n<p><strong>文章摘要</strong><br>在需要显示摘要的地方添加如下代码即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是余下全文</div></pre></td></tr></table></figure>\n<p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。</p>\n<p>hexo中所有文件的编码格式均是UTF-8。</p>\n<h2 id=\"优雅的在博客上插入图片\"><a href=\"#优雅的在博客上插入图片\" class=\"headerlink\" title=\"优雅的在博客上插入图片\"></a>优雅的在博客上插入图片</h2><p>看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：</p>\n<p>首先确认 _config.yml 中更改 post_asset_folder:true 。<br>回到git shell，输入</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n<p>继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹</p>\n<p>然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？<br>提醒：</p>\n<p>写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！</p>\n<h2 id=\"预览和发表\"><a href=\"#预览和发表\" class=\"headerlink\" title=\"预览和发表\"></a>预览和发表</h2><p>继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.  hexo clean</div><div class=\"line\">2.  hexo g</div><div class=\"line\">3.  hexo s</div><div class=\"line\">4.  hexo d</div></pre></td></tr></table></figure>\n<p>更高大上的发表博文的方法</p>\n<p>使用Travis CI自动部署你的Hexo博客到Github,请参考<a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\" target=\"_blank\" rel=\"external\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：</p>\n<p>选择主题</p>\n<p>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Themes·Hexo</a>上选择你喜欢的主题，我使用的Next主题</p>\n<h2 id=\"安装Next主题\"><a href=\"#安装Next主题\" class=\"headerlink\" title=\"安装Next主题\"></a>安装Next主题</h2><p>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next官方文档</a>,内容十分详尽！</p>\n<p>安装主题的方法就是一句git命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</div></pre></td></tr></table></figure>\n<p>目录是否是modernist无所谓，只要与_config.yml文件一致即可。</p>\n<p>安装完成后，打开hexo_config.yml，修改主题为modernist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: modernist</div></pre></td></tr></table></figure>\n<p>打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #配置页头显示哪些菜单</div><div class=\"line\">#  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\">  Reading: /reading</div><div class=\"line\">  About: /about</div><div class=\"line\">#  Guestbook: /about</div><div class=\"line\"></div><div class=\"line\">excerpt_link: Read More #摘要链接文字</div><div class=\"line\">archive_yearly: false #按年存档</div><div class=\"line\"></div><div class=\"line\">widgets: #配置页脚显示哪些小挂件</div><div class=\"line\">  - category</div><div class=\"line\">#  - tag</div><div class=\"line\">  - tagcloud</div><div class=\"line\">  - recent_posts</div><div class=\"line\">#  - blogroll</div><div class=\"line\"></div><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - bruce sha&apos;s duapp wordpress: http://ibruce.duapp.com</div><div class=\"line\">  - bruce sha&apos;s javaeye: http://buru.iteye.com</div><div class=\"line\">  - bruce sha&apos;s oschina blog: http://my.oschina.net/buru</div><div class=\"line\">  - bruce sha&apos;s baidu space: http://hi.baidu.com/iburu</div><div class=\"line\"></div><div class=\"line\">fancybox: true #是否开启fancybox效果</div><div class=\"line\"></div><div class=\"line\">duoshuo_shortname: buru #多说账号</div><div class=\"line\"></div><div class=\"line\">google_analytics:</div><div class=\"line\">rss:</div></pre></td></tr></table></figure>\n<p>更新主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/modernist</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h2 id=\"评论框\"><a href=\"#评论框\" class=\"headerlink\" title=\"评论框\"></a>评论框</h2><p>静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">多说</a><br>直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置-&gt;域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以<a href=\"http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017\" target=\"_blank\" rel=\"external\">参考这里</a>，我是在HeroicYang的基础上修改的。</p>\n<p>如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout_partial\\comment.ejs里面，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (config.disqus_shortname &amp;&amp; page.comments)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comment&quot;&gt;</div><div class=\"line\">  #你的通用代码</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"构建新页面\"><a href=\"#构建新页面\" class=\"headerlink\" title=\"构建新页面\"></a>构建新页面</h2><p>那些小图标都是一个新页面，需要手动创建，那么如何创建？</p>\n<p>回到git shell，</p>\n<p>hexo new page “页面名称”<br>比如你要创建一个about页面，就输入hexo new page “about”</p>\n<p>正确显示各页面内容</p>\n<p>发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！</p>\n<p>解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：</p>\n<p>comments: false即关闭此页面的评论功能</p>\n<p>type: “tags”这里的值根据你想更改的页面决定</p>\n<p>更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>hexo支持的插件：<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">Plugins | Hexo</a><br>想安装什么插件，按照相关README.md中介绍操作即可。</p>\n<p>安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:<a href=\"http://theme-next.iissnan.com/third-party-services.html#swfitype\" target=\"_blank\" rel=\"external\">第三方服务集成</a>，介绍非常全面！好好用来装饰你的博客吧！</p>\n<p>安装sitemap和feed插件时，如果遇到问题，可以参考:<a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\" target=\"_blank\" rel=\"external\">博客搬迁记 - 从WordPress到Hexo</a>，安装sitemap后要到<a href=\"http://zhanzhang.baidu.com/?castk=LTE=\" target=\"_blank\" rel=\"external\">百度站长</a>提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:<a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\" target=\"_blank\" rel=\"external\">为Hexo博客生成sitemap</a></p>\n<p>安装swiftype插件，如果遇到问题，可以参考<a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p>\n<p>免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里<a href=\"https://support.qiniu.com/hc/\" target=\"_blank\" rel=\"external\">关于key-value存储系统</a>。</p>\n<p>七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇<a href=\"https://linux.cn/article-2311-1.html\" target=\"_blank\" rel=\"external\">Linux中国采用七牛云存储支撑图片访问</a>。</p>\n<p>如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。</p>\n<p>如果你对七牛web版的文件管理界面不满意，可以用官方的<a href=\"http://docs.qiniu.com/tools/v6/index.html\" target=\"_blank\" rel=\"external\">七牛云存储工具</a>。</p>\n<p>您还可以使用如下图床服务 FarBox，Dropbox，又拍云</p>\n<h2 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h2><p>Next主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！</p>\n<p><a href=\"http://www.gfwsb.com/2016/improveNexTspeed/\" target=\"_blank\" rel=\"external\">提升Hexo的NexT主题加载速度</a></p>\n<p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\" target=\"_blank\" rel=\"external\">使用gulp精简hexo博客代码</a></p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>购买域名，我是在<a href=\"https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist\" target=\"_blank\" rel=\"external\">万网</a>购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个<a href=\"http://www.xiaoerguo.com/\" target=\"_blank\" rel=\"external\">网站</a>,但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！</p>\n<p>如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：</p>\n<p>192.30.252.153</p>\n<p>192.30.252.154</p>\n<h2 id=\"制作ICO图标\"><a href=\"#制作ICO图标\" class=\"headerlink\" title=\"制作ICO图标\"></a>制作ICO图标</h2><p>favicon.ico一般用于作为缩略图的网站标志，<a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作网站</a><br>关于是否绑定域名</p>\n<p>经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考<a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\" target=\"_blank\" rel=\"external\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a>,这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！</p>\n<p>#至此，基本操作介绍完毕，以下内容普通用户无需了解。<br>默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>接下来是重头戏_config.yml，做个简单说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</div><div class=\"line\">## Source: https://github.com/tommy351/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site #整站的基本信息</div><div class=\"line\">title: 不如 #网站标题</div><div class=\"line\">subtitle: 码农，程序猿，未来的昏析师 #网站副标题</div><div class=\"line\">description: bruce sha&apos;s blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</div><div class=\"line\">author: bruce #网站作者，在下方显示</div><div class=\"line\">email: bu.ru@qq.com #联系邮箱</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\"></div><div class=\"line\"># URL #域名和文件结构</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://ibruce.info #你的域名</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\"></div><div class=\"line\"># Writing #写文章选项</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post #默认layout方式</div><div class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">max_open_file: 100</div><div class=\"line\">multi_thread: true</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">highlight: #代码高亮</div><div class=\"line\">  enable: true #是否启用</div><div class=\"line\">  line_number: false #是否显示行号</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag #分类与标签</div><div class=\"line\">default_category: uncategorized # default</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</div><div class=\"line\">## 2: Enable pagination</div><div class=\"line\">## 1: Disable pagination</div><div class=\"line\">## 0: Fully Disable</div><div class=\"line\">archive: 1</div><div class=\"line\">category: 1</div><div class=\"line\">tag: 1</div><div class=\"line\"></div><div class=\"line\"># Server #本地服务参数</div><div class=\"line\">## Hexo uses Connect as a server</div><div class=\"line\">## You can customize the logger format as defined in</div><div class=\"line\">## http://www.senchalabs.org/connect/logger.html</div><div class=\"line\">port: 4000</div><div class=\"line\">logger: true</div><div class=\"line\">logger_format:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format #日期显示格式</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: MMM D YYYY</div><div class=\"line\">time_format: H:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination #分页设置</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10 #每页10篇文章</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus #社会化评论disqus，我使用多说，在主题中配置</div><div class=\"line\">disqus_shortname:</div><div class=\"line\"></div><div class=\"line\"># Extensions #插件，暂时未安装插件</div><div class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class=\"line\">## 主题</div><div class=\"line\">theme: modernist # raytaylorism # pacman # modernist # light</div><div class=\"line\">exclude_generator:</div><div class=\"line\"></div><div class=\"line\"># Deployment #部署</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改局部页面\"><a href=\"#修改局部页面\" class=\"headerlink\" title=\"修改局部页面\"></a>修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-CN.yml      #中文语言</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</div><div class=\"line\">|   └── _widget        #小挂件的布局，页面下方小挂件的控制</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _base      #*.styl基础css</div><div class=\"line\">|   |   ├── _partial   #*.styl局部css</div><div class=\"line\">|   |   ├── fonts      #字体</div><div class=\"line\">|   |   ├── images     #图片</div><div class=\"line\">|   |   └── style.styl #*.styl引入需要的css源码</div><div class=\"line\">|   ├── fancybox       #fancybox效果源码</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<p>如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout_partial\\header.ejs，比如头上加个搜索框：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\"> &lt;input type=&quot;search&quot; name=&quot;q&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</div><div class=\"line\"> &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。</p>\n<p>再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。</p>\n<h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>页面上显示访问次数可以使用 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"external\">不蒜子</a>，两行代码即可搞定。</p>\n<p>因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。<br>编辑文件hexo\\themes\\modernist_config.yml，增加配置选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">baidu_tongji: true</div></pre></td></tr></table></figure>\n<p>新建文件hexo\\themes\\modernist\\layout_partial\\baidu_tongji.ejs，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.baidu_tongji)&#123; %&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">#你的百度统计代码</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>注册并登录百度统计获取你的统计代码。</p>\n<p>编辑文件hexo\\themes\\modernist\\layout_partial\\head.ejs，在『/head』之前增加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;baidu_tongji&apos;) %&gt;</div></pre></td></tr></table></figure>\n<p>重新生成并部署你的站点。</p>\n<p>不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页-&gt;网站列表-&gt;获取代码-&gt;系统管理设置-&gt;统计图标设置-&gt;显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。</p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p>我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：</p>\n<ul>\n<li>在hexo\\themes\\modernist\\layout_partial\\post下新建jiathis.ejs文件。<br>注册加网获得你的分享代码，写入jiathis.ejs。</li>\n<li>在hexo\\themes\\modernist\\layout_partial\\article.ejs中，添加&lt;%-partial(‘post/jiathis’)%&gt;。<br>-分享服务还可以使用如下企业提供的技术<a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">加网</a>，<a href=\"http://www.bshare.cn/\" target=\"_blank\" rel=\"external\">bShare</a>，<a href=\"http://share.baidu.com/\" target=\"_blank\" rel=\"external\">百度分享</a>。</li>\n</ul>\n<p>网站图标</p>\n<p>看一下hexo\\themes\\modernist\\layout_partial\\head.ejs，找到这句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;&lt;%- config.root %&gt;favicon.ico&quot;&gt;</div></pre></td></tr></table></figure>\n<p>你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">在Faviconer</a>制作你的ico图标，国内有<a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">比特虫</a>。</p>\n<h2 id=\"自定义挂件\"><a href=\"#自定义挂件\" class=\"headerlink\" title=\"自定义挂件\"></a>自定义挂件</h2><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist_config.yml中配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">  - myWidget</div></pre></td></tr></table></figure></p>\n<p>用上述方法可以添加新浪微博小挂件。</p>\n<ul>\n<li>生成自己的微博组件。</li>\n<li>添加hexo\\themes\\modernist\\layout_widget\\weibo.ejs文件。</li>\n<li>配置hexo\\themes\\modernist_config.yml。<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2></li>\n</ul>\n<p>安装插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install &lt;plugin-name&gt; --save</div></pre></td></tr></table></figure></p>\n<p>启用插件：在*hexo_config.yml文件添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">- &lt;plugin-name&gt;  #插件名</div></pre></td></tr></table></figure></p>\n<p>升级插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>卸载插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall &lt;plugin-name&gt;</div></pre></td></tr></table></figure></p>\n<p>RSS插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。</p>\n<p>你可以用rss作为迁移工具，用如下命令读取其他位置的rss：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate rss &lt;source&gt;</div></pre></td></tr></table></figure>\n<p>『source』是本地或网络文件路径。</p>\n<p>Sitemap插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。</p>\n<p>更多插件的安装方法，请参考<a href=\"https://github.com/hexojs/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">官方Wiki</a>。</p>\n<p>如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。</p>\n<h2 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h2><p>hexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。</p>\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2><p>你可以到<a href=\"http://www.sousuoyinqingtijiao.com/\" target=\"_blank\" rel=\"external\">屈站长</a>提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>更新hexo：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update -g hexo</div></pre></td></tr></table></figure>\n<p>更新主题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/你的主题</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>更新插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>干掉IE</p>\n<p>Kill IE6 提示的javascript代码，请自行搜索。</p>\n<h2 id=\"换机器\"><a href=\"#换机器\" class=\"headerlink\" title=\"换机器\"></a>换机器</h2><p>你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。</p>\n<p>我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。</p>\n<h2 id=\"统计功能\"><a href=\"#统计功能\" class=\"headerlink\" title=\"统计功能\"></a>统计功能</h2><p>为hexo博客添加访问次数统计功能</p>\n<p>其它</p>\n<p>网站加速</p>\n<p><a href=\"http://www.webluker.com/\" target=\"_blank\" rel=\"external\">Webluker-CDN 网站加速 免费CDN DNS解析</a></p>\n<p>Webluker-FAQ索引</p>\n<p>网站监控</p>\n<p><a href=\"http://www.jiankongbao.com/\" target=\"_blank\" rel=\"external\">监控宝-网站监控 网页监控 服务器监控</a></p>\n<p><a href=\"http://www.jiankongbao.com/faq\" target=\"_blank\" rel=\"external\">监控宝-常见问题</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><p><a href=\"http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/\" target=\"_blank\" rel=\"external\">hexo + github + 多说 来搭建免费博客</a></p>\n</li>\n<li><p><a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n</li>\n<li><p><a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\" target=\"_blank\" rel=\"external\">博客搬迁记 - 从WordPress到Hexo</a></p>\n</li>\n<li><p><a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"external\">在 hexo中无痛使用本地图片</a></p>\n</li>\n<li><p><a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\" target=\"_blank\" rel=\"external\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n</li>\n<li><p><a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\" target=\"_blank\" rel=\"external\">为Hexo博客生成sitemap</a></p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\" target=\"_blank\" rel=\"external\">使用gulp精简hexo博客代码</a></p>\n</li>\n<li><p><a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\" target=\"_blank\" rel=\"external\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a></p>\n</li>\n<li><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">hexo你的博客</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1493223838128&amp;di=c9a4b5d92b7ab41789dbde3069dbaf3a&amp;imgtype=0&amp;src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg\" alt=\"这里写图片描述\"></p>\n<p>进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。<br>","more":"</p>\n<h2 id=\"Gitpage-hexo\"><a href=\"#Gitpage-hexo\" class=\"headerlink\" title=\"Gitpage+hexo\"></a>Gitpage+hexo</h2><p>想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"1-安装Node\"><a href=\"#1-安装Node\" class=\"headerlink\" title=\"1 安装Node\"></a>1 安装Node</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi</p>\n<h2 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2 安装Git\"></a>2 安装Git</h2><p>安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</p>\n<h1 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h1><h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1 安装Hexo\"></a>1 安装Hexo</h2><p>使用git shell,依次输入以下代码命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>命令解释：</p>\n<p><strong>cd和/之间要有空格</strong>，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。</p>\n<h2 id=\"2-安装博客所需文件\"><a href=\"#2-安装博客所需文件\" class=\"headerlink\" title=\"2 安装博客所需文件\"></a>2 安装博客所需文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">hexo init Hexo</div><div class=\"line\">cd /Hexo</div><div class=\"line\">npm instal</div><div class=\"line\">hexo generate（可简写为hexo g）</div><div class=\"line\">hexo sever（可简写为hexo s）</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li><p>cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。</p>\n</li>\n<li><p>Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。</p>\n</li>\n<li><p>指向Hexo目录</p>\n</li>\n<li><p>安装依赖文件</p>\n</li>\n<li><p>编译</p>\n</li>\n<li><p>开启本地服务(第5、6步的操作可以合并成hexo s -g)</p>\n</li>\n</ul>\n<p>此时打开浏览器，在地址栏输入<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。</p>\n<p>那么如何翻墙呢？ 下面提供我所知道的两种方法：</p>\n<p>这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: <a href=\"http://pan.baidu.com/s/1c2x7eRu\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1c2x7eRu</a><br>密码: z3kw</p>\n<p>这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：<a href=\"http://blog.my-eclipse.cn/host-google.html\" target=\"_blank\" rel=\"external\">http://blog.my-eclipse.cn/host-google.html</a></p>\n<p>如果你不想翻墙，可以采用这种方法：<br>进入你刚新建好的 blog根目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">themes/landscape/layout/_partial</div></pre></td></tr></table></figure>\n<p>1，找到 after-footer.ejs把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>替换成</p>\n<blockquote>\n<p><code>&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</code></p>\n</blockquote>\n<p>2，找到 header.ejs<br>注释掉或者删掉 下面这句css引用<br><code>&lt;link href=&quot;//fonts.googleapis.com/css?family=Source+Code+Pro&quot; rel=”stylesheet” type=”text/css”&gt;</code><br>hexo server 之后。访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 就会看到blog主页了。</p>\n<p>如果你成功在<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！</p>\n<blockquote>\n<p>行百里者半九十</p>\n</blockquote>\n<p>不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：</p>\n<h2 id=\"3-部署博客到服务器\"><a href=\"#3-部署博客到服务器\" class=\"headerlink\" title=\"3 部署博客到服务器\"></a>3 部署博客到服务器</h2><p>也就是把博客部署到github page提供的服务器上。</p>\n<p>步骤</p>\n<ul>\n<li>首先回到git shell按ctrl+c，之后输入y即可</li>\n</ul>\n<ul>\n<li>修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：<code>deploy:  type: github  repo: https://github.com/yourname/blog.git</code></li>\n</ul>\n<p>继续回到git shell输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li>清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。<br>编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</li>\n<li>开启本地服务，</li>\n<li>部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！<br>是的，现在你拥有了自己的博客！</li>\n</ul>\n<h1 id=\"发表博文\"><a href=\"#发表博文\" class=\"headerlink\" title=\"发表博文\"></a>发表博文</h1><p>千辛万苦建立了博客，那么我们来学习一下如何发表博文。</p>\n<h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>继续回到git shell输入：</p>\n<p>hexo new “新博文的名字”<br>即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。</p>\n<p><strong>Markdown编辑器</strong></p>\n<p>推荐两款我所使用的markdown编辑器：</p>\n<p><strong>MIU</strong>，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：<br>链接: <a href=\"http://pan.baidu.com/s/1slMPeTR\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1slMPeTR</a><br>密码: 2pnk<br><strong>正在使用的Atom:</strong>更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。<br>可能会遇到的问题</p>\n<blockquote>\n<p>hexo new [layout] “postName” #新建文章</p>\n</blockquote>\n<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。<br>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">categories:</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。</p>\n<p>注意，所有文件：后面都必须有个空格，不然会报错。</p>\n<p>看一下刚才生成的文件hexo\\source_posts\\postName.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class=\"line\">categories: #文章分类目录，可以为空，注意:后面有个空格</div><div class=\"line\">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。</p>\n<p><strong>fancybox</strong><br>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: photo</div><div class=\"line\">title: 我的阅历</div><div class=\"line\">date: 2085-01-16 07:33:44</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">photos:</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</div></pre></td></tr></table></figure></p>\n<p>经过测试，文件头上的layout: photo可以省略。</p>\n<p>不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: &#123; &#123; layout &#125; &#125;</div><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">photos:</div><div class=\"line\">-</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>然后每次可以执行带layout的new命令生成照片文章：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new photo &quot;photoPostName&quot; #新建照片文章</div></pre></td></tr></table></figure>\n<p>description<br>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: hexo你的博客</div><div class=\"line\">date: 2013-11-22 17:11:54</div><div class=\"line\">categories: default</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">description: 你对本页的描述</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。</p>\n<p><strong>文章摘要</strong><br>在需要显示摘要的地方添加如下代码即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是余下全文</div></pre></td></tr></table></figure>\n<p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。</p>\n<p>hexo中所有文件的编码格式均是UTF-8。</p>\n<h2 id=\"优雅的在博客上插入图片\"><a href=\"#优雅的在博客上插入图片\" class=\"headerlink\" title=\"优雅的在博客上插入图片\"></a>优雅的在博客上插入图片</h2><p>看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：</p>\n<p>首先确认 _config.yml 中更改 post_asset_folder:true 。<br>回到git shell，输入</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n<p>继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹</p>\n<p>然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？<br>提醒：</p>\n<p>写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！</p>\n<h2 id=\"预览和发表\"><a href=\"#预览和发表\" class=\"headerlink\" title=\"预览和发表\"></a>预览和发表</h2><p>继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.  hexo clean</div><div class=\"line\">2.  hexo g</div><div class=\"line\">3.  hexo s</div><div class=\"line\">4.  hexo d</div></pre></td></tr></table></figure>\n<p>更高大上的发表博文的方法</p>\n<p>使用Travis CI自动部署你的Hexo博客到Github,请参考<a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\" target=\"_blank\" rel=\"external\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：</p>\n<p>选择主题</p>\n<p>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Themes·Hexo</a>上选择你喜欢的主题，我使用的Next主题</p>\n<h2 id=\"安装Next主题\"><a href=\"#安装Next主题\" class=\"headerlink\" title=\"安装Next主题\"></a>安装Next主题</h2><p>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next官方文档</a>,内容十分详尽！</p>\n<p>安装主题的方法就是一句git命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</div></pre></td></tr></table></figure>\n<p>目录是否是modernist无所谓，只要与_config.yml文件一致即可。</p>\n<p>安装完成后，打开hexo_config.yml，修改主题为modernist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: modernist</div></pre></td></tr></table></figure>\n<p>打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #配置页头显示哪些菜单</div><div class=\"line\">#  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\">  Reading: /reading</div><div class=\"line\">  About: /about</div><div class=\"line\">#  Guestbook: /about</div><div class=\"line\"></div><div class=\"line\">excerpt_link: Read More #摘要链接文字</div><div class=\"line\">archive_yearly: false #按年存档</div><div class=\"line\"></div><div class=\"line\">widgets: #配置页脚显示哪些小挂件</div><div class=\"line\">  - category</div><div class=\"line\">#  - tag</div><div class=\"line\">  - tagcloud</div><div class=\"line\">  - recent_posts</div><div class=\"line\">#  - blogroll</div><div class=\"line\"></div><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - bruce sha&apos;s duapp wordpress: http://ibruce.duapp.com</div><div class=\"line\">  - bruce sha&apos;s javaeye: http://buru.iteye.com</div><div class=\"line\">  - bruce sha&apos;s oschina blog: http://my.oschina.net/buru</div><div class=\"line\">  - bruce sha&apos;s baidu space: http://hi.baidu.com/iburu</div><div class=\"line\"></div><div class=\"line\">fancybox: true #是否开启fancybox效果</div><div class=\"line\"></div><div class=\"line\">duoshuo_shortname: buru #多说账号</div><div class=\"line\"></div><div class=\"line\">google_analytics:</div><div class=\"line\">rss:</div></pre></td></tr></table></figure>\n<p>更新主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/modernist</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h2 id=\"评论框\"><a href=\"#评论框\" class=\"headerlink\" title=\"评论框\"></a>评论框</h2><p>静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">多说</a><br>直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置-&gt;域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以<a href=\"http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017\" target=\"_blank\" rel=\"external\">参考这里</a>，我是在HeroicYang的基础上修改的。</p>\n<p>如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout_partial\\comment.ejs里面，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (config.disqus_shortname &amp;&amp; page.comments)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comment&quot;&gt;</div><div class=\"line\">  #你的通用代码</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"构建新页面\"><a href=\"#构建新页面\" class=\"headerlink\" title=\"构建新页面\"></a>构建新页面</h2><p>那些小图标都是一个新页面，需要手动创建，那么如何创建？</p>\n<p>回到git shell，</p>\n<p>hexo new page “页面名称”<br>比如你要创建一个about页面，就输入hexo new page “about”</p>\n<p>正确显示各页面内容</p>\n<p>发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！</p>\n<p>解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：</p>\n<p>comments: false即关闭此页面的评论功能</p>\n<p>type: “tags”这里的值根据你想更改的页面决定</p>\n<p>更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>hexo支持的插件：<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">Plugins | Hexo</a><br>想安装什么插件，按照相关README.md中介绍操作即可。</p>\n<p>安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:<a href=\"http://theme-next.iissnan.com/third-party-services.html#swfitype\" target=\"_blank\" rel=\"external\">第三方服务集成</a>，介绍非常全面！好好用来装饰你的博客吧！</p>\n<p>安装sitemap和feed插件时，如果遇到问题，可以参考:<a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\" target=\"_blank\" rel=\"external\">博客搬迁记 - 从WordPress到Hexo</a>，安装sitemap后要到<a href=\"http://zhanzhang.baidu.com/?castk=LTE=\" target=\"_blank\" rel=\"external\">百度站长</a>提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:<a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\" target=\"_blank\" rel=\"external\">为Hexo博客生成sitemap</a></p>\n<p>安装swiftype插件，如果遇到问题，可以参考<a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p>\n<p>免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里<a href=\"https://support.qiniu.com/hc/\" target=\"_blank\" rel=\"external\">关于key-value存储系统</a>。</p>\n<p>七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇<a href=\"https://linux.cn/article-2311-1.html\" target=\"_blank\" rel=\"external\">Linux中国采用七牛云存储支撑图片访问</a>。</p>\n<p>如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。</p>\n<p>如果你对七牛web版的文件管理界面不满意，可以用官方的<a href=\"http://docs.qiniu.com/tools/v6/index.html\" target=\"_blank\" rel=\"external\">七牛云存储工具</a>。</p>\n<p>您还可以使用如下图床服务 FarBox，Dropbox，又拍云</p>\n<h2 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h2><p>Next主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！</p>\n<p><a href=\"http://www.gfwsb.com/2016/improveNexTspeed/\" target=\"_blank\" rel=\"external\">提升Hexo的NexT主题加载速度</a></p>\n<p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\" target=\"_blank\" rel=\"external\">使用gulp精简hexo博客代码</a></p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>购买域名，我是在<a href=\"https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist\" target=\"_blank\" rel=\"external\">万网</a>购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个<a href=\"http://www.xiaoerguo.com/\" target=\"_blank\" rel=\"external\">网站</a>,但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！</p>\n<p>如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：</p>\n<p>192.30.252.153</p>\n<p>192.30.252.154</p>\n<h2 id=\"制作ICO图标\"><a href=\"#制作ICO图标\" class=\"headerlink\" title=\"制作ICO图标\"></a>制作ICO图标</h2><p>favicon.ico一般用于作为缩略图的网站标志，<a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作网站</a><br>关于是否绑定域名</p>\n<p>经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考<a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\" target=\"_blank\" rel=\"external\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a>,这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！</p>\n<p>#至此，基本操作介绍完毕，以下内容普通用户无需了解。<br>默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>接下来是重头戏_config.yml，做个简单说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</div><div class=\"line\">## Source: https://github.com/tommy351/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site #整站的基本信息</div><div class=\"line\">title: 不如 #网站标题</div><div class=\"line\">subtitle: 码农，程序猿，未来的昏析师 #网站副标题</div><div class=\"line\">description: bruce sha&apos;s blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</div><div class=\"line\">author: bruce #网站作者，在下方显示</div><div class=\"line\">email: bu.ru@qq.com #联系邮箱</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\"></div><div class=\"line\"># URL #域名和文件结构</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://ibruce.info #你的域名</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\"></div><div class=\"line\"># Writing #写文章选项</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post #默认layout方式</div><div class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">max_open_file: 100</div><div class=\"line\">multi_thread: true</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">highlight: #代码高亮</div><div class=\"line\">  enable: true #是否启用</div><div class=\"line\">  line_number: false #是否显示行号</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag #分类与标签</div><div class=\"line\">default_category: uncategorized # default</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</div><div class=\"line\">## 2: Enable pagination</div><div class=\"line\">## 1: Disable pagination</div><div class=\"line\">## 0: Fully Disable</div><div class=\"line\">archive: 1</div><div class=\"line\">category: 1</div><div class=\"line\">tag: 1</div><div class=\"line\"></div><div class=\"line\"># Server #本地服务参数</div><div class=\"line\">## Hexo uses Connect as a server</div><div class=\"line\">## You can customize the logger format as defined in</div><div class=\"line\">## http://www.senchalabs.org/connect/logger.html</div><div class=\"line\">port: 4000</div><div class=\"line\">logger: true</div><div class=\"line\">logger_format:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format #日期显示格式</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: MMM D YYYY</div><div class=\"line\">time_format: H:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination #分页设置</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10 #每页10篇文章</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus #社会化评论disqus，我使用多说，在主题中配置</div><div class=\"line\">disqus_shortname:</div><div class=\"line\"></div><div class=\"line\"># Extensions #插件，暂时未安装插件</div><div class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class=\"line\">## 主题</div><div class=\"line\">theme: modernist # raytaylorism # pacman # modernist # light</div><div class=\"line\">exclude_generator:</div><div class=\"line\"></div><div class=\"line\"># Deployment #部署</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改局部页面\"><a href=\"#修改局部页面\" class=\"headerlink\" title=\"修改局部页面\"></a>修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-CN.yml      #中文语言</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</div><div class=\"line\">|   └── _widget        #小挂件的布局，页面下方小挂件的控制</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _base      #*.styl基础css</div><div class=\"line\">|   |   ├── _partial   #*.styl局部css</div><div class=\"line\">|   |   ├── fonts      #字体</div><div class=\"line\">|   |   ├── images     #图片</div><div class=\"line\">|   |   └── style.styl #*.styl引入需要的css源码</div><div class=\"line\">|   ├── fancybox       #fancybox效果源码</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<p>如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout_partial\\header.ejs，比如头上加个搜索框：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\"> &lt;input type=&quot;search&quot; name=&quot;q&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</div><div class=\"line\"> &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。</p>\n<p>再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。</p>\n<h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>页面上显示访问次数可以使用 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"external\">不蒜子</a>，两行代码即可搞定。</p>\n<p>因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。<br>编辑文件hexo\\themes\\modernist_config.yml，增加配置选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">baidu_tongji: true</div></pre></td></tr></table></figure>\n<p>新建文件hexo\\themes\\modernist\\layout_partial\\baidu_tongji.ejs，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.baidu_tongji)&#123; %&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">#你的百度统计代码</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>注册并登录百度统计获取你的统计代码。</p>\n<p>编辑文件hexo\\themes\\modernist\\layout_partial\\head.ejs，在『/head』之前增加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;baidu_tongji&apos;) %&gt;</div></pre></td></tr></table></figure>\n<p>重新生成并部署你的站点。</p>\n<p>不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页-&gt;网站列表-&gt;获取代码-&gt;系统管理设置-&gt;统计图标设置-&gt;显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。</p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p>我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：</p>\n<ul>\n<li>在hexo\\themes\\modernist\\layout_partial\\post下新建jiathis.ejs文件。<br>注册加网获得你的分享代码，写入jiathis.ejs。</li>\n<li>在hexo\\themes\\modernist\\layout_partial\\article.ejs中，添加&lt;%-partial(‘post/jiathis’)%&gt;。<br>-分享服务还可以使用如下企业提供的技术<a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">加网</a>，<a href=\"http://www.bshare.cn/\" target=\"_blank\" rel=\"external\">bShare</a>，<a href=\"http://share.baidu.com/\" target=\"_blank\" rel=\"external\">百度分享</a>。</li>\n</ul>\n<p>网站图标</p>\n<p>看一下hexo\\themes\\modernist\\layout_partial\\head.ejs，找到这句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;&lt;%- config.root %&gt;favicon.ico&quot;&gt;</div></pre></td></tr></table></figure>\n<p>你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">在Faviconer</a>制作你的ico图标，国内有<a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">比特虫</a>。</p>\n<h2 id=\"自定义挂件\"><a href=\"#自定义挂件\" class=\"headerlink\" title=\"自定义挂件\"></a>自定义挂件</h2><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist_config.yml中配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">  - myWidget</div></pre></td></tr></table></figure></p>\n<p>用上述方法可以添加新浪微博小挂件。</p>\n<ul>\n<li>生成自己的微博组件。</li>\n<li>添加hexo\\themes\\modernist\\layout_widget\\weibo.ejs文件。</li>\n<li>配置hexo\\themes\\modernist_config.yml。<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2></li>\n</ul>\n<p>安装插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install &lt;plugin-name&gt; --save</div></pre></td></tr></table></figure></p>\n<p>启用插件：在*hexo_config.yml文件添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">- &lt;plugin-name&gt;  #插件名</div></pre></td></tr></table></figure></p>\n<p>升级插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>卸载插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall &lt;plugin-name&gt;</div></pre></td></tr></table></figure></p>\n<p>RSS插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。</p>\n<p>你可以用rss作为迁移工具，用如下命令读取其他位置的rss：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate rss &lt;source&gt;</div></pre></td></tr></table></figure>\n<p>『source』是本地或网络文件路径。</p>\n<p>Sitemap插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。</p>\n<p>更多插件的安装方法，请参考<a href=\"https://github.com/hexojs/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">官方Wiki</a>。</p>\n<p>如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。</p>\n<h2 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h2><p>hexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。</p>\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2><p>你可以到<a href=\"http://www.sousuoyinqingtijiao.com/\" target=\"_blank\" rel=\"external\">屈站长</a>提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>更新hexo：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update -g hexo</div></pre></td></tr></table></figure>\n<p>更新主题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/你的主题</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>更新插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>干掉IE</p>\n<p>Kill IE6 提示的javascript代码，请自行搜索。</p>\n<h2 id=\"换机器\"><a href=\"#换机器\" class=\"headerlink\" title=\"换机器\"></a>换机器</h2><p>你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。</p>\n<p>我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。</p>\n<h2 id=\"统计功能\"><a href=\"#统计功能\" class=\"headerlink\" title=\"统计功能\"></a>统计功能</h2><p>为hexo博客添加访问次数统计功能</p>\n<p>其它</p>\n<p>网站加速</p>\n<p><a href=\"http://www.webluker.com/\" target=\"_blank\" rel=\"external\">Webluker-CDN 网站加速 免费CDN DNS解析</a></p>\n<p>Webluker-FAQ索引</p>\n<p>网站监控</p>\n<p><a href=\"http://www.jiankongbao.com/\" target=\"_blank\" rel=\"external\">监控宝-网站监控 网页监控 服务器监控</a></p>\n<p><a href=\"http://www.jiankongbao.com/faq\" target=\"_blank\" rel=\"external\">监控宝-常见问题</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><p><a href=\"http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/\" target=\"_blank\" rel=\"external\">hexo + github + 多说 来搭建免费博客</a></p>\n</li>\n<li><p><a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n</li>\n<li><p><a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\" target=\"_blank\" rel=\"external\">博客搬迁记 - 从WordPress到Hexo</a></p>\n</li>\n<li><p><a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"external\">在 hexo中无痛使用本地图片</a></p>\n</li>\n<li><p><a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\" target=\"_blank\" rel=\"external\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n</li>\n<li><p><a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\" target=\"_blank\" rel=\"external\">为Hexo博客生成sitemap</a></p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\" target=\"_blank\" rel=\"external\">使用gulp精简hexo博客代码</a></p>\n</li>\n<li><p><a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\" target=\"_blank\" rel=\"external\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a></p>\n</li>\n<li><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">hexo你的博客</a></p>\n</li>\n</ul>"},{"title":"使用webstorm连接github","date":"2017-02-24T02:40:20.000Z","_content":"本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！~\n<!--more-->\n昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容\n\n说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，[WebStorm 有哪些过人之处？](https://www.zhihu.com/question/20936155)，说一下我现在觉得有用的功能：\n \n\n - 连接ftp，可以直接上传文件，一键就可以更新\n - 就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦\n\n因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能\n\n今天记录一下怎么用webstorm连接github以及一些操作说明\n怎么连接用webstorm连接github这点自行百度。\n在连接到github上之后，想要把你的项目上传到github上，\n1、点击右上方的VCS然后import...→share....\n![这里写图片描述](http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库\n![这里写图片描述](http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。\n![这里写图片描述](http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png)\nadd之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上\n![这里写图片描述](http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之后再push，也可以点击上方的VSC-git-push\n\n附文件颜色代表的含义：\n红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；\n\n绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；\n\n蓝色：文件内容有修改；\n\n灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。\n\n总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；\n\n这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键\n\n在右下角还可以口管理分支\n\n附上查找的资料，他们写的比较详细，我就不再赘述\n - [利用WebStorm来管理你的Github](http://www.cnblogs.com/liulinjie/p/5708149.html)\n - [git checkout 命令详解](http://www.tuicool.com/articles/A3Mn6f)\n - [webstormGit上的使用](http://www.cnblogs.com/zhaoxiu/p/5772466.html)\n - [使用webstorm操作git](http://www.cnblogs.com/jinguangguo/p/4868152.html)\n - [使用webstorm上传代码到github](http://www.cnblogs.com/vanstrict/p/5677716.html)\n","source":"_posts/Use-webstorm-to-connect-GitHub.md","raw":"---\ntitle: 使用webstorm连接github\ndate: 2017-02-24 10:40:20\ntags: git\ncategories: git\n---\n本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！~\n<!--more-->\n昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容\n\n说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，[WebStorm 有哪些过人之处？](https://www.zhihu.com/question/20936155)，说一下我现在觉得有用的功能：\n \n\n - 连接ftp，可以直接上传文件，一键就可以更新\n - 就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦\n\n因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能\n\n今天记录一下怎么用webstorm连接github以及一些操作说明\n怎么连接用webstorm连接github这点自行百度。\n在连接到github上之后，想要把你的项目上传到github上，\n1、点击右上方的VCS然后import...→share....\n![这里写图片描述](http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库\n![这里写图片描述](http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。\n![这里写图片描述](http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png)\nadd之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上\n![这里写图片描述](http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之后再push，也可以点击上方的VSC-git-push\n\n附文件颜色代表的含义：\n红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；\n\n绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；\n\n蓝色：文件内容有修改；\n\n灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。\n\n总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；\n\n这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键\n\n在右下角还可以口管理分支\n\n附上查找的资料，他们写的比较详细，我就不再赘述\n - [利用WebStorm来管理你的Github](http://www.cnblogs.com/liulinjie/p/5708149.html)\n - [git checkout 命令详解](http://www.tuicool.com/articles/A3Mn6f)\n - [webstormGit上的使用](http://www.cnblogs.com/zhaoxiu/p/5772466.html)\n - [使用webstorm操作git](http://www.cnblogs.com/jinguangguo/p/4868152.html)\n - [使用webstorm上传代码到github](http://www.cnblogs.com/vanstrict/p/5677716.html)\n","slug":"Use-webstorm-to-connect-GitHub","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxi001vvvxi2vbsnn9t","content":"<p>本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！~<br><a id=\"more\"></a><br>昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容</p>\n<p>说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，<a href=\"https://www.zhihu.com/question/20936155\" target=\"_blank\" rel=\"external\">WebStorm 有哪些过人之处？</a>，说一下我现在觉得有用的功能：</p>\n<ul>\n<li>连接ftp，可以直接上传文件，一键就可以更新</li>\n<li>就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦</li>\n</ul>\n<p>因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能</p>\n<p>今天记录一下怎么用webstorm连接github以及一些操作说明<br>怎么连接用webstorm连接github这点自行百度。<br>在连接到github上之后，想要把你的项目上传到github上，<br>1、点击右上方的VCS然后import…→share….<br><img src=\"http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库<br><img src=\"http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。<br><img src=\"http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png\" alt=\"这里写图片描述\"><br>add之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上<br><img src=\"http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>之后再push，也可以点击上方的VSC-git-push</p>\n<p>附文件颜色代表的含义：<br>红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；</p>\n<p>绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；</p>\n<p>蓝色：文件内容有修改；</p>\n<p>灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。</p>\n<p>总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；</p>\n<p>这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键</p>\n<p>在右下角还可以口管理分支</p>\n<p>附上查找的资料，他们写的比较详细，我就不再赘述</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/liulinjie/p/5708149.html\" target=\"_blank\" rel=\"external\">利用WebStorm来管理你的Github</a></li>\n<li><a href=\"http://www.tuicool.com/articles/A3Mn6f\" target=\"_blank\" rel=\"external\">git checkout 命令详解</a></li>\n<li><a href=\"http://www.cnblogs.com/zhaoxiu/p/5772466.html\" target=\"_blank\" rel=\"external\">webstormGit上的使用</a></li>\n<li><a href=\"http://www.cnblogs.com/jinguangguo/p/4868152.html\" target=\"_blank\" rel=\"external\">使用webstorm操作git</a></li>\n<li><a href=\"http://www.cnblogs.com/vanstrict/p/5677716.html\" target=\"_blank\" rel=\"external\">使用webstorm上传代码到github</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！~<br>","more":"<br>昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容</p>\n<p>说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，<a href=\"https://www.zhihu.com/question/20936155\" target=\"_blank\" rel=\"external\">WebStorm 有哪些过人之处？</a>，说一下我现在觉得有用的功能：</p>\n<ul>\n<li>连接ftp，可以直接上传文件，一键就可以更新</li>\n<li>就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦</li>\n</ul>\n<p>因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能</p>\n<p>今天记录一下怎么用webstorm连接github以及一些操作说明<br>怎么连接用webstorm连接github这点自行百度。<br>在连接到github上之后，想要把你的项目上传到github上，<br>1、点击右上方的VCS然后import…→share….<br><img src=\"http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库<br><img src=\"http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。<br><img src=\"http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png\" alt=\"这里写图片描述\"><br>add之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上<br><img src=\"http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>之后再push，也可以点击上方的VSC-git-push</p>\n<p>附文件颜色代表的含义：<br>红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；</p>\n<p>绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；</p>\n<p>蓝色：文件内容有修改；</p>\n<p>灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。</p>\n<p>总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；</p>\n<p>这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键</p>\n<p>在右下角还可以口管理分支</p>\n<p>附上查找的资料，他们写的比较详细，我就不再赘述</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/liulinjie/p/5708149.html\" target=\"_blank\" rel=\"external\">利用WebStorm来管理你的Github</a></li>\n<li><a href=\"http://www.tuicool.com/articles/A3Mn6f\" target=\"_blank\" rel=\"external\">git checkout 命令详解</a></li>\n<li><a href=\"http://www.cnblogs.com/zhaoxiu/p/5772466.html\" target=\"_blank\" rel=\"external\">webstormGit上的使用</a></li>\n<li><a href=\"http://www.cnblogs.com/jinguangguo/p/4868152.html\" target=\"_blank\" rel=\"external\">使用webstorm操作git</a></li>\n<li><a href=\"http://www.cnblogs.com/vanstrict/p/5677716.html\" target=\"_blank\" rel=\"external\">使用webstorm上传代码到github</a></li>\n</ul>"},{"title":"一个少女心满满的例子带你入门 canvas","date":"2017-08-06T06:40:06.000Z","_content":"\n![canvas入门](http://img.blog.csdn.net/20170801184128503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n>本文首发于我的个人博客：http://cherryblog.site/ \n>github项目地址：https://github.com/sunshine940326/canvasStar\n>项目演示地址：https://sunshine940326.github.io/canvasStar/\n\n<!--more-->\n\n[toc]\n\n\n\n之前看到了一个很好看的canvas效果，然后拿来做我的博客背景，不少童鞋留言说求教程，并且反应说太耗内存，于是前一段我就重写了一遍，并且使用离屏渲染进行优化，效果还是挺显著的。但是因为毕竟是canvas，需要一直进行重绘，所以还是比较耗内存的，但是比优化之前已经好很多了。并且最近准备自己写插件，于是就拿这个练手了，\n\ngithub地址：https://github.com/sunshine940326/canvasStar \n\n代码还有很多的不足，求大神 review (づ｡◕‿‿◕｡)づ~\n\n# canvas 基本知识\n## 什么是 canvas\n`canvas` 是 HTML5 新定义的标签，通过使用脚本（通常是 JavaScript）绘制图形。\n`<canvas>`  标签只是图形容器，相当于一个画布，`canvas` 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成，相当于使用画笔在画布上画画。\n\n默认情况下，`<canvas>` 没有边框和内容。默认是一个 300*150 的画布，所以我们创建了 `<canvas>` 之后要对其设置宽高。\n**我们可以通过html属性‘width’，‘height’来设置canvas的宽高，不可以通过 css 属性来设置宽高。因为通过 css 属性设置的宽高会使 canvas 内的图像按照 300*150 时的比例放大或缩小**\n\n## getContext()\n`context` 是一个封装了很多绘图功能的对象，我们在页面中创建一个 `canvas` 标签之后，首先要使用 `getContext()` 获取 canvas 的上下文环境，目前 `getContext()` 的参数只有 `2d`，暂时还不支持 `3d` \n\n`getContext(\"2d\")` 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。\n\n##  canvas 元素绘制图像\ncanvas 创建图形有两种方式\n### context.fill()\n`fill()` 方法填充当前的图像（路径）。默认颜色是黑色。在填充前要先使用 `fillStyle` 设置填充的颜色或者渐变，并且如果路径未关闭，那么 `fill()` 方法会从路径结束点到开始点之间添加一条线，以关闭该路径（正如 `closePath()` 一样），然后填充该路径。\n### context.stroke()\n`stroke()` 方法会实际地绘制出通过 `moveTo()` 和 `lineTo()` 方法定义的路径。默认颜色是黑色。在进行图形绘制前，要设置好绘图的样式\n```\nfillStyle()//填充的样式\nstrokeStyle()//边框样式\ncontext.lineWidth()//图形边框宽度\n```\n## 绘制矩形\n用 canvas 绘制一个矩形很简单\n```\nfillRect(x,y,width,height)  // 实心矩形 \nstrokeRect(x,y,width,height)        // 空心矩形\n```\n\n - x ：起始点的 x 坐标\n - y ：起始点的 y 坐标\n - width ： 矩形的宽\n - height ： 矩形的高\n\n```\n//html代码\n<canvas id=\"canvas\"></canvas>\n//script代码\n   var canvas = document.getElementById('canvas');\n    var context = canvas.getContext('2d');\n    context.fillRect(0, 0, 100, 100);\n    context.strokeRect(120, 0, 100, 100);\n```\n显示如下：\n![canvas绘制矩形有填充颜色](http://img.blog.csdn.net/20170803192642241?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我们可以看出，在没有设置颜色的情况下，默认是黑色的。\n\n我们还可以通过设置 `fillStyle` 或者 `fillStyle` 改变其填充颜色。\n```\ncontext.fillStyle = \"pink\";\ncontext.strokeStyle = \"darkred\";\ncontext.fillRect(0, 0, 100, 100);\ncontext.strokeRect(120, 0, 100, 100);\n```\n效果如下\n![canvas绘制矩形有填充颜色](http://img.blog.csdn.net/20170803200651020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 清除矩形区域\n\nclearRect(x,y,width,height)\n``` \n - x ：清除矩形起始点的 x 坐标\n - y ：清除矩形起始点的 y 坐标\n - width ： 清除矩形矩形的宽\n - height ： 清除矩形矩形的高\n```\nvar canvas = document.getElementById('canvas');\nvar context = canvas.getContext(\"2d\");\ncontext.fillRect(0, 0, 100, 100);\ncontext.strokeRect(120, 0, 100, 100);\ncontext.fillStyle = \"pink\";\ncontext.strokeStyle = \"darkred\";\ncontext.fillRect(0, 120, 100, 100);\ncontext.strokeRect(120, 120, 100, 100);\ncontext.clearRect( 50,50,120,120)\n\n效果如下：\n\n![清除矩形](http://img.blog.csdn.net/20170803201130050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 实心圆\n`context.arc(x, y, radius, starAngle,endAngle, anticlockwise)`\n - x : 圆心的 x 坐标\n - y：圆心的 y 坐标\n - radius ： 半径\n - starAngle ：开始角度\n - endAngle：结束角度\n - anticlockwise ：是否逆时针（true）为逆时针，(false)为顺时针\n```\ncontext.beginPath();\ncontext.arc(300, 350, 100, 0, Math.PI * 2, true);\n//不关闭路径路径会一直保留下去\ncontext.closePath();\ncontext.fillStyle = 'rgba(0,255,0,0.25)';\ncontext.fill();\n```\n效果如下：\n\n![canvas绘制圆弧](http://img.blog.csdn.net/20170803201728632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 圆弧\n如果不填充颜色，实心圆就是圆弧\n```\n    context.beginPath();\n    context.arc(600, 350, 100, 0, Math.PI , true);\n    context.strokeStyle = 'pink';\n    context.closePath();\n    context.stroke();\n   \n    context.beginPath();\n    context.arc(300, 350, 100, 0, Math.PI , true);\n    context.strokeStyle = 'red';\n    //没有closePath\n    context.stroke();\n```\n效果如图：\n![canvas绘制圆弧](http://img.blog.csdn.net/20170804121122961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n - 系统默认在绘制第一个路径的开始点为beginPath\n - 如果画完前面的路径没有重新指定beginPath，那么画第其他路径的时候会将前面最近指定的beginPath后的全部路径重新绘制\n - 每次调用context.fill（）的时候会自动把当次绘制的路径的开始点和结束点相连，接着填充封闭的部分\n\n所以说，如果第一个圆弧没有 `closePath()` 并且第二个圆弧没有 `beginPath()` 的话就是这样的效果：\n\n![canvas绘制矩形](http://img.blog.csdn.net/20170804121543455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n##  绘制线段 \n - `moveTo(x,y)`：把路径移动到画布中的指定点，不创建线条\n - `lineTo(x,y)`：添加一个新点，然后在画布中创建从该点到最后指定点的线条\n - 每次画线都从 moveTo 的点到 lineTo 的点，\n\n```\n    context.strokeStyle = 'pink';\n    context.moveTo(0, 0);\n    context.lineTo(100, 100);\n    context.stroke();*/\n```\n效果如下：\n![canvas绘制片段](http://img.blog.csdn.net/20170804121929082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n**如果没有 moveTo 那么第一次 lineTo 的效果和 moveTo 一样，**\n例如：\n\n```\n    context.strokeStyle = 'pink';\n    context.lineTo(100, 100);\n    context.lineTo(200, 200);\n    context.stroke();*/\n```\n效果如下：\n![canvas绘制线段](http://img.blog.csdn.net/20170804122123451?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n**每次lineTo后如果没有moveTo，那么下次lineTo的开始点为前一次lineTo的结束点**\n例如：\n```\n// 绘制片段\n    context.strokeStyle = 'pink';\n    context.lineTo(200, 200);\n    context.lineTo(200, 100);\n    context.lineTo(100,50);\n    context.stroke();\n```\n效果如下：\n![canvas绘制线段](http://img.blog.csdn.net/20170804122231176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们可以使用 canvas 的线段绘制各种各样的图形，比如绘制一个六边形\n```\nvar n = 0;\n    var dx = 150;\n    var dy = 150;\n    var s = 100;\n    context.beginPath();\n    context.fillStyle = 'pink';\n    context.strokeStyle = 'rgb(0,0,100)';\n    var x = Math.sin(0);\n    var y = Math.cos(0);\n    var dig = Math.PI / 15 * 5;\n    for (var i = 0; i < 6; i++) {\n        var x = Math.sin(i * dig);\n        var y = Math.cos(i * dig);\n        context.lineTo(dx + x * s, dy + y * s);\n        console.log( x ,y )\n    }\n    context.closePath();\n    context.fill();\n    context.stroke();\n```\n![使用canvas绘制六边形](http://img.blog.csdn.net/20170804151434159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n绘制 30 角形：\n```\nvar n = 0;\n    var dx = 150;\n    var dy = 150;\n    var s = 100;\n    context.beginPath();\n    context.fillStyle = 'pink';\n    context.strokeStyle = 'rgb(0,0,100)';\n    var x = Math.sin(0);\n    var y = Math.cos(0);\n    var dig = Math.PI / 15 * 7;\n    for (var i = 0; i < 30; i++) {\n        var x = Math.sin(i * dig);\n        var y = Math.cos(i * dig);\n        context.lineTo(dx + x * s, dy + y * s);\n        console.log( x ,y )\n    }\n    context.closePath();\n    context.fill();\n    context.stroke();\n```\n效果如下：\n\n![canvas绘制 30 脚形](http://img.blog.csdn\n.net/20170804152344651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 线性渐变\n`var lg= context.createLinearGradient(xStart,yStart,xEnd,yEnd)`\n`lg.addColorStop(offset,color)`\n\n - xstart:渐变开始点x坐标\n - ystart:渐变开始点y坐标\n - xEnd:渐变结束点x坐标\n - yEnd:渐变结束点y坐标\n - offset:设定的颜色离渐变结束点的偏移量(0~1)\n - color:绘制时要使用的颜色\n\n例如：\n```\n    var g1 = context.createLinearGradient(0, 0, 0, 300);\n    g1.addColorStop(0, '#E55D87'); \n    g1.addColorStop(1, '#5FC3E4');\n    context.fillStyle = g1;\n    context.fillRect(0, 0, 400, 300);\n```\n效果如下：\n\n![canvas绘制渐变](http://img.blog.csdn.net/20170804164331469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 径向渐变\n\n`var rg=context.createRadialGradient(xStart,yStart,radiusStart,xEnd,yEnd,radiusEnd)`\n`rg.addColorStop(offset,color)`\n\n - xStart：发散开始圆心x坐标\n - yStart：发散开始圆心y坐标\n - radiusStart：发散开始圆的半径\n - xEnd：发散结束圆心的x坐标\n -  yEnd：发散结束圆心的y坐标\n - radiusEnd：发散结束圆的半径\n - offset：设定的颜色离渐变结束点的偏移量(0~1)\n - color：绘制时要使用的颜色\n\n![径向渐变原理](http://pic002.cnblogs.com/images/2012/407398/2012080314164328.png)\n例如：\n```\n// 同心圆径向渐变\n    var g1 = context.createRadialGradient(200, 150, 0, 200, 150, 200);\n    g1.addColorStop(0.1, '#F09819');\n    g1.addColorStop(1, '#EDDE5D');\n    context.fillStyle = g1;\n    context.beginPath();\n    context.arc(200, 150, 100, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fill();\n```\n![canvas绘制同心圆径向渐变](http://img.blog.csdn.net/20170804172346775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n```\n//不同圆心的径向渐变模型\n    var g1 = context.createRadialGradient(100, 150, 10, 300, 150, 80);\n    g1.addColorStop(0.1, '#F09819');\n    g1.addColorStop(0.8, 'red');\n    g1.addColorStop(1, '#EDDE5D');\n\n    context.fillStyle = g1;\n    context.fillRect(0, 0, 300, 500);\n```\n效果图：\n\n![不同圆心径向渐变](http://img.blog.csdn.net/20170804175425719?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 图形变形 \n\n### 缩放\n\n`scale(x,y)`\n - x ：x坐标轴按 x 比例缩放\n - y ：x坐标轴按 y 比例缩放\n\n### 旋转\n\n`rotate(angle)`\n -  angle ：坐标轴旋转x角度（角度变化模型和画圆的模型一样）\n\n### 平移\n\n`translate(x,y)`\n\n - x ：坐标原点向x轴方向平移x\n - y ：坐标原点向y轴方向平移y\n\n平移，缩放，旋转先后顺序不同，坐标轴的变化图，图片来源于网络：\n\n![平移缩放旋转先后顺序不同坐标轴的变化图](http://pic002.cnblogs.com/images/2012/407398/2012080316350654.png)\n\n## 图形组合\n\n`globalCompositeOperation=type`\n设置或返回新图像如何绘制到已有的图像上。最后的效果取决于 type 的值\ntype：\n - source-over（默认值）:在原有图形上绘制新图形\n - destination-over:在原有图形下绘制新图形\n - source-in:显示原有图形和新图形的交集，新图形在上，所以颜色为新图形的颜色\n - destination-in:显示原有图形和新图形的交集，原有图形在上，所以颜色为原有图形的颜色\n - source-out:只显示新图形非交集部分\n - destination-out:只显示原有图形非交集部分\n - source-atop:显示原有图形和交集部分，新图形在上，所以交集部分的颜色为新图形的颜色\n - destination-atop:显示新图形和交集部分，新图形在下，所以交集部分的颜色为原有图形的颜色\n - lighter:原有图形和新图形都显示，交集部分做颜色叠加\n - xor:重叠飞部分不现实\n - copy:只显示新图形\n效果图如下，图片来源于网络\n\n![效果图](http://pic002.cnblogs.com/images/2012/407398/2012080317515321.png)\n\n## 阴影\n\n```\nshadowOffsetX：设置或返回阴影距形状的水平距离（默认值为 0）\nshadowOffsetY：设置或返回阴影距形状的垂直距离（默认值为 0）\nshadowColor：设置或返回用于阴影的颜色\nshadowBlur：设置或返回用于阴影的模糊级别（值越大越模糊）\n```\n\n例如：\n\n```\n    context.fillStyle = 'white';\n    context.beginPath();\n    context.arc(100,100,10,0,2 * Math.PI);\n    context.shadowColor = 'white';\n    context.shadowBlur = 10;\n    context.fill();\n    context.closePath();\n```\n\n我们看到的效果就是我们在开头提起的例子中的 star 粒子的效果，因为其有白色阴影的效果，所以看起来像是发光一样，效果如下图：\n\n![带阴影效果的圆形](http://img.blog.csdn.net/20170805132804029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 图像绘制\n`drawImage()`\n向画布上绘制图像、画布或视频\n\n - 在画布上定位图像：`context.drawImage(img,x,y);`\n - 在画布上定位图像，并规定图像的宽度和高度：`context.drawImage(img,x,y,width,height);` \n - 剪切图像，并在画布上定位被剪切的部分：`context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);`\n -  `img`：规定要使用的图像、画布或视频。\n - `sx`：可选。开始剪切的 x 坐标位置。\n - `sy`：可选。开始剪切的 y 坐标位置。\n - `swidth`：可选。被剪切图像的宽度。\n - `sheight`：可选。被剪切图像的高度。\n - `x`：在画布上放置图像的 x 坐标位置。\n - `y`：在画布上放置图像的 y 坐标位置。\n - `width`：可选。要使用的图像的宽度。（伸展或缩小图像）\n - `height`：可选。要使用的图像的高度。（伸展或缩小图像）\n  \n![canvas绘制图形例子](http://pic002.cnblogs.com/images/2012/407398/2012080410231479.png)\n\n## 图像平铺\n`createPattern(image,type)`\ntype:\n\n - no-repeat:不平铺\n - repeat-x:横方向平铺\n - repeat-y:纵方向平铺\n - repeat:全方向平铺\n\n## 图像裁剪\n\n`clip()`从原始画布剪切任意形状和尺寸的区域，需要先创建裁剪区域，再绘制图像；一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。\n例如：\n\n```\n    // 设置剪切区域（粉色矩形）\n    context.rect(0,0,500,400);\n    context.fillStyle = \"pink\";\n    context.fill();\n    context.clip();\n\n    // 在剪切区域中绘制图形（白色矩形）\n    context.fillStyle = \"white\";\n    context.fillRect(10,10,100,100);\n\n    // 之后绘制的图形只能显示在剪切区域之内（红色矩形）\n    context.fillStyle = \"red\";\n    context.fillRect(100,100,600,600)\n\n```\n\n效果如下：可以看到我们设置的红色矩形是一个 600*600 的矩形，但是显然是没有显示完的，**一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。**\n\n![canvas进行图像剪切](http://img.blog.csdn.net/20170805163432597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说我们可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。\n代码如下：\n\n```\ncontext.save();\n    // 设置剪切区域\n    context.rect(0,0,500,400);\n    context.fillStyle = \"pink\";\n    context.fill();\n    context.clip();\n\n    // 在剪切区域中绘制图形\n    context.fillStyle = \"white\";\n    context.fillRect(10,10,100,100);\n\n    context.restore();\n    // 之后绘制的图形只能显示在剪切区域之内\n    context.fillStyle = \"red\";\n    context.fillRect(100,100,600,600)\n```\n\n这样就可以正常显示了：\n\n![canvas进行图像裁剪](http://img.blog.csdn.net/20170805163713137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 绘制文字\n\n```\nfillText(text,x,y)：绘制实心文字\nstrokeText()：绘制文字描边（空心）\ntextAlign：设置或返回文本内容的当前对齐方式\ntextBaseline：设置或返回在绘制文本时使用的当前文本基线\nfont：设置或返回文本内容的当前字体属性\n```\n\n例如：\n\n```\n    context.font=\"40px Arial\";\n    context.fillText(\"Hello world\",200,200);\n    context.strokeText(\"Hello world\",200,300)\n```\n\n效果如下：\n\n![canvas绘制文字](http://img.blog.csdn.net/20170806152010585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 准备工作\n\n> 好的开始是成功的一半\n\n简单介绍了下 canvas 的常用 api，大家发现是不是也没有那么难呢~(￣▽￣)~*，那么让我们回到标题，一起来看一下这个少女心满满的例子是怎样实现的~\n\ncanvas 其实写一个炫酷的特效在技术上并不难，难的是你的创意，因为 canvas 实现粒子的效果还是比较惊艳的，但其实代码都是比较简单的，无非就是随机的创建图形或者路径，当然图形也是闭合的路径。在加上一定的位移就可以了。但是你要设计出一个好的特效是非常不容易的。\n\n所以我们就先来分析一下这个效果由那几部分构成，将其拆分开来。\n\n特效pc端演示地址：https://sunshine940326.github.io/canvasStar/ （当然，可以直接查看我的博客，背景暂时就是这个，不知道什么时候会变，捂脸ing：http://cherryblog.site/）\n\n## 分析 star 的表现和行为\n我们可以将其一直位移向上的粒子称为 star，我们观察 star 的特点：\n\n - 开始创建时位置随机（坐标随机）\n - 透明度随机\n - 创建时的大小在一定范围内（半径在一定范围内）\n - 匀速上升\n - 总数不变\n\n所以我们就可以总结出 star 的特点就是总数固定，创建时坐标和半径还有透明度随机，匀速上升。是不是很简单了呢~[]~(￣▽￣)~*\n\n## 分析 dot 的表现和行为\n再让我们来看一下随着鼠标移入产生的粒子，我们称为 dot，同理，我们观察得到 dot 的特点\n\n - 列表内容\n - 鼠标移动时产生\n - 新产生的 dot 和之前的 3 个 dot 产生连线\n - 向四周移动\n - 达到一定条件消失\n \n这样，我们就完成了一半了呢~将事件屡清楚之后我们就可以开始着手撸代码了！\n\n## 背景的 HTML 和 CSS\n\n其实需要的 HTML 代码和 CSS 代码很简答的，HTML 只需要一行就可以了呢，设置一个渐变的背景蒙层和一个 `canvas` 标签。\n\nHTML 和 CSS 如下：\n\n```\n\n<div class=\"filter\"></div>\n<canvas id=\"canvas\"></canvas>\n\nhtml, body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n            background: black;\n            background: linear-gradient(to bottom, #dcdcdc 0%, palevioletred 100%);\n        }\n\n        #main-canvas {\n            width: 100%;\n            height: 100%;\n        }\n\n        .filter {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            background: #fe5757;\n            animation: colorChange 30s ease-in-out infinite;\n            animation-fill-mode: both;\n            mix-blend-mode: overlay;\n\n        }\n\n        @keyframes colorChange {\n            0%, 100% {\n                opacity: 0;\n            }\n            50% {\n                opacity: .7;\n            }\n        }\n```\n\n是的，我使用的是一个渐变的背景，不仅是从上到下的渐变，并且颜色也是会渐变的，效果如下：\n\n![渐变背景](http://img.blog.csdn.net/20170806160547970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 设置参数以及获取 dom 对象\n\n```\n    /*\n     * @var star_r：star半径系数，系数越大，半径越大\n     * @var star_alpha：生成star的透明度，star_alpha越大，透明度越低\n     * @var initStarsPopulation：初始化stars的个数\n     * @var move_distance：star位移的距离，数值越大，位移越大\n     * @var dot_r : dot半径系数，系数越大，半径越大\n     * @var dot_speeds : dots运动的速度\n     * @var dot_alpha : dots的透明度\n     * @var aReduction：dot消失条件，透明度小于aReduction时消失\n     * @var dotsMinDist：dot最小距离\n     * @var maxDistFromCursor：dot最大距离\n     * */\n    var config = {\n        star_r : 3,\n        star_alpha : 5,\n        initStarsPopulation : 150,\n        move_distance : 0.25,\n        dot_r : 5,\n        dot_speeds : 0.5,\n        dot_alpha : 0.5,\n        dot_aReduction : 0.01,\n        dotsMinDist : 5,\n        maxDistFromCursor : 50,\n    };\n    var stars = [],\n        dots = [],\n        canvas = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        WIDTH,\n        HEIGHT,\n        mouseMoving = false,\n        mouseMoveChecker,\n        mouseX,\n        mouseY;\n```\n\n# 绘制单个 star\n\n```\n    /* 设置单个 star\n     * @param id：id\n     * @param x：x坐标\n     * @param y：y坐标\n     * @param useCache：是否使用缓存\n     * */\n    function Star(id, x, y) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n        this.r = Math.floor(Math.random() * star_r) + 1;\n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n        if (useCache) {\n            this.cache()\n        }\n    }\n```\n\n# 让每一个 star 动起来\n这里我使用的是原型的方式，将 `draw`、`cache`、`move` 和 `die` 方法都设置在 `Star` 的原型上，这样在使用 `new` 创建对象的时候，每一个 star 都可以继承这些方法。\n\n```\nStar.prototype = {\n        draw : function () {\n            if (!this.useCacha) {\n                ctx.save();\n                ctx.fillStyle = this.color;\n                ctx.shadowBlur = this.r * 2;\n                ctx.beginPath();\n                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n                ctx.closePath();\n                ctx.fill();\n                ctx.restore();\n            } else {\n                ctx.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);\n            }\n        },\n\n        cache : function () {\n            this.cacheCtx.save();\n            this.cacheCtx.fillStyle = this.color;\n            this.cacheCtx.shadowColor = \"white\";\n            this.cacheCtx.shadowBlur = this.r * 2;\n            this.cacheCtx.beginPath();\n            this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n            this.cacheCtx.closePath();\n            this.cacheCtx.fill();\n            this.cacheCtx.restore();\n        },\n\n        move : function () {\n            this.y -= move_distance;\n            if (this.y <= -10) {\n                this.y += HEIGHT + 10;\n            }\n            this.draw();\n        },\n\n        die : function () {\n            stars[this.id] = null;\n            delete stars[this.id]\n        }\n    };\n```\n\n# 绘制 dot \n\n```\nfunction Dot(id, x, y, useCache) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random() * dot_r)+1;\n        this.speed = dot_speeds;\n        this.a = dot_alpha;\n        this.aReduction = dot_aReduction;\n        this.useCache = useCache;\n        this.dotCanvas = document.createElement(\"canvas\");\n        this.dotCtx = this.dotCanvas.getContext(\"2d\");\n        this.dotCtx.width = 6 * this.r;\n        this.dotCtx.height = 6 * this.r;\n        this.dotCtx.a = 0.5;\n        this.color = \"rgba(255,255,255,\" + this.a +\")\";\n        this.dotCtx.color = \"rgba(255,255,255,\" + this.dotCtx.a + \")\";\n        this.linkColor = \"rgba(255,255,255,\" + this.a/4 + \")\";\n        this.dir = Math.floor(Math.random()*140)+200;\n\n        if( useCache){\n            this.cache()\n        }\n    }\n```\n\n# 让每一个 dot 动起来\n\n```\nDot.prototype = {\n        draw : function () {\n            if( !this.useCache){\n                ctx.save();\n                ctx.fillStyle = this.color;\n                ctx.shadowColor = \"white\";\n                ctx.shadowBlur = this.r * 2;\n                ctx.beginPath();\n                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n                ctx.closePath();\n                ctx.fill();\n                ctx.restore();\n            }else{\n                ctx.drawImage(this.dotCanvas, this.x - this.r * 3, this.y - this.r *3);\n\n            }\n        },\n\n        cache : function () {\n            this.dotCtx.save();\n            this.dotCtx.a  -= this.aReduction;\n            this.dotCtx.color = \"rgba(255,255,255,\" + this.dotCtx.a + \")\";\n            this.dotCtx.fillStyle = this.dotCtx.color;\n            this.dotCtx.shadowColor = \"white\";\n            this.dotCtx.shadowBlur = this.r * 2;\n            this.dotCtx.beginPath();\n            this.dotCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI, false);\n            this.dotCtx.closePath();\n            this.dotCtx.fill();\n            this.dotCtx.restore();\n        },\n        link : function () {\n            if (this.id == 0) return;\n            var previousDot1 = getPreviousDot(this.id, 1);\n            var previousDot2 = getPreviousDot(this.id, 2);\n            var previousDot3 = getPreviousDot(this.id, 3);\n            var previousDot4 = getPreviousDot(this.id, 4);\n\n\n            if (!previousDot1) return;\n            ctx.strokeStyle = this.linkColor;\n            ctx.moveTo(previousDot1.x, previousDot1.y);\n            ctx.beginPath();\n            ctx.lineTo(this.x, this.y);\n            if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);\n            if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);\n            if (previousDot4 != false) ctx.lineTo(previousDot4.x, previousDot4.y);\n\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        move : function () {\n\n\n            this.a -= this.aReduction;\n            if(this.a <= 0 ){\n                this.die();\n                return\n            }\n            this.dotCtx.a  -= this.aReduction;\n            this.dotCtx.color = \"rgba(255,255,255,\" + this.dotCtx.a + \")\";\n            this.color = \"rgba(255,255,255,\" + this.a + \")\";\n            this.linkColor = \"rgba(255,255,255,\" + this.a/4 + \")\";\n            this.x = this.x + Math.cos(degToRad(this.dir)) * this.speed;\n            this.y = this.y + Math.sin(degToRad(this.dir)) * this.speed;\n\n            this.draw();\n            this.link();\n\n        },\n\n        die : function () {\n            dots[this.id] = null;\n            delete dots[this.id];\n        }\n    };\n```\n\n# 鼠标移入事件监听\n此外，我们还需要设置一些其他的函数和对鼠标移入事件的监听，这里就不再赘述了，感兴趣的同学可以直接到 github 下载源码。\n\n# canvas 离屏渲染优化\n我所使用的离屏优化是基于此文，原文写的很好，大家感兴趣的话可以去看一下：http://www.cnblogs.com/axes/p/3567364.html?utm_source=tuicool&utm_medium=referral。\n因为这个效果之前我也在博客用当做背景过，不少同学都反应很卡，所以我就找了下优化的教程做了下优化，我发现对性能影响最大的可能就是 canvas 的离屏渲染优化了，这也是 canvas 的最常见优化之一。\n\n名字听起来很复杂，什么离屏渲染，其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.\n\n> 建立两个 canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入dom中），先将结果draw缓存用的canvas上下文中，因为游离canvas不会造成ui的渲染，所以它不会展现出来，再把缓存的内容整个裁剪再 draw 到正常显示用的 canvas 上，这样能优化不少。\n\n其实已经体现在上述的代码中的，比如，创建 star 的代码中：\n\n```\n /* 设置单个star\n     * @param id：id\n     * @param x：x坐标\n     * @param y：y坐标\n     * @param useCache：是否使用缓存\n     * */\n    function Star(id, x, y, useCache) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.useCacha = useCache;\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n        this.r = Math.floor(Math.random() * star_r) + 1;\n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n        if (useCache) {\n            this.cache()\n        }\n    }\n```\n\n细心的同学可能就会发现\n\n```\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n```\n\n这段代码就是又创建了一个 canvas 标签，然后再 star 的原型中有一个 cache 方法，这个 cache 方法就是在刚刚创建的 canvas 中绘制 star，而不是直接在原来的 canvas 画布中绘制的。\n\n```\n        cache : function () {\n            this.cacheCtx.save();\n            this.cacheCtx.fillStyle = this.color;\n            this.cacheCtx.shadowColor = \"white\";\n            this.cacheCtx.shadowBlur = this.r * 2;\n            this.cacheCtx.beginPath();\n            this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n            this.cacheCtx.closePath();\n            this.cacheCtx.fill();\n            this.cacheCtx.restore();\n        },\n```\n\n之后我们需要将我们绘制的离屏 canvas 使用 `drawImage` 方法插入到我们最先开始创建的 canvas 画布中。\n\n这里要注意的是，创建的离屏 canvas 的大小，因为太大的话同样会浪费性能，所以我们可以创建和我们每一个 star 粒子相同的 canvas ，但是这个例子中不适用，要将离屏的 canvas 设置的稍微大一些，因为我们还需要设置发光的效果（也就是设置阴影）。\n\n# 发福利\n发福利的时间到了~╰(￣▽￣)╭，很多小伙伴对 canvas 不是很感兴趣，但是想直接使用这个效果，于是我就将其封装起来，你只需要引入这个 JS，在 HTML 中添加一个 id 为 canvas 的标签，然后设置相应的 CSS 就可以~\n\n> github 下载地址：https://github.com/sunshine940326/canvasStar\n\n在 README 中有使用方法~因为是第一次自己封装函数，自己一个人在不停的摸索中前进，所以还有很多的不足，希望有大神可以指点一二~\n\n\n\n\n\n\n ","source":"_posts/canvas-star.md","raw":"---\ntitle: 一个少女心满满的例子带你入门 canvas\ndate: 2017-08-06 14:40:06\ntags: [html5,canvas]\ncategories: [html5,canvas]\n---\n\n![canvas入门](http://img.blog.csdn.net/20170801184128503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n>本文首发于我的个人博客：http://cherryblog.site/ \n>github项目地址：https://github.com/sunshine940326/canvasStar\n>项目演示地址：https://sunshine940326.github.io/canvasStar/\n\n<!--more-->\n\n[toc]\n\n\n\n之前看到了一个很好看的canvas效果，然后拿来做我的博客背景，不少童鞋留言说求教程，并且反应说太耗内存，于是前一段我就重写了一遍，并且使用离屏渲染进行优化，效果还是挺显著的。但是因为毕竟是canvas，需要一直进行重绘，所以还是比较耗内存的，但是比优化之前已经好很多了。并且最近准备自己写插件，于是就拿这个练手了，\n\ngithub地址：https://github.com/sunshine940326/canvasStar \n\n代码还有很多的不足，求大神 review (づ｡◕‿‿◕｡)づ~\n\n# canvas 基本知识\n## 什么是 canvas\n`canvas` 是 HTML5 新定义的标签，通过使用脚本（通常是 JavaScript）绘制图形。\n`<canvas>`  标签只是图形容器，相当于一个画布，`canvas` 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成，相当于使用画笔在画布上画画。\n\n默认情况下，`<canvas>` 没有边框和内容。默认是一个 300*150 的画布，所以我们创建了 `<canvas>` 之后要对其设置宽高。\n**我们可以通过html属性‘width’，‘height’来设置canvas的宽高，不可以通过 css 属性来设置宽高。因为通过 css 属性设置的宽高会使 canvas 内的图像按照 300*150 时的比例放大或缩小**\n\n## getContext()\n`context` 是一个封装了很多绘图功能的对象，我们在页面中创建一个 `canvas` 标签之后，首先要使用 `getContext()` 获取 canvas 的上下文环境，目前 `getContext()` 的参数只有 `2d`，暂时还不支持 `3d` \n\n`getContext(\"2d\")` 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。\n\n##  canvas 元素绘制图像\ncanvas 创建图形有两种方式\n### context.fill()\n`fill()` 方法填充当前的图像（路径）。默认颜色是黑色。在填充前要先使用 `fillStyle` 设置填充的颜色或者渐变，并且如果路径未关闭，那么 `fill()` 方法会从路径结束点到开始点之间添加一条线，以关闭该路径（正如 `closePath()` 一样），然后填充该路径。\n### context.stroke()\n`stroke()` 方法会实际地绘制出通过 `moveTo()` 和 `lineTo()` 方法定义的路径。默认颜色是黑色。在进行图形绘制前，要设置好绘图的样式\n```\nfillStyle()//填充的样式\nstrokeStyle()//边框样式\ncontext.lineWidth()//图形边框宽度\n```\n## 绘制矩形\n用 canvas 绘制一个矩形很简单\n```\nfillRect(x,y,width,height)  // 实心矩形 \nstrokeRect(x,y,width,height)        // 空心矩形\n```\n\n - x ：起始点的 x 坐标\n - y ：起始点的 y 坐标\n - width ： 矩形的宽\n - height ： 矩形的高\n\n```\n//html代码\n<canvas id=\"canvas\"></canvas>\n//script代码\n   var canvas = document.getElementById('canvas');\n    var context = canvas.getContext('2d');\n    context.fillRect(0, 0, 100, 100);\n    context.strokeRect(120, 0, 100, 100);\n```\n显示如下：\n![canvas绘制矩形有填充颜色](http://img.blog.csdn.net/20170803192642241?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n我们可以看出，在没有设置颜色的情况下，默认是黑色的。\n\n我们还可以通过设置 `fillStyle` 或者 `fillStyle` 改变其填充颜色。\n```\ncontext.fillStyle = \"pink\";\ncontext.strokeStyle = \"darkred\";\ncontext.fillRect(0, 0, 100, 100);\ncontext.strokeRect(120, 0, 100, 100);\n```\n效果如下\n![canvas绘制矩形有填充颜色](http://img.blog.csdn.net/20170803200651020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 清除矩形区域\n\nclearRect(x,y,width,height)\n``` \n - x ：清除矩形起始点的 x 坐标\n - y ：清除矩形起始点的 y 坐标\n - width ： 清除矩形矩形的宽\n - height ： 清除矩形矩形的高\n```\nvar canvas = document.getElementById('canvas');\nvar context = canvas.getContext(\"2d\");\ncontext.fillRect(0, 0, 100, 100);\ncontext.strokeRect(120, 0, 100, 100);\ncontext.fillStyle = \"pink\";\ncontext.strokeStyle = \"darkred\";\ncontext.fillRect(0, 120, 100, 100);\ncontext.strokeRect(120, 120, 100, 100);\ncontext.clearRect( 50,50,120,120)\n\n效果如下：\n\n![清除矩形](http://img.blog.csdn.net/20170803201130050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 实心圆\n`context.arc(x, y, radius, starAngle,endAngle, anticlockwise)`\n - x : 圆心的 x 坐标\n - y：圆心的 y 坐标\n - radius ： 半径\n - starAngle ：开始角度\n - endAngle：结束角度\n - anticlockwise ：是否逆时针（true）为逆时针，(false)为顺时针\n```\ncontext.beginPath();\ncontext.arc(300, 350, 100, 0, Math.PI * 2, true);\n//不关闭路径路径会一直保留下去\ncontext.closePath();\ncontext.fillStyle = 'rgba(0,255,0,0.25)';\ncontext.fill();\n```\n效果如下：\n\n![canvas绘制圆弧](http://img.blog.csdn.net/20170803201728632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 圆弧\n如果不填充颜色，实心圆就是圆弧\n```\n    context.beginPath();\n    context.arc(600, 350, 100, 0, Math.PI , true);\n    context.strokeStyle = 'pink';\n    context.closePath();\n    context.stroke();\n   \n    context.beginPath();\n    context.arc(300, 350, 100, 0, Math.PI , true);\n    context.strokeStyle = 'red';\n    //没有closePath\n    context.stroke();\n```\n效果如图：\n![canvas绘制圆弧](http://img.blog.csdn.net/20170804121122961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n - 系统默认在绘制第一个路径的开始点为beginPath\n - 如果画完前面的路径没有重新指定beginPath，那么画第其他路径的时候会将前面最近指定的beginPath后的全部路径重新绘制\n - 每次调用context.fill（）的时候会自动把当次绘制的路径的开始点和结束点相连，接着填充封闭的部分\n\n所以说，如果第一个圆弧没有 `closePath()` 并且第二个圆弧没有 `beginPath()` 的话就是这样的效果：\n\n![canvas绘制矩形](http://img.blog.csdn.net/20170804121543455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n##  绘制线段 \n - `moveTo(x,y)`：把路径移动到画布中的指定点，不创建线条\n - `lineTo(x,y)`：添加一个新点，然后在画布中创建从该点到最后指定点的线条\n - 每次画线都从 moveTo 的点到 lineTo 的点，\n\n```\n    context.strokeStyle = 'pink';\n    context.moveTo(0, 0);\n    context.lineTo(100, 100);\n    context.stroke();*/\n```\n效果如下：\n![canvas绘制片段](http://img.blog.csdn.net/20170804121929082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n**如果没有 moveTo 那么第一次 lineTo 的效果和 moveTo 一样，**\n例如：\n\n```\n    context.strokeStyle = 'pink';\n    context.lineTo(100, 100);\n    context.lineTo(200, 200);\n    context.stroke();*/\n```\n效果如下：\n![canvas绘制线段](http://img.blog.csdn.net/20170804122123451?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n**每次lineTo后如果没有moveTo，那么下次lineTo的开始点为前一次lineTo的结束点**\n例如：\n```\n// 绘制片段\n    context.strokeStyle = 'pink';\n    context.lineTo(200, 200);\n    context.lineTo(200, 100);\n    context.lineTo(100,50);\n    context.stroke();\n```\n效果如下：\n![canvas绘制线段](http://img.blog.csdn.net/20170804122231176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我们可以使用 canvas 的线段绘制各种各样的图形，比如绘制一个六边形\n```\nvar n = 0;\n    var dx = 150;\n    var dy = 150;\n    var s = 100;\n    context.beginPath();\n    context.fillStyle = 'pink';\n    context.strokeStyle = 'rgb(0,0,100)';\n    var x = Math.sin(0);\n    var y = Math.cos(0);\n    var dig = Math.PI / 15 * 5;\n    for (var i = 0; i < 6; i++) {\n        var x = Math.sin(i * dig);\n        var y = Math.cos(i * dig);\n        context.lineTo(dx + x * s, dy + y * s);\n        console.log( x ,y )\n    }\n    context.closePath();\n    context.fill();\n    context.stroke();\n```\n![使用canvas绘制六边形](http://img.blog.csdn.net/20170804151434159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n绘制 30 角形：\n```\nvar n = 0;\n    var dx = 150;\n    var dy = 150;\n    var s = 100;\n    context.beginPath();\n    context.fillStyle = 'pink';\n    context.strokeStyle = 'rgb(0,0,100)';\n    var x = Math.sin(0);\n    var y = Math.cos(0);\n    var dig = Math.PI / 15 * 7;\n    for (var i = 0; i < 30; i++) {\n        var x = Math.sin(i * dig);\n        var y = Math.cos(i * dig);\n        context.lineTo(dx + x * s, dy + y * s);\n        console.log( x ,y )\n    }\n    context.closePath();\n    context.fill();\n    context.stroke();\n```\n效果如下：\n\n![canvas绘制 30 脚形](http://img.blog.csdn\n.net/20170804152344651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 线性渐变\n`var lg= context.createLinearGradient(xStart,yStart,xEnd,yEnd)`\n`lg.addColorStop(offset,color)`\n\n - xstart:渐变开始点x坐标\n - ystart:渐变开始点y坐标\n - xEnd:渐变结束点x坐标\n - yEnd:渐变结束点y坐标\n - offset:设定的颜色离渐变结束点的偏移量(0~1)\n - color:绘制时要使用的颜色\n\n例如：\n```\n    var g1 = context.createLinearGradient(0, 0, 0, 300);\n    g1.addColorStop(0, '#E55D87'); \n    g1.addColorStop(1, '#5FC3E4');\n    context.fillStyle = g1;\n    context.fillRect(0, 0, 400, 300);\n```\n效果如下：\n\n![canvas绘制渐变](http://img.blog.csdn.net/20170804164331469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 径向渐变\n\n`var rg=context.createRadialGradient(xStart,yStart,radiusStart,xEnd,yEnd,radiusEnd)`\n`rg.addColorStop(offset,color)`\n\n - xStart：发散开始圆心x坐标\n - yStart：发散开始圆心y坐标\n - radiusStart：发散开始圆的半径\n - xEnd：发散结束圆心的x坐标\n -  yEnd：发散结束圆心的y坐标\n - radiusEnd：发散结束圆的半径\n - offset：设定的颜色离渐变结束点的偏移量(0~1)\n - color：绘制时要使用的颜色\n\n![径向渐变原理](http://pic002.cnblogs.com/images/2012/407398/2012080314164328.png)\n例如：\n```\n// 同心圆径向渐变\n    var g1 = context.createRadialGradient(200, 150, 0, 200, 150, 200);\n    g1.addColorStop(0.1, '#F09819');\n    g1.addColorStop(1, '#EDDE5D');\n    context.fillStyle = g1;\n    context.beginPath();\n    context.arc(200, 150, 100, 0, Math.PI * 2, true);\n    context.closePath();\n    context.fill();\n```\n![canvas绘制同心圆径向渐变](http://img.blog.csdn.net/20170804172346775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n```\n//不同圆心的径向渐变模型\n    var g1 = context.createRadialGradient(100, 150, 10, 300, 150, 80);\n    g1.addColorStop(0.1, '#F09819');\n    g1.addColorStop(0.8, 'red');\n    g1.addColorStop(1, '#EDDE5D');\n\n    context.fillStyle = g1;\n    context.fillRect(0, 0, 300, 500);\n```\n效果图：\n\n![不同圆心径向渐变](http://img.blog.csdn.net/20170804175425719?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 图形变形 \n\n### 缩放\n\n`scale(x,y)`\n - x ：x坐标轴按 x 比例缩放\n - y ：x坐标轴按 y 比例缩放\n\n### 旋转\n\n`rotate(angle)`\n -  angle ：坐标轴旋转x角度（角度变化模型和画圆的模型一样）\n\n### 平移\n\n`translate(x,y)`\n\n - x ：坐标原点向x轴方向平移x\n - y ：坐标原点向y轴方向平移y\n\n平移，缩放，旋转先后顺序不同，坐标轴的变化图，图片来源于网络：\n\n![平移缩放旋转先后顺序不同坐标轴的变化图](http://pic002.cnblogs.com/images/2012/407398/2012080316350654.png)\n\n## 图形组合\n\n`globalCompositeOperation=type`\n设置或返回新图像如何绘制到已有的图像上。最后的效果取决于 type 的值\ntype：\n - source-over（默认值）:在原有图形上绘制新图形\n - destination-over:在原有图形下绘制新图形\n - source-in:显示原有图形和新图形的交集，新图形在上，所以颜色为新图形的颜色\n - destination-in:显示原有图形和新图形的交集，原有图形在上，所以颜色为原有图形的颜色\n - source-out:只显示新图形非交集部分\n - destination-out:只显示原有图形非交集部分\n - source-atop:显示原有图形和交集部分，新图形在上，所以交集部分的颜色为新图形的颜色\n - destination-atop:显示新图形和交集部分，新图形在下，所以交集部分的颜色为原有图形的颜色\n - lighter:原有图形和新图形都显示，交集部分做颜色叠加\n - xor:重叠飞部分不现实\n - copy:只显示新图形\n效果图如下，图片来源于网络\n\n![效果图](http://pic002.cnblogs.com/images/2012/407398/2012080317515321.png)\n\n## 阴影\n\n```\nshadowOffsetX：设置或返回阴影距形状的水平距离（默认值为 0）\nshadowOffsetY：设置或返回阴影距形状的垂直距离（默认值为 0）\nshadowColor：设置或返回用于阴影的颜色\nshadowBlur：设置或返回用于阴影的模糊级别（值越大越模糊）\n```\n\n例如：\n\n```\n    context.fillStyle = 'white';\n    context.beginPath();\n    context.arc(100,100,10,0,2 * Math.PI);\n    context.shadowColor = 'white';\n    context.shadowBlur = 10;\n    context.fill();\n    context.closePath();\n```\n\n我们看到的效果就是我们在开头提起的例子中的 star 粒子的效果，因为其有白色阴影的效果，所以看起来像是发光一样，效果如下图：\n\n![带阴影效果的圆形](http://img.blog.csdn.net/20170805132804029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 图像绘制\n`drawImage()`\n向画布上绘制图像、画布或视频\n\n - 在画布上定位图像：`context.drawImage(img,x,y);`\n - 在画布上定位图像，并规定图像的宽度和高度：`context.drawImage(img,x,y,width,height);` \n - 剪切图像，并在画布上定位被剪切的部分：`context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);`\n -  `img`：规定要使用的图像、画布或视频。\n - `sx`：可选。开始剪切的 x 坐标位置。\n - `sy`：可选。开始剪切的 y 坐标位置。\n - `swidth`：可选。被剪切图像的宽度。\n - `sheight`：可选。被剪切图像的高度。\n - `x`：在画布上放置图像的 x 坐标位置。\n - `y`：在画布上放置图像的 y 坐标位置。\n - `width`：可选。要使用的图像的宽度。（伸展或缩小图像）\n - `height`：可选。要使用的图像的高度。（伸展或缩小图像）\n  \n![canvas绘制图形例子](http://pic002.cnblogs.com/images/2012/407398/2012080410231479.png)\n\n## 图像平铺\n`createPattern(image,type)`\ntype:\n\n - no-repeat:不平铺\n - repeat-x:横方向平铺\n - repeat-y:纵方向平铺\n - repeat:全方向平铺\n\n## 图像裁剪\n\n`clip()`从原始画布剪切任意形状和尺寸的区域，需要先创建裁剪区域，再绘制图像；一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。\n例如：\n\n```\n    // 设置剪切区域（粉色矩形）\n    context.rect(0,0,500,400);\n    context.fillStyle = \"pink\";\n    context.fill();\n    context.clip();\n\n    // 在剪切区域中绘制图形（白色矩形）\n    context.fillStyle = \"white\";\n    context.fillRect(10,10,100,100);\n\n    // 之后绘制的图形只能显示在剪切区域之内（红色矩形）\n    context.fillStyle = \"red\";\n    context.fillRect(100,100,600,600)\n\n```\n\n效果如下：可以看到我们设置的红色矩形是一个 600*600 的矩形，但是显然是没有显示完的，**一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。**\n\n![canvas进行图像剪切](http://img.blog.csdn.net/20170805163432597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n所以说我们可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。\n代码如下：\n\n```\ncontext.save();\n    // 设置剪切区域\n    context.rect(0,0,500,400);\n    context.fillStyle = \"pink\";\n    context.fill();\n    context.clip();\n\n    // 在剪切区域中绘制图形\n    context.fillStyle = \"white\";\n    context.fillRect(10,10,100,100);\n\n    context.restore();\n    // 之后绘制的图形只能显示在剪切区域之内\n    context.fillStyle = \"red\";\n    context.fillRect(100,100,600,600)\n```\n\n这样就可以正常显示了：\n\n![canvas进行图像裁剪](http://img.blog.csdn.net/20170805163713137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 绘制文字\n\n```\nfillText(text,x,y)：绘制实心文字\nstrokeText()：绘制文字描边（空心）\ntextAlign：设置或返回文本内容的当前对齐方式\ntextBaseline：设置或返回在绘制文本时使用的当前文本基线\nfont：设置或返回文本内容的当前字体属性\n```\n\n例如：\n\n```\n    context.font=\"40px Arial\";\n    context.fillText(\"Hello world\",200,200);\n    context.strokeText(\"Hello world\",200,300)\n```\n\n效果如下：\n\n![canvas绘制文字](http://img.blog.csdn.net/20170806152010585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 准备工作\n\n> 好的开始是成功的一半\n\n简单介绍了下 canvas 的常用 api，大家发现是不是也没有那么难呢~(￣▽￣)~*，那么让我们回到标题，一起来看一下这个少女心满满的例子是怎样实现的~\n\ncanvas 其实写一个炫酷的特效在技术上并不难，难的是你的创意，因为 canvas 实现粒子的效果还是比较惊艳的，但其实代码都是比较简单的，无非就是随机的创建图形或者路径，当然图形也是闭合的路径。在加上一定的位移就可以了。但是你要设计出一个好的特效是非常不容易的。\n\n所以我们就先来分析一下这个效果由那几部分构成，将其拆分开来。\n\n特效pc端演示地址：https://sunshine940326.github.io/canvasStar/ （当然，可以直接查看我的博客，背景暂时就是这个，不知道什么时候会变，捂脸ing：http://cherryblog.site/）\n\n## 分析 star 的表现和行为\n我们可以将其一直位移向上的粒子称为 star，我们观察 star 的特点：\n\n - 开始创建时位置随机（坐标随机）\n - 透明度随机\n - 创建时的大小在一定范围内（半径在一定范围内）\n - 匀速上升\n - 总数不变\n\n所以我们就可以总结出 star 的特点就是总数固定，创建时坐标和半径还有透明度随机，匀速上升。是不是很简单了呢~[]~(￣▽￣)~*\n\n## 分析 dot 的表现和行为\n再让我们来看一下随着鼠标移入产生的粒子，我们称为 dot，同理，我们观察得到 dot 的特点\n\n - 列表内容\n - 鼠标移动时产生\n - 新产生的 dot 和之前的 3 个 dot 产生连线\n - 向四周移动\n - 达到一定条件消失\n \n这样，我们就完成了一半了呢~将事件屡清楚之后我们就可以开始着手撸代码了！\n\n## 背景的 HTML 和 CSS\n\n其实需要的 HTML 代码和 CSS 代码很简答的，HTML 只需要一行就可以了呢，设置一个渐变的背景蒙层和一个 `canvas` 标签。\n\nHTML 和 CSS 如下：\n\n```\n\n<div class=\"filter\"></div>\n<canvas id=\"canvas\"></canvas>\n\nhtml, body {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            height: 100%;\n            overflow: hidden;\n            background: black;\n            background: linear-gradient(to bottom, #dcdcdc 0%, palevioletred 100%);\n        }\n\n        #main-canvas {\n            width: 100%;\n            height: 100%;\n        }\n\n        .filter {\n            width: 100%;\n            height: 100%;\n            position: absolute;\n            top: 0;\n            left: 0;\n            background: #fe5757;\n            animation: colorChange 30s ease-in-out infinite;\n            animation-fill-mode: both;\n            mix-blend-mode: overlay;\n\n        }\n\n        @keyframes colorChange {\n            0%, 100% {\n                opacity: 0;\n            }\n            50% {\n                opacity: .7;\n            }\n        }\n```\n\n是的，我使用的是一个渐变的背景，不仅是从上到下的渐变，并且颜色也是会渐变的，效果如下：\n\n![渐变背景](http://img.blog.csdn.net/20170806160547970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 设置参数以及获取 dom 对象\n\n```\n    /*\n     * @var star_r：star半径系数，系数越大，半径越大\n     * @var star_alpha：生成star的透明度，star_alpha越大，透明度越低\n     * @var initStarsPopulation：初始化stars的个数\n     * @var move_distance：star位移的距离，数值越大，位移越大\n     * @var dot_r : dot半径系数，系数越大，半径越大\n     * @var dot_speeds : dots运动的速度\n     * @var dot_alpha : dots的透明度\n     * @var aReduction：dot消失条件，透明度小于aReduction时消失\n     * @var dotsMinDist：dot最小距离\n     * @var maxDistFromCursor：dot最大距离\n     * */\n    var config = {\n        star_r : 3,\n        star_alpha : 5,\n        initStarsPopulation : 150,\n        move_distance : 0.25,\n        dot_r : 5,\n        dot_speeds : 0.5,\n        dot_alpha : 0.5,\n        dot_aReduction : 0.01,\n        dotsMinDist : 5,\n        maxDistFromCursor : 50,\n    };\n    var stars = [],\n        dots = [],\n        canvas = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        WIDTH,\n        HEIGHT,\n        mouseMoving = false,\n        mouseMoveChecker,\n        mouseX,\n        mouseY;\n```\n\n# 绘制单个 star\n\n```\n    /* 设置单个 star\n     * @param id：id\n     * @param x：x坐标\n     * @param y：y坐标\n     * @param useCache：是否使用缓存\n     * */\n    function Star(id, x, y) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n        this.r = Math.floor(Math.random() * star_r) + 1;\n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n        if (useCache) {\n            this.cache()\n        }\n    }\n```\n\n# 让每一个 star 动起来\n这里我使用的是原型的方式，将 `draw`、`cache`、`move` 和 `die` 方法都设置在 `Star` 的原型上，这样在使用 `new` 创建对象的时候，每一个 star 都可以继承这些方法。\n\n```\nStar.prototype = {\n        draw : function () {\n            if (!this.useCacha) {\n                ctx.save();\n                ctx.fillStyle = this.color;\n                ctx.shadowBlur = this.r * 2;\n                ctx.beginPath();\n                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n                ctx.closePath();\n                ctx.fill();\n                ctx.restore();\n            } else {\n                ctx.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);\n            }\n        },\n\n        cache : function () {\n            this.cacheCtx.save();\n            this.cacheCtx.fillStyle = this.color;\n            this.cacheCtx.shadowColor = \"white\";\n            this.cacheCtx.shadowBlur = this.r * 2;\n            this.cacheCtx.beginPath();\n            this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n            this.cacheCtx.closePath();\n            this.cacheCtx.fill();\n            this.cacheCtx.restore();\n        },\n\n        move : function () {\n            this.y -= move_distance;\n            if (this.y <= -10) {\n                this.y += HEIGHT + 10;\n            }\n            this.draw();\n        },\n\n        die : function () {\n            stars[this.id] = null;\n            delete stars[this.id]\n        }\n    };\n```\n\n# 绘制 dot \n\n```\nfunction Dot(id, x, y, useCache) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random() * dot_r)+1;\n        this.speed = dot_speeds;\n        this.a = dot_alpha;\n        this.aReduction = dot_aReduction;\n        this.useCache = useCache;\n        this.dotCanvas = document.createElement(\"canvas\");\n        this.dotCtx = this.dotCanvas.getContext(\"2d\");\n        this.dotCtx.width = 6 * this.r;\n        this.dotCtx.height = 6 * this.r;\n        this.dotCtx.a = 0.5;\n        this.color = \"rgba(255,255,255,\" + this.a +\")\";\n        this.dotCtx.color = \"rgba(255,255,255,\" + this.dotCtx.a + \")\";\n        this.linkColor = \"rgba(255,255,255,\" + this.a/4 + \")\";\n        this.dir = Math.floor(Math.random()*140)+200;\n\n        if( useCache){\n            this.cache()\n        }\n    }\n```\n\n# 让每一个 dot 动起来\n\n```\nDot.prototype = {\n        draw : function () {\n            if( !this.useCache){\n                ctx.save();\n                ctx.fillStyle = this.color;\n                ctx.shadowColor = \"white\";\n                ctx.shadowBlur = this.r * 2;\n                ctx.beginPath();\n                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n                ctx.closePath();\n                ctx.fill();\n                ctx.restore();\n            }else{\n                ctx.drawImage(this.dotCanvas, this.x - this.r * 3, this.y - this.r *3);\n\n            }\n        },\n\n        cache : function () {\n            this.dotCtx.save();\n            this.dotCtx.a  -= this.aReduction;\n            this.dotCtx.color = \"rgba(255,255,255,\" + this.dotCtx.a + \")\";\n            this.dotCtx.fillStyle = this.dotCtx.color;\n            this.dotCtx.shadowColor = \"white\";\n            this.dotCtx.shadowBlur = this.r * 2;\n            this.dotCtx.beginPath();\n            this.dotCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI, false);\n            this.dotCtx.closePath();\n            this.dotCtx.fill();\n            this.dotCtx.restore();\n        },\n        link : function () {\n            if (this.id == 0) return;\n            var previousDot1 = getPreviousDot(this.id, 1);\n            var previousDot2 = getPreviousDot(this.id, 2);\n            var previousDot3 = getPreviousDot(this.id, 3);\n            var previousDot4 = getPreviousDot(this.id, 4);\n\n\n            if (!previousDot1) return;\n            ctx.strokeStyle = this.linkColor;\n            ctx.moveTo(previousDot1.x, previousDot1.y);\n            ctx.beginPath();\n            ctx.lineTo(this.x, this.y);\n            if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);\n            if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);\n            if (previousDot4 != false) ctx.lineTo(previousDot4.x, previousDot4.y);\n\n            ctx.stroke();\n            ctx.closePath();\n        },\n\n        move : function () {\n\n\n            this.a -= this.aReduction;\n            if(this.a <= 0 ){\n                this.die();\n                return\n            }\n            this.dotCtx.a  -= this.aReduction;\n            this.dotCtx.color = \"rgba(255,255,255,\" + this.dotCtx.a + \")\";\n            this.color = \"rgba(255,255,255,\" + this.a + \")\";\n            this.linkColor = \"rgba(255,255,255,\" + this.a/4 + \")\";\n            this.x = this.x + Math.cos(degToRad(this.dir)) * this.speed;\n            this.y = this.y + Math.sin(degToRad(this.dir)) * this.speed;\n\n            this.draw();\n            this.link();\n\n        },\n\n        die : function () {\n            dots[this.id] = null;\n            delete dots[this.id];\n        }\n    };\n```\n\n# 鼠标移入事件监听\n此外，我们还需要设置一些其他的函数和对鼠标移入事件的监听，这里就不再赘述了，感兴趣的同学可以直接到 github 下载源码。\n\n# canvas 离屏渲染优化\n我所使用的离屏优化是基于此文，原文写的很好，大家感兴趣的话可以去看一下：http://www.cnblogs.com/axes/p/3567364.html?utm_source=tuicool&utm_medium=referral。\n因为这个效果之前我也在博客用当做背景过，不少同学都反应很卡，所以我就找了下优化的教程做了下优化，我发现对性能影响最大的可能就是 canvas 的离屏渲染优化了，这也是 canvas 的最常见优化之一。\n\n名字听起来很复杂，什么离屏渲染，其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.\n\n> 建立两个 canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入dom中），先将结果draw缓存用的canvas上下文中，因为游离canvas不会造成ui的渲染，所以它不会展现出来，再把缓存的内容整个裁剪再 draw 到正常显示用的 canvas 上，这样能优化不少。\n\n其实已经体现在上述的代码中的，比如，创建 star 的代码中：\n\n```\n /* 设置单个star\n     * @param id：id\n     * @param x：x坐标\n     * @param y：y坐标\n     * @param useCache：是否使用缓存\n     * */\n    function Star(id, x, y, useCache) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.useCacha = useCache;\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n        this.r = Math.floor(Math.random() * star_r) + 1;\n        this.cacheCtx.width = 6 * this.r;\n        this.cacheCtx.height = 6 * this.r;\n        var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;\n        this.color = \"rgba(255,255,255,\" + alpha + \")\";\n        if (useCache) {\n            this.cache()\n        }\n    }\n```\n\n细心的同学可能就会发现\n\n```\n        this.cacheCanvas = document.createElement(\"canvas\");\n        this.cacheCtx = this.cacheCanvas.getContext(\"2d\");\n```\n\n这段代码就是又创建了一个 canvas 标签，然后再 star 的原型中有一个 cache 方法，这个 cache 方法就是在刚刚创建的 canvas 中绘制 star，而不是直接在原来的 canvas 画布中绘制的。\n\n```\n        cache : function () {\n            this.cacheCtx.save();\n            this.cacheCtx.fillStyle = this.color;\n            this.cacheCtx.shadowColor = \"white\";\n            this.cacheCtx.shadowBlur = this.r * 2;\n            this.cacheCtx.beginPath();\n            this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);\n            this.cacheCtx.closePath();\n            this.cacheCtx.fill();\n            this.cacheCtx.restore();\n        },\n```\n\n之后我们需要将我们绘制的离屏 canvas 使用 `drawImage` 方法插入到我们最先开始创建的 canvas 画布中。\n\n这里要注意的是，创建的离屏 canvas 的大小，因为太大的话同样会浪费性能，所以我们可以创建和我们每一个 star 粒子相同的 canvas ，但是这个例子中不适用，要将离屏的 canvas 设置的稍微大一些，因为我们还需要设置发光的效果（也就是设置阴影）。\n\n# 发福利\n发福利的时间到了~╰(￣▽￣)╭，很多小伙伴对 canvas 不是很感兴趣，但是想直接使用这个效果，于是我就将其封装起来，你只需要引入这个 JS，在 HTML 中添加一个 id 为 canvas 的标签，然后设置相应的 CSS 就可以~\n\n> github 下载地址：https://github.com/sunshine940326/canvasStar\n\n在 README 中有使用方法~因为是第一次自己封装函数，自己一个人在不停的摸索中前进，所以还有很多的不足，希望有大神可以指点一二~\n\n\n\n\n\n\n ","slug":"canvas-star","published":1,"updated":"2017-08-08T11:58:06.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxn001yvvxigao7y68x","content":"<p><img src=\"http://img.blog.csdn.net/20170801184128503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas入门\"></p>\n<blockquote>\n<p>本文首发于我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a><br>github项目地址：<a href=\"https://github.com/sunshine940326/canvasStar\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvasStar</a><br>项目演示地址：<a href=\"https://sunshine940326.github.io/canvasStar/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/canvasStar/</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<p>[toc]</p>\n<p>之前看到了一个很好看的canvas效果，然后拿来做我的博客背景，不少童鞋留言说求教程，并且反应说太耗内存，于是前一段我就重写了一遍，并且使用离屏渲染进行优化，效果还是挺显著的。但是因为毕竟是canvas，需要一直进行重绘，所以还是比较耗内存的，但是比优化之前已经好很多了。并且最近准备自己写插件，于是就拿这个练手了，</p>\n<p>github地址：<a href=\"https://github.com/sunshine940326/canvasStar\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvasStar</a> </p>\n<p>代码还有很多的不足，求大神 review (づ｡◕‿‿◕｡)づ~</p>\n<h1 id=\"canvas-基本知识\"><a href=\"#canvas-基本知识\" class=\"headerlink\" title=\"canvas 基本知识\"></a>canvas 基本知识</h1><h2 id=\"什么是-canvas\"><a href=\"#什么是-canvas\" class=\"headerlink\" title=\"什么是 canvas\"></a>什么是 canvas</h2><p><code>canvas</code> 是 HTML5 新定义的标签，通过使用脚本（通常是 JavaScript）绘制图形。<br><code>&lt;canvas&gt;</code>  标签只是图形容器，相当于一个画布，<code>canvas</code> 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成，相当于使用画笔在画布上画画。</p>\n<p>默认情况下，<code>&lt;canvas&gt;</code> 没有边框和内容。默认是一个 300<em>150 的画布，所以我们创建了 <code>&lt;canvas&gt;</code> 之后要对其设置宽高。<br>**我们可以通过html属性‘width’，‘height’来设置canvas的宽高，不可以通过 css 属性来设置宽高。因为通过 css 属性设置的宽高会使 canvas 内的图像按照 300</em>150 时的比例放大或缩小**</p>\n<h2 id=\"getContext\"><a href=\"#getContext\" class=\"headerlink\" title=\"getContext()\"></a>getContext()</h2><p><code>context</code> 是一个封装了很多绘图功能的对象，我们在页面中创建一个 <code>canvas</code> 标签之后，首先要使用 <code>getContext()</code> 获取 canvas 的上下文环境，目前 <code>getContext()</code> 的参数只有 <code>2d</code>，暂时还不支持 <code>3d</code> </p>\n<p><code>getContext(&quot;2d&quot;)</code> 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p>\n<h2 id=\"canvas-元素绘制图像\"><a href=\"#canvas-元素绘制图像\" class=\"headerlink\" title=\"canvas 元素绘制图像\"></a>canvas 元素绘制图像</h2><p>canvas 创建图形有两种方式</p>\n<h3 id=\"context-fill\"><a href=\"#context-fill\" class=\"headerlink\" title=\"context.fill()\"></a>context.fill()</h3><p><code>fill()</code> 方法填充当前的图像（路径）。默认颜色是黑色。在填充前要先使用 <code>fillStyle</code> 设置填充的颜色或者渐变，并且如果路径未关闭，那么 <code>fill()</code> 方法会从路径结束点到开始点之间添加一条线，以关闭该路径（正如 <code>closePath()</code> 一样），然后填充该路径。</p>\n<h3 id=\"context-stroke\"><a href=\"#context-stroke\" class=\"headerlink\" title=\"context.stroke()\"></a>context.stroke()</h3><p><code>stroke()</code> 方法会实际地绘制出通过 <code>moveTo()</code> 和 <code>lineTo()</code> 方法定义的路径。默认颜色是黑色。在进行图形绘制前，要设置好绘图的样式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillStyle()//填充的样式</div><div class=\"line\">strokeStyle()//边框样式</div><div class=\"line\">context.lineWidth()//图形边框宽度</div></pre></td></tr></table></figure></p>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><p>用 canvas 绘制一个矩形很简单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillRect(x,y,width,height)  // 实心矩形 </div><div class=\"line\">strokeRect(x,y,width,height)        // 空心矩形</div></pre></td></tr></table></figure></p>\n<ul>\n<li>x ：起始点的 x 坐标</li>\n<li>y ：起始点的 y 坐标</li>\n<li>width ： 矩形的宽</li>\n<li>height ： 矩形的高</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html代码</div><div class=\"line\">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\">//script代码</div><div class=\"line\">   var canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">    var context = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">    context.fillRect(0, 0, 100, 100);</div><div class=\"line\">    context.strokeRect(120, 0, 100, 100);</div></pre></td></tr></table></figure>\n<p>显示如下：<br><img src=\"http://img.blog.csdn.net/20170803192642241?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制矩形有填充颜色\"></p>\n<p>我们可以看出，在没有设置颜色的情况下，默认是黑色的。</p>\n<p>我们还可以通过设置 <code>fillStyle</code> 或者 <code>fillStyle</code> 改变其填充颜色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.fillStyle = &quot;pink&quot;;</div><div class=\"line\">context.strokeStyle = &quot;darkred&quot;;</div><div class=\"line\">context.fillRect(0, 0, 100, 100);</div><div class=\"line\">context.strokeRect(120, 0, 100, 100);</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><img src=\"http://img.blog.csdn.net/20170803200651020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制矩形有填充颜色\"></p>\n<h2 id=\"清除矩形区域\"><a href=\"#清除矩形区域\" class=\"headerlink\" title=\"清除矩形区域\"></a>清除矩形区域</h2><p>clearRect(x,y,width,height)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- x ：清除矩形起始点的 x 坐标</div><div class=\"line\">- y ：清除矩形起始点的 y 坐标</div><div class=\"line\">- width ： 清除矩形矩形的宽</div><div class=\"line\">- height ： 清除矩形矩形的高</div></pre></td></tr></table></figure></p>\n<p>var canvas = document.getElementById(‘canvas’);<br>var context = canvas.getContext(“2d”);<br>context.fillRect(0, 0, 100, 100);<br>context.strokeRect(120, 0, 100, 100);<br>context.fillStyle = “pink”;<br>context.strokeStyle = “darkred”;<br>context.fillRect(0, 120, 100, 100);<br>context.strokeRect(120, 120, 100, 100);<br>context.clearRect( 50,50,120,120)</p>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170803201130050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"清除矩形\"></p>\n<h2 id=\"实心圆\"><a href=\"#实心圆\" class=\"headerlink\" title=\"实心圆\"></a>实心圆</h2><p><code>context.arc(x, y, radius, starAngle,endAngle, anticlockwise)</code></p>\n<ul>\n<li>x : 圆心的 x 坐标</li>\n<li>y：圆心的 y 坐标</li>\n<li>radius ： 半径</li>\n<li>starAngle ：开始角度</li>\n<li>endAngle：结束角度</li>\n<li>anticlockwise ：是否逆时针（true）为逆时针，(false)为顺时针<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(300, 350, 100, 0, Math.PI * 2, true);</div><div class=\"line\">//不关闭路径路径会一直保留下去</div><div class=\"line\">context.closePath();</div><div class=\"line\">context.fillStyle = &apos;rgba(0,255,0,0.25)&apos;;</div><div class=\"line\">context.fill();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170803201728632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制圆弧\"></p>\n<h2 id=\"圆弧\"><a href=\"#圆弧\" class=\"headerlink\" title=\"圆弧\"></a>圆弧</h2><p>如果不填充颜色，实心圆就是圆弧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(600, 350, 100, 0, Math.PI , true);</div><div class=\"line\">context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">context.closePath();</div><div class=\"line\">context.stroke();</div><div class=\"line\">   </div><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(300, 350, 100, 0, Math.PI , true);</div><div class=\"line\">context.strokeStyle = &apos;red&apos;;</div><div class=\"line\">//没有closePath</div><div class=\"line\">context.stroke();</div></pre></td></tr></table></figure></p>\n<p>效果如图：<br><img src=\"http://img.blog.csdn.net/20170804121122961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制圆弧\"></p>\n<ul>\n<li>系统默认在绘制第一个路径的开始点为beginPath</li>\n<li>如果画完前面的路径没有重新指定beginPath，那么画第其他路径的时候会将前面最近指定的beginPath后的全部路径重新绘制</li>\n<li>每次调用context.fill（）的时候会自动把当次绘制的路径的开始点和结束点相连，接着填充封闭的部分</li>\n</ul>\n<p>所以说，如果第一个圆弧没有 <code>closePath()</code> 并且第二个圆弧没有 <code>beginPath()</code> 的话就是这样的效果：</p>\n<p><img src=\"http://img.blog.csdn.net/20170804121543455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制矩形\"></p>\n<h2 id=\"绘制线段\"><a href=\"#绘制线段\" class=\"headerlink\" title=\"绘制线段\"></a>绘制线段</h2><ul>\n<li><code>moveTo(x,y)</code>：把路径移动到画布中的指定点，不创建线条</li>\n<li><code>lineTo(x,y)</code>：添加一个新点，然后在画布中创建从该点到最后指定点的线条</li>\n<li>每次画线都从 moveTo 的点到 lineTo 的点，</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">context.moveTo(0, 0);</div><div class=\"line\">context.lineTo(100, 100);</div><div class=\"line\">context.stroke();*/</div></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"http://img.blog.csdn.net/20170804121929082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制片段\"><br><strong>如果没有 moveTo 那么第一次 lineTo 的效果和 moveTo 一样，</strong><br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">context.lineTo(100, 100);</div><div class=\"line\">context.lineTo(200, 200);</div><div class=\"line\">context.stroke();*/</div></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"http://img.blog.csdn.net/20170804122123451?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制线段\"><br><strong>每次lineTo后如果没有moveTo，那么下次lineTo的开始点为前一次lineTo的结束点</strong><br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 绘制片段</div><div class=\"line\">    context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">    context.lineTo(200, 200);</div><div class=\"line\">    context.lineTo(200, 100);</div><div class=\"line\">    context.lineTo(100,50);</div><div class=\"line\">    context.stroke();</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"http://img.blog.csdn.net/20170804122231176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制线段\"><br>我们可以使用 canvas 的线段绘制各种各样的图形，比如绘制一个六边形<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var n = 0;</div><div class=\"line\">    var dx = 150;</div><div class=\"line\">    var dy = 150;</div><div class=\"line\">    var s = 100;</div><div class=\"line\">    context.beginPath();</div><div class=\"line\">    context.fillStyle = &apos;pink&apos;;</div><div class=\"line\">    context.strokeStyle = &apos;rgb(0,0,100)&apos;;</div><div class=\"line\">    var x = Math.sin(0);</div><div class=\"line\">    var y = Math.cos(0);</div><div class=\"line\">    var dig = Math.PI / 15 * 5;</div><div class=\"line\">    for (var i = 0; i &lt; 6; i++) &#123;</div><div class=\"line\">        var x = Math.sin(i * dig);</div><div class=\"line\">        var y = Math.cos(i * dig);</div><div class=\"line\">        context.lineTo(dx + x * s, dy + y * s);</div><div class=\"line\">        console.log( x ,y )</div><div class=\"line\">    &#125;</div><div class=\"line\">    context.closePath();</div><div class=\"line\">    context.fill();</div><div class=\"line\">    context.stroke();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170804151434159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"使用canvas绘制六边形\"><br>绘制 30 角形：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var n = 0;</div><div class=\"line\">    var dx = 150;</div><div class=\"line\">    var dy = 150;</div><div class=\"line\">    var s = 100;</div><div class=\"line\">    context.beginPath();</div><div class=\"line\">    context.fillStyle = &apos;pink&apos;;</div><div class=\"line\">    context.strokeStyle = &apos;rgb(0,0,100)&apos;;</div><div class=\"line\">    var x = Math.sin(0);</div><div class=\"line\">    var y = Math.cos(0);</div><div class=\"line\">    var dig = Math.PI / 15 * 7;</div><div class=\"line\">    for (var i = 0; i &lt; 30; i++) &#123;</div><div class=\"line\">        var x = Math.sin(i * dig);</div><div class=\"line\">        var y = Math.cos(i * dig);</div><div class=\"line\">        context.lineTo(dx + x * s, dy + y * s);</div><div class=\"line\">        console.log( x ,y )</div><div class=\"line\">    &#125;</div><div class=\"line\">    context.closePath();</div><div class=\"line\">    context.fill();</div><div class=\"line\">    context.stroke();</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn\n.net/20170804152344651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制 30 脚形\"></p>\n<h2 id=\"线性渐变\"><a href=\"#线性渐变\" class=\"headerlink\" title=\"线性渐变\"></a>线性渐变</h2><p><code>var lg= context.createLinearGradient(xStart,yStart,xEnd,yEnd)</code><br><code>lg.addColorStop(offset,color)</code></p>\n<ul>\n<li>xstart:渐变开始点x坐标</li>\n<li>ystart:渐变开始点y坐标</li>\n<li>xEnd:渐变结束点x坐标</li>\n<li>yEnd:渐变结束点y坐标</li>\n<li>offset:设定的颜色离渐变结束点的偏移量(0~1)</li>\n<li>color:绘制时要使用的颜色</li>\n</ul>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var g1 = context.createLinearGradient(0, 0, 0, 300);</div><div class=\"line\">g1.addColorStop(0, &apos;#E55D87&apos;); </div><div class=\"line\">g1.addColorStop(1, &apos;#5FC3E4&apos;);</div><div class=\"line\">context.fillStyle = g1;</div><div class=\"line\">context.fillRect(0, 0, 400, 300);</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170804164331469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制渐变\"></p>\n<h2 id=\"径向渐变\"><a href=\"#径向渐变\" class=\"headerlink\" title=\"径向渐变\"></a>径向渐变</h2><p><code>var rg=context.createRadialGradient(xStart,yStart,radiusStart,xEnd,yEnd,radiusEnd)</code><br><code>rg.addColorStop(offset,color)</code></p>\n<ul>\n<li>xStart：发散开始圆心x坐标</li>\n<li>yStart：发散开始圆心y坐标</li>\n<li>radiusStart：发散开始圆的半径</li>\n<li>xEnd：发散结束圆心的x坐标</li>\n<li>yEnd：发散结束圆心的y坐标</li>\n<li>radiusEnd：发散结束圆的半径</li>\n<li>offset：设定的颜色离渐变结束点的偏移量(0~1)</li>\n<li>color：绘制时要使用的颜色</li>\n</ul>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080314164328.png\" alt=\"径向渐变原理\"><br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 同心圆径向渐变</div><div class=\"line\">    var g1 = context.createRadialGradient(200, 150, 0, 200, 150, 200);</div><div class=\"line\">    g1.addColorStop(0.1, &apos;#F09819&apos;);</div><div class=\"line\">    g1.addColorStop(1, &apos;#EDDE5D&apos;);</div><div class=\"line\">    context.fillStyle = g1;</div><div class=\"line\">    context.beginPath();</div><div class=\"line\">    context.arc(200, 150, 100, 0, Math.PI * 2, true);</div><div class=\"line\">    context.closePath();</div><div class=\"line\">    context.fill();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170804172346775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制同心圆径向渐变\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//不同圆心的径向渐变模型</div><div class=\"line\">    var g1 = context.createRadialGradient(100, 150, 10, 300, 150, 80);</div><div class=\"line\">    g1.addColorStop(0.1, &apos;#F09819&apos;);</div><div class=\"line\">    g1.addColorStop(0.8, &apos;red&apos;);</div><div class=\"line\">    g1.addColorStop(1, &apos;#EDDE5D&apos;);</div><div class=\"line\"></div><div class=\"line\">    context.fillStyle = g1;</div><div class=\"line\">    context.fillRect(0, 0, 300, 500);</div></pre></td></tr></table></figure></p>\n<p>效果图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170804175425719?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"不同圆心径向渐变\"></p>\n<h2 id=\"图形变形\"><a href=\"#图形变形\" class=\"headerlink\" title=\"图形变形\"></a>图形变形</h2><h3 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h3><p><code>scale(x,y)</code></p>\n<ul>\n<li>x ：x坐标轴按 x 比例缩放</li>\n<li>y ：x坐标轴按 y 比例缩放</li>\n</ul>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><p><code>rotate(angle)</code></p>\n<ul>\n<li>angle ：坐标轴旋转x角度（角度变化模型和画圆的模型一样）</li>\n</ul>\n<h3 id=\"平移\"><a href=\"#平移\" class=\"headerlink\" title=\"平移\"></a>平移</h3><p><code>translate(x,y)</code></p>\n<ul>\n<li>x ：坐标原点向x轴方向平移x</li>\n<li>y ：坐标原点向y轴方向平移y</li>\n</ul>\n<p>平移，缩放，旋转先后顺序不同，坐标轴的变化图，图片来源于网络：</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080316350654.png\" alt=\"平移缩放旋转先后顺序不同坐标轴的变化图\"></p>\n<h2 id=\"图形组合\"><a href=\"#图形组合\" class=\"headerlink\" title=\"图形组合\"></a>图形组合</h2><p><code>globalCompositeOperation=type</code><br>设置或返回新图像如何绘制到已有的图像上。最后的效果取决于 type 的值<br>type：</p>\n<ul>\n<li>source-over（默认值）:在原有图形上绘制新图形</li>\n<li>destination-over:在原有图形下绘制新图形</li>\n<li>source-in:显示原有图形和新图形的交集，新图形在上，所以颜色为新图形的颜色</li>\n<li>destination-in:显示原有图形和新图形的交集，原有图形在上，所以颜色为原有图形的颜色</li>\n<li>source-out:只显示新图形非交集部分</li>\n<li>destination-out:只显示原有图形非交集部分</li>\n<li>source-atop:显示原有图形和交集部分，新图形在上，所以交集部分的颜色为新图形的颜色</li>\n<li>destination-atop:显示新图形和交集部分，新图形在下，所以交集部分的颜色为原有图形的颜色</li>\n<li>lighter:原有图形和新图形都显示，交集部分做颜色叠加</li>\n<li>xor:重叠飞部分不现实</li>\n<li>copy:只显示新图形<br>效果图如下，图片来源于网络</li>\n</ul>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080317515321.png\" alt=\"效果图\"></p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">shadowOffsetX：设置或返回阴影距形状的水平距离（默认值为 0）</div><div class=\"line\">shadowOffsetY：设置或返回阴影距形状的垂直距离（默认值为 0）</div><div class=\"line\">shadowColor：设置或返回用于阴影的颜色</div><div class=\"line\">shadowBlur：设置或返回用于阴影的模糊级别（值越大越模糊）</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.fillStyle = &apos;white&apos;;</div><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(100,100,10,0,2 * Math.PI);</div><div class=\"line\">context.shadowColor = &apos;white&apos;;</div><div class=\"line\">context.shadowBlur = 10;</div><div class=\"line\">context.fill();</div><div class=\"line\">context.closePath();</div></pre></td></tr></table></figure>\n<p>我们看到的效果就是我们在开头提起的例子中的 star 粒子的效果，因为其有白色阴影的效果，所以看起来像是发光一样，效果如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170805132804029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"带阴影效果的圆形\"></p>\n<h2 id=\"图像绘制\"><a href=\"#图像绘制\" class=\"headerlink\" title=\"图像绘制\"></a>图像绘制</h2><p><code>drawImage()</code><br>向画布上绘制图像、画布或视频</p>\n<ul>\n<li>在画布上定位图像：<code>context.drawImage(img,x,y);</code></li>\n<li>在画布上定位图像，并规定图像的宽度和高度：<code>context.drawImage(img,x,y,width,height);</code> </li>\n<li>剪切图像，并在画布上定位被剪切的部分：<code>context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</code></li>\n<li><code>img</code>：规定要使用的图像、画布或视频。</li>\n<li><code>sx</code>：可选。开始剪切的 x 坐标位置。</li>\n<li><code>sy</code>：可选。开始剪切的 y 坐标位置。</li>\n<li><code>swidth</code>：可选。被剪切图像的宽度。</li>\n<li><code>sheight</code>：可选。被剪切图像的高度。</li>\n<li><code>x</code>：在画布上放置图像的 x 坐标位置。</li>\n<li><code>y</code>：在画布上放置图像的 y 坐标位置。</li>\n<li><code>width</code>：可选。要使用的图像的宽度。（伸展或缩小图像）</li>\n<li><code>height</code>：可选。要使用的图像的高度。（伸展或缩小图像）</li>\n</ul>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080410231479.png\" alt=\"canvas绘制图形例子\"></p>\n<h2 id=\"图像平铺\"><a href=\"#图像平铺\" class=\"headerlink\" title=\"图像平铺\"></a>图像平铺</h2><p><code>createPattern(image,type)</code><br>type:</p>\n<ul>\n<li>no-repeat:不平铺</li>\n<li>repeat-x:横方向平铺</li>\n<li>repeat-y:纵方向平铺</li>\n<li>repeat:全方向平铺</li>\n</ul>\n<h2 id=\"图像裁剪\"><a href=\"#图像裁剪\" class=\"headerlink\" title=\"图像裁剪\"></a>图像裁剪</h2><p><code>clip()</code>从原始画布剪切任意形状和尺寸的区域，需要先创建裁剪区域，再绘制图像；一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置剪切区域（粉色矩形）</div><div class=\"line\">context.rect(0,0,500,400);</div><div class=\"line\">context.fillStyle = &quot;pink&quot;;</div><div class=\"line\">context.fill();</div><div class=\"line\">context.clip();</div><div class=\"line\"></div><div class=\"line\">// 在剪切区域中绘制图形（白色矩形）</div><div class=\"line\">context.fillStyle = &quot;white&quot;;</div><div class=\"line\">context.fillRect(10,10,100,100);</div><div class=\"line\"></div><div class=\"line\">// 之后绘制的图形只能显示在剪切区域之内（红色矩形）</div><div class=\"line\">context.fillStyle = &quot;red&quot;;</div><div class=\"line\">context.fillRect(100,100,600,600)</div></pre></td></tr></table></figure>\n<p>效果如下：可以看到我们设置的红色矩形是一个 600<em>600 的矩形，但是显然是没有显示完的，<em>*一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。</em></em></p>\n<p><img src=\"http://img.blog.csdn.net/20170805163432597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas进行图像剪切\"></p>\n<p>所以说我们可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.save();</div><div class=\"line\">    // 设置剪切区域</div><div class=\"line\">    context.rect(0,0,500,400);</div><div class=\"line\">    context.fillStyle = &quot;pink&quot;;</div><div class=\"line\">    context.fill();</div><div class=\"line\">    context.clip();</div><div class=\"line\"></div><div class=\"line\">    // 在剪切区域中绘制图形</div><div class=\"line\">    context.fillStyle = &quot;white&quot;;</div><div class=\"line\">    context.fillRect(10,10,100,100);</div><div class=\"line\"></div><div class=\"line\">    context.restore();</div><div class=\"line\">    // 之后绘制的图形只能显示在剪切区域之内</div><div class=\"line\">    context.fillStyle = &quot;red&quot;;</div><div class=\"line\">    context.fillRect(100,100,600,600)</div></pre></td></tr></table></figure>\n<p>这样就可以正常显示了：</p>\n<p><img src=\"http://img.blog.csdn.net/20170805163713137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas进行图像裁剪\"></p>\n<h2 id=\"绘制文字\"><a href=\"#绘制文字\" class=\"headerlink\" title=\"绘制文字\"></a>绘制文字</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillText(text,x,y)：绘制实心文字</div><div class=\"line\">strokeText()：绘制文字描边（空心）</div><div class=\"line\">textAlign：设置或返回文本内容的当前对齐方式</div><div class=\"line\">textBaseline：设置或返回在绘制文本时使用的当前文本基线</div><div class=\"line\">font：设置或返回文本内容的当前字体属性</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.font=&quot;40px Arial&quot;;</div><div class=\"line\">context.fillText(&quot;Hello world&quot;,200,200);</div><div class=\"line\">context.strokeText(&quot;Hello world&quot;,200,300)</div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170806152010585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制文字\"></p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><blockquote>\n<p>好的开始是成功的一半</p>\n</blockquote>\n<p>简单介绍了下 canvas 的常用 api，大家发现是不是也没有那么难呢~(￣▽￣)~*，那么让我们回到标题，一起来看一下这个少女心满满的例子是怎样实现的~</p>\n<p>canvas 其实写一个炫酷的特效在技术上并不难，难的是你的创意，因为 canvas 实现粒子的效果还是比较惊艳的，但其实代码都是比较简单的，无非就是随机的创建图形或者路径，当然图形也是闭合的路径。在加上一定的位移就可以了。但是你要设计出一个好的特效是非常不容易的。</p>\n<p>所以我们就先来分析一下这个效果由那几部分构成，将其拆分开来。</p>\n<p>特效pc端演示地址：<a href=\"https://sunshine940326.github.io/canvasStar/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/canvasStar/</a> （当然，可以直接查看我的博客，背景暂时就是这个，不知道什么时候会变，捂脸ing：<a href=\"http://cherryblog.site/）\">http://cherryblog.site/）</a></p>\n<h2 id=\"分析-star-的表现和行为\"><a href=\"#分析-star-的表现和行为\" class=\"headerlink\" title=\"分析 star 的表现和行为\"></a>分析 star 的表现和行为</h2><p>我们可以将其一直位移向上的粒子称为 star，我们观察 star 的特点：</p>\n<ul>\n<li>开始创建时位置随机（坐标随机）</li>\n<li>透明度随机</li>\n<li>创建时的大小在一定范围内（半径在一定范围内）</li>\n<li>匀速上升</li>\n<li>总数不变</li>\n</ul>\n<p>所以我们就可以总结出 star 的特点就是总数固定，创建时坐标和半径还有透明度随机，匀速上升。是不是很简单了呢~[]~(￣▽￣)~*</p>\n<h2 id=\"分析-dot-的表现和行为\"><a href=\"#分析-dot-的表现和行为\" class=\"headerlink\" title=\"分析 dot 的表现和行为\"></a>分析 dot 的表现和行为</h2><p>再让我们来看一下随着鼠标移入产生的粒子，我们称为 dot，同理，我们观察得到 dot 的特点</p>\n<ul>\n<li>列表内容</li>\n<li>鼠标移动时产生</li>\n<li>新产生的 dot 和之前的 3 个 dot 产生连线</li>\n<li>向四周移动</li>\n<li>达到一定条件消失</li>\n</ul>\n<p>这样，我们就完成了一半了呢~将事件屡清楚之后我们就可以开始着手撸代码了！</p>\n<h2 id=\"背景的-HTML-和-CSS\"><a href=\"#背景的-HTML-和-CSS\" class=\"headerlink\" title=\"背景的 HTML 和 CSS\"></a>背景的 HTML 和 CSS</h2><p>其实需要的 HTML 代码和 CSS 代码很简答的，HTML 只需要一行就可以了呢，设置一个渐变的背景蒙层和一个 <code>canvas</code> 标签。</p>\n<p>HTML 和 CSS 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;filter&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\"></div><div class=\"line\">html, body &#123;</div><div class=\"line\">            margin: 0;</div><div class=\"line\">            padding: 0;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">            overflow: hidden;</div><div class=\"line\">            background: black;</div><div class=\"line\">            background: linear-gradient(to bottom, #dcdcdc 0%, palevioletred 100%);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        #main-canvas &#123;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        .filter &#123;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">            position: absolute;</div><div class=\"line\">            top: 0;</div><div class=\"line\">            left: 0;</div><div class=\"line\">            background: #fe5757;</div><div class=\"line\">            animation: colorChange 30s ease-in-out infinite;</div><div class=\"line\">            animation-fill-mode: both;</div><div class=\"line\">            mix-blend-mode: overlay;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @keyframes colorChange &#123;</div><div class=\"line\">            0%, 100% &#123;</div><div class=\"line\">                opacity: 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            50% &#123;</div><div class=\"line\">                opacity: .7;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>是的，我使用的是一个渐变的背景，不仅是从上到下的渐变，并且颜色也是会渐变的，效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170806160547970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"渐变背景\"></p>\n<h1 id=\"设置参数以及获取-dom-对象\"><a href=\"#设置参数以及获取-dom-对象\" class=\"headerlink\" title=\"设置参数以及获取 dom 对象\"></a>设置参数以及获取 dom 对象</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * @var star_r：star半径系数，系数越大，半径越大</div><div class=\"line\"> * @var star_alpha：生成star的透明度，star_alpha越大，透明度越低</div><div class=\"line\"> * @var initStarsPopulation：初始化stars的个数</div><div class=\"line\"> * @var move_distance：star位移的距离，数值越大，位移越大</div><div class=\"line\"> * @var dot_r : dot半径系数，系数越大，半径越大</div><div class=\"line\"> * @var dot_speeds : dots运动的速度</div><div class=\"line\"> * @var dot_alpha : dots的透明度</div><div class=\"line\"> * @var aReduction：dot消失条件，透明度小于aReduction时消失</div><div class=\"line\"> * @var dotsMinDist：dot最小距离</div><div class=\"line\"> * @var maxDistFromCursor：dot最大距离</div><div class=\"line\"> * */</div><div class=\"line\">var config = &#123;</div><div class=\"line\">    star_r : 3,</div><div class=\"line\">    star_alpha : 5,</div><div class=\"line\">    initStarsPopulation : 150,</div><div class=\"line\">    move_distance : 0.25,</div><div class=\"line\">    dot_r : 5,</div><div class=\"line\">    dot_speeds : 0.5,</div><div class=\"line\">    dot_alpha : 0.5,</div><div class=\"line\">    dot_aReduction : 0.01,</div><div class=\"line\">    dotsMinDist : 5,</div><div class=\"line\">    maxDistFromCursor : 50,</div><div class=\"line\">&#125;;</div><div class=\"line\">var stars = [],</div><div class=\"line\">    dots = [],</div><div class=\"line\">    canvas = document.getElementById(&apos;canvas&apos;),</div><div class=\"line\">    ctx = canvas.getContext(&apos;2d&apos;),</div><div class=\"line\">    WIDTH,</div><div class=\"line\">    HEIGHT,</div><div class=\"line\">    mouseMoving = false,</div><div class=\"line\">    mouseMoveChecker,</div><div class=\"line\">    mouseX,</div><div class=\"line\">    mouseY;</div></pre></td></tr></table></figure>\n<h1 id=\"绘制单个-star\"><a href=\"#绘制单个-star\" class=\"headerlink\" title=\"绘制单个 star\"></a>绘制单个 star</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 设置单个 star</div><div class=\"line\"> * @param id：id</div><div class=\"line\"> * @param x：x坐标</div><div class=\"line\"> * @param y：y坐标</div><div class=\"line\"> * @param useCache：是否使用缓存</div><div class=\"line\"> * */</div><div class=\"line\">function Star(id, x, y) &#123;</div><div class=\"line\">    this.id = id;</div><div class=\"line\">    this.x = x;</div><div class=\"line\">    this.y = y;</div><div class=\"line\">    this.cacheCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">    this.cacheCtx = this.cacheCanvas.getContext(&quot;2d&quot;);</div><div class=\"line\">    this.r = Math.floor(Math.random() * star_r) + 1;</div><div class=\"line\">    this.cacheCtx.width = 6 * this.r;</div><div class=\"line\">    this.cacheCtx.height = 6 * this.r;</div><div class=\"line\">    var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;</div><div class=\"line\">    this.color = &quot;rgba(255,255,255,&quot; + alpha + &quot;)&quot;;</div><div class=\"line\">    if (useCache) &#123;</div><div class=\"line\">        this.cache()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"让每一个-star-动起来\"><a href=\"#让每一个-star-动起来\" class=\"headerlink\" title=\"让每一个 star 动起来\"></a>让每一个 star 动起来</h1><p>这里我使用的是原型的方式，将 <code>draw</code>、<code>cache</code>、<code>move</code> 和 <code>die</code> 方法都设置在 <code>Star</code> 的原型上，这样在使用 <code>new</code> 创建对象的时候，每一个 star 都可以继承这些方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">Star.prototype = &#123;</div><div class=\"line\">        draw : function () &#123;</div><div class=\"line\">            if (!this.useCacha) &#123;</div><div class=\"line\">                ctx.save();</div><div class=\"line\">                ctx.fillStyle = this.color;</div><div class=\"line\">                ctx.shadowBlur = this.r * 2;</div><div class=\"line\">                ctx.beginPath();</div><div class=\"line\">                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);</div><div class=\"line\">                ctx.closePath();</div><div class=\"line\">                ctx.fill();</div><div class=\"line\">                ctx.restore();</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                ctx.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        cache : function () &#123;</div><div class=\"line\">            this.cacheCtx.save();</div><div class=\"line\">            this.cacheCtx.fillStyle = this.color;</div><div class=\"line\">            this.cacheCtx.shadowColor = &quot;white&quot;;</div><div class=\"line\">            this.cacheCtx.shadowBlur = this.r * 2;</div><div class=\"line\">            this.cacheCtx.beginPath();</div><div class=\"line\">            this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);</div><div class=\"line\">            this.cacheCtx.closePath();</div><div class=\"line\">            this.cacheCtx.fill();</div><div class=\"line\">            this.cacheCtx.restore();</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        move : function () &#123;</div><div class=\"line\">            this.y -= move_distance;</div><div class=\"line\">            if (this.y &lt;= -10) &#123;</div><div class=\"line\">                this.y += HEIGHT + 10;</div><div class=\"line\">            &#125;</div><div class=\"line\">            this.draw();</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        die : function () &#123;</div><div class=\"line\">            stars[this.id] = null;</div><div class=\"line\">            delete stars[this.id]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"绘制-dot\"><a href=\"#绘制-dot\" class=\"headerlink\" title=\"绘制 dot\"></a>绘制 dot</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Dot(id, x, y, useCache) &#123;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.floor(Math.random() * dot_r)+1;</div><div class=\"line\">        this.speed = dot_speeds;</div><div class=\"line\">        this.a = dot_alpha;</div><div class=\"line\">        this.aReduction = dot_aReduction;</div><div class=\"line\">        this.useCache = useCache;</div><div class=\"line\">        this.dotCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">        this.dotCtx = this.dotCanvas.getContext(&quot;2d&quot;);</div><div class=\"line\">        this.dotCtx.width = 6 * this.r;</div><div class=\"line\">        this.dotCtx.height = 6 * this.r;</div><div class=\"line\">        this.dotCtx.a = 0.5;</div><div class=\"line\">        this.color = &quot;rgba(255,255,255,&quot; + this.a +&quot;)&quot;;</div><div class=\"line\">        this.dotCtx.color = &quot;rgba(255,255,255,&quot; + this.dotCtx.a + &quot;)&quot;;</div><div class=\"line\">        this.linkColor = &quot;rgba(255,255,255,&quot; + this.a/4 + &quot;)&quot;;</div><div class=\"line\">        this.dir = Math.floor(Math.random()*140)+200;</div><div class=\"line\"></div><div class=\"line\">        if( useCache)&#123;</div><div class=\"line\">            this.cache()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"让每一个-dot-动起来\"><a href=\"#让每一个-dot-动起来\" class=\"headerlink\" title=\"让每一个 dot 动起来\"></a>让每一个 dot 动起来</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dot.prototype = &#123;</div><div class=\"line\">        draw : function () &#123;</div><div class=\"line\">            if( !this.useCache)&#123;</div><div class=\"line\">                ctx.save();</div><div class=\"line\">                ctx.fillStyle = this.color;</div><div class=\"line\">                ctx.shadowColor = &quot;white&quot;;</div><div class=\"line\">                ctx.shadowBlur = this.r * 2;</div><div class=\"line\">                ctx.beginPath();</div><div class=\"line\">                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);</div><div class=\"line\">                ctx.closePath();</div><div class=\"line\">                ctx.fill();</div><div class=\"line\">                ctx.restore();</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                ctx.drawImage(this.dotCanvas, this.x - this.r * 3, this.y - this.r *3);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        cache : function () &#123;</div><div class=\"line\">            this.dotCtx.save();</div><div class=\"line\">            this.dotCtx.a  -= this.aReduction;</div><div class=\"line\">            this.dotCtx.color = &quot;rgba(255,255,255,&quot; + this.dotCtx.a + &quot;)&quot;;</div><div class=\"line\">            this.dotCtx.fillStyle = this.dotCtx.color;</div><div class=\"line\">            this.dotCtx.shadowColor = &quot;white&quot;;</div><div class=\"line\">            this.dotCtx.shadowBlur = this.r * 2;</div><div class=\"line\">            this.dotCtx.beginPath();</div><div class=\"line\">            this.dotCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI, false);</div><div class=\"line\">            this.dotCtx.closePath();</div><div class=\"line\">            this.dotCtx.fill();</div><div class=\"line\">            this.dotCtx.restore();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        link : function () &#123;</div><div class=\"line\">            if (this.id == 0) return;</div><div class=\"line\">            var previousDot1 = getPreviousDot(this.id, 1);</div><div class=\"line\">            var previousDot2 = getPreviousDot(this.id, 2);</div><div class=\"line\">            var previousDot3 = getPreviousDot(this.id, 3);</div><div class=\"line\">            var previousDot4 = getPreviousDot(this.id, 4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            if (!previousDot1) return;</div><div class=\"line\">            ctx.strokeStyle = this.linkColor;</div><div class=\"line\">            ctx.moveTo(previousDot1.x, previousDot1.y);</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            ctx.lineTo(this.x, this.y);</div><div class=\"line\">            if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);</div><div class=\"line\">            if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);</div><div class=\"line\">            if (previousDot4 != false) ctx.lineTo(previousDot4.x, previousDot4.y);</div><div class=\"line\"></div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        move : function () &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            this.a -= this.aReduction;</div><div class=\"line\">            if(this.a &lt;= 0 )&#123;</div><div class=\"line\">                this.die();</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\">            this.dotCtx.a  -= this.aReduction;</div><div class=\"line\">            this.dotCtx.color = &quot;rgba(255,255,255,&quot; + this.dotCtx.a + &quot;)&quot;;</div><div class=\"line\">            this.color = &quot;rgba(255,255,255,&quot; + this.a + &quot;)&quot;;</div><div class=\"line\">            this.linkColor = &quot;rgba(255,255,255,&quot; + this.a/4 + &quot;)&quot;;</div><div class=\"line\">            this.x = this.x + Math.cos(degToRad(this.dir)) * this.speed;</div><div class=\"line\">            this.y = this.y + Math.sin(degToRad(this.dir)) * this.speed;</div><div class=\"line\"></div><div class=\"line\">            this.draw();</div><div class=\"line\">            this.link();</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        die : function () &#123;</div><div class=\"line\">            dots[this.id] = null;</div><div class=\"line\">            delete dots[this.id];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"鼠标移入事件监听\"><a href=\"#鼠标移入事件监听\" class=\"headerlink\" title=\"鼠标移入事件监听\"></a>鼠标移入事件监听</h1><p>此外，我们还需要设置一些其他的函数和对鼠标移入事件的监听，这里就不再赘述了，感兴趣的同学可以直接到 github 下载源码。</p>\n<h1 id=\"canvas-离屏渲染优化\"><a href=\"#canvas-离屏渲染优化\" class=\"headerlink\" title=\"canvas 离屏渲染优化\"></a>canvas 离屏渲染优化</h1><p>我所使用的离屏优化是基于此文，原文写的很好，大家感兴趣的话可以去看一下：<a href=\"http://www.cnblogs.com/axes/p/3567364.html?utm_source=tuicool&amp;utm_medium=referral。\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/axes/p/3567364.html?utm_source=tuicool&amp;utm_medium=referral。</a><br>因为这个效果之前我也在博客用当做背景过，不少同学都反应很卡，所以我就找了下优化的教程做了下优化，我发现对性能影响最大的可能就是 canvas 的离屏渲染优化了，这也是 canvas 的最常见优化之一。</p>\n<p>名字听起来很复杂，什么离屏渲染，其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.</p>\n<blockquote>\n<p>建立两个 canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入dom中），先将结果draw缓存用的canvas上下文中，因为游离canvas不会造成ui的渲染，所以它不会展现出来，再把缓存的内容整个裁剪再 draw 到正常显示用的 canvas 上，这样能优化不少。</p>\n</blockquote>\n<p>其实已经体现在上述的代码中的，比如，创建 star 的代码中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 设置单个star</div><div class=\"line\">    * @param id：id</div><div class=\"line\">    * @param x：x坐标</div><div class=\"line\">    * @param y：y坐标</div><div class=\"line\">    * @param useCache：是否使用缓存</div><div class=\"line\">    * */</div><div class=\"line\">   function Star(id, x, y, useCache) &#123;</div><div class=\"line\">       this.id = id;</div><div class=\"line\">       this.x = x;</div><div class=\"line\">       this.y = y;</div><div class=\"line\">       this.useCacha = useCache;</div><div class=\"line\">       this.cacheCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">       this.cacheCtx = this.cacheCanvas.getContext(&quot;2d&quot;);</div><div class=\"line\">       this.r = Math.floor(Math.random() * star_r) + 1;</div><div class=\"line\">       this.cacheCtx.width = 6 * this.r;</div><div class=\"line\">       this.cacheCtx.height = 6 * this.r;</div><div class=\"line\">       var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;</div><div class=\"line\">       this.color = &quot;rgba(255,255,255,&quot; + alpha + &quot;)&quot;;</div><div class=\"line\">       if (useCache) &#123;</div><div class=\"line\">           this.cache()</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>细心的同学可能就会发现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.cacheCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">this.cacheCtx = this.cacheCanvas.getContext(&quot;2d&quot;);</div></pre></td></tr></table></figure>\n<p>这段代码就是又创建了一个 canvas 标签，然后再 star 的原型中有一个 cache 方法，这个 cache 方法就是在刚刚创建的 canvas 中绘制 star，而不是直接在原来的 canvas 画布中绘制的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cache : function () &#123;</div><div class=\"line\">    this.cacheCtx.save();</div><div class=\"line\">    this.cacheCtx.fillStyle = this.color;</div><div class=\"line\">    this.cacheCtx.shadowColor = &quot;white&quot;;</div><div class=\"line\">    this.cacheCtx.shadowBlur = this.r * 2;</div><div class=\"line\">    this.cacheCtx.beginPath();</div><div class=\"line\">    this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);</div><div class=\"line\">    this.cacheCtx.closePath();</div><div class=\"line\">    this.cacheCtx.fill();</div><div class=\"line\">    this.cacheCtx.restore();</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>之后我们需要将我们绘制的离屏 canvas 使用 <code>drawImage</code> 方法插入到我们最先开始创建的 canvas 画布中。</p>\n<p>这里要注意的是，创建的离屏 canvas 的大小，因为太大的话同样会浪费性能，所以我们可以创建和我们每一个 star 粒子相同的 canvas ，但是这个例子中不适用，要将离屏的 canvas 设置的稍微大一些，因为我们还需要设置发光的效果（也就是设置阴影）。</p>\n<h1 id=\"发福利\"><a href=\"#发福利\" class=\"headerlink\" title=\"发福利\"></a>发福利</h1><p>发福利的时间到了~╰(￣▽￣)╭，很多小伙伴对 canvas 不是很感兴趣，但是想直接使用这个效果，于是我就将其封装起来，你只需要引入这个 JS，在 HTML 中添加一个 id 为 canvas 的标签，然后设置相应的 CSS 就可以~</p>\n<blockquote>\n<p>github 下载地址：<a href=\"https://github.com/sunshine940326/canvasStar\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvasStar</a></p>\n</blockquote>\n<p>在 README 中有使用方法~因为是第一次自己封装函数，自己一个人在不停的摸索中前进，所以还有很多的不足，希望有大神可以指点一二~</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170801184128503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas入门\"></p>\n<blockquote>\n<p>本文首发于我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a><br>github项目地址：<a href=\"https://github.com/sunshine940326/canvasStar\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvasStar</a><br>项目演示地址：<a href=\"https://sunshine940326.github.io/canvasStar/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/canvasStar/</a></p>\n</blockquote>","more":"<p>[toc]</p>\n<p>之前看到了一个很好看的canvas效果，然后拿来做我的博客背景，不少童鞋留言说求教程，并且反应说太耗内存，于是前一段我就重写了一遍，并且使用离屏渲染进行优化，效果还是挺显著的。但是因为毕竟是canvas，需要一直进行重绘，所以还是比较耗内存的，但是比优化之前已经好很多了。并且最近准备自己写插件，于是就拿这个练手了，</p>\n<p>github地址：<a href=\"https://github.com/sunshine940326/canvasStar\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvasStar</a> </p>\n<p>代码还有很多的不足，求大神 review (づ｡◕‿‿◕｡)づ~</p>\n<h1 id=\"canvas-基本知识\"><a href=\"#canvas-基本知识\" class=\"headerlink\" title=\"canvas 基本知识\"></a>canvas 基本知识</h1><h2 id=\"什么是-canvas\"><a href=\"#什么是-canvas\" class=\"headerlink\" title=\"什么是 canvas\"></a>什么是 canvas</h2><p><code>canvas</code> 是 HTML5 新定义的标签，通过使用脚本（通常是 JavaScript）绘制图形。<br><code>&lt;canvas&gt;</code>  标签只是图形容器，相当于一个画布，<code>canvas</code> 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成，相当于使用画笔在画布上画画。</p>\n<p>默认情况下，<code>&lt;canvas&gt;</code> 没有边框和内容。默认是一个 300<em>150 的画布，所以我们创建了 <code>&lt;canvas&gt;</code> 之后要对其设置宽高。<br>**我们可以通过html属性‘width’，‘height’来设置canvas的宽高，不可以通过 css 属性来设置宽高。因为通过 css 属性设置的宽高会使 canvas 内的图像按照 300</em>150 时的比例放大或缩小**</p>\n<h2 id=\"getContext\"><a href=\"#getContext\" class=\"headerlink\" title=\"getContext()\"></a>getContext()</h2><p><code>context</code> 是一个封装了很多绘图功能的对象，我们在页面中创建一个 <code>canvas</code> 标签之后，首先要使用 <code>getContext()</code> 获取 canvas 的上下文环境，目前 <code>getContext()</code> 的参数只有 <code>2d</code>，暂时还不支持 <code>3d</code> </p>\n<p><code>getContext(&quot;2d&quot;)</code> 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p>\n<h2 id=\"canvas-元素绘制图像\"><a href=\"#canvas-元素绘制图像\" class=\"headerlink\" title=\"canvas 元素绘制图像\"></a>canvas 元素绘制图像</h2><p>canvas 创建图形有两种方式</p>\n<h3 id=\"context-fill\"><a href=\"#context-fill\" class=\"headerlink\" title=\"context.fill()\"></a>context.fill()</h3><p><code>fill()</code> 方法填充当前的图像（路径）。默认颜色是黑色。在填充前要先使用 <code>fillStyle</code> 设置填充的颜色或者渐变，并且如果路径未关闭，那么 <code>fill()</code> 方法会从路径结束点到开始点之间添加一条线，以关闭该路径（正如 <code>closePath()</code> 一样），然后填充该路径。</p>\n<h3 id=\"context-stroke\"><a href=\"#context-stroke\" class=\"headerlink\" title=\"context.stroke()\"></a>context.stroke()</h3><p><code>stroke()</code> 方法会实际地绘制出通过 <code>moveTo()</code> 和 <code>lineTo()</code> 方法定义的路径。默认颜色是黑色。在进行图形绘制前，要设置好绘图的样式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillStyle()//填充的样式</div><div class=\"line\">strokeStyle()//边框样式</div><div class=\"line\">context.lineWidth()//图形边框宽度</div></pre></td></tr></table></figure></p>\n<h2 id=\"绘制矩形\"><a href=\"#绘制矩形\" class=\"headerlink\" title=\"绘制矩形\"></a>绘制矩形</h2><p>用 canvas 绘制一个矩形很简单<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillRect(x,y,width,height)  // 实心矩形 </div><div class=\"line\">strokeRect(x,y,width,height)        // 空心矩形</div></pre></td></tr></table></figure></p>\n<ul>\n<li>x ：起始点的 x 坐标</li>\n<li>y ：起始点的 y 坐标</li>\n<li>width ： 矩形的宽</li>\n<li>height ： 矩形的高</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html代码</div><div class=\"line\">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\">//script代码</div><div class=\"line\">   var canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">    var context = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">    context.fillRect(0, 0, 100, 100);</div><div class=\"line\">    context.strokeRect(120, 0, 100, 100);</div></pre></td></tr></table></figure>\n<p>显示如下：<br><img src=\"http://img.blog.csdn.net/20170803192642241?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制矩形有填充颜色\"></p>\n<p>我们可以看出，在没有设置颜色的情况下，默认是黑色的。</p>\n<p>我们还可以通过设置 <code>fillStyle</code> 或者 <code>fillStyle</code> 改变其填充颜色。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.fillStyle = &quot;pink&quot;;</div><div class=\"line\">context.strokeStyle = &quot;darkred&quot;;</div><div class=\"line\">context.fillRect(0, 0, 100, 100);</div><div class=\"line\">context.strokeRect(120, 0, 100, 100);</div></pre></td></tr></table></figure></p>\n<p>效果如下<br><img src=\"http://img.blog.csdn.net/20170803200651020?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制矩形有填充颜色\"></p>\n<h2 id=\"清除矩形区域\"><a href=\"#清除矩形区域\" class=\"headerlink\" title=\"清除矩形区域\"></a>清除矩形区域</h2><p>clearRect(x,y,width,height)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">- x ：清除矩形起始点的 x 坐标</div><div class=\"line\">- y ：清除矩形起始点的 y 坐标</div><div class=\"line\">- width ： 清除矩形矩形的宽</div><div class=\"line\">- height ： 清除矩形矩形的高</div></pre></td></tr></table></figure></p>\n<p>var canvas = document.getElementById(‘canvas’);<br>var context = canvas.getContext(“2d”);<br>context.fillRect(0, 0, 100, 100);<br>context.strokeRect(120, 0, 100, 100);<br>context.fillStyle = “pink”;<br>context.strokeStyle = “darkred”;<br>context.fillRect(0, 120, 100, 100);<br>context.strokeRect(120, 120, 100, 100);<br>context.clearRect( 50,50,120,120)</p>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170803201130050?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"清除矩形\"></p>\n<h2 id=\"实心圆\"><a href=\"#实心圆\" class=\"headerlink\" title=\"实心圆\"></a>实心圆</h2><p><code>context.arc(x, y, radius, starAngle,endAngle, anticlockwise)</code></p>\n<ul>\n<li>x : 圆心的 x 坐标</li>\n<li>y：圆心的 y 坐标</li>\n<li>radius ： 半径</li>\n<li>starAngle ：开始角度</li>\n<li>endAngle：结束角度</li>\n<li>anticlockwise ：是否逆时针（true）为逆时针，(false)为顺时针<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(300, 350, 100, 0, Math.PI * 2, true);</div><div class=\"line\">//不关闭路径路径会一直保留下去</div><div class=\"line\">context.closePath();</div><div class=\"line\">context.fillStyle = &apos;rgba(0,255,0,0.25)&apos;;</div><div class=\"line\">context.fill();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170803201728632?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制圆弧\"></p>\n<h2 id=\"圆弧\"><a href=\"#圆弧\" class=\"headerlink\" title=\"圆弧\"></a>圆弧</h2><p>如果不填充颜色，实心圆就是圆弧<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(600, 350, 100, 0, Math.PI , true);</div><div class=\"line\">context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">context.closePath();</div><div class=\"line\">context.stroke();</div><div class=\"line\">   </div><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(300, 350, 100, 0, Math.PI , true);</div><div class=\"line\">context.strokeStyle = &apos;red&apos;;</div><div class=\"line\">//没有closePath</div><div class=\"line\">context.stroke();</div></pre></td></tr></table></figure></p>\n<p>效果如图：<br><img src=\"http://img.blog.csdn.net/20170804121122961?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制圆弧\"></p>\n<ul>\n<li>系统默认在绘制第一个路径的开始点为beginPath</li>\n<li>如果画完前面的路径没有重新指定beginPath，那么画第其他路径的时候会将前面最近指定的beginPath后的全部路径重新绘制</li>\n<li>每次调用context.fill（）的时候会自动把当次绘制的路径的开始点和结束点相连，接着填充封闭的部分</li>\n</ul>\n<p>所以说，如果第一个圆弧没有 <code>closePath()</code> 并且第二个圆弧没有 <code>beginPath()</code> 的话就是这样的效果：</p>\n<p><img src=\"http://img.blog.csdn.net/20170804121543455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制矩形\"></p>\n<h2 id=\"绘制线段\"><a href=\"#绘制线段\" class=\"headerlink\" title=\"绘制线段\"></a>绘制线段</h2><ul>\n<li><code>moveTo(x,y)</code>：把路径移动到画布中的指定点，不创建线条</li>\n<li><code>lineTo(x,y)</code>：添加一个新点，然后在画布中创建从该点到最后指定点的线条</li>\n<li>每次画线都从 moveTo 的点到 lineTo 的点，</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">context.moveTo(0, 0);</div><div class=\"line\">context.lineTo(100, 100);</div><div class=\"line\">context.stroke();*/</div></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"http://img.blog.csdn.net/20170804121929082?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制片段\"><br><strong>如果没有 moveTo 那么第一次 lineTo 的效果和 moveTo 一样，</strong><br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">context.lineTo(100, 100);</div><div class=\"line\">context.lineTo(200, 200);</div><div class=\"line\">context.stroke();*/</div></pre></td></tr></table></figure>\n<p>效果如下：<br><img src=\"http://img.blog.csdn.net/20170804122123451?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制线段\"><br><strong>每次lineTo后如果没有moveTo，那么下次lineTo的开始点为前一次lineTo的结束点</strong><br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 绘制片段</div><div class=\"line\">    context.strokeStyle = &apos;pink&apos;;</div><div class=\"line\">    context.lineTo(200, 200);</div><div class=\"line\">    context.lineTo(200, 100);</div><div class=\"line\">    context.lineTo(100,50);</div><div class=\"line\">    context.stroke();</div></pre></td></tr></table></figure></p>\n<p>效果如下：<br><img src=\"http://img.blog.csdn.net/20170804122231176?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制线段\"><br>我们可以使用 canvas 的线段绘制各种各样的图形，比如绘制一个六边形<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var n = 0;</div><div class=\"line\">    var dx = 150;</div><div class=\"line\">    var dy = 150;</div><div class=\"line\">    var s = 100;</div><div class=\"line\">    context.beginPath();</div><div class=\"line\">    context.fillStyle = &apos;pink&apos;;</div><div class=\"line\">    context.strokeStyle = &apos;rgb(0,0,100)&apos;;</div><div class=\"line\">    var x = Math.sin(0);</div><div class=\"line\">    var y = Math.cos(0);</div><div class=\"line\">    var dig = Math.PI / 15 * 5;</div><div class=\"line\">    for (var i = 0; i &lt; 6; i++) &#123;</div><div class=\"line\">        var x = Math.sin(i * dig);</div><div class=\"line\">        var y = Math.cos(i * dig);</div><div class=\"line\">        context.lineTo(dx + x * s, dy + y * s);</div><div class=\"line\">        console.log( x ,y )</div><div class=\"line\">    &#125;</div><div class=\"line\">    context.closePath();</div><div class=\"line\">    context.fill();</div><div class=\"line\">    context.stroke();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170804151434159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"使用canvas绘制六边形\"><br>绘制 30 角形：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var n = 0;</div><div class=\"line\">    var dx = 150;</div><div class=\"line\">    var dy = 150;</div><div class=\"line\">    var s = 100;</div><div class=\"line\">    context.beginPath();</div><div class=\"line\">    context.fillStyle = &apos;pink&apos;;</div><div class=\"line\">    context.strokeStyle = &apos;rgb(0,0,100)&apos;;</div><div class=\"line\">    var x = Math.sin(0);</div><div class=\"line\">    var y = Math.cos(0);</div><div class=\"line\">    var dig = Math.PI / 15 * 7;</div><div class=\"line\">    for (var i = 0; i &lt; 30; i++) &#123;</div><div class=\"line\">        var x = Math.sin(i * dig);</div><div class=\"line\">        var y = Math.cos(i * dig);</div><div class=\"line\">        context.lineTo(dx + x * s, dy + y * s);</div><div class=\"line\">        console.log( x ,y )</div><div class=\"line\">    &#125;</div><div class=\"line\">    context.closePath();</div><div class=\"line\">    context.fill();</div><div class=\"line\">    context.stroke();</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn\n.net/20170804152344651?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制 30 脚形\"></p>\n<h2 id=\"线性渐变\"><a href=\"#线性渐变\" class=\"headerlink\" title=\"线性渐变\"></a>线性渐变</h2><p><code>var lg= context.createLinearGradient(xStart,yStart,xEnd,yEnd)</code><br><code>lg.addColorStop(offset,color)</code></p>\n<ul>\n<li>xstart:渐变开始点x坐标</li>\n<li>ystart:渐变开始点y坐标</li>\n<li>xEnd:渐变结束点x坐标</li>\n<li>yEnd:渐变结束点y坐标</li>\n<li>offset:设定的颜色离渐变结束点的偏移量(0~1)</li>\n<li>color:绘制时要使用的颜色</li>\n</ul>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var g1 = context.createLinearGradient(0, 0, 0, 300);</div><div class=\"line\">g1.addColorStop(0, &apos;#E55D87&apos;); </div><div class=\"line\">g1.addColorStop(1, &apos;#5FC3E4&apos;);</div><div class=\"line\">context.fillStyle = g1;</div><div class=\"line\">context.fillRect(0, 0, 400, 300);</div></pre></td></tr></table></figure></p>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170804164331469?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制渐变\"></p>\n<h2 id=\"径向渐变\"><a href=\"#径向渐变\" class=\"headerlink\" title=\"径向渐变\"></a>径向渐变</h2><p><code>var rg=context.createRadialGradient(xStart,yStart,radiusStart,xEnd,yEnd,radiusEnd)</code><br><code>rg.addColorStop(offset,color)</code></p>\n<ul>\n<li>xStart：发散开始圆心x坐标</li>\n<li>yStart：发散开始圆心y坐标</li>\n<li>radiusStart：发散开始圆的半径</li>\n<li>xEnd：发散结束圆心的x坐标</li>\n<li>yEnd：发散结束圆心的y坐标</li>\n<li>radiusEnd：发散结束圆的半径</li>\n<li>offset：设定的颜色离渐变结束点的偏移量(0~1)</li>\n<li>color：绘制时要使用的颜色</li>\n</ul>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080314164328.png\" alt=\"径向渐变原理\"><br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 同心圆径向渐变</div><div class=\"line\">    var g1 = context.createRadialGradient(200, 150, 0, 200, 150, 200);</div><div class=\"line\">    g1.addColorStop(0.1, &apos;#F09819&apos;);</div><div class=\"line\">    g1.addColorStop(1, &apos;#EDDE5D&apos;);</div><div class=\"line\">    context.fillStyle = g1;</div><div class=\"line\">    context.beginPath();</div><div class=\"line\">    context.arc(200, 150, 100, 0, Math.PI * 2, true);</div><div class=\"line\">    context.closePath();</div><div class=\"line\">    context.fill();</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170804172346775?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制同心圆径向渐变\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">//不同圆心的径向渐变模型</div><div class=\"line\">    var g1 = context.createRadialGradient(100, 150, 10, 300, 150, 80);</div><div class=\"line\">    g1.addColorStop(0.1, &apos;#F09819&apos;);</div><div class=\"line\">    g1.addColorStop(0.8, &apos;red&apos;);</div><div class=\"line\">    g1.addColorStop(1, &apos;#EDDE5D&apos;);</div><div class=\"line\"></div><div class=\"line\">    context.fillStyle = g1;</div><div class=\"line\">    context.fillRect(0, 0, 300, 500);</div></pre></td></tr></table></figure></p>\n<p>效果图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170804175425719?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"不同圆心径向渐变\"></p>\n<h2 id=\"图形变形\"><a href=\"#图形变形\" class=\"headerlink\" title=\"图形变形\"></a>图形变形</h2><h3 id=\"缩放\"><a href=\"#缩放\" class=\"headerlink\" title=\"缩放\"></a>缩放</h3><p><code>scale(x,y)</code></p>\n<ul>\n<li>x ：x坐标轴按 x 比例缩放</li>\n<li>y ：x坐标轴按 y 比例缩放</li>\n</ul>\n<h3 id=\"旋转\"><a href=\"#旋转\" class=\"headerlink\" title=\"旋转\"></a>旋转</h3><p><code>rotate(angle)</code></p>\n<ul>\n<li>angle ：坐标轴旋转x角度（角度变化模型和画圆的模型一样）</li>\n</ul>\n<h3 id=\"平移\"><a href=\"#平移\" class=\"headerlink\" title=\"平移\"></a>平移</h3><p><code>translate(x,y)</code></p>\n<ul>\n<li>x ：坐标原点向x轴方向平移x</li>\n<li>y ：坐标原点向y轴方向平移y</li>\n</ul>\n<p>平移，缩放，旋转先后顺序不同，坐标轴的变化图，图片来源于网络：</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080316350654.png\" alt=\"平移缩放旋转先后顺序不同坐标轴的变化图\"></p>\n<h2 id=\"图形组合\"><a href=\"#图形组合\" class=\"headerlink\" title=\"图形组合\"></a>图形组合</h2><p><code>globalCompositeOperation=type</code><br>设置或返回新图像如何绘制到已有的图像上。最后的效果取决于 type 的值<br>type：</p>\n<ul>\n<li>source-over（默认值）:在原有图形上绘制新图形</li>\n<li>destination-over:在原有图形下绘制新图形</li>\n<li>source-in:显示原有图形和新图形的交集，新图形在上，所以颜色为新图形的颜色</li>\n<li>destination-in:显示原有图形和新图形的交集，原有图形在上，所以颜色为原有图形的颜色</li>\n<li>source-out:只显示新图形非交集部分</li>\n<li>destination-out:只显示原有图形非交集部分</li>\n<li>source-atop:显示原有图形和交集部分，新图形在上，所以交集部分的颜色为新图形的颜色</li>\n<li>destination-atop:显示新图形和交集部分，新图形在下，所以交集部分的颜色为原有图形的颜色</li>\n<li>lighter:原有图形和新图形都显示，交集部分做颜色叠加</li>\n<li>xor:重叠飞部分不现实</li>\n<li>copy:只显示新图形<br>效果图如下，图片来源于网络</li>\n</ul>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080317515321.png\" alt=\"效果图\"></p>\n<h2 id=\"阴影\"><a href=\"#阴影\" class=\"headerlink\" title=\"阴影\"></a>阴影</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">shadowOffsetX：设置或返回阴影距形状的水平距离（默认值为 0）</div><div class=\"line\">shadowOffsetY：设置或返回阴影距形状的垂直距离（默认值为 0）</div><div class=\"line\">shadowColor：设置或返回用于阴影的颜色</div><div class=\"line\">shadowBlur：设置或返回用于阴影的模糊级别（值越大越模糊）</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.fillStyle = &apos;white&apos;;</div><div class=\"line\">context.beginPath();</div><div class=\"line\">context.arc(100,100,10,0,2 * Math.PI);</div><div class=\"line\">context.shadowColor = &apos;white&apos;;</div><div class=\"line\">context.shadowBlur = 10;</div><div class=\"line\">context.fill();</div><div class=\"line\">context.closePath();</div></pre></td></tr></table></figure>\n<p>我们看到的效果就是我们在开头提起的例子中的 star 粒子的效果，因为其有白色阴影的效果，所以看起来像是发光一样，效果如下图：</p>\n<p><img src=\"http://img.blog.csdn.net/20170805132804029?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"带阴影效果的圆形\"></p>\n<h2 id=\"图像绘制\"><a href=\"#图像绘制\" class=\"headerlink\" title=\"图像绘制\"></a>图像绘制</h2><p><code>drawImage()</code><br>向画布上绘制图像、画布或视频</p>\n<ul>\n<li>在画布上定位图像：<code>context.drawImage(img,x,y);</code></li>\n<li>在画布上定位图像，并规定图像的宽度和高度：<code>context.drawImage(img,x,y,width,height);</code> </li>\n<li>剪切图像，并在画布上定位被剪切的部分：<code>context.drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</code></li>\n<li><code>img</code>：规定要使用的图像、画布或视频。</li>\n<li><code>sx</code>：可选。开始剪切的 x 坐标位置。</li>\n<li><code>sy</code>：可选。开始剪切的 y 坐标位置。</li>\n<li><code>swidth</code>：可选。被剪切图像的宽度。</li>\n<li><code>sheight</code>：可选。被剪切图像的高度。</li>\n<li><code>x</code>：在画布上放置图像的 x 坐标位置。</li>\n<li><code>y</code>：在画布上放置图像的 y 坐标位置。</li>\n<li><code>width</code>：可选。要使用的图像的宽度。（伸展或缩小图像）</li>\n<li><code>height</code>：可选。要使用的图像的高度。（伸展或缩小图像）</li>\n</ul>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/407398/2012080410231479.png\" alt=\"canvas绘制图形例子\"></p>\n<h2 id=\"图像平铺\"><a href=\"#图像平铺\" class=\"headerlink\" title=\"图像平铺\"></a>图像平铺</h2><p><code>createPattern(image,type)</code><br>type:</p>\n<ul>\n<li>no-repeat:不平铺</li>\n<li>repeat-x:横方向平铺</li>\n<li>repeat-y:纵方向平铺</li>\n<li>repeat:全方向平铺</li>\n</ul>\n<h2 id=\"图像裁剪\"><a href=\"#图像裁剪\" class=\"headerlink\" title=\"图像裁剪\"></a>图像裁剪</h2><p><code>clip()</code>从原始画布剪切任意形状和尺寸的区域，需要先创建裁剪区域，再绘制图像；一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。您也可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。<br>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置剪切区域（粉色矩形）</div><div class=\"line\">context.rect(0,0,500,400);</div><div class=\"line\">context.fillStyle = &quot;pink&quot;;</div><div class=\"line\">context.fill();</div><div class=\"line\">context.clip();</div><div class=\"line\"></div><div class=\"line\">// 在剪切区域中绘制图形（白色矩形）</div><div class=\"line\">context.fillStyle = &quot;white&quot;;</div><div class=\"line\">context.fillRect(10,10,100,100);</div><div class=\"line\"></div><div class=\"line\">// 之后绘制的图形只能显示在剪切区域之内（红色矩形）</div><div class=\"line\">context.fillStyle = &quot;red&quot;;</div><div class=\"line\">context.fillRect(100,100,600,600)</div></pre></td></tr></table></figure>\n<p>效果如下：可以看到我们设置的红色矩形是一个 600<em>600 的矩形，但是显然是没有显示完的，<em>*一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内（不能访问画布上的其他区域）。</em></em></p>\n<p><img src=\"http://img.blog.csdn.net/20170805163432597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas进行图像剪切\"></p>\n<p>所以说我们可以在使用 clip() 方法前通过使用 save() 方法对当前画布区域进行保存，并在以后的任意时间对其进行恢复（通过 restore() 方法）。<br>代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.save();</div><div class=\"line\">    // 设置剪切区域</div><div class=\"line\">    context.rect(0,0,500,400);</div><div class=\"line\">    context.fillStyle = &quot;pink&quot;;</div><div class=\"line\">    context.fill();</div><div class=\"line\">    context.clip();</div><div class=\"line\"></div><div class=\"line\">    // 在剪切区域中绘制图形</div><div class=\"line\">    context.fillStyle = &quot;white&quot;;</div><div class=\"line\">    context.fillRect(10,10,100,100);</div><div class=\"line\"></div><div class=\"line\">    context.restore();</div><div class=\"line\">    // 之后绘制的图形只能显示在剪切区域之内</div><div class=\"line\">    context.fillStyle = &quot;red&quot;;</div><div class=\"line\">    context.fillRect(100,100,600,600)</div></pre></td></tr></table></figure>\n<p>这样就可以正常显示了：</p>\n<p><img src=\"http://img.blog.csdn.net/20170805163713137?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas进行图像裁剪\"></p>\n<h2 id=\"绘制文字\"><a href=\"#绘制文字\" class=\"headerlink\" title=\"绘制文字\"></a>绘制文字</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">fillText(text,x,y)：绘制实心文字</div><div class=\"line\">strokeText()：绘制文字描边（空心）</div><div class=\"line\">textAlign：设置或返回文本内容的当前对齐方式</div><div class=\"line\">textBaseline：设置或返回在绘制文本时使用的当前文本基线</div><div class=\"line\">font：设置或返回文本内容的当前字体属性</div></pre></td></tr></table></figure>\n<p>例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">context.font=&quot;40px Arial&quot;;</div><div class=\"line\">context.fillText(&quot;Hello world&quot;,200,200);</div><div class=\"line\">context.strokeText(&quot;Hello world&quot;,200,300)</div></pre></td></tr></table></figure>\n<p>效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170806152010585?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"canvas绘制文字\"></p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><blockquote>\n<p>好的开始是成功的一半</p>\n</blockquote>\n<p>简单介绍了下 canvas 的常用 api，大家发现是不是也没有那么难呢~(￣▽￣)~*，那么让我们回到标题，一起来看一下这个少女心满满的例子是怎样实现的~</p>\n<p>canvas 其实写一个炫酷的特效在技术上并不难，难的是你的创意，因为 canvas 实现粒子的效果还是比较惊艳的，但其实代码都是比较简单的，无非就是随机的创建图形或者路径，当然图形也是闭合的路径。在加上一定的位移就可以了。但是你要设计出一个好的特效是非常不容易的。</p>\n<p>所以我们就先来分析一下这个效果由那几部分构成，将其拆分开来。</p>\n<p>特效pc端演示地址：<a href=\"https://sunshine940326.github.io/canvasStar/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/canvasStar/</a> （当然，可以直接查看我的博客，背景暂时就是这个，不知道什么时候会变，捂脸ing：<a href=\"http://cherryblog.site/）\">http://cherryblog.site/）</a></p>\n<h2 id=\"分析-star-的表现和行为\"><a href=\"#分析-star-的表现和行为\" class=\"headerlink\" title=\"分析 star 的表现和行为\"></a>分析 star 的表现和行为</h2><p>我们可以将其一直位移向上的粒子称为 star，我们观察 star 的特点：</p>\n<ul>\n<li>开始创建时位置随机（坐标随机）</li>\n<li>透明度随机</li>\n<li>创建时的大小在一定范围内（半径在一定范围内）</li>\n<li>匀速上升</li>\n<li>总数不变</li>\n</ul>\n<p>所以我们就可以总结出 star 的特点就是总数固定，创建时坐标和半径还有透明度随机，匀速上升。是不是很简单了呢~[]~(￣▽￣)~*</p>\n<h2 id=\"分析-dot-的表现和行为\"><a href=\"#分析-dot-的表现和行为\" class=\"headerlink\" title=\"分析 dot 的表现和行为\"></a>分析 dot 的表现和行为</h2><p>再让我们来看一下随着鼠标移入产生的粒子，我们称为 dot，同理，我们观察得到 dot 的特点</p>\n<ul>\n<li>列表内容</li>\n<li>鼠标移动时产生</li>\n<li>新产生的 dot 和之前的 3 个 dot 产生连线</li>\n<li>向四周移动</li>\n<li>达到一定条件消失</li>\n</ul>\n<p>这样，我们就完成了一半了呢~将事件屡清楚之后我们就可以开始着手撸代码了！</p>\n<h2 id=\"背景的-HTML-和-CSS\"><a href=\"#背景的-HTML-和-CSS\" class=\"headerlink\" title=\"背景的 HTML 和 CSS\"></a>背景的 HTML 和 CSS</h2><p>其实需要的 HTML 代码和 CSS 代码很简答的，HTML 只需要一行就可以了呢，设置一个渐变的背景蒙层和一个 <code>canvas</code> 标签。</p>\n<p>HTML 和 CSS 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&lt;div class=&quot;filter&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\"></div><div class=\"line\">html, body &#123;</div><div class=\"line\">            margin: 0;</div><div class=\"line\">            padding: 0;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">            overflow: hidden;</div><div class=\"line\">            background: black;</div><div class=\"line\">            background: linear-gradient(to bottom, #dcdcdc 0%, palevioletred 100%);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        #main-canvas &#123;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        .filter &#123;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">            position: absolute;</div><div class=\"line\">            top: 0;</div><div class=\"line\">            left: 0;</div><div class=\"line\">            background: #fe5757;</div><div class=\"line\">            animation: colorChange 30s ease-in-out infinite;</div><div class=\"line\">            animation-fill-mode: both;</div><div class=\"line\">            mix-blend-mode: overlay;</div><div class=\"line\"></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        @keyframes colorChange &#123;</div><div class=\"line\">            0%, 100% &#123;</div><div class=\"line\">                opacity: 0;</div><div class=\"line\">            &#125;</div><div class=\"line\">            50% &#123;</div><div class=\"line\">                opacity: .7;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure>\n<p>是的，我使用的是一个渐变的背景，不仅是从上到下的渐变，并且颜色也是会渐变的，效果如下：</p>\n<p><img src=\"http://img.blog.csdn.net/20170806160547970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"渐变背景\"></p>\n<h1 id=\"设置参数以及获取-dom-对象\"><a href=\"#设置参数以及获取-dom-对象\" class=\"headerlink\" title=\"设置参数以及获取 dom 对象\"></a>设置参数以及获取 dom 对象</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> * @var star_r：star半径系数，系数越大，半径越大</div><div class=\"line\"> * @var star_alpha：生成star的透明度，star_alpha越大，透明度越低</div><div class=\"line\"> * @var initStarsPopulation：初始化stars的个数</div><div class=\"line\"> * @var move_distance：star位移的距离，数值越大，位移越大</div><div class=\"line\"> * @var dot_r : dot半径系数，系数越大，半径越大</div><div class=\"line\"> * @var dot_speeds : dots运动的速度</div><div class=\"line\"> * @var dot_alpha : dots的透明度</div><div class=\"line\"> * @var aReduction：dot消失条件，透明度小于aReduction时消失</div><div class=\"line\"> * @var dotsMinDist：dot最小距离</div><div class=\"line\"> * @var maxDistFromCursor：dot最大距离</div><div class=\"line\"> * */</div><div class=\"line\">var config = &#123;</div><div class=\"line\">    star_r : 3,</div><div class=\"line\">    star_alpha : 5,</div><div class=\"line\">    initStarsPopulation : 150,</div><div class=\"line\">    move_distance : 0.25,</div><div class=\"line\">    dot_r : 5,</div><div class=\"line\">    dot_speeds : 0.5,</div><div class=\"line\">    dot_alpha : 0.5,</div><div class=\"line\">    dot_aReduction : 0.01,</div><div class=\"line\">    dotsMinDist : 5,</div><div class=\"line\">    maxDistFromCursor : 50,</div><div class=\"line\">&#125;;</div><div class=\"line\">var stars = [],</div><div class=\"line\">    dots = [],</div><div class=\"line\">    canvas = document.getElementById(&apos;canvas&apos;),</div><div class=\"line\">    ctx = canvas.getContext(&apos;2d&apos;),</div><div class=\"line\">    WIDTH,</div><div class=\"line\">    HEIGHT,</div><div class=\"line\">    mouseMoving = false,</div><div class=\"line\">    mouseMoveChecker,</div><div class=\"line\">    mouseX,</div><div class=\"line\">    mouseY;</div></pre></td></tr></table></figure>\n<h1 id=\"绘制单个-star\"><a href=\"#绘制单个-star\" class=\"headerlink\" title=\"绘制单个 star\"></a>绘制单个 star</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 设置单个 star</div><div class=\"line\"> * @param id：id</div><div class=\"line\"> * @param x：x坐标</div><div class=\"line\"> * @param y：y坐标</div><div class=\"line\"> * @param useCache：是否使用缓存</div><div class=\"line\"> * */</div><div class=\"line\">function Star(id, x, y) &#123;</div><div class=\"line\">    this.id = id;</div><div class=\"line\">    this.x = x;</div><div class=\"line\">    this.y = y;</div><div class=\"line\">    this.cacheCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">    this.cacheCtx = this.cacheCanvas.getContext(&quot;2d&quot;);</div><div class=\"line\">    this.r = Math.floor(Math.random() * star_r) + 1;</div><div class=\"line\">    this.cacheCtx.width = 6 * this.r;</div><div class=\"line\">    this.cacheCtx.height = 6 * this.r;</div><div class=\"line\">    var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;</div><div class=\"line\">    this.color = &quot;rgba(255,255,255,&quot; + alpha + &quot;)&quot;;</div><div class=\"line\">    if (useCache) &#123;</div><div class=\"line\">        this.cache()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"让每一个-star-动起来\"><a href=\"#让每一个-star-动起来\" class=\"headerlink\" title=\"让每一个 star 动起来\"></a>让每一个 star 动起来</h1><p>这里我使用的是原型的方式，将 <code>draw</code>、<code>cache</code>、<code>move</code> 和 <code>die</code> 方法都设置在 <code>Star</code> 的原型上，这样在使用 <code>new</code> 创建对象的时候，每一个 star 都可以继承这些方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">Star.prototype = &#123;</div><div class=\"line\">        draw : function () &#123;</div><div class=\"line\">            if (!this.useCacha) &#123;</div><div class=\"line\">                ctx.save();</div><div class=\"line\">                ctx.fillStyle = this.color;</div><div class=\"line\">                ctx.shadowBlur = this.r * 2;</div><div class=\"line\">                ctx.beginPath();</div><div class=\"line\">                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);</div><div class=\"line\">                ctx.closePath();</div><div class=\"line\">                ctx.fill();</div><div class=\"line\">                ctx.restore();</div><div class=\"line\">            &#125; else &#123;</div><div class=\"line\">                ctx.drawImage(this.cacheCanvas, this.x - this.r, this.y - this.r);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        cache : function () &#123;</div><div class=\"line\">            this.cacheCtx.save();</div><div class=\"line\">            this.cacheCtx.fillStyle = this.color;</div><div class=\"line\">            this.cacheCtx.shadowColor = &quot;white&quot;;</div><div class=\"line\">            this.cacheCtx.shadowBlur = this.r * 2;</div><div class=\"line\">            this.cacheCtx.beginPath();</div><div class=\"line\">            this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);</div><div class=\"line\">            this.cacheCtx.closePath();</div><div class=\"line\">            this.cacheCtx.fill();</div><div class=\"line\">            this.cacheCtx.restore();</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        move : function () &#123;</div><div class=\"line\">            this.y -= move_distance;</div><div class=\"line\">            if (this.y &lt;= -10) &#123;</div><div class=\"line\">                this.y += HEIGHT + 10;</div><div class=\"line\">            &#125;</div><div class=\"line\">            this.draw();</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        die : function () &#123;</div><div class=\"line\">            stars[this.id] = null;</div><div class=\"line\">            delete stars[this.id]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"绘制-dot\"><a href=\"#绘制-dot\" class=\"headerlink\" title=\"绘制 dot\"></a>绘制 dot</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Dot(id, x, y, useCache) &#123;</div><div class=\"line\">        this.id = id;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.floor(Math.random() * dot_r)+1;</div><div class=\"line\">        this.speed = dot_speeds;</div><div class=\"line\">        this.a = dot_alpha;</div><div class=\"line\">        this.aReduction = dot_aReduction;</div><div class=\"line\">        this.useCache = useCache;</div><div class=\"line\">        this.dotCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">        this.dotCtx = this.dotCanvas.getContext(&quot;2d&quot;);</div><div class=\"line\">        this.dotCtx.width = 6 * this.r;</div><div class=\"line\">        this.dotCtx.height = 6 * this.r;</div><div class=\"line\">        this.dotCtx.a = 0.5;</div><div class=\"line\">        this.color = &quot;rgba(255,255,255,&quot; + this.a +&quot;)&quot;;</div><div class=\"line\">        this.dotCtx.color = &quot;rgba(255,255,255,&quot; + this.dotCtx.a + &quot;)&quot;;</div><div class=\"line\">        this.linkColor = &quot;rgba(255,255,255,&quot; + this.a/4 + &quot;)&quot;;</div><div class=\"line\">        this.dir = Math.floor(Math.random()*140)+200;</div><div class=\"line\"></div><div class=\"line\">        if( useCache)&#123;</div><div class=\"line\">            this.cache()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h1 id=\"让每一个-dot-动起来\"><a href=\"#让每一个-dot-动起来\" class=\"headerlink\" title=\"让每一个 dot 动起来\"></a>让每一个 dot 动起来</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\">Dot.prototype = &#123;</div><div class=\"line\">        draw : function () &#123;</div><div class=\"line\">            if( !this.useCache)&#123;</div><div class=\"line\">                ctx.save();</div><div class=\"line\">                ctx.fillStyle = this.color;</div><div class=\"line\">                ctx.shadowColor = &quot;white&quot;;</div><div class=\"line\">                ctx.shadowBlur = this.r * 2;</div><div class=\"line\">                ctx.beginPath();</div><div class=\"line\">                ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);</div><div class=\"line\">                ctx.closePath();</div><div class=\"line\">                ctx.fill();</div><div class=\"line\">                ctx.restore();</div><div class=\"line\">            &#125;else&#123;</div><div class=\"line\">                ctx.drawImage(this.dotCanvas, this.x - this.r * 3, this.y - this.r *3);</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        cache : function () &#123;</div><div class=\"line\">            this.dotCtx.save();</div><div class=\"line\">            this.dotCtx.a  -= this.aReduction;</div><div class=\"line\">            this.dotCtx.color = &quot;rgba(255,255,255,&quot; + this.dotCtx.a + &quot;)&quot;;</div><div class=\"line\">            this.dotCtx.fillStyle = this.dotCtx.color;</div><div class=\"line\">            this.dotCtx.shadowColor = &quot;white&quot;;</div><div class=\"line\">            this.dotCtx.shadowBlur = this.r * 2;</div><div class=\"line\">            this.dotCtx.beginPath();</div><div class=\"line\">            this.dotCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI, false);</div><div class=\"line\">            this.dotCtx.closePath();</div><div class=\"line\">            this.dotCtx.fill();</div><div class=\"line\">            this.dotCtx.restore();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        link : function () &#123;</div><div class=\"line\">            if (this.id == 0) return;</div><div class=\"line\">            var previousDot1 = getPreviousDot(this.id, 1);</div><div class=\"line\">            var previousDot2 = getPreviousDot(this.id, 2);</div><div class=\"line\">            var previousDot3 = getPreviousDot(this.id, 3);</div><div class=\"line\">            var previousDot4 = getPreviousDot(this.id, 4);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            if (!previousDot1) return;</div><div class=\"line\">            ctx.strokeStyle = this.linkColor;</div><div class=\"line\">            ctx.moveTo(previousDot1.x, previousDot1.y);</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            ctx.lineTo(this.x, this.y);</div><div class=\"line\">            if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);</div><div class=\"line\">            if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);</div><div class=\"line\">            if (previousDot4 != false) ctx.lineTo(previousDot4.x, previousDot4.y);</div><div class=\"line\"></div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        move : function () &#123;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            this.a -= this.aReduction;</div><div class=\"line\">            if(this.a &lt;= 0 )&#123;</div><div class=\"line\">                this.die();</div><div class=\"line\">                return</div><div class=\"line\">            &#125;</div><div class=\"line\">            this.dotCtx.a  -= this.aReduction;</div><div class=\"line\">            this.dotCtx.color = &quot;rgba(255,255,255,&quot; + this.dotCtx.a + &quot;)&quot;;</div><div class=\"line\">            this.color = &quot;rgba(255,255,255,&quot; + this.a + &quot;)&quot;;</div><div class=\"line\">            this.linkColor = &quot;rgba(255,255,255,&quot; + this.a/4 + &quot;)&quot;;</div><div class=\"line\">            this.x = this.x + Math.cos(degToRad(this.dir)) * this.speed;</div><div class=\"line\">            this.y = this.y + Math.sin(degToRad(this.dir)) * this.speed;</div><div class=\"line\"></div><div class=\"line\">            this.draw();</div><div class=\"line\">            this.link();</div><div class=\"line\"></div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        die : function () &#123;</div><div class=\"line\">            dots[this.id] = null;</div><div class=\"line\">            delete dots[this.id];</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div></pre></td></tr></table></figure>\n<h1 id=\"鼠标移入事件监听\"><a href=\"#鼠标移入事件监听\" class=\"headerlink\" title=\"鼠标移入事件监听\"></a>鼠标移入事件监听</h1><p>此外，我们还需要设置一些其他的函数和对鼠标移入事件的监听，这里就不再赘述了，感兴趣的同学可以直接到 github 下载源码。</p>\n<h1 id=\"canvas-离屏渲染优化\"><a href=\"#canvas-离屏渲染优化\" class=\"headerlink\" title=\"canvas 离屏渲染优化\"></a>canvas 离屏渲染优化</h1><p>我所使用的离屏优化是基于此文，原文写的很好，大家感兴趣的话可以去看一下：<a href=\"http://www.cnblogs.com/axes/p/3567364.html?utm_source=tuicool&amp;utm_medium=referral。\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/axes/p/3567364.html?utm_source=tuicool&amp;utm_medium=referral。</a><br>因为这个效果之前我也在博客用当做背景过，不少同学都反应很卡，所以我就找了下优化的教程做了下优化，我发现对性能影响最大的可能就是 canvas 的离屏渲染优化了，这也是 canvas 的最常见优化之一。</p>\n<p>名字听起来很复杂，什么离屏渲染，其实就是设置缓存，绘制图像的时候在屏幕之外的地方绘制好，然后再直接拿过来用，这不就是缓存的概念吗?!︿(￣︶￣)︿.</p>\n<blockquote>\n<p>建立两个 canvas 标签，大小一致，一个正常显示，一个隐藏（缓存用的，不插入dom中），先将结果draw缓存用的canvas上下文中，因为游离canvas不会造成ui的渲染，所以它不会展现出来，再把缓存的内容整个裁剪再 draw 到正常显示用的 canvas 上，这样能优化不少。</p>\n</blockquote>\n<p>其实已经体现在上述的代码中的，比如，创建 star 的代码中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">/* 设置单个star</div><div class=\"line\">    * @param id：id</div><div class=\"line\">    * @param x：x坐标</div><div class=\"line\">    * @param y：y坐标</div><div class=\"line\">    * @param useCache：是否使用缓存</div><div class=\"line\">    * */</div><div class=\"line\">   function Star(id, x, y, useCache) &#123;</div><div class=\"line\">       this.id = id;</div><div class=\"line\">       this.x = x;</div><div class=\"line\">       this.y = y;</div><div class=\"line\">       this.useCacha = useCache;</div><div class=\"line\">       this.cacheCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">       this.cacheCtx = this.cacheCanvas.getContext(&quot;2d&quot;);</div><div class=\"line\">       this.r = Math.floor(Math.random() * star_r) + 1;</div><div class=\"line\">       this.cacheCtx.width = 6 * this.r;</div><div class=\"line\">       this.cacheCtx.height = 6 * this.r;</div><div class=\"line\">       var alpha = ( Math.floor(Math.random() * 10) + 1) / star_alpha;</div><div class=\"line\">       this.color = &quot;rgba(255,255,255,&quot; + alpha + &quot;)&quot;;</div><div class=\"line\">       if (useCache) &#123;</div><div class=\"line\">           this.cache()</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>细心的同学可能就会发现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">this.cacheCanvas = document.createElement(&quot;canvas&quot;);</div><div class=\"line\">this.cacheCtx = this.cacheCanvas.getContext(&quot;2d&quot;);</div></pre></td></tr></table></figure>\n<p>这段代码就是又创建了一个 canvas 标签，然后再 star 的原型中有一个 cache 方法，这个 cache 方法就是在刚刚创建的 canvas 中绘制 star，而不是直接在原来的 canvas 画布中绘制的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">cache : function () &#123;</div><div class=\"line\">    this.cacheCtx.save();</div><div class=\"line\">    this.cacheCtx.fillStyle = this.color;</div><div class=\"line\">    this.cacheCtx.shadowColor = &quot;white&quot;;</div><div class=\"line\">    this.cacheCtx.shadowBlur = this.r * 2;</div><div class=\"line\">    this.cacheCtx.beginPath();</div><div class=\"line\">    this.cacheCtx.arc(this.r * 3, this.r * 3, this.r, 0, 2 * Math.PI);</div><div class=\"line\">    this.cacheCtx.closePath();</div><div class=\"line\">    this.cacheCtx.fill();</div><div class=\"line\">    this.cacheCtx.restore();</div><div class=\"line\">&#125;,</div></pre></td></tr></table></figure>\n<p>之后我们需要将我们绘制的离屏 canvas 使用 <code>drawImage</code> 方法插入到我们最先开始创建的 canvas 画布中。</p>\n<p>这里要注意的是，创建的离屏 canvas 的大小，因为太大的话同样会浪费性能，所以我们可以创建和我们每一个 star 粒子相同的 canvas ，但是这个例子中不适用，要将离屏的 canvas 设置的稍微大一些，因为我们还需要设置发光的效果（也就是设置阴影）。</p>\n<h1 id=\"发福利\"><a href=\"#发福利\" class=\"headerlink\" title=\"发福利\"></a>发福利</h1><p>发福利的时间到了~╰(￣▽￣)╭，很多小伙伴对 canvas 不是很感兴趣，但是想直接使用这个效果，于是我就将其封装起来，你只需要引入这个 JS，在 HTML 中添加一个 id 为 canvas 的标签，然后设置相应的 CSS 就可以~</p>\n<blockquote>\n<p>github 下载地址：<a href=\"https://github.com/sunshine940326/canvasStar\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvasStar</a></p>\n</blockquote>\n<p>在 README 中有使用方法~因为是第一次自己封装函数，自己一个人在不停的摸索中前进，所以还有很多的不足，希望有大神可以指点一二~</p>"},{"title":"前端开发规范：命名规范、html规范、css规范、js规范","date":"2017-05-30T06:54:11.000Z","_content":"![这里写图片描述](http://img.blog.csdn.net/20170530152035209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。\n我是有一点强迫症的人，上周我们后端给我了一个CanUsename的接口（该接口的目的是判断输入的目的地是否是4级目的地），我真的是崩溃的。\n我只是觉得这个名字不够语义化，但是让我自己想一个名字我又想不出来，于是我就在想，如果有一套命名规范的话，那么以后起名字就不用发愁了，直接按照规范来就好了~\n于是端午在家就百度了一下~\n<!--more-->\n# 命名\n## 驼峰式命名法介绍\n- Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo\n- Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo\n\n## 文件资源命名\n- 文件名不得含有空格\n- 文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )\n- 文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。\n- 引入资源使用相对路径，不要指定资源所带的具体协议 ( `http:`,` https:` ) ，除非这两者协议都不可用。\n\n不推荐：\n```\n<script src=\"http://cdn.com/foundation.min.js\"></script>\n\n```\n推荐\n```\n<script src=\"//cdn.com/foundation.min.js\"></script>\n```\n## 变量命名\n**命名方式** : 小驼峰式命名方法\n**命名规范** : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词\n\n类型 | 小写字母\n---|---\narray| a\nboolean | b\nfunction | fn\nint | i\nobject | o\nregular | r\nstring | s\n推荐\n```\nvar tableTitle = \"LoginTable\"\n```\n不推荐\n```\nvar getTitle = \"LoginTable\"\n```\n## 函数\n**命名方式** : 小驼峰方式 ( 构造函数使用大驼峰命名法 )\n**命名规则** : 前缀为动词\n\n\n动词 | 含义 | 返回值\n---|---|--\ncan | 判断是否可执行某个动作 ( 权限 ) | \t函数返回一个布尔值。true：可执行；false：不可执行\nhas | \t判断是否含有某个值 |  \t函数返回一个布尔值。true：含有此值；false：不含有此值\nis | \t判断是否为某个值 | 函数返回一个布尔值。true：为某个值；false：不为某个值\nget | 获取某个值 | 函数返回一个非布尔值\nset | 设置某个值 | 无返回值、返回是否设置成功或者返回链式对象\n推荐：\n```\n//是否可阅读\nfunction canRead(){\n    return true;\n}\n\n//获取姓名\nfunction getName{\n    return this.name\n}\n```\n## 常量\n**命名方法** : 全部大写\n**命名规范** : 使用大写字母和下划线来组合命名，下划线用以分割单词。\n推荐：\n```\n var MAX_COUNT = 10;\n var URL = 'http://www.baidu.com';\n```\n## 类的成员\n- 公共属性和方法 : 同变量命名方式\n- 私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式\n\n推荐(将`name`换成`this`是不是更熟悉了呢)\n```\nfunction Student(name) {\n    var _name = name; // 私有成员\n \n    // 公共方法\n    this.getName = function () {\n        return _name;\n    }\n \n    // 公共方式\n    this.setName = function (value) {\n        _name = value;\n    }\n}\nvar st = new Student('tom');\nst.setName('jerry');\nconsole.log(st.getName()); // => jerry：输出_name私有变量的值\n```\n## 注释规范\n### 单行注释 ( // )\n- 单独一行：//(双斜线)与注释文字之间保留一个空格\n- 在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。\n- 注释代码：//(双斜线)与代码之间保留一个空格。\n推荐 : \n```\n// 调用了一个函数；1)单独在一行\nsetTitle();\n \nvar maxCount = 10; // 设置最大量；2)在代码后面注释\n \n// setName(); // 3)注释代码\n```\n## 多行注释 ( /* 注释说明 */ )\n - 若开始(/`*`和结束(`*`/)都在一行，推荐采用单行注释\n - 若至少三行注释时，第一行为/`*`，最后行为`*`/，其他行以`*`开始，并且注释文字与`*`保留一个空格。\n 推荐 : \n```\n/*\n* 代码执行到这里后会调用setTitle()函数\n* setTitle()：设置title的值\n*/\nsetTitle();\n```\n## 函数 ( 方法 ) 注释\n函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 [javadoc(百度百科)](http://baike.baidu.com/item/javadoc)\n语法：\n```\n/** \n* 函数说明 \n* @关键字 \n*/\n```\n常用注释关键字\n\n注释名 | 语法 | 含义 | 示例\n---|---|---|---|\n@param | @param 参数名 {参数类型}  描述信息 | 描述参数的信息 | @param name {String} 传入名称\n@return | @return {返回类型} 描述信息 | 描述返回值的信息 | @return {Boolean} true:可执行;false:不可执行\n@author | @author 作者信息 [附属信息：如邮箱、日期] | 描述此函数作者的信息 | @author 张三 2015/07/21 \n@version | \t@version XX.XX.XX | 描述此函数的版本号 |@version 1.0.3\n@example | @example 示例代码 |\t@example setTitle('测试') | 如下\n推荐 :\n```\n/**\n - 合并Grid的行\n - @param grid {Ext.Grid.Panel} 需要合并的Grid\n - @param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n - @param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n - @return void\n - @author polk6 2015/07/21 \n - @example\n - _________________                             _________________\n - |  年龄 |  姓名 |                             |  年龄 |  姓名 |\n - -----------------      mergeCells(grid,[0])   -----------------\n - |  18   |  张三 |              =>             |       |  张三 |\n - -----------------                             -  18   ---------\n - |  18   |  王五 |                             |       |  王五 |\n - -----------------                             -----------------\n*/\nfunction mergeCells(grid, cols, isAllSome) {\n    // Do Something\n}\n```\n# HTML规范\n## 文档规范\n使用 HTML5 的文档声明类型 : `<!DOCTYPE html>`\n\n- DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\n- 使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 \n- 没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。\n- 如果你的页面添加了<!DOCTYP>那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。\n\n## 脚本加载\n说到js和css的位置，大家应该都知道js放在下面，css放在上面。\n但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性`async`，将脚本文件放在`<head>`内\n**兼容老旧浏览器(IE9-)时**：\n脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。\n**而在现代浏览器中**：\n脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。\n综上所述，\n所有浏览器中推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n  </head>\n  <body>\n    <!-- body goes here -->\n \n    <script src=\"main.js\" async></script>\n  </body>\n</html>\n```\n只兼容现代浏览器推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"main.js\" async></script>\n  </head>\n  <body>\n    <!-- body goes here -->\n  </body>\n</html>\n```\n## 语义化\n我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。\n>语义化是指：根据元素其被创造出来时的初始意义来使用它。\n意思就是用正确的标签干正确的事，而不是只有`div`和`span`。\n\n不推荐：\n```\n<b>My page title</b>\n<div class=\"top-navigation\">\n  <div class=\"nav-item\"><a href=\"#home\">Home</a></div>\n  <div class=\"nav-item\"><a href=\"#news\">News</a></div>\n  <div class=\"nav-item\"><a href=\"#about\">About</a></div>\n</div>\n \n<div class=\"news-page\">\n  <div class=\"page-section news\">\n    <div class=\"title\">All news articles</div>\n    <div class=\"news-article\">\n      <h2>Bad article</h2>\n      <div class=\"intro\">Introduction sub-title</div>\n      <div class=\"content\">This is a very bad example for HTML semantics</div>\n      <div class=\"article-side-notes\">I think I'm more on the side and should not receive the main credits</div>\n      <div class=\"article-foot-notes\">\n        This article was created by David <div class=\"time\">2014-01-01 00:00</div>\n      </div>\n    </div>\n \n    <div class=\"section-footer\">\n      Related sections: Events, Public holidays\n    </div>\n  </div>\n</div>\n \n<div class=\"page-footer\">\n  Copyright 2014\n</div>\n```\n推荐\n\n```\nhtml 代码:\n<!-- The page header should go into a header element -->\n<header>\n  <!-- As this title belongs to the page structure it's a heading and h1 should be used -->\n  <h1>My page title</h1>\n</header>\n \n<!-- All navigation should go into a nav element -->\n<nav class=\"top-navigation\">\n  <!-- A listing of elements should always go to UL (OL for ordered listings) -->\n  <ul>\n    <li class=\"nav-item\"><a href=\"#home\">Home</a></li>\n    <li class=\"nav-item\"><a href=\"#news\">News</a></li>\n    <li class=\"nav-item\"><a href=\"#about\">About</a></li>\n  </ul>\n</nav>\n \n<!-- The main part of the page should go into a main element (also use role=\"main\" for accessibility) -->\n<main class=\"news-page\" role=\"main\">\n  <!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. -->\n  <section class=\"page-section news\">\n    <!-- A section header should go into a section element -->\n    <header>\n      <!-- As a page section belongs to the page structure heading elements should be used (in this case h2) -->\n      <h2 class=\"title\">All news articles</h2>\n    </header>\n \n    <!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other\n     re-usable module / section that can occur multiple times on a page) a article element should be used -->\n    <article class=\"news-article\">\n      <!-- An article can contain a header that contains the summary / introduction information of the article -->\n      <header>\n        <!-- As a article title does not belong to the overall page structure there should not be any heading tag! -->\n        <div class=\"article-title\">Good article</div>\n        <!-- Small can optionally be used to reduce importance -->\n        <small class=\"intro\">Introduction sub-title</small>\n      </header>\n \n      <!-- For the main content in a section or article there is no semantic element -->\n      <div class=\"content\">\n        <p>This is a good example for HTML semantics</p>\n      </div>\n      <!-- For content that is represented as side note or less important information in a given context use aside -->\n      <aside class=\"article-side-notes\">\n        <p>I think I'm more on the side and should not receive the main credits</p>\n      </aside>\n      <!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element -->\n      <footer class=\"article-foot-notes\">\n        <!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time\n         while the actual text in the time element can also be more human readable / relative -->\n        <p>This article was created by David <time datetime=\"2014-01-01 00:00\" class=\"time\">1 month ago</time></p>\n      </footer>\n    </article>\n \n    <!-- In a section, footnotes or similar information can also go into a footer element -->\n    <footer class=\"section-footer\">\n      <p>Related sections: Events, Public holidays</p>\n    </footer>\n  </section>\n</main>\n \n<!-- Your page footer should go into a global footer element -->\n<footer class=\"page-footer\">\n  Copyright 2014\n</footer>\n```\n## alt标签不为空\n`<img> `标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。\n假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：\n\n - 网速太慢\n - src 属性中的错误\n - 浏览器禁用图像\n - 用户使用的是屏幕阅读器\n\n从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容\n\n## 结构、表现、行为三者分离\n尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。\n在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。\n建议：\n\n - 不使用超过一到两张样式表\n - 不使用超过一到两个脚本（学会用合并脚本）\n - 不使用行内样式（`<style>.no-good {}</style>`）\n - 不在元素上使用 style 属性（`<hr style=\"border-top: 5px solid black\">`）\n - 不使用行内脚本（`<script>alert('no good')</script>`）\n - 不使用表象元素（`i.e. <b>, <u>, <center>, <font>, <b>`）\n - 不使用表象 class 名（`i.e. red, left, center`）\n\n## HTML只关注内容\n - HTML只显示展示内容信息\n - 不要引入一些特定的 HTML 结构来解决一些视觉设计问题\n - 不要将` img `元素当做专门用来做视觉设计的元素\n - 样式上的问题应该使用css解决\n\n不推荐：\n```\n<!-- We should not introduce an additional element just to solve a design problem  -->\n<span class=\"text-box\">\n  <span class=\"square\"></span>\n  See the square next to me?\n</span>\ncss 代码:\n.text-box > .square {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n**图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。**\n\n不推荐\n```\nhtml 代码:\n<!-- Content images should never be used for design elements!  -->\n<span class=\"text-box\">\n  <img src=\"square.svg\" alt=\"Square\" />\n  See the square next to me?\n</span>\n```\n推荐\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element with a background image to solve the problem */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background: url(square.svg) no-repeat;\n  background-size: 100%;\n}\n```\n# js规范\n## 避免全局命名空间污染\n防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。\n\nIIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。\n不推荐:\n```\nvar x = 10,\n    y = 100;\n \n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n```\n推荐\n```\n// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n \n  var x = 10,\n      y = 100;\n \n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n \n}(window.console.log, window));\n```\n推荐的IIFE写法:\n```\n(function(){\n  'use strict';\n \n  // Code goes here\n \n}());\n```\n如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：\n```\n(function($, w, d){\n  'use strict';\n \n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n```\n## 严格模式\nECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。\n\n严格模式会阻止使用在未来很可能被引入的预留关键字。\n\n你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。\n## 变量声明\n总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如\n```\nvar a = b = 0; //b会被隐式的创建为全局变量\n```\n所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：\n```\n(function (){\n  'use strict'\n  var a = 0,\n      b = 0,\n      c = 0,\n      i,\n      j,\n      myObject();\n}())\n```\n \n采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。\n## js声明提前\njavascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）\n例如：\n```\n(function(log){\n  'use strict';\n \n  var a = 10;\n \n  for(var i = 0; i < a; i++) {\n    var b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    var f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  function x() {\n    log('Mr. X!');\n  }\n  x();\n \n}(window.console.log));\n```\n提升后的js\n```\n(function(log){\n  'use strict';\n  // All variables used in the closure will be hoisted to the top of the function\n  var a,\n      i,\n      b,\n      f;\n  // All functions in the closure will be hoisted to the top\n  function x() {\n    log('Mr. X!');\n  }\n \n  a = 10;\n \n  for(i = 0; i < a; i++) {\n    b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    // Function assignments will only result in hoisted variables but the function body will not be hoisted\n    // Only by using a real function declaration the whole function will be hoisted with its body\n    f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  x();\n \n}(window.console.log));\n```\n## 使用严格等\n总是使用 `===` 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：\n```\n(function(log){\n  'use strict';\n \n  log('0' == 0); // true\n  log('' == false); // true\n  log('1' == true); // true\n  log(null == undefined); // true\n \n  var x = {\n    valueOf: function() {\n      return 'X';\n    }\n  };\n \n  log(x == 'X');\n \n}(window.console.log));\n```\n### 等同== 和严格等===的区别\n\n - ==， 两边值类型不同的时候，要先进行类型转换，再比较。\n - ===，不做类型转换，类型不同的一定不等。\n\n==等同操作符\n - 如果两个值具有相同类型，会进行===比较，返回===的比较值 \n - 如果两个值不具有相同类型，也有可能返回true \n - 如果一个值是null另一个值是undefined，返回true \n - 如果一个值是string另个是number，会把string转换成number再进行比较 \n - 如果一个值是true，会把它转成1再比较，false会转成0 \n\n\n```\nconsole.log( false == null )      // false\nconsole.log( false == undefined ) // false\nconsole.log( false == 0 )         // true\nconsole.log( false == '' )        // true\nconsole.log( false == NaN )       // false\n \nconsole.log( null == undefined ) // true\nconsole.log( null == 0 )         // false\nconsole.log( null == '' )        // false\nconsole.log( null == NaN )       // false\n \nconsole.log( undefined == 0)   // false\nconsole.log( undefined == '')  // false\nconsole.log( undefined == NaN) // false\n \nconsole.log( 0 == '' )  // true\nconsole.log( 0 == NaN ) // false\n```\n总结一下==\n \n\n - false 除了和自身比较为 true 外，和 0，\"\" 比较也为 true\n - null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个\n - 0 除了和 false 比较为 true，还有空字符串 ''\" 和空数组 []\n - 空字符串 '' 除了和 false 比较为 true，还有一个数字 0\n\n> ==, >, <, +, -, ... 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 `valueOf/toString\n> `的话，==就会产生副作用.\n\n例如：\n```\nArray.prototype.valueOf = function() {\n  this[0]++;\n  return this;\n}\nvar x = [1, 2, 3];\nx == 0;\nconsole.log(x);   // [2, 2, 3]\n```\n===操作符：\n \n - 要是两个值类型不同，返回false \n - 要是两个值都是number类型，并且数值相同，返回true \n - 要是两个值都是stirng，并且两个值的String内容相同，返回true \n - 要是两个值都是true或者都是false，返回true \n - 要是两个值都是指向相同的Object，Arraya或者function，返回true \n - 要是两个值都是null或者都是undefined，返回true\n\n## 真假判断\n - js中以下内容为假：\n - false\n - null\n - undefined\n - 0\n - '' (空字符串)\n - NaN\n\n## 设置默认参数\n辑操作符 || 和 && 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y\n```\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n```\n 等同于：\n ```\n x = x || y || 1;\n ```\n这一小技巧经常用来给方法设定默认的参数。\n```\n(function(log){\n  'use strict';\n \n  function multiply(a, b) {\n    a = a || 1;\n    b = b || 1;\n \n    log('Result ' + a * b);\n  }\n \n  multiply(); // Result 1\n  multiply(10); // Result 10\n  multiply(3, NaN); // Result 3\n  multiply(9, 5); // Result 45\n \n}(window.console.log));\n```\n## 不使用eval()函数\n就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。\neval()函数的作用是返回任意字符串，当作js代码来处理。\n## this关键字\n只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。\n\n正因为它是如此容易地被搞错，请限制它的使用场景：\n\n - 在构造函数中\n - 在对象的方法中（包括由此创建出的闭包内）\n\n## 首选函数式风格\n函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。\n\n接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。 \n不推荐\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20],\n      sum = 0,\n      i;\n \n \n  for(i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n \n  log('The sum of array ' + arr + ' is: ' + sum)\n \n}(window.console.log));\n```\n推荐(函数式编程)：\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20];\n \n  var sum = arr.reduce(function(prevValue, currentValue) {\n    return prevValue + currentValue;\n  }, 0);\n \n  log('The sum of array ' + arr + ' is: ' + sum);\n \n}(window.console.log));\n```\n## 修改内建对象的原型链\n修改内建的诸如 `Object.prototype` 和 `Array.prototype` 是被严厉禁止的。修改其它的内建对象比如 `Function.prototype`，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。\n\n## 三元条件判断（if 的快捷方法）\n用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。\n不推荐：\n```\nif(x === 10) {\n  return 'valid';\n} else {\n  return 'invalid';\n}\n```\n推荐：\n```\nreturn x === 10 ? 'valid' : 'invalid'\n```\n# JSHint\n在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用`===`而不是`==`，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例\n## webstorm内置JSHint\n对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。\n在Settings => language & frameworks => JavaScript => Code Quality Tolls => JSHint\n![webstorm中的jshint](http://img.blog.csdn.net/20170530124720963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考[官方文档](http://jshint.com/docs/)\n\n名称 | 含义\n---|---\ncurly| 循环或者条件语句必须使用花括号包住\neqeqeq | 使用强制等===\nnewcap | 对于首字母大写的函数（声明的类），强制使用new\nnoarg | 禁用arguments.caller和arguments.callee\nsub | 对于属性使用aaa.bbb而不是aaa['bbb']\nundef | 查找所有未定义的变量\nboss | 查找类似与if(a = 0)这样的代码\nnode | 指定运行环境为node\nstrict | 必须使用严格模式\nasi | 允许省略分号\nbitwise | 禁止使用位运算符，比如经常把&&写错& 规避此错误\njquery | 定义全局暴露的jQuery库\nevil | 禁止使用eval \nmaxdepth | 嵌套的最大深度\nmaxparams | 参数的最大个数\n# css规范\n## id和class的命名\nID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称\n不推荐 :\n```\n.fw-800 {\n  font-weight: 800;\n}\n \n.red {\n  color: red;\n}\n```\n推荐 :\n```\n.heavy {\n  font-weight: 800;\n}\n \n.important {\n  color: red;\n}\n```\n## 合理的使用ID\n一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class\n不推荐：\n```\n#content .title {\n  font-size: 2em;\n}\n```\n推荐：\n```\n.content .title {\n  font-size: 2em;\n}\n```\n## css选择器中避免使用标签名\n从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。\n## 使用子选择器\n很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。\n有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。\n然而，在任何情况下，这是一个非常不好的做法。\n如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。\n不推荐:\n```\n.content .title {\n  font-size: 2rem;\n}\n```\n推荐\n```\n.content > .title {\n  font-size: 2rem;\n}\n```\n## 尽量使用缩写属性\n尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。\n不推荐：\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n推荐：\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n## 0后面不带单位\n省略0后面的单位，\n不推荐：\n\n```\npadding-bottom: 0px;\nmargin: 0em;\n```\n推荐：\n```\npadding-bottom: 0;\nmargin: 0;\n```\n## 属性格式\n\n - 为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。\n - 属性名的冒号后使用一个空格。出于一致性的原因，\n属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。\n - 每个选择器和属性声明总是使用新的一行。\n - 属性选择器或属性值用双引号（””），而不是单引号（”）括起来。\n - URI值（url()）不要使用引号。\n\n作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：\n\n结构性属性：\n\n 1. display\n 2. position, left, top, right etc.\n 3. overflow, float, clear etc.\n 4. margin, padding\n\n表现性属性：\n\n - background, border etc.\n - font, text\n\n不推荐：\n```\n .box {\n  font-family: 'Arial', sans-serif;\n  border: 3px solid #ddd;\n  left: 30%;\n  position: absolute;\n  text-transform: uppercase;\n  background-color: #eee;\n  right: 30%;\n  isplay: block;\n  font-size: 1.5rem;\n  overflow: hidden;\n  padding: 1em;\n  margin: 1em;\n}\n```\n推荐：\n```\n.box {\n  display: block;\n  position: absolute;\n  left: 30%;\n  right: 30%;\n  overflow: hidden;\n  margin: 1em;\n  padding: 1em;\n  background-color: #eee;\n  border: 3px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n```\n 相关文章：\n \n - [前端编码规范](http://www.css88.com/archives/5505)\n - [JavsScript开发规范](http://www.cnblogs.com/polk6/p/4660195.html)、\n - [开发规范（四）JS规范](https://segmentfault.com/a/1190000006131512)\n\n \n ","source":"_posts/developing-guideline.md","raw":"---\ntitle: 前端开发规范：命名规范、html规范、css规范、js规范\ndate: 2017-05-30 14:54:11\ntags: [css,开发规范,js规范,jshint] \ncategories: [html5]\n---\n![这里写图片描述](http://img.blog.csdn.net/20170530152035209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。\n我是有一点强迫症的人，上周我们后端给我了一个CanUsename的接口（该接口的目的是判断输入的目的地是否是4级目的地），我真的是崩溃的。\n我只是觉得这个名字不够语义化，但是让我自己想一个名字我又想不出来，于是我就在想，如果有一套命名规范的话，那么以后起名字就不用发愁了，直接按照规范来就好了~\n于是端午在家就百度了一下~\n<!--more-->\n# 命名\n## 驼峰式命名法介绍\n- Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo\n- Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo\n\n## 文件资源命名\n- 文件名不得含有空格\n- 文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )\n- 文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。\n- 引入资源使用相对路径，不要指定资源所带的具体协议 ( `http:`,` https:` ) ，除非这两者协议都不可用。\n\n不推荐：\n```\n<script src=\"http://cdn.com/foundation.min.js\"></script>\n\n```\n推荐\n```\n<script src=\"//cdn.com/foundation.min.js\"></script>\n```\n## 变量命名\n**命名方式** : 小驼峰式命名方法\n**命名规范** : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词\n\n类型 | 小写字母\n---|---\narray| a\nboolean | b\nfunction | fn\nint | i\nobject | o\nregular | r\nstring | s\n推荐\n```\nvar tableTitle = \"LoginTable\"\n```\n不推荐\n```\nvar getTitle = \"LoginTable\"\n```\n## 函数\n**命名方式** : 小驼峰方式 ( 构造函数使用大驼峰命名法 )\n**命名规则** : 前缀为动词\n\n\n动词 | 含义 | 返回值\n---|---|--\ncan | 判断是否可执行某个动作 ( 权限 ) | \t函数返回一个布尔值。true：可执行；false：不可执行\nhas | \t判断是否含有某个值 |  \t函数返回一个布尔值。true：含有此值；false：不含有此值\nis | \t判断是否为某个值 | 函数返回一个布尔值。true：为某个值；false：不为某个值\nget | 获取某个值 | 函数返回一个非布尔值\nset | 设置某个值 | 无返回值、返回是否设置成功或者返回链式对象\n推荐：\n```\n//是否可阅读\nfunction canRead(){\n    return true;\n}\n\n//获取姓名\nfunction getName{\n    return this.name\n}\n```\n## 常量\n**命名方法** : 全部大写\n**命名规范** : 使用大写字母和下划线来组合命名，下划线用以分割单词。\n推荐：\n```\n var MAX_COUNT = 10;\n var URL = 'http://www.baidu.com';\n```\n## 类的成员\n- 公共属性和方法 : 同变量命名方式\n- 私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式\n\n推荐(将`name`换成`this`是不是更熟悉了呢)\n```\nfunction Student(name) {\n    var _name = name; // 私有成员\n \n    // 公共方法\n    this.getName = function () {\n        return _name;\n    }\n \n    // 公共方式\n    this.setName = function (value) {\n        _name = value;\n    }\n}\nvar st = new Student('tom');\nst.setName('jerry');\nconsole.log(st.getName()); // => jerry：输出_name私有变量的值\n```\n## 注释规范\n### 单行注释 ( // )\n- 单独一行：//(双斜线)与注释文字之间保留一个空格\n- 在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。\n- 注释代码：//(双斜线)与代码之间保留一个空格。\n推荐 : \n```\n// 调用了一个函数；1)单独在一行\nsetTitle();\n \nvar maxCount = 10; // 设置最大量；2)在代码后面注释\n \n// setName(); // 3)注释代码\n```\n## 多行注释 ( /* 注释说明 */ )\n - 若开始(/`*`和结束(`*`/)都在一行，推荐采用单行注释\n - 若至少三行注释时，第一行为/`*`，最后行为`*`/，其他行以`*`开始，并且注释文字与`*`保留一个空格。\n 推荐 : \n```\n/*\n* 代码执行到这里后会调用setTitle()函数\n* setTitle()：设置title的值\n*/\nsetTitle();\n```\n## 函数 ( 方法 ) 注释\n函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 [javadoc(百度百科)](http://baike.baidu.com/item/javadoc)\n语法：\n```\n/** \n* 函数说明 \n* @关键字 \n*/\n```\n常用注释关键字\n\n注释名 | 语法 | 含义 | 示例\n---|---|---|---|\n@param | @param 参数名 {参数类型}  描述信息 | 描述参数的信息 | @param name {String} 传入名称\n@return | @return {返回类型} 描述信息 | 描述返回值的信息 | @return {Boolean} true:可执行;false:不可执行\n@author | @author 作者信息 [附属信息：如邮箱、日期] | 描述此函数作者的信息 | @author 张三 2015/07/21 \n@version | \t@version XX.XX.XX | 描述此函数的版本号 |@version 1.0.3\n@example | @example 示例代码 |\t@example setTitle('测试') | 如下\n推荐 :\n```\n/**\n - 合并Grid的行\n - @param grid {Ext.Grid.Panel} 需要合并的Grid\n - @param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n - @param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n - @return void\n - @author polk6 2015/07/21 \n - @example\n - _________________                             _________________\n - |  年龄 |  姓名 |                             |  年龄 |  姓名 |\n - -----------------      mergeCells(grid,[0])   -----------------\n - |  18   |  张三 |              =>             |       |  张三 |\n - -----------------                             -  18   ---------\n - |  18   |  王五 |                             |       |  王五 |\n - -----------------                             -----------------\n*/\nfunction mergeCells(grid, cols, isAllSome) {\n    // Do Something\n}\n```\n# HTML规范\n## 文档规范\n使用 HTML5 的文档声明类型 : `<!DOCTYPE html>`\n\n- DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\n- 使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 \n- 没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。\n- 如果你的页面添加了<!DOCTYP>那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。\n\n## 脚本加载\n说到js和css的位置，大家应该都知道js放在下面，css放在上面。\n但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性`async`，将脚本文件放在`<head>`内\n**兼容老旧浏览器(IE9-)时**：\n脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。\n**而在现代浏览器中**：\n脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。\n综上所述，\n所有浏览器中推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n  </head>\n  <body>\n    <!-- body goes here -->\n \n    <script src=\"main.js\" async></script>\n  </body>\n</html>\n```\n只兼容现代浏览器推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"main.js\" async></script>\n  </head>\n  <body>\n    <!-- body goes here -->\n  </body>\n</html>\n```\n## 语义化\n我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。\n>语义化是指：根据元素其被创造出来时的初始意义来使用它。\n意思就是用正确的标签干正确的事，而不是只有`div`和`span`。\n\n不推荐：\n```\n<b>My page title</b>\n<div class=\"top-navigation\">\n  <div class=\"nav-item\"><a href=\"#home\">Home</a></div>\n  <div class=\"nav-item\"><a href=\"#news\">News</a></div>\n  <div class=\"nav-item\"><a href=\"#about\">About</a></div>\n</div>\n \n<div class=\"news-page\">\n  <div class=\"page-section news\">\n    <div class=\"title\">All news articles</div>\n    <div class=\"news-article\">\n      <h2>Bad article</h2>\n      <div class=\"intro\">Introduction sub-title</div>\n      <div class=\"content\">This is a very bad example for HTML semantics</div>\n      <div class=\"article-side-notes\">I think I'm more on the side and should not receive the main credits</div>\n      <div class=\"article-foot-notes\">\n        This article was created by David <div class=\"time\">2014-01-01 00:00</div>\n      </div>\n    </div>\n \n    <div class=\"section-footer\">\n      Related sections: Events, Public holidays\n    </div>\n  </div>\n</div>\n \n<div class=\"page-footer\">\n  Copyright 2014\n</div>\n```\n推荐\n\n```\nhtml 代码:\n<!-- The page header should go into a header element -->\n<header>\n  <!-- As this title belongs to the page structure it's a heading and h1 should be used -->\n  <h1>My page title</h1>\n</header>\n \n<!-- All navigation should go into a nav element -->\n<nav class=\"top-navigation\">\n  <!-- A listing of elements should always go to UL (OL for ordered listings) -->\n  <ul>\n    <li class=\"nav-item\"><a href=\"#home\">Home</a></li>\n    <li class=\"nav-item\"><a href=\"#news\">News</a></li>\n    <li class=\"nav-item\"><a href=\"#about\">About</a></li>\n  </ul>\n</nav>\n \n<!-- The main part of the page should go into a main element (also use role=\"main\" for accessibility) -->\n<main class=\"news-page\" role=\"main\">\n  <!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. -->\n  <section class=\"page-section news\">\n    <!-- A section header should go into a section element -->\n    <header>\n      <!-- As a page section belongs to the page structure heading elements should be used (in this case h2) -->\n      <h2 class=\"title\">All news articles</h2>\n    </header>\n \n    <!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other\n     re-usable module / section that can occur multiple times on a page) a article element should be used -->\n    <article class=\"news-article\">\n      <!-- An article can contain a header that contains the summary / introduction information of the article -->\n      <header>\n        <!-- As a article title does not belong to the overall page structure there should not be any heading tag! -->\n        <div class=\"article-title\">Good article</div>\n        <!-- Small can optionally be used to reduce importance -->\n        <small class=\"intro\">Introduction sub-title</small>\n      </header>\n \n      <!-- For the main content in a section or article there is no semantic element -->\n      <div class=\"content\">\n        <p>This is a good example for HTML semantics</p>\n      </div>\n      <!-- For content that is represented as side note or less important information in a given context use aside -->\n      <aside class=\"article-side-notes\">\n        <p>I think I'm more on the side and should not receive the main credits</p>\n      </aside>\n      <!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element -->\n      <footer class=\"article-foot-notes\">\n        <!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time\n         while the actual text in the time element can also be more human readable / relative -->\n        <p>This article was created by David <time datetime=\"2014-01-01 00:00\" class=\"time\">1 month ago</time></p>\n      </footer>\n    </article>\n \n    <!-- In a section, footnotes or similar information can also go into a footer element -->\n    <footer class=\"section-footer\">\n      <p>Related sections: Events, Public holidays</p>\n    </footer>\n  </section>\n</main>\n \n<!-- Your page footer should go into a global footer element -->\n<footer class=\"page-footer\">\n  Copyright 2014\n</footer>\n```\n## alt标签不为空\n`<img> `标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。\n假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：\n\n - 网速太慢\n - src 属性中的错误\n - 浏览器禁用图像\n - 用户使用的是屏幕阅读器\n\n从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容\n\n## 结构、表现、行为三者分离\n尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。\n在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。\n建议：\n\n - 不使用超过一到两张样式表\n - 不使用超过一到两个脚本（学会用合并脚本）\n - 不使用行内样式（`<style>.no-good {}</style>`）\n - 不在元素上使用 style 属性（`<hr style=\"border-top: 5px solid black\">`）\n - 不使用行内脚本（`<script>alert('no good')</script>`）\n - 不使用表象元素（`i.e. <b>, <u>, <center>, <font>, <b>`）\n - 不使用表象 class 名（`i.e. red, left, center`）\n\n## HTML只关注内容\n - HTML只显示展示内容信息\n - 不要引入一些特定的 HTML 结构来解决一些视觉设计问题\n - 不要将` img `元素当做专门用来做视觉设计的元素\n - 样式上的问题应该使用css解决\n\n不推荐：\n```\n<!-- We should not introduce an additional element just to solve a design problem  -->\n<span class=\"text-box\">\n  <span class=\"square\"></span>\n  See the square next to me?\n</span>\ncss 代码:\n.text-box > .square {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n**图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。**\n\n不推荐\n```\nhtml 代码:\n<!-- Content images should never be used for design elements!  -->\n<span class=\"text-box\">\n  <img src=\"square.svg\" alt=\"Square\" />\n  See the square next to me?\n</span>\n```\n推荐\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element with a background image to solve the problem */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background: url(square.svg) no-repeat;\n  background-size: 100%;\n}\n```\n# js规范\n## 避免全局命名空间污染\n防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。\n\nIIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。\n不推荐:\n```\nvar x = 10,\n    y = 100;\n \n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n```\n推荐\n```\n// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n \n  var x = 10,\n      y = 100;\n \n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n \n}(window.console.log, window));\n```\n推荐的IIFE写法:\n```\n(function(){\n  'use strict';\n \n  // Code goes here\n \n}());\n```\n如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：\n```\n(function($, w, d){\n  'use strict';\n \n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n```\n## 严格模式\nECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。\n\n严格模式会阻止使用在未来很可能被引入的预留关键字。\n\n你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。\n## 变量声明\n总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如\n```\nvar a = b = 0; //b会被隐式的创建为全局变量\n```\n所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：\n```\n(function (){\n  'use strict'\n  var a = 0,\n      b = 0,\n      c = 0,\n      i,\n      j,\n      myObject();\n}())\n```\n \n采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。\n## js声明提前\njavascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）\n例如：\n```\n(function(log){\n  'use strict';\n \n  var a = 10;\n \n  for(var i = 0; i < a; i++) {\n    var b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    var f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  function x() {\n    log('Mr. X!');\n  }\n  x();\n \n}(window.console.log));\n```\n提升后的js\n```\n(function(log){\n  'use strict';\n  // All variables used in the closure will be hoisted to the top of the function\n  var a,\n      i,\n      b,\n      f;\n  // All functions in the closure will be hoisted to the top\n  function x() {\n    log('Mr. X!');\n  }\n \n  a = 10;\n \n  for(i = 0; i < a; i++) {\n    b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    // Function assignments will only result in hoisted variables but the function body will not be hoisted\n    // Only by using a real function declaration the whole function will be hoisted with its body\n    f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  x();\n \n}(window.console.log));\n```\n## 使用严格等\n总是使用 `===` 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：\n```\n(function(log){\n  'use strict';\n \n  log('0' == 0); // true\n  log('' == false); // true\n  log('1' == true); // true\n  log(null == undefined); // true\n \n  var x = {\n    valueOf: function() {\n      return 'X';\n    }\n  };\n \n  log(x == 'X');\n \n}(window.console.log));\n```\n### 等同== 和严格等===的区别\n\n - ==， 两边值类型不同的时候，要先进行类型转换，再比较。\n - ===，不做类型转换，类型不同的一定不等。\n\n==等同操作符\n - 如果两个值具有相同类型，会进行===比较，返回===的比较值 \n - 如果两个值不具有相同类型，也有可能返回true \n - 如果一个值是null另一个值是undefined，返回true \n - 如果一个值是string另个是number，会把string转换成number再进行比较 \n - 如果一个值是true，会把它转成1再比较，false会转成0 \n\n\n```\nconsole.log( false == null )      // false\nconsole.log( false == undefined ) // false\nconsole.log( false == 0 )         // true\nconsole.log( false == '' )        // true\nconsole.log( false == NaN )       // false\n \nconsole.log( null == undefined ) // true\nconsole.log( null == 0 )         // false\nconsole.log( null == '' )        // false\nconsole.log( null == NaN )       // false\n \nconsole.log( undefined == 0)   // false\nconsole.log( undefined == '')  // false\nconsole.log( undefined == NaN) // false\n \nconsole.log( 0 == '' )  // true\nconsole.log( 0 == NaN ) // false\n```\n总结一下==\n \n\n - false 除了和自身比较为 true 外，和 0，\"\" 比较也为 true\n - null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个\n - 0 除了和 false 比较为 true，还有空字符串 ''\" 和空数组 []\n - 空字符串 '' 除了和 false 比较为 true，还有一个数字 0\n\n> ==, >, <, +, -, ... 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 `valueOf/toString\n> `的话，==就会产生副作用.\n\n例如：\n```\nArray.prototype.valueOf = function() {\n  this[0]++;\n  return this;\n}\nvar x = [1, 2, 3];\nx == 0;\nconsole.log(x);   // [2, 2, 3]\n```\n===操作符：\n \n - 要是两个值类型不同，返回false \n - 要是两个值都是number类型，并且数值相同，返回true \n - 要是两个值都是stirng，并且两个值的String内容相同，返回true \n - 要是两个值都是true或者都是false，返回true \n - 要是两个值都是指向相同的Object，Arraya或者function，返回true \n - 要是两个值都是null或者都是undefined，返回true\n\n## 真假判断\n - js中以下内容为假：\n - false\n - null\n - undefined\n - 0\n - '' (空字符串)\n - NaN\n\n## 设置默认参数\n辑操作符 || 和 && 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y\n```\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n```\n 等同于：\n ```\n x = x || y || 1;\n ```\n这一小技巧经常用来给方法设定默认的参数。\n```\n(function(log){\n  'use strict';\n \n  function multiply(a, b) {\n    a = a || 1;\n    b = b || 1;\n \n    log('Result ' + a * b);\n  }\n \n  multiply(); // Result 1\n  multiply(10); // Result 10\n  multiply(3, NaN); // Result 3\n  multiply(9, 5); // Result 45\n \n}(window.console.log));\n```\n## 不使用eval()函数\n就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。\neval()函数的作用是返回任意字符串，当作js代码来处理。\n## this关键字\n只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。\n\n正因为它是如此容易地被搞错，请限制它的使用场景：\n\n - 在构造函数中\n - 在对象的方法中（包括由此创建出的闭包内）\n\n## 首选函数式风格\n函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。\n\n接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。 \n不推荐\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20],\n      sum = 0,\n      i;\n \n \n  for(i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n \n  log('The sum of array ' + arr + ' is: ' + sum)\n \n}(window.console.log));\n```\n推荐(函数式编程)：\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20];\n \n  var sum = arr.reduce(function(prevValue, currentValue) {\n    return prevValue + currentValue;\n  }, 0);\n \n  log('The sum of array ' + arr + ' is: ' + sum);\n \n}(window.console.log));\n```\n## 修改内建对象的原型链\n修改内建的诸如 `Object.prototype` 和 `Array.prototype` 是被严厉禁止的。修改其它的内建对象比如 `Function.prototype`，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。\n\n## 三元条件判断（if 的快捷方法）\n用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。\n不推荐：\n```\nif(x === 10) {\n  return 'valid';\n} else {\n  return 'invalid';\n}\n```\n推荐：\n```\nreturn x === 10 ? 'valid' : 'invalid'\n```\n# JSHint\n在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用`===`而不是`==`，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例\n## webstorm内置JSHint\n对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。\n在Settings => language & frameworks => JavaScript => Code Quality Tolls => JSHint\n![webstorm中的jshint](http://img.blog.csdn.net/20170530124720963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考[官方文档](http://jshint.com/docs/)\n\n名称 | 含义\n---|---\ncurly| 循环或者条件语句必须使用花括号包住\neqeqeq | 使用强制等===\nnewcap | 对于首字母大写的函数（声明的类），强制使用new\nnoarg | 禁用arguments.caller和arguments.callee\nsub | 对于属性使用aaa.bbb而不是aaa['bbb']\nundef | 查找所有未定义的变量\nboss | 查找类似与if(a = 0)这样的代码\nnode | 指定运行环境为node\nstrict | 必须使用严格模式\nasi | 允许省略分号\nbitwise | 禁止使用位运算符，比如经常把&&写错& 规避此错误\njquery | 定义全局暴露的jQuery库\nevil | 禁止使用eval \nmaxdepth | 嵌套的最大深度\nmaxparams | 参数的最大个数\n# css规范\n## id和class的命名\nID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称\n不推荐 :\n```\n.fw-800 {\n  font-weight: 800;\n}\n \n.red {\n  color: red;\n}\n```\n推荐 :\n```\n.heavy {\n  font-weight: 800;\n}\n \n.important {\n  color: red;\n}\n```\n## 合理的使用ID\n一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class\n不推荐：\n```\n#content .title {\n  font-size: 2em;\n}\n```\n推荐：\n```\n.content .title {\n  font-size: 2em;\n}\n```\n## css选择器中避免使用标签名\n从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。\n## 使用子选择器\n很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。\n有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。\n然而，在任何情况下，这是一个非常不好的做法。\n如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。\n不推荐:\n```\n.content .title {\n  font-size: 2rem;\n}\n```\n推荐\n```\n.content > .title {\n  font-size: 2rem;\n}\n```\n## 尽量使用缩写属性\n尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。\n不推荐：\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n推荐：\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n## 0后面不带单位\n省略0后面的单位，\n不推荐：\n\n```\npadding-bottom: 0px;\nmargin: 0em;\n```\n推荐：\n```\npadding-bottom: 0;\nmargin: 0;\n```\n## 属性格式\n\n - 为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。\n - 属性名的冒号后使用一个空格。出于一致性的原因，\n属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。\n - 每个选择器和属性声明总是使用新的一行。\n - 属性选择器或属性值用双引号（””），而不是单引号（”）括起来。\n - URI值（url()）不要使用引号。\n\n作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：\n\n结构性属性：\n\n 1. display\n 2. position, left, top, right etc.\n 3. overflow, float, clear etc.\n 4. margin, padding\n\n表现性属性：\n\n - background, border etc.\n - font, text\n\n不推荐：\n```\n .box {\n  font-family: 'Arial', sans-serif;\n  border: 3px solid #ddd;\n  left: 30%;\n  position: absolute;\n  text-transform: uppercase;\n  background-color: #eee;\n  right: 30%;\n  isplay: block;\n  font-size: 1.5rem;\n  overflow: hidden;\n  padding: 1em;\n  margin: 1em;\n}\n```\n推荐：\n```\n.box {\n  display: block;\n  position: absolute;\n  left: 30%;\n  right: 30%;\n  overflow: hidden;\n  margin: 1em;\n  padding: 1em;\n  background-color: #eee;\n  border: 3px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n```\n 相关文章：\n \n - [前端编码规范](http://www.css88.com/archives/5505)\n - [JavsScript开发规范](http://www.cnblogs.com/polk6/p/4660195.html)、\n - [开发规范（四）JS规范](https://segmentfault.com/a/1190000006131512)\n\n \n ","slug":"developing-guideline","published":1,"updated":"2017-08-07T02:16:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxq0023vvxif61444h2","content":"<p><img src=\"http://img.blog.csdn.net/20170530152035209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。<br>我是有一点强迫症的人，上周我们后端给我了一个CanUsename的接口（该接口的目的是判断输入的目的地是否是4级目的地），我真的是崩溃的。<br>我只是觉得这个名字不够语义化，但是让我自己想一个名字我又想不出来，于是我就在想，如果有一套命名规范的话，那么以后起名字就不用发愁了，直接按照规范来就好了~<br>于是端午在家就百度了一下~<br><a id=\"more\"></a></p>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><h2 id=\"驼峰式命名法介绍\"><a href=\"#驼峰式命名法介绍\" class=\"headerlink\" title=\"驼峰式命名法介绍\"></a>驼峰式命名法介绍</h2><ul>\n<li>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo</li>\n<li>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo</li>\n</ul>\n<h2 id=\"文件资源命名\"><a href=\"#文件资源命名\" class=\"headerlink\" title=\"文件资源命名\"></a>文件资源命名</h2><ul>\n<li>文件名不得含有空格</li>\n<li>文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )</li>\n<li>文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。</li>\n<li>引入资源使用相对路径，不要指定资源所带的具体协议 ( <code>http:</code>,<code>https:</code> ) ，除非这两者协议都不可用。</li>\n</ul>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;http://cdn.com/foundation.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;//cdn.com/foundation.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><p><strong>命名方式</strong> : 小驼峰式命名方法<br><strong>命名规范</strong> : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>小写字母</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>array</td>\n<td>a</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>b</td>\n</tr>\n<tr>\n<td>function</td>\n<td>fn</td>\n</tr>\n<tr>\n<td>int</td>\n<td>i</td>\n</tr>\n<tr>\n<td>object</td>\n<td>o</td>\n</tr>\n<tr>\n<td>regular</td>\n<td>r</td>\n</tr>\n<tr>\n<td>string</td>\n<td>s</td>\n</tr>\n</tbody>\n</table>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var tableTitle = &quot;LoginTable&quot;</div></pre></td></tr></table></figure></p>\n<p>不推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getTitle = &quot;LoginTable&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p><strong>命名方式</strong> : 小驼峰方式 ( 构造函数使用大驼峰命名法 )<br><strong>命名规则</strong> : 前缀为动词</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>含义</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>can</td>\n<td>判断是否可执行某个动作 ( 权限 )</td>\n<td>函数返回一个布尔值。true：可执行；false：不可执行</td>\n</tr>\n<tr>\n<td>has</td>\n<td>判断是否含有某个值</td>\n<td>函数返回一个布尔值。true：含有此值；false：不含有此值</td>\n</tr>\n<tr>\n<td>is</td>\n<td>判断是否为某个值</td>\n<td>函数返回一个布尔值。true：为某个值；false：不为某个值</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取某个值</td>\n<td>函数返回一个非布尔值</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置某个值</td>\n<td>无返回值、返回是否设置成功或者返回链式对象</td>\n</tr>\n</tbody>\n</table>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//是否可阅读</div><div class=\"line\">function canRead()&#123;</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//获取姓名</div><div class=\"line\">function getName&#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p><strong>命名方法</strong> : 全部大写<br><strong>命名规范</strong> : 使用大写字母和下划线来组合命名，下划线用以分割单词。<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MAX_COUNT = 10;</div><div class=\"line\">var URL = &apos;http://www.baidu.com&apos;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"类的成员\"><a href=\"#类的成员\" class=\"headerlink\" title=\"类的成员\"></a>类的成员</h2><ul>\n<li>公共属性和方法 : 同变量命名方式</li>\n<li>私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式</li>\n</ul>\n<p>推荐(将<code>name</code>换成<code>this</code>是不是更熟悉了呢)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Student(name) &#123;</div><div class=\"line\">    var _name = name; // 私有成员</div><div class=\"line\"> </div><div class=\"line\">    // 公共方法</div><div class=\"line\">    this.getName = function () &#123;</div><div class=\"line\">        return _name;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    // 公共方式</div><div class=\"line\">    this.setName = function (value) &#123;</div><div class=\"line\">        _name = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var st = new Student(&apos;tom&apos;);</div><div class=\"line\">st.setName(&apos;jerry&apos;);</div><div class=\"line\">console.log(st.getName()); // =&gt; jerry：输出_name私有变量的值</div></pre></td></tr></table></figure></p>\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><h3 id=\"单行注释\"><a href=\"#单行注释\" class=\"headerlink\" title=\"单行注释 ( // )\"></a>单行注释 ( // )</h3><ul>\n<li>单独一行：//(双斜线)与注释文字之间保留一个空格</li>\n<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>\n<li>注释代码：//(双斜线)与代码之间保留一个空格。<br>推荐 : <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 调用了一个函数；1)单独在一行</div><div class=\"line\">setTitle();</div><div class=\"line\"> </div><div class=\"line\">var maxCount = 10; // 设置最大量；2)在代码后面注释</div><div class=\"line\"> </div><div class=\"line\">// setName(); // 3)注释代码</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"多行注释-注释说明\"><a href=\"#多行注释-注释说明\" class=\"headerlink\" title=\"多行注释 ( / 注释说明 / )\"></a>多行注释 ( /<em> 注释说明 </em>/ )</h2><ul>\n<li>若开始(/<code>*</code>和结束(<code>*</code>/)都在一行，推荐采用单行注释</li>\n<li>若至少三行注释时，第一行为/<code>*</code>，最后行为<code>*</code>/，其他行以<code>*</code>开始，并且注释文字与<code>*</code>保留一个空格。<br>推荐 : <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\">* 代码执行到这里后会调用setTitle()函数</div><div class=\"line\">* setTitle()：设置title的值</div><div class=\"line\">*/</div><div class=\"line\">setTitle();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"函数-方法-注释\"><a href=\"#函数-方法-注释\" class=\"headerlink\" title=\"函数 ( 方法 ) 注释\"></a>函数 ( 方法 ) 注释</h2><p>函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 <a href=\"http://baike.baidu.com/item/javadoc\" target=\"_blank\" rel=\"external\">javadoc(百度百科)</a><br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** </div><div class=\"line\">* 函数说明 </div><div class=\"line\">* @关键字 </div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>常用注释关键字</p>\n<table>\n<thead>\n<tr>\n<th>注释名</th>\n<th>语法</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@param</td>\n<td>@param 参数名 {参数类型}  描述信息</td>\n<td>描述参数的信息</td>\n<td>@param name {String} 传入名称</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>@return {返回类型} 描述信息</td>\n<td>描述返回值的信息</td>\n<td>@return {Boolean} true:可执行;false:不可执行</td>\n</tr>\n<tr>\n<td>@author</td>\n<td>@author 作者信息 [附属信息：如邮箱、日期]</td>\n<td>描述此函数作者的信息</td>\n<td>@author 张三 2015/07/21 </td>\n</tr>\n<tr>\n<td>@version</td>\n<td>@version XX.XX.XX</td>\n<td>描述此函数的版本号</td>\n<td>@version 1.0.3</td>\n</tr>\n<tr>\n<td>@example</td>\n<td>@example 示例代码</td>\n<td>@example setTitle(‘测试’)</td>\n<td>如下</td>\n</tr>\n</tbody>\n</table>\n<p>推荐 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> - 合并Grid的行</div><div class=\"line\"> - @param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</div><div class=\"line\"> - @param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</div><div class=\"line\"> - @param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</div><div class=\"line\"> - @return void</div><div class=\"line\"> - @author polk6 2015/07/21 </div><div class=\"line\"> - @example</div><div class=\"line\"> - _________________                             _________________</div><div class=\"line\"> - |  年龄 |  姓名 |                             |  年龄 |  姓名 |</div><div class=\"line\"> - -----------------      mergeCells(grid,[0])   -----------------</div><div class=\"line\"> - |  18   |  张三 |              =&gt;             |       |  张三 |</div><div class=\"line\"> - -----------------                             -  18   ---------</div><div class=\"line\"> - |  18   |  王五 |                             |       |  王五 |</div><div class=\"line\"> - -----------------                             -----------------</div><div class=\"line\">*/</div><div class=\"line\">function mergeCells(grid, cols, isAllSome) &#123;</div><div class=\"line\">    // Do Something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"HTML规范\"><a href=\"#HTML规范\" class=\"headerlink\" title=\"HTML规范\"></a>HTML规范</h1><h2 id=\"文档规范\"><a href=\"#文档规范\" class=\"headerlink\" title=\"文档规范\"></a>文档规范</h2><p>使用 HTML5 的文档声明类型 : <code>&lt;!DOCTYPE html&gt;</code></p>\n<ul>\n<li>DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。</li>\n<li>使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 </li>\n<li>没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。</li>\n<li>如果你的页面添加了&lt;!DOCTYP&gt;那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。</li>\n</ul>\n<h2 id=\"脚本加载\"><a href=\"#脚本加载\" class=\"headerlink\" title=\"脚本加载\"></a>脚本加载</h2><p>说到js和css的位置，大家应该都知道js放在下面，css放在上面。<br>但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性<code>async</code>，将脚本文件放在<code>&lt;head&gt;</code>内<br><strong>兼容老旧浏览器(IE9-)时</strong>：<br>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。<br><strong>而在现代浏览器中</strong>：<br>脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。<br>综上所述，<br>所有浏览器中推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;!-- body goes here --&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;script src=&quot;main.js&quot; async&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>只兼容现代浏览器推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;</div><div class=\"line\">    &lt;script src=&quot;main.js&quot; async&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;!-- body goes here --&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h2><p>我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。</p>\n<blockquote>\n<p>语义化是指：根据元素其被创造出来时的初始意义来使用它。<br>意思就是用正确的标签干正确的事，而不是只有<code>div</code>和<code>span</code>。</p>\n</blockquote>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt;My page title&lt;/b&gt;</div><div class=\"line\">&lt;div class=&quot;top-navigation&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#news&quot;&gt;News&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div class=&quot;news-page&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;page-section news&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;title&quot;&gt;All news articles&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;news-article&quot;&gt;</div><div class=\"line\">      &lt;h2&gt;Bad article&lt;/h2&gt;</div><div class=\"line\">      &lt;div class=&quot;intro&quot;&gt;Introduction sub-title&lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;content&quot;&gt;This is a very bad example for HTML semantics&lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;article-side-notes&quot;&gt;I think I&apos;m more on the side and should not receive the main credits&lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;article-foot-notes&quot;&gt;</div><div class=\"line\">        This article was created by David &lt;div class=&quot;time&quot;&gt;2014-01-01 00:00&lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;div class=&quot;section-footer&quot;&gt;</div><div class=\"line\">      Related sections: Events, Public holidays</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div class=&quot;page-footer&quot;&gt;</div><div class=\"line\">  Copyright 2014</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- The page header should go into a header element --&gt;</div><div class=\"line\">&lt;header&gt;</div><div class=\"line\">  &lt;!-- As this title belongs to the page structure it&apos;s a heading and h1 should be used --&gt;</div><div class=\"line\">  &lt;h1&gt;My page title&lt;/h1&gt;</div><div class=\"line\">&lt;/header&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;!-- All navigation should go into a nav element --&gt;</div><div class=\"line\">&lt;nav class=&quot;top-navigation&quot;&gt;</div><div class=\"line\">  &lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#news&quot;&gt;News&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;!-- The main part of the page should go into a main element (also use role=&quot;main&quot; for accessibility) --&gt;</div><div class=\"line\">&lt;main class=&quot;news-page&quot; role=&quot;main&quot;&gt;</div><div class=\"line\">  &lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;</div><div class=\"line\">  &lt;section class=&quot;page-section news&quot;&gt;</div><div class=\"line\">    &lt;!-- A section header should go into a section element --&gt;</div><div class=\"line\">    &lt;header&gt;</div><div class=\"line\">      &lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;</div><div class=\"line\">      &lt;h2 class=&quot;title&quot;&gt;All news articles&lt;/h2&gt;</div><div class=\"line\">    &lt;/header&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other</div><div class=\"line\">     re-usable module / section that can occur multiple times on a page) a article element should be used --&gt;</div><div class=\"line\">    &lt;article class=&quot;news-article&quot;&gt;</div><div class=\"line\">      &lt;!-- An article can contain a header that contains the summary / introduction information of the article --&gt;</div><div class=\"line\">      &lt;header&gt;</div><div class=\"line\">        &lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;</div><div class=\"line\">        &lt;div class=&quot;article-title&quot;&gt;Good article&lt;/div&gt;</div><div class=\"line\">        &lt;!-- Small can optionally be used to reduce importance --&gt;</div><div class=\"line\">        &lt;small class=&quot;intro&quot;&gt;Introduction sub-title&lt;/small&gt;</div><div class=\"line\">      &lt;/header&gt;</div><div class=\"line\"> </div><div class=\"line\">      &lt;!-- For the main content in a section or article there is no semantic element --&gt;</div><div class=\"line\">      &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">        &lt;p&gt;This is a good example for HTML semantics&lt;/p&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;</div><div class=\"line\">      &lt;aside class=&quot;article-side-notes&quot;&gt;</div><div class=\"line\">        &lt;p&gt;I think I&apos;m more on the side and should not receive the main credits&lt;/p&gt;</div><div class=\"line\">      &lt;/aside&gt;</div><div class=\"line\">      &lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;</div><div class=\"line\">      &lt;footer class=&quot;article-foot-notes&quot;&gt;</div><div class=\"line\">        &lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time</div><div class=\"line\">         while the actual text in the time element can also be more human readable / relative --&gt;</div><div class=\"line\">        &lt;p&gt;This article was created by David &lt;time datetime=&quot;2014-01-01 00:00&quot; class=&quot;time&quot;&gt;1 month ago&lt;/time&gt;&lt;/p&gt;</div><div class=\"line\">      &lt;/footer&gt;</div><div class=\"line\">    &lt;/article&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;</div><div class=\"line\">    &lt;footer class=&quot;section-footer&quot;&gt;</div><div class=\"line\">      &lt;p&gt;Related sections: Events, Public holidays&lt;/p&gt;</div><div class=\"line\">    &lt;/footer&gt;</div><div class=\"line\">  &lt;/section&gt;</div><div class=\"line\">&lt;/main&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;!-- Your page footer should go into a global footer element --&gt;</div><div class=\"line\">&lt;footer class=&quot;page-footer&quot;&gt;</div><div class=\"line\">  Copyright 2014</div><div class=\"line\">&lt;/footer&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"alt标签不为空\"><a href=\"#alt标签不为空\" class=\"headerlink\" title=\"alt标签不为空\"></a>alt标签不为空</h2><p><code>&lt;img&gt;</code>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。<br>假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：</p>\n<ul>\n<li>网速太慢</li>\n<li>src 属性中的错误</li>\n<li>浏览器禁用图像</li>\n<li>用户使用的是屏幕阅读器</li>\n</ul>\n<p>从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容</p>\n<h2 id=\"结构、表现、行为三者分离\"><a href=\"#结构、表现、行为三者分离\" class=\"headerlink\" title=\"结构、表现、行为三者分离\"></a>结构、表现、行为三者分离</h2><p>尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。<br>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。<br>建议：</p>\n<ul>\n<li>不使用超过一到两张样式表</li>\n<li>不使用超过一到两个脚本（学会用合并脚本）</li>\n<li>不使用行内样式（<code>&lt;style&gt;.no-good {}&lt;/style&gt;</code>）</li>\n<li>不在元素上使用 style 属性（<code>&lt;hr style=&quot;border-top: 5px solid black&quot;&gt;</code>）</li>\n<li>不使用行内脚本（<code>&lt;script&gt;alert(&#39;no good&#39;)&lt;/script&gt;</code>）</li>\n<li>不使用表象元素（<code>i.e. &lt;b&gt;, &lt;u&gt;, &lt;center&gt;, &lt;font&gt;, &lt;b&gt;</code>）</li>\n<li>不使用表象 class 名（<code>i.e. red, left, center</code>）</li>\n</ul>\n<h2 id=\"HTML只关注内容\"><a href=\"#HTML只关注内容\" class=\"headerlink\" title=\"HTML只关注内容\"></a>HTML只关注内容</h2><ul>\n<li>HTML只显示展示内容信息</li>\n<li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li>\n<li>不要将<code>img</code>元素当做专门用来做视觉设计的元素</li>\n<li>样式上的问题应该使用css解决</li>\n</ul>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  &lt;span class=&quot;square&quot;&gt;&lt;/span&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">css 代码:</div><div class=\"line\">.text-box &gt; .square &#123;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  width: 1rem;</div><div class=\"line\">  height: 1rem;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- That&apos;s clean markup! --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">css 代码:</div><div class=\"line\">/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */</div><div class=\"line\">.text-box:before &#123;</div><div class=\"line\">  content: &quot;&quot;;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  width: 1rem;</div><div class=\"line\">  height: 1rem;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</strong></p>\n<p>不推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- Content images should never be used for design elements!  --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  &lt;img src=&quot;square.svg&quot; alt=&quot;Square&quot; /&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- That&apos;s clean markup! --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">css 代码:</div><div class=\"line\">/* We use a :before pseudo element with a background image to solve the problem */</div><div class=\"line\">.text-box:before &#123;</div><div class=\"line\">  content: &quot;&quot;;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  width: 1rem;</div><div class=\"line\">  height: 1rem;</div><div class=\"line\">  background: url(square.svg) no-repeat;</div><div class=\"line\">  background-size: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"js规范\"><a href=\"#js规范\" class=\"headerlink\" title=\"js规范\"></a>js规范</h1><h2 id=\"避免全局命名空间污染\"><a href=\"#避免全局命名空间污染\" class=\"headerlink\" title=\"避免全局命名空间污染\"></a>避免全局命名空间污染</h2><p>防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。</p>\n<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。<br>不推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var x = 10,</div><div class=\"line\">    y = 100;</div><div class=\"line\"> </div><div class=\"line\">// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this</div><div class=\"line\">// will be stored in the window object. This is very unclean and needs to be avoided.</div><div class=\"line\">console.log(window.x + &apos; &apos; + window.y);</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// We declare a IIFE and pass parameters into the function that we will use from the global space</div><div class=\"line\">(function(log, w, undefined)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var x = 10,</div><div class=\"line\">      y = 100;</div><div class=\"line\"> </div><div class=\"line\">  // Will output &apos;true true&apos;</div><div class=\"line\">  log((w.x === undefined) + &apos; &apos; + (w.y === undefined));</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log, window));</div></pre></td></tr></table></figure></p>\n<p>推荐的IIFE写法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  // Code goes here</div><div class=\"line\"> </div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure></p>\n<p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($, w, d)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  $(function() &#123;</div><div class=\"line\">    w.alert(d.querySelectorAll(&apos;div&apos;).length);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;(jQuery, window, document));</div></pre></td></tr></table></figure></p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p>\n<p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p>\n<p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = b = 0; //b会被隐式的创建为全局变量</div></pre></td></tr></table></figure></p>\n<p>所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function ()&#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var a = 0,</div><div class=\"line\">      b = 0,</div><div class=\"line\">      c = 0,</div><div class=\"line\">      i,</div><div class=\"line\">      j,</div><div class=\"line\">      myObject();</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure></p>\n<p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p>\n<h2 id=\"js声明提前\"><a href=\"#js声明提前\" class=\"headerlink\" title=\"js声明提前\"></a>js声明提前</h2><p>javascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var a = 10;</div><div class=\"line\"> </div><div class=\"line\">  for(var i = 0; i &lt; a; i++) &#123;</div><div class=\"line\">    var b = i * i;</div><div class=\"line\">    log(b);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  if(a === 10) &#123;</div><div class=\"line\">    var f = function() &#123;</div><div class=\"line\">      log(a);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    f();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  function x() &#123;</div><div class=\"line\">    log(&apos;Mr. X!&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  x();</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<p>提升后的js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\">  // All variables used in the closure will be hoisted to the top of the function</div><div class=\"line\">  var a,</div><div class=\"line\">      i,</div><div class=\"line\">      b,</div><div class=\"line\">      f;</div><div class=\"line\">  // All functions in the closure will be hoisted to the top</div><div class=\"line\">  function x() &#123;</div><div class=\"line\">    log(&apos;Mr. X!&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  a = 10;</div><div class=\"line\"> </div><div class=\"line\">  for(i = 0; i &lt; a; i++) &#123;</div><div class=\"line\">    b = i * i;</div><div class=\"line\">    log(b);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  if(a === 10) &#123;</div><div class=\"line\">    // Function assignments will only result in hoisted variables but the function body will not be hoisted</div><div class=\"line\">    // Only by using a real function declaration the whole function will be hoisted with its body</div><div class=\"line\">    f = function() &#123;</div><div class=\"line\">      log(a);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    f();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  x();</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用严格等\"><a href=\"#使用严格等\" class=\"headerlink\" title=\"使用严格等\"></a>使用严格等</h2><p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  log(&apos;0&apos; == 0); // true</div><div class=\"line\">  log(&apos;&apos; == false); // true</div><div class=\"line\">  log(&apos;1&apos; == true); // true</div><div class=\"line\">  log(null == undefined); // true</div><div class=\"line\"> </div><div class=\"line\">  var x = &#123;</div><div class=\"line\">    valueOf: function() &#123;</div><div class=\"line\">      return &apos;X&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"> </div><div class=\"line\">  log(x == &apos;X&apos;);</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h3 id=\"等同-和严格等-的区别\"><a href=\"#等同-和严格等-的区别\" class=\"headerlink\" title=\"等同== 和严格等===的区别\"></a>等同== 和严格等===的区别</h3><ul>\n<li>==， 两边值类型不同的时候，要先进行类型转换，再比较。</li>\n<li>===，不做类型转换，类型不同的一定不等。</li>\n</ul>\n<p>==等同操作符</p>\n<ul>\n<li>如果两个值具有相同类型，会进行===比较，返回===的比较值 </li>\n<li>如果两个值不具有相同类型，也有可能返回true </li>\n<li>如果一个值是null另一个值是undefined，返回true </li>\n<li>如果一个值是string另个是number，会把string转换成number再进行比较 </li>\n<li>如果一个值是true，会把它转成1再比较，false会转成0 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log( false == null )      // false</div><div class=\"line\">console.log( false == undefined ) // false</div><div class=\"line\">console.log( false == 0 )         // true</div><div class=\"line\">console.log( false == &apos;&apos; )        // true</div><div class=\"line\">console.log( false == NaN )       // false</div><div class=\"line\"> </div><div class=\"line\">console.log( null == undefined ) // true</div><div class=\"line\">console.log( null == 0 )         // false</div><div class=\"line\">console.log( null == &apos;&apos; )        // false</div><div class=\"line\">console.log( null == NaN )       // false</div><div class=\"line\"> </div><div class=\"line\">console.log( undefined == 0)   // false</div><div class=\"line\">console.log( undefined == &apos;&apos;)  // false</div><div class=\"line\">console.log( undefined == NaN) // false</div><div class=\"line\"> </div><div class=\"line\">console.log( 0 == &apos;&apos; )  // true</div><div class=\"line\">console.log( 0 == NaN ) // false</div></pre></td></tr></table></figure>\n<p>总结一下==</p>\n<ul>\n<li>false 除了和自身比较为 true 外，和 0，”” 比较也为 true</li>\n<li>null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个</li>\n<li>0 除了和 false 比较为 true，还有空字符串 ‘’” 和空数组 []</li>\n<li>空字符串 ‘’ 除了和 false 比较为 true，还有一个数字 0</li>\n</ul>\n<blockquote>\n<p>==, &gt;, &lt;, +, -, … 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 <code>valueOf/toString</code>的话，==就会产生副作用.</p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.prototype.valueOf = function() &#123;</div><div class=\"line\">  this[0]++;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\">var x = [1, 2, 3];</div><div class=\"line\">x == 0;</div><div class=\"line\">console.log(x);   // [2, 2, 3]</div></pre></td></tr></table></figure></p>\n<p>===操作符：</p>\n<ul>\n<li>要是两个值类型不同，返回false </li>\n<li>要是两个值都是number类型，并且数值相同，返回true </li>\n<li>要是两个值都是stirng，并且两个值的String内容相同，返回true </li>\n<li>要是两个值都是true或者都是false，返回true </li>\n<li>要是两个值都是指向相同的Object，Arraya或者function，返回true </li>\n<li>要是两个值都是null或者都是undefined，返回true</li>\n</ul>\n<h2 id=\"真假判断\"><a href=\"#真假判断\" class=\"headerlink\" title=\"真假判断\"></a>真假判断</h2><ul>\n<li>js中以下内容为假：</li>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>‘’ (空字符串)</li>\n<li>NaN</li>\n</ul>\n<h2 id=\"设置默认参数\"><a href=\"#设置默认参数\" class=\"headerlink\" title=\"设置默认参数\"></a>设置默认参数</h2><p>辑操作符 || 和 &amp;&amp; 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(!x) &#123;</div><div class=\"line\">  if(!y) &#123;</div><div class=\"line\">    x = 1;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    x = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 等同于：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = x || y || 1;</div></pre></td></tr></table></figure></p>\n<p>这一小技巧经常用来给方法设定默认的参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  function multiply(a, b) &#123;</div><div class=\"line\">    a = a || 1;</div><div class=\"line\">    b = b || 1;</div><div class=\"line\"> </div><div class=\"line\">    log(&apos;Result &apos; + a * b);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  multiply(); // Result 1</div><div class=\"line\">  multiply(10); // Result 10</div><div class=\"line\">  multiply(3, NaN); // Result 3</div><div class=\"line\">  multiply(9, 5); // Result 45</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h2 id=\"不使用eval-函数\"><a href=\"#不使用eval-函数\" class=\"headerlink\" title=\"不使用eval()函数\"></a>不使用eval()函数</h2><p>就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。<br>eval()函数的作用是返回任意字符串，当作js代码来处理。</p>\n<h2 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h2><p>只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。</p>\n<p>正因为它是如此容易地被搞错，请限制它的使用场景：</p>\n<ul>\n<li>在构造函数中</li>\n<li>在对象的方法中（包括由此创建出的闭包内）</li>\n</ul>\n<h2 id=\"首选函数式风格\"><a href=\"#首选函数式风格\" class=\"headerlink\" title=\"首选函数式风格\"></a>首选函数式风格</h2><p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p>\n<p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。<br>不推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var arr = [10, 3, 7, 9, 100, 20],</div><div class=\"line\">      sum = 0,</div><div class=\"line\">      i;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">  for(i = 0; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    sum += arr[i];</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  log(&apos;The sum of array &apos; + arr + &apos; is: &apos; + sum)</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<p>推荐(函数式编程)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var arr = [10, 3, 7, 9, 100, 20];</div><div class=\"line\"> </div><div class=\"line\">  var sum = arr.reduce(function(prevValue, currentValue) &#123;</div><div class=\"line\">    return prevValue + currentValue;</div><div class=\"line\">  &#125;, 0);</div><div class=\"line\"> </div><div class=\"line\">  log(&apos;The sum of array &apos; + arr + &apos; is: &apos; + sum);</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改内建对象的原型链\"><a href=\"#修改内建对象的原型链\" class=\"headerlink\" title=\"修改内建对象的原型链\"></a>修改内建对象的原型链</h2><p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p>\n<h2 id=\"三元条件判断（if-的快捷方法）\"><a href=\"#三元条件判断（if-的快捷方法）\" class=\"headerlink\" title=\"三元条件判断（if 的快捷方法）\"></a>三元条件判断（if 的快捷方法）</h2><p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。<br>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(x === 10) &#123;</div><div class=\"line\">  return &apos;valid&apos;;</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">  return &apos;invalid&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return x === 10 ? &apos;valid&apos; : &apos;invalid&apos;</div></pre></td></tr></table></figure></p>\n<h1 id=\"JSHint\"><a href=\"#JSHint\" class=\"headerlink\" title=\"JSHint\"></a>JSHint</h1><p>在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用<code>===</code>而不是<code>==</code>，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例</p>\n<h2 id=\"webstorm内置JSHint\"><a href=\"#webstorm内置JSHint\" class=\"headerlink\" title=\"webstorm内置JSHint\"></a>webstorm内置JSHint</h2><p>对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。<br>在Settings =&gt; language &amp; frameworks =&gt; JavaScript =&gt; Code Quality Tolls =&gt; JSHint<br><img src=\"http://img.blog.csdn.net/20170530124720963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"webstorm中的jshint\">这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考<a href=\"http://jshint.com/docs/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>curly</td>\n<td>循环或者条件语句必须使用花括号包住</td>\n</tr>\n<tr>\n<td>eqeqeq</td>\n<td>使用强制等===</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>对于首字母大写的函数（声明的类），强制使用new</td>\n</tr>\n<tr>\n<td>noarg</td>\n<td>禁用arguments.caller和arguments.callee</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>对于属性使用aaa.bbb而不是aaa[‘bbb’]</td>\n</tr>\n<tr>\n<td>undef</td>\n<td>查找所有未定义的变量</td>\n</tr>\n<tr>\n<td>boss</td>\n<td>查找类似与if(a = 0)这样的代码</td>\n</tr>\n<tr>\n<td>node</td>\n<td>指定运行环境为node</td>\n</tr>\n<tr>\n<td>strict</td>\n<td>必须使用严格模式</td>\n</tr>\n<tr>\n<td>asi</td>\n<td>允许省略分号</td>\n</tr>\n<tr>\n<td>bitwise</td>\n<td>禁止使用位运算符，比如经常把&amp;&amp;写错&amp; 规避此错误</td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>定义全局暴露的jQuery库</td>\n</tr>\n<tr>\n<td>evil</td>\n<td>禁止使用eval </td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>嵌套的最大深度</td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>参数的最大个数</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"css规范\"><a href=\"#css规范\" class=\"headerlink\" title=\"css规范\"></a>css规范</h1><h2 id=\"id和class的命名\"><a href=\"#id和class的命名\" class=\"headerlink\" title=\"id和class的命名\"></a>id和class的命名</h2><p>ID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称<br>不推荐 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.fw-800 &#123;</div><div class=\"line\">  font-weight: 800;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">.red &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.heavy &#123;</div><div class=\"line\">  font-weight: 800;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">.important &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"合理的使用ID\"><a href=\"#合理的使用ID\" class=\"headerlink\" title=\"合理的使用ID\"></a>合理的使用ID</h2><p>一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class<br>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#content .title &#123;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.content .title &#123;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"css选择器中避免使用标签名\"><a href=\"#css选择器中避免使用标签名\" class=\"headerlink\" title=\"css选择器中避免使用标签名\"></a>css选择器中避免使用标签名</h2><p>从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。</p>\n<h2 id=\"使用子选择器\"><a href=\"#使用子选择器\" class=\"headerlink\" title=\"使用子选择器\"></a>使用子选择器</h2><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。<br>有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。<br>然而，在任何情况下，这是一个非常不好的做法。<br>如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。<br>不推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.content .title &#123;</div><div class=\"line\">  font-size: 2rem;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.content &gt; .title &#123;</div><div class=\"line\">  font-size: 2rem;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"尽量使用缩写属性\"><a href=\"#尽量使用缩写属性\" class=\"headerlink\" title=\"尽量使用缩写属性\"></a>尽量使用缩写属性</h2><p>尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。<br>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top-style: none;</div><div class=\"line\">font-family: palatino, georgia, serif;</div><div class=\"line\">font-size: 100%;</div><div class=\"line\">line-height: 1.6;</div><div class=\"line\">padding-bottom: 2em;</div><div class=\"line\">padding-left: 1em;</div><div class=\"line\">padding-right: 1em;</div><div class=\"line\">padding-top: 0;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top: 0;</div><div class=\"line\">font: 100%/1.6 palatino, georgia, serif;</div><div class=\"line\">padding: 0 1em 2em;</div></pre></td></tr></table></figure></p>\n<h2 id=\"0后面不带单位\"><a href=\"#0后面不带单位\" class=\"headerlink\" title=\"0后面不带单位\"></a>0后面不带单位</h2><p>省略0后面的单位，<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">padding-bottom: 0px;</div><div class=\"line\">margin: 0em;</div></pre></td></tr></table></figure>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">padding-bottom: 0;</div><div class=\"line\">margin: 0;</div></pre></td></tr></table></figure></p>\n<h2 id=\"属性格式\"><a href=\"#属性格式\" class=\"headerlink\" title=\"属性格式\"></a>属性格式</h2><ul>\n<li>为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。</li>\n<li>属性名的冒号后使用一个空格。出于一致性的原因，<br>属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。</li>\n<li>每个选择器和属性声明总是使用新的一行。</li>\n<li>属性选择器或属性值用双引号（””），而不是单引号（”）括起来。</li>\n<li>URI值（url()）不要使用引号。</li>\n</ul>\n<p>作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：</p>\n<p>结构性属性：</p>\n<ol>\n<li>display</li>\n<li>position, left, top, right etc.</li>\n<li>overflow, float, clear etc.</li>\n<li>margin, padding</li>\n</ol>\n<p>表现性属性：</p>\n<ul>\n<li>background, border etc.</li>\n<li>font, text</li>\n</ul>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> .box &#123;</div><div class=\"line\">  font-family: &apos;Arial&apos;, sans-serif;</div><div class=\"line\">  border: 3px solid #ddd;</div><div class=\"line\">  left: 30%;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  text-transform: uppercase;</div><div class=\"line\">  background-color: #eee;</div><div class=\"line\">  right: 30%;</div><div class=\"line\">  isplay: block;</div><div class=\"line\">  font-size: 1.5rem;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">  padding: 1em;</div><div class=\"line\">  margin: 1em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  left: 30%;</div><div class=\"line\">  right: 30%;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">  margin: 1em;</div><div class=\"line\">  padding: 1em;</div><div class=\"line\">  background-color: #eee;</div><div class=\"line\">  border: 3px solid #ddd;</div><div class=\"line\">  font-family: &apos;Arial&apos;, sans-serif;</div><div class=\"line\">  font-size: 1.5rem;</div><div class=\"line\">  text-transform: uppercase;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 相关文章：</p>\n<ul>\n<li><a href=\"http://www.css88.com/archives/5505\" target=\"_blank\" rel=\"external\">前端编码规范</a></li>\n<li><a href=\"http://www.cnblogs.com/polk6/p/4660195.html\" target=\"_blank\" rel=\"external\">JavsScript开发规范</a>、</li>\n<li><a href=\"https://segmentfault.com/a/1190000006131512\" target=\"_blank\" rel=\"external\">开发规范（四）JS规范</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170530152035209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。<br>我是有一点强迫症的人，上周我们后端给我了一个CanUsename的接口（该接口的目的是判断输入的目的地是否是4级目的地），我真的是崩溃的。<br>我只是觉得这个名字不够语义化，但是让我自己想一个名字我又想不出来，于是我就在想，如果有一套命名规范的话，那么以后起名字就不用发愁了，直接按照规范来就好了~<br>于是端午在家就百度了一下~<br>","more":"</p>\n<h1 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h1><h2 id=\"驼峰式命名法介绍\"><a href=\"#驼峰式命名法介绍\" class=\"headerlink\" title=\"驼峰式命名法介绍\"></a>驼峰式命名法介绍</h2><ul>\n<li>Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo</li>\n<li>Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo</li>\n</ul>\n<h2 id=\"文件资源命名\"><a href=\"#文件资源命名\" class=\"headerlink\" title=\"文件资源命名\"></a>文件资源命名</h2><ul>\n<li>文件名不得含有空格</li>\n<li>文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )</li>\n<li>文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。</li>\n<li>引入资源使用相对路径，不要指定资源所带的具体协议 ( <code>http:</code>,<code>https:</code> ) ，除非这两者协议都不可用。</li>\n</ul>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;http://cdn.com/foundation.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;//cdn.com/foundation.min.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"变量命名\"><a href=\"#变量命名\" class=\"headerlink\" title=\"变量命名\"></a>变量命名</h2><p><strong>命名方式</strong> : 小驼峰式命名方法<br><strong>命名规范</strong> : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>小写字母</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>array</td>\n<td>a</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>b</td>\n</tr>\n<tr>\n<td>function</td>\n<td>fn</td>\n</tr>\n<tr>\n<td>int</td>\n<td>i</td>\n</tr>\n<tr>\n<td>object</td>\n<td>o</td>\n</tr>\n<tr>\n<td>regular</td>\n<td>r</td>\n</tr>\n<tr>\n<td>string</td>\n<td>s</td>\n</tr>\n</tbody>\n</table>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var tableTitle = &quot;LoginTable&quot;</div></pre></td></tr></table></figure></p>\n<p>不推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var getTitle = &quot;LoginTable&quot;</div></pre></td></tr></table></figure></p>\n<h2 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h2><p><strong>命名方式</strong> : 小驼峰方式 ( 构造函数使用大驼峰命名法 )<br><strong>命名规则</strong> : 前缀为动词</p>\n<table>\n<thead>\n<tr>\n<th>动词</th>\n<th>含义</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>can</td>\n<td>判断是否可执行某个动作 ( 权限 )</td>\n<td>函数返回一个布尔值。true：可执行；false：不可执行</td>\n</tr>\n<tr>\n<td>has</td>\n<td>判断是否含有某个值</td>\n<td>函数返回一个布尔值。true：含有此值；false：不含有此值</td>\n</tr>\n<tr>\n<td>is</td>\n<td>判断是否为某个值</td>\n<td>函数返回一个布尔值。true：为某个值；false：不为某个值</td>\n</tr>\n<tr>\n<td>get</td>\n<td>获取某个值</td>\n<td>函数返回一个非布尔值</td>\n</tr>\n<tr>\n<td>set</td>\n<td>设置某个值</td>\n<td>无返回值、返回是否设置成功或者返回链式对象</td>\n</tr>\n</tbody>\n</table>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//是否可阅读</div><div class=\"line\">function canRead()&#123;</div><div class=\"line\">    return true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">//获取姓名</div><div class=\"line\">function getName&#123;</div><div class=\"line\">    return this.name</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p><strong>命名方法</strong> : 全部大写<br><strong>命名规范</strong> : 使用大写字母和下划线来组合命名，下划线用以分割单词。<br>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MAX_COUNT = 10;</div><div class=\"line\">var URL = &apos;http://www.baidu.com&apos;;</div></pre></td></tr></table></figure></p>\n<h2 id=\"类的成员\"><a href=\"#类的成员\" class=\"headerlink\" title=\"类的成员\"></a>类的成员</h2><ul>\n<li>公共属性和方法 : 同变量命名方式</li>\n<li>私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式</li>\n</ul>\n<p>推荐(将<code>name</code>换成<code>this</code>是不是更熟悉了呢)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Student(name) &#123;</div><div class=\"line\">    var _name = name; // 私有成员</div><div class=\"line\"> </div><div class=\"line\">    // 公共方法</div><div class=\"line\">    this.getName = function () &#123;</div><div class=\"line\">        return _name;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">    // 公共方式</div><div class=\"line\">    this.setName = function (value) &#123;</div><div class=\"line\">        _name = value;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">var st = new Student(&apos;tom&apos;);</div><div class=\"line\">st.setName(&apos;jerry&apos;);</div><div class=\"line\">console.log(st.getName()); // =&gt; jerry：输出_name私有变量的值</div></pre></td></tr></table></figure></p>\n<h2 id=\"注释规范\"><a href=\"#注释规范\" class=\"headerlink\" title=\"注释规范\"></a>注释规范</h2><h3 id=\"单行注释\"><a href=\"#单行注释\" class=\"headerlink\" title=\"单行注释 ( // )\"></a>单行注释 ( // )</h3><ul>\n<li>单独一行：//(双斜线)与注释文字之间保留一个空格</li>\n<li>在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。</li>\n<li>注释代码：//(双斜线)与代码之间保留一个空格。<br>推荐 : <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 调用了一个函数；1)单独在一行</div><div class=\"line\">setTitle();</div><div class=\"line\"> </div><div class=\"line\">var maxCount = 10; // 设置最大量；2)在代码后面注释</div><div class=\"line\"> </div><div class=\"line\">// setName(); // 3)注释代码</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"多行注释-注释说明\"><a href=\"#多行注释-注释说明\" class=\"headerlink\" title=\"多行注释 ( / 注释说明 / )\"></a>多行注释 ( /<em> 注释说明 </em>/ )</h2><ul>\n<li>若开始(/<code>*</code>和结束(<code>*</code>/)都在一行，推荐采用单行注释</li>\n<li>若至少三行注释时，第一行为/<code>*</code>，最后行为<code>*</code>/，其他行以<code>*</code>开始，并且注释文字与<code>*</code>保留一个空格。<br>推荐 : <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\">* 代码执行到这里后会调用setTitle()函数</div><div class=\"line\">* setTitle()：设置title的值</div><div class=\"line\">*/</div><div class=\"line\">setTitle();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"函数-方法-注释\"><a href=\"#函数-方法-注释\" class=\"headerlink\" title=\"函数 ( 方法 ) 注释\"></a>函数 ( 方法 ) 注释</h2><p>函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 <a href=\"http://baike.baidu.com/item/javadoc\" target=\"_blank\" rel=\"external\">javadoc(百度百科)</a><br>语法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/** </div><div class=\"line\">* 函数说明 </div><div class=\"line\">* @关键字 </div><div class=\"line\">*/</div></pre></td></tr></table></figure></p>\n<p>常用注释关键字</p>\n<table>\n<thead>\n<tr>\n<th>注释名</th>\n<th>语法</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@param</td>\n<td>@param 参数名 {参数类型}  描述信息</td>\n<td>描述参数的信息</td>\n<td>@param name {String} 传入名称</td>\n</tr>\n<tr>\n<td>@return</td>\n<td>@return {返回类型} 描述信息</td>\n<td>描述返回值的信息</td>\n<td>@return {Boolean} true:可执行;false:不可执行</td>\n</tr>\n<tr>\n<td>@author</td>\n<td>@author 作者信息 [附属信息：如邮箱、日期]</td>\n<td>描述此函数作者的信息</td>\n<td>@author 张三 2015/07/21 </td>\n</tr>\n<tr>\n<td>@version</td>\n<td>@version XX.XX.XX</td>\n<td>描述此函数的版本号</td>\n<td>@version 1.0.3</td>\n</tr>\n<tr>\n<td>@example</td>\n<td>@example 示例代码</td>\n<td>@example setTitle(‘测试’)</td>\n<td>如下</td>\n</tr>\n</tbody>\n</table>\n<p>推荐 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> - 合并Grid的行</div><div class=\"line\"> - @param grid &#123;Ext.Grid.Panel&#125; 需要合并的Grid</div><div class=\"line\"> - @param cols &#123;Array&#125; 需要合并列的Index(序号)数组；从0开始计数，序号也包含。</div><div class=\"line\"> - @param isAllSome &#123;Boolean&#125; ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样</div><div class=\"line\"> - @return void</div><div class=\"line\"> - @author polk6 2015/07/21 </div><div class=\"line\"> - @example</div><div class=\"line\"> - _________________                             _________________</div><div class=\"line\"> - |  年龄 |  姓名 |                             |  年龄 |  姓名 |</div><div class=\"line\"> - -----------------      mergeCells(grid,[0])   -----------------</div><div class=\"line\"> - |  18   |  张三 |              =&gt;             |       |  张三 |</div><div class=\"line\"> - -----------------                             -  18   ---------</div><div class=\"line\"> - |  18   |  王五 |                             |       |  王五 |</div><div class=\"line\"> - -----------------                             -----------------</div><div class=\"line\">*/</div><div class=\"line\">function mergeCells(grid, cols, isAllSome) &#123;</div><div class=\"line\">    // Do Something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"HTML规范\"><a href=\"#HTML规范\" class=\"headerlink\" title=\"HTML规范\"></a>HTML规范</h1><h2 id=\"文档规范\"><a href=\"#文档规范\" class=\"headerlink\" title=\"文档规范\"></a>文档规范</h2><p>使用 HTML5 的文档声明类型 : <code>&lt;!DOCTYPE html&gt;</code></p>\n<ul>\n<li>DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。</li>\n<li>使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 </li>\n<li>没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。</li>\n<li>如果你的页面添加了&lt;!DOCTYP&gt;那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。</li>\n</ul>\n<h2 id=\"脚本加载\"><a href=\"#脚本加载\" class=\"headerlink\" title=\"脚本加载\"></a>脚本加载</h2><p>说到js和css的位置，大家应该都知道js放在下面，css放在上面。<br>但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性<code>async</code>，将脚本文件放在<code>&lt;head&gt;</code>内<br><strong>兼容老旧浏览器(IE9-)时</strong>：<br>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。<br><strong>而在现代浏览器中</strong>：<br>脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。<br>综上所述，<br>所有浏览器中推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;!-- body goes here --&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;script src=&quot;main.js&quot; async&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>只兼容现代浏览器推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;head&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;main.css&quot;&gt;</div><div class=\"line\">    &lt;script src=&quot;main.js&quot; async&gt;&lt;/script&gt;</div><div class=\"line\">  &lt;/head&gt;</div><div class=\"line\">  &lt;body&gt;</div><div class=\"line\">    &lt;!-- body goes here --&gt;</div><div class=\"line\">  &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"语义化\"><a href=\"#语义化\" class=\"headerlink\" title=\"语义化\"></a>语义化</h2><p>我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。</p>\n<blockquote>\n<p>语义化是指：根据元素其被创造出来时的初始意义来使用它。<br>意思就是用正确的标签干正确的事，而不是只有<code>div</code>和<code>span</code>。</p>\n</blockquote>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;b&gt;My page title&lt;/b&gt;</div><div class=\"line\">&lt;div class=&quot;top-navigation&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#news&quot;&gt;News&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">  &lt;div class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div class=&quot;news-page&quot;&gt;</div><div class=\"line\">  &lt;div class=&quot;page-section news&quot;&gt;</div><div class=\"line\">    &lt;div class=&quot;title&quot;&gt;All news articles&lt;/div&gt;</div><div class=\"line\">    &lt;div class=&quot;news-article&quot;&gt;</div><div class=\"line\">      &lt;h2&gt;Bad article&lt;/h2&gt;</div><div class=\"line\">      &lt;div class=&quot;intro&quot;&gt;Introduction sub-title&lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;content&quot;&gt;This is a very bad example for HTML semantics&lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;article-side-notes&quot;&gt;I think I&apos;m more on the side and should not receive the main credits&lt;/div&gt;</div><div class=\"line\">      &lt;div class=&quot;article-foot-notes&quot;&gt;</div><div class=\"line\">        This article was created by David &lt;div class=&quot;time&quot;&gt;2014-01-01 00:00&lt;/div&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;div class=&quot;section-footer&quot;&gt;</div><div class=\"line\">      Related sections: Events, Public holidays</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;div class=&quot;page-footer&quot;&gt;</div><div class=\"line\">  Copyright 2014</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- The page header should go into a header element --&gt;</div><div class=\"line\">&lt;header&gt;</div><div class=\"line\">  &lt;!-- As this title belongs to the page structure it&apos;s a heading and h1 should be used --&gt;</div><div class=\"line\">  &lt;h1&gt;My page title&lt;/h1&gt;</div><div class=\"line\">&lt;/header&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;!-- All navigation should go into a nav element --&gt;</div><div class=\"line\">&lt;nav class=&quot;top-navigation&quot;&gt;</div><div class=\"line\">  &lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;</div><div class=\"line\">  &lt;ul&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#home&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#news&quot;&gt;News&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">    &lt;li class=&quot;nav-item&quot;&gt;&lt;a href=&quot;#about&quot;&gt;About&lt;/a&gt;&lt;/li&gt;</div><div class=\"line\">  &lt;/ul&gt;</div><div class=\"line\">&lt;/nav&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;!-- The main part of the page should go into a main element (also use role=&quot;main&quot; for accessibility) --&gt;</div><div class=\"line\">&lt;main class=&quot;news-page&quot; role=&quot;main&quot;&gt;</div><div class=\"line\">  &lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;</div><div class=\"line\">  &lt;section class=&quot;page-section news&quot;&gt;</div><div class=\"line\">    &lt;!-- A section header should go into a section element --&gt;</div><div class=\"line\">    &lt;header&gt;</div><div class=\"line\">      &lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;</div><div class=\"line\">      &lt;h2 class=&quot;title&quot;&gt;All news articles&lt;/h2&gt;</div><div class=\"line\">    &lt;/header&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other</div><div class=\"line\">     re-usable module / section that can occur multiple times on a page) a article element should be used --&gt;</div><div class=\"line\">    &lt;article class=&quot;news-article&quot;&gt;</div><div class=\"line\">      &lt;!-- An article can contain a header that contains the summary / introduction information of the article --&gt;</div><div class=\"line\">      &lt;header&gt;</div><div class=\"line\">        &lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;</div><div class=\"line\">        &lt;div class=&quot;article-title&quot;&gt;Good article&lt;/div&gt;</div><div class=\"line\">        &lt;!-- Small can optionally be used to reduce importance --&gt;</div><div class=\"line\">        &lt;small class=&quot;intro&quot;&gt;Introduction sub-title&lt;/small&gt;</div><div class=\"line\">      &lt;/header&gt;</div><div class=\"line\"> </div><div class=\"line\">      &lt;!-- For the main content in a section or article there is no semantic element --&gt;</div><div class=\"line\">      &lt;div class=&quot;content&quot;&gt;</div><div class=\"line\">        &lt;p&gt;This is a good example for HTML semantics&lt;/p&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">      &lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;</div><div class=\"line\">      &lt;aside class=&quot;article-side-notes&quot;&gt;</div><div class=\"line\">        &lt;p&gt;I think I&apos;m more on the side and should not receive the main credits&lt;/p&gt;</div><div class=\"line\">      &lt;/aside&gt;</div><div class=\"line\">      &lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;</div><div class=\"line\">      &lt;footer class=&quot;article-foot-notes&quot;&gt;</div><div class=\"line\">        &lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time</div><div class=\"line\">         while the actual text in the time element can also be more human readable / relative --&gt;</div><div class=\"line\">        &lt;p&gt;This article was created by David &lt;time datetime=&quot;2014-01-01 00:00&quot; class=&quot;time&quot;&gt;1 month ago&lt;/time&gt;&lt;/p&gt;</div><div class=\"line\">      &lt;/footer&gt;</div><div class=\"line\">    &lt;/article&gt;</div><div class=\"line\"> </div><div class=\"line\">    &lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;</div><div class=\"line\">    &lt;footer class=&quot;section-footer&quot;&gt;</div><div class=\"line\">      &lt;p&gt;Related sections: Events, Public holidays&lt;/p&gt;</div><div class=\"line\">    &lt;/footer&gt;</div><div class=\"line\">  &lt;/section&gt;</div><div class=\"line\">&lt;/main&gt;</div><div class=\"line\"> </div><div class=\"line\">&lt;!-- Your page footer should go into a global footer element --&gt;</div><div class=\"line\">&lt;footer class=&quot;page-footer&quot;&gt;</div><div class=\"line\">  Copyright 2014</div><div class=\"line\">&lt;/footer&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"alt标签不为空\"><a href=\"#alt标签不为空\" class=\"headerlink\" title=\"alt标签不为空\"></a>alt标签不为空</h2><p><code>&lt;img&gt;</code>标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。<br>假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：</p>\n<ul>\n<li>网速太慢</li>\n<li>src 属性中的错误</li>\n<li>浏览器禁用图像</li>\n<li>用户使用的是屏幕阅读器</li>\n</ul>\n<p>从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容</p>\n<h2 id=\"结构、表现、行为三者分离\"><a href=\"#结构、表现、行为三者分离\" class=\"headerlink\" title=\"结构、表现、行为三者分离\"></a>结构、表现、行为三者分离</h2><p>尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。<br>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。<br>建议：</p>\n<ul>\n<li>不使用超过一到两张样式表</li>\n<li>不使用超过一到两个脚本（学会用合并脚本）</li>\n<li>不使用行内样式（<code>&lt;style&gt;.no-good {}&lt;/style&gt;</code>）</li>\n<li>不在元素上使用 style 属性（<code>&lt;hr style=&quot;border-top: 5px solid black&quot;&gt;</code>）</li>\n<li>不使用行内脚本（<code>&lt;script&gt;alert(&#39;no good&#39;)&lt;/script&gt;</code>）</li>\n<li>不使用表象元素（<code>i.e. &lt;b&gt;, &lt;u&gt;, &lt;center&gt;, &lt;font&gt;, &lt;b&gt;</code>）</li>\n<li>不使用表象 class 名（<code>i.e. red, left, center</code>）</li>\n</ul>\n<h2 id=\"HTML只关注内容\"><a href=\"#HTML只关注内容\" class=\"headerlink\" title=\"HTML只关注内容\"></a>HTML只关注内容</h2><ul>\n<li>HTML只显示展示内容信息</li>\n<li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li>\n<li>不要将<code>img</code>元素当做专门用来做视觉设计的元素</li>\n<li>样式上的问题应该使用css解决</li>\n</ul>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  &lt;span class=&quot;square&quot;&gt;&lt;/span&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">css 代码:</div><div class=\"line\">.text-box &gt; .square &#123;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  width: 1rem;</div><div class=\"line\">  height: 1rem;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- That&apos;s clean markup! --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">css 代码:</div><div class=\"line\">/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */</div><div class=\"line\">.text-box:before &#123;</div><div class=\"line\">  content: &quot;&quot;;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  width: 1rem;</div><div class=\"line\">  height: 1rem;</div><div class=\"line\">  background-color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</strong></p>\n<p>不推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- Content images should never be used for design elements!  --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  &lt;img src=&quot;square.svg&quot; alt=&quot;Square&quot; /&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">html 代码:</div><div class=\"line\">&lt;!-- That&apos;s clean markup! --&gt;</div><div class=\"line\">&lt;span class=&quot;text-box&quot;&gt;</div><div class=\"line\">  See the square next to me?</div><div class=\"line\">&lt;/span&gt;</div><div class=\"line\">css 代码:</div><div class=\"line\">/* We use a :before pseudo element with a background image to solve the problem */</div><div class=\"line\">.text-box:before &#123;</div><div class=\"line\">  content: &quot;&quot;;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  width: 1rem;</div><div class=\"line\">  height: 1rem;</div><div class=\"line\">  background: url(square.svg) no-repeat;</div><div class=\"line\">  background-size: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h1 id=\"js规范\"><a href=\"#js规范\" class=\"headerlink\" title=\"js规范\"></a>js规范</h1><h2 id=\"避免全局命名空间污染\"><a href=\"#避免全局命名空间污染\" class=\"headerlink\" title=\"避免全局命名空间污染\"></a>避免全局命名空间污染</h2><p>防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。</p>\n<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。<br>不推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">var x = 10,</div><div class=\"line\">    y = 100;</div><div class=\"line\"> </div><div class=\"line\">// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this</div><div class=\"line\">// will be stored in the window object. This is very unclean and needs to be avoided.</div><div class=\"line\">console.log(window.x + &apos; &apos; + window.y);</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// We declare a IIFE and pass parameters into the function that we will use from the global space</div><div class=\"line\">(function(log, w, undefined)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var x = 10,</div><div class=\"line\">      y = 100;</div><div class=\"line\"> </div><div class=\"line\">  // Will output &apos;true true&apos;</div><div class=\"line\">  log((w.x === undefined) + &apos; &apos; + (w.y === undefined));</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log, window));</div></pre></td></tr></table></figure></p>\n<p>推荐的IIFE写法:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function()&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  // Code goes here</div><div class=\"line\"> </div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure></p>\n<p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function($, w, d)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  $(function() &#123;</div><div class=\"line\">    w.alert(d.querySelectorAll(&apos;div&apos;).length);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;(jQuery, window, document));</div></pre></td></tr></table></figure></p>\n<h2 id=\"严格模式\"><a href=\"#严格模式\" class=\"headerlink\" title=\"严格模式\"></a>严格模式</h2><p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p>\n<p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p>\n<p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p>\n<h2 id=\"变量声明\"><a href=\"#变量声明\" class=\"headerlink\" title=\"变量声明\"></a>变量声明</h2><p>总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = b = 0; //b会被隐式的创建为全局变量</div></pre></td></tr></table></figure></p>\n<p>所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function ()&#123;</div><div class=\"line\">  &apos;use strict&apos;</div><div class=\"line\">  var a = 0,</div><div class=\"line\">      b = 0,</div><div class=\"line\">      c = 0,</div><div class=\"line\">      i,</div><div class=\"line\">      j,</div><div class=\"line\">      myObject();</div><div class=\"line\">&#125;())</div></pre></td></tr></table></figure></p>\n<p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p>\n<h2 id=\"js声明提前\"><a href=\"#js声明提前\" class=\"headerlink\" title=\"js声明提前\"></a>js声明提前</h2><p>javascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）<br>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var a = 10;</div><div class=\"line\"> </div><div class=\"line\">  for(var i = 0; i &lt; a; i++) &#123;</div><div class=\"line\">    var b = i * i;</div><div class=\"line\">    log(b);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  if(a === 10) &#123;</div><div class=\"line\">    var f = function() &#123;</div><div class=\"line\">      log(a);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    f();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  function x() &#123;</div><div class=\"line\">    log(&apos;Mr. X!&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\">  x();</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<p>提升后的js<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\">  // All variables used in the closure will be hoisted to the top of the function</div><div class=\"line\">  var a,</div><div class=\"line\">      i,</div><div class=\"line\">      b,</div><div class=\"line\">      f;</div><div class=\"line\">  // All functions in the closure will be hoisted to the top</div><div class=\"line\">  function x() &#123;</div><div class=\"line\">    log(&apos;Mr. X!&apos;);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  a = 10;</div><div class=\"line\"> </div><div class=\"line\">  for(i = 0; i &lt; a; i++) &#123;</div><div class=\"line\">    b = i * i;</div><div class=\"line\">    log(b);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  if(a === 10) &#123;</div><div class=\"line\">    // Function assignments will only result in hoisted variables but the function body will not be hoisted</div><div class=\"line\">    // Only by using a real function declaration the whole function will be hoisted with its body</div><div class=\"line\">    f = function() &#123;</div><div class=\"line\">      log(a);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    f();</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  x();</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h2 id=\"使用严格等\"><a href=\"#使用严格等\" class=\"headerlink\" title=\"使用严格等\"></a>使用严格等</h2><p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  log(&apos;0&apos; == 0); // true</div><div class=\"line\">  log(&apos;&apos; == false); // true</div><div class=\"line\">  log(&apos;1&apos; == true); // true</div><div class=\"line\">  log(null == undefined); // true</div><div class=\"line\"> </div><div class=\"line\">  var x = &#123;</div><div class=\"line\">    valueOf: function() &#123;</div><div class=\"line\">      return &apos;X&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\"> </div><div class=\"line\">  log(x == &apos;X&apos;);</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h3 id=\"等同-和严格等-的区别\"><a href=\"#等同-和严格等-的区别\" class=\"headerlink\" title=\"等同== 和严格等===的区别\"></a>等同== 和严格等===的区别</h3><ul>\n<li>==， 两边值类型不同的时候，要先进行类型转换，再比较。</li>\n<li>===，不做类型转换，类型不同的一定不等。</li>\n</ul>\n<p>==等同操作符</p>\n<ul>\n<li>如果两个值具有相同类型，会进行===比较，返回===的比较值 </li>\n<li>如果两个值不具有相同类型，也有可能返回true </li>\n<li>如果一个值是null另一个值是undefined，返回true </li>\n<li>如果一个值是string另个是number，会把string转换成number再进行比较 </li>\n<li>如果一个值是true，会把它转成1再比较，false会转成0 </li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">console.log( false == null )      // false</div><div class=\"line\">console.log( false == undefined ) // false</div><div class=\"line\">console.log( false == 0 )         // true</div><div class=\"line\">console.log( false == &apos;&apos; )        // true</div><div class=\"line\">console.log( false == NaN )       // false</div><div class=\"line\"> </div><div class=\"line\">console.log( null == undefined ) // true</div><div class=\"line\">console.log( null == 0 )         // false</div><div class=\"line\">console.log( null == &apos;&apos; )        // false</div><div class=\"line\">console.log( null == NaN )       // false</div><div class=\"line\"> </div><div class=\"line\">console.log( undefined == 0)   // false</div><div class=\"line\">console.log( undefined == &apos;&apos;)  // false</div><div class=\"line\">console.log( undefined == NaN) // false</div><div class=\"line\"> </div><div class=\"line\">console.log( 0 == &apos;&apos; )  // true</div><div class=\"line\">console.log( 0 == NaN ) // false</div></pre></td></tr></table></figure>\n<p>总结一下==</p>\n<ul>\n<li>false 除了和自身比较为 true 外，和 0，”” 比较也为 true</li>\n<li>null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个</li>\n<li>0 除了和 false 比较为 true，还有空字符串 ‘’” 和空数组 []</li>\n<li>空字符串 ‘’ 除了和 false 比较为 true，还有一个数字 0</li>\n</ul>\n<blockquote>\n<p>==, &gt;, &lt;, +, -, … 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 <code>valueOf/toString</code>的话，==就会产生副作用.</p>\n</blockquote>\n<p>例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Array.prototype.valueOf = function() &#123;</div><div class=\"line\">  this[0]++;</div><div class=\"line\">  return this;</div><div class=\"line\">&#125;</div><div class=\"line\">var x = [1, 2, 3];</div><div class=\"line\">x == 0;</div><div class=\"line\">console.log(x);   // [2, 2, 3]</div></pre></td></tr></table></figure></p>\n<p>===操作符：</p>\n<ul>\n<li>要是两个值类型不同，返回false </li>\n<li>要是两个值都是number类型，并且数值相同，返回true </li>\n<li>要是两个值都是stirng，并且两个值的String内容相同，返回true </li>\n<li>要是两个值都是true或者都是false，返回true </li>\n<li>要是两个值都是指向相同的Object，Arraya或者function，返回true </li>\n<li>要是两个值都是null或者都是undefined，返回true</li>\n</ul>\n<h2 id=\"真假判断\"><a href=\"#真假判断\" class=\"headerlink\" title=\"真假判断\"></a>真假判断</h2><ul>\n<li>js中以下内容为假：</li>\n<li>false</li>\n<li>null</li>\n<li>undefined</li>\n<li>0</li>\n<li>‘’ (空字符串)</li>\n<li>NaN</li>\n</ul>\n<h2 id=\"设置默认参数\"><a href=\"#设置默认参数\" class=\"headerlink\" title=\"设置默认参数\"></a>设置默认参数</h2><p>辑操作符 || 和 &amp;&amp; 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(!x) &#123;</div><div class=\"line\">  if(!y) &#123;</div><div class=\"line\">    x = 1;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    x = y;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 等同于：<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = x || y || 1;</div></pre></td></tr></table></figure></p>\n<p>这一小技巧经常用来给方法设定默认的参数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  function multiply(a, b) &#123;</div><div class=\"line\">    a = a || 1;</div><div class=\"line\">    b = b || 1;</div><div class=\"line\"> </div><div class=\"line\">    log(&apos;Result &apos; + a * b);</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  multiply(); // Result 1</div><div class=\"line\">  multiply(10); // Result 10</div><div class=\"line\">  multiply(3, NaN); // Result 3</div><div class=\"line\">  multiply(9, 5); // Result 45</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h2 id=\"不使用eval-函数\"><a href=\"#不使用eval-函数\" class=\"headerlink\" title=\"不使用eval()函数\"></a>不使用eval()函数</h2><p>就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。<br>eval()函数的作用是返回任意字符串，当作js代码来处理。</p>\n<h2 id=\"this关键字\"><a href=\"#this关键字\" class=\"headerlink\" title=\"this关键字\"></a>this关键字</h2><p>只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。</p>\n<p>正因为它是如此容易地被搞错，请限制它的使用场景：</p>\n<ul>\n<li>在构造函数中</li>\n<li>在对象的方法中（包括由此创建出的闭包内）</li>\n</ul>\n<h2 id=\"首选函数式风格\"><a href=\"#首选函数式风格\" class=\"headerlink\" title=\"首选函数式风格\"></a>首选函数式风格</h2><p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p>\n<p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。<br>不推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var arr = [10, 3, 7, 9, 100, 20],</div><div class=\"line\">      sum = 0,</div><div class=\"line\">      i;</div><div class=\"line\"> </div><div class=\"line\"> </div><div class=\"line\">  for(i = 0; i &lt; arr.length; i++) &#123;</div><div class=\"line\">    sum += arr[i];</div><div class=\"line\">  &#125;</div><div class=\"line\"> </div><div class=\"line\">  log(&apos;The sum of array &apos; + arr + &apos; is: &apos; + sum)</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<p>推荐(函数式编程)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">(function(log)&#123;</div><div class=\"line\">  &apos;use strict&apos;;</div><div class=\"line\"> </div><div class=\"line\">  var arr = [10, 3, 7, 9, 100, 20];</div><div class=\"line\"> </div><div class=\"line\">  var sum = arr.reduce(function(prevValue, currentValue) &#123;</div><div class=\"line\">    return prevValue + currentValue;</div><div class=\"line\">  &#125;, 0);</div><div class=\"line\"> </div><div class=\"line\">  log(&apos;The sum of array &apos; + arr + &apos; is: &apos; + sum);</div><div class=\"line\"> </div><div class=\"line\">&#125;(window.console.log));</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改内建对象的原型链\"><a href=\"#修改内建对象的原型链\" class=\"headerlink\" title=\"修改内建对象的原型链\"></a>修改内建对象的原型链</h2><p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p>\n<h2 id=\"三元条件判断（if-的快捷方法）\"><a href=\"#三元条件判断（if-的快捷方法）\" class=\"headerlink\" title=\"三元条件判断（if 的快捷方法）\"></a>三元条件判断（if 的快捷方法）</h2><p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。<br>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">if(x === 10) &#123;</div><div class=\"line\">  return &apos;valid&apos;;</div><div class=\"line\">&#125; else &#123;</div><div class=\"line\">  return &apos;invalid&apos;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return x === 10 ? &apos;valid&apos; : &apos;invalid&apos;</div></pre></td></tr></table></figure></p>\n<h1 id=\"JSHint\"><a href=\"#JSHint\" class=\"headerlink\" title=\"JSHint\"></a>JSHint</h1><p>在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用<code>===</code>而不是<code>==</code>，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例</p>\n<h2 id=\"webstorm内置JSHint\"><a href=\"#webstorm内置JSHint\" class=\"headerlink\" title=\"webstorm内置JSHint\"></a>webstorm内置JSHint</h2><p>对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。<br>在Settings =&gt; language &amp; frameworks =&gt; JavaScript =&gt; Code Quality Tolls =&gt; JSHint<br><img src=\"http://img.blog.csdn.net/20170530124720963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"webstorm中的jshint\">这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考<a href=\"http://jshint.com/docs/\" target=\"_blank\" rel=\"external\">官方文档</a></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>curly</td>\n<td>循环或者条件语句必须使用花括号包住</td>\n</tr>\n<tr>\n<td>eqeqeq</td>\n<td>使用强制等===</td>\n</tr>\n<tr>\n<td>newcap</td>\n<td>对于首字母大写的函数（声明的类），强制使用new</td>\n</tr>\n<tr>\n<td>noarg</td>\n<td>禁用arguments.caller和arguments.callee</td>\n</tr>\n<tr>\n<td>sub</td>\n<td>对于属性使用aaa.bbb而不是aaa[‘bbb’]</td>\n</tr>\n<tr>\n<td>undef</td>\n<td>查找所有未定义的变量</td>\n</tr>\n<tr>\n<td>boss</td>\n<td>查找类似与if(a = 0)这样的代码</td>\n</tr>\n<tr>\n<td>node</td>\n<td>指定运行环境为node</td>\n</tr>\n<tr>\n<td>strict</td>\n<td>必须使用严格模式</td>\n</tr>\n<tr>\n<td>asi</td>\n<td>允许省略分号</td>\n</tr>\n<tr>\n<td>bitwise</td>\n<td>禁止使用位运算符，比如经常把&amp;&amp;写错&amp; 规避此错误</td>\n</tr>\n<tr>\n<td>jquery</td>\n<td>定义全局暴露的jQuery库</td>\n</tr>\n<tr>\n<td>evil</td>\n<td>禁止使用eval </td>\n</tr>\n<tr>\n<td>maxdepth</td>\n<td>嵌套的最大深度</td>\n</tr>\n<tr>\n<td>maxparams</td>\n<td>参数的最大个数</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"css规范\"><a href=\"#css规范\" class=\"headerlink\" title=\"css规范\"></a>css规范</h1><h2 id=\"id和class的命名\"><a href=\"#id和class的命名\" class=\"headerlink\" title=\"id和class的命名\"></a>id和class的命名</h2><p>ID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称<br>不推荐 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.fw-800 &#123;</div><div class=\"line\">  font-weight: 800;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">.red &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐 :<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">.heavy &#123;</div><div class=\"line\">  font-weight: 800;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">.important &#123;</div><div class=\"line\">  color: red;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"合理的使用ID\"><a href=\"#合理的使用ID\" class=\"headerlink\" title=\"合理的使用ID\"></a>合理的使用ID</h2><p>一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class<br>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#content .title &#123;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.content .title &#123;</div><div class=\"line\">  font-size: 2em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"css选择器中避免使用标签名\"><a href=\"#css选择器中避免使用标签名\" class=\"headerlink\" title=\"css选择器中避免使用标签名\"></a>css选择器中避免使用标签名</h2><p>从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。</p>\n<h2 id=\"使用子选择器\"><a href=\"#使用子选择器\" class=\"headerlink\" title=\"使用子选择器\"></a>使用子选择器</h2><p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。<br>有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。<br>然而，在任何情况下，这是一个非常不好的做法。<br>如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。<br>不推荐:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.content .title &#123;</div><div class=\"line\">  font-size: 2rem;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">.content &gt; .title &#123;</div><div class=\"line\">  font-size: 2rem;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"尽量使用缩写属性\"><a href=\"#尽量使用缩写属性\" class=\"headerlink\" title=\"尽量使用缩写属性\"></a>尽量使用缩写属性</h2><p>尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。<br>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top-style: none;</div><div class=\"line\">font-family: palatino, georgia, serif;</div><div class=\"line\">font-size: 100%;</div><div class=\"line\">line-height: 1.6;</div><div class=\"line\">padding-bottom: 2em;</div><div class=\"line\">padding-left: 1em;</div><div class=\"line\">padding-right: 1em;</div><div class=\"line\">padding-top: 0;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">border-top: 0;</div><div class=\"line\">font: 100%/1.6 palatino, georgia, serif;</div><div class=\"line\">padding: 0 1em 2em;</div></pre></td></tr></table></figure></p>\n<h2 id=\"0后面不带单位\"><a href=\"#0后面不带单位\" class=\"headerlink\" title=\"0后面不带单位\"></a>0后面不带单位</h2><p>省略0后面的单位，<br>不推荐：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">padding-bottom: 0px;</div><div class=\"line\">margin: 0em;</div></pre></td></tr></table></figure>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">padding-bottom: 0;</div><div class=\"line\">margin: 0;</div></pre></td></tr></table></figure></p>\n<h2 id=\"属性格式\"><a href=\"#属性格式\" class=\"headerlink\" title=\"属性格式\"></a>属性格式</h2><ul>\n<li>为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。</li>\n<li>属性名的冒号后使用一个空格。出于一致性的原因，<br>属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。</li>\n<li>每个选择器和属性声明总是使用新的一行。</li>\n<li>属性选择器或属性值用双引号（””），而不是单引号（”）括起来。</li>\n<li>URI值（url()）不要使用引号。</li>\n</ul>\n<p>作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：</p>\n<p>结构性属性：</p>\n<ol>\n<li>display</li>\n<li>position, left, top, right etc.</li>\n<li>overflow, float, clear etc.</li>\n<li>margin, padding</li>\n</ol>\n<p>表现性属性：</p>\n<ul>\n<li>background, border etc.</li>\n<li>font, text</li>\n</ul>\n<p>不推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"> .box &#123;</div><div class=\"line\">  font-family: &apos;Arial&apos;, sans-serif;</div><div class=\"line\">  border: 3px solid #ddd;</div><div class=\"line\">  left: 30%;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  text-transform: uppercase;</div><div class=\"line\">  background-color: #eee;</div><div class=\"line\">  right: 30%;</div><div class=\"line\">  isplay: block;</div><div class=\"line\">  font-size: 1.5rem;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">  padding: 1em;</div><div class=\"line\">  margin: 1em;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>推荐：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">.box &#123;</div><div class=\"line\">  display: block;</div><div class=\"line\">  position: absolute;</div><div class=\"line\">  left: 30%;</div><div class=\"line\">  right: 30%;</div><div class=\"line\">  overflow: hidden;</div><div class=\"line\">  margin: 1em;</div><div class=\"line\">  padding: 1em;</div><div class=\"line\">  background-color: #eee;</div><div class=\"line\">  border: 3px solid #ddd;</div><div class=\"line\">  font-family: &apos;Arial&apos;, sans-serif;</div><div class=\"line\">  font-size: 1.5rem;</div><div class=\"line\">  text-transform: uppercase;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p> 相关文章：</p>\n<ul>\n<li><a href=\"http://www.css88.com/archives/5505\" target=\"_blank\" rel=\"external\">前端编码规范</a></li>\n<li><a href=\"http://www.cnblogs.com/polk6/p/4660195.html\" target=\"_blank\" rel=\"external\">JavsScript开发规范</a>、</li>\n<li><a href=\"https://segmentfault.com/a/1190000006131512\" target=\"_blank\" rel=\"external\">开发规范（四）JS规范</a></li>\n</ul>"},{"title":"gulp（一）","date":"2017-03-18T12:00:06.000Z","_content":"因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：http://www.cnblogs.com/2050/p/4198792.html.   以及gulp的官网\n<!--more-->\n# gulp的工作原理简述\n## 下Grunt.js和Gulp.js工作方式的区别\n>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务...但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的`pipe()`方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因\n\n## gulp传入的路径参数与最终生成文件的关系\n> 理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用`gulp.dest() `这个方法。gulp的流程是这样的：首先通过`gulp.src()`方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到`gulp.dest()`中，`gulp.dest()`方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给`gulp.dest()`传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，**所以生成的文件名是由导入到它的文件流决定的**即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名\n\n# gulp安装\ngulp是基于node环境的，所以首先需要安装node环境\n然后以全局方式安装gulp\n```\nnpm install -g gulp\n```\n全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行\n```\nnpm install gulp\n```\n如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 --save-dev\n```\nnpm install --save-dev gulp\n```\n\n# 开始使用gulp\n## 建立gulpfile.js文件\n建立一个`gulpfile.js`文件，这个文件就是gulp的主文件，之后要做的事情就是在`gulpfile.js`文件中定义我们的任务就好，下面是一个最简单的`gulpfile.js`\n```\nvar gulp = require('gulp');\ngulp.task('default',function(){\n  console.log('Hello world')  \n})\n\n```\n此时我们的目录结构是这样的\n├── gulpfile.js\n├── node_modules\n│ └── gulp\n└── package.json\n\n## 运行gulp任务\n要运行gulp任务，只需切换到存放`gulpfile.js `文件的目录，然后在命令行执行`gulp`命令就可以，`gulp`后面加上要执行的任务名，例如`gulp task1`，如果没有指定任务名。则是按照默认的`defaule`任务\n\n# gulp的api\ngulp只要四个api，`gulp.task()`、`gulp.src()`,`gulp.dest()`,`gulp.watch()`\n\n## gulp.src\n这个方法用来读取你需要操作的文件\n\n`gulp.src()`方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，\n\n```\ngulp.src(globs[,options])\n```\nglobs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组\n\noption是可选参数，通常情况下我们不需要用到\n\n\n# gulp.dest()\n`gulp.dest()`是用来写文件的，其语法为：\n```\ngulp.dest(path[,option])\n\n```\n`path`为写入文件的路径\noption为一个可选的参数，通常我们不需要用到\n","source":"_posts/gulp（一）.md","raw":"---\ntitle: gulp（一）\ndate: 2017-03-18 20:00:06\ntags: gulp\ncategories: gulp\n---\n因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：http://www.cnblogs.com/2050/p/4198792.html.   以及gulp的官网\n<!--more-->\n# gulp的工作原理简述\n## 下Grunt.js和Gulp.js工作方式的区别\n>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务...但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的`pipe()`方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因\n\n## gulp传入的路径参数与最终生成文件的关系\n> 理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用`gulp.dest() `这个方法。gulp的流程是这样的：首先通过`gulp.src()`方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到`gulp.dest()`中，`gulp.dest()`方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给`gulp.dest()`传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，**所以生成的文件名是由导入到它的文件流决定的**即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名\n\n# gulp安装\ngulp是基于node环境的，所以首先需要安装node环境\n然后以全局方式安装gulp\n```\nnpm install -g gulp\n```\n全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行\n```\nnpm install gulp\n```\n如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 --save-dev\n```\nnpm install --save-dev gulp\n```\n\n# 开始使用gulp\n## 建立gulpfile.js文件\n建立一个`gulpfile.js`文件，这个文件就是gulp的主文件，之后要做的事情就是在`gulpfile.js`文件中定义我们的任务就好，下面是一个最简单的`gulpfile.js`\n```\nvar gulp = require('gulp');\ngulp.task('default',function(){\n  console.log('Hello world')  \n})\n\n```\n此时我们的目录结构是这样的\n├── gulpfile.js\n├── node_modules\n│ └── gulp\n└── package.json\n\n## 运行gulp任务\n要运行gulp任务，只需切换到存放`gulpfile.js `文件的目录，然后在命令行执行`gulp`命令就可以，`gulp`后面加上要执行的任务名，例如`gulp task1`，如果没有指定任务名。则是按照默认的`defaule`任务\n\n# gulp的api\ngulp只要四个api，`gulp.task()`、`gulp.src()`,`gulp.dest()`,`gulp.watch()`\n\n## gulp.src\n这个方法用来读取你需要操作的文件\n\n`gulp.src()`方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，\n\n```\ngulp.src(globs[,options])\n```\nglobs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组\n\noption是可选参数，通常情况下我们不需要用到\n\n\n# gulp.dest()\n`gulp.dest()`是用来写文件的，其语法为：\n```\ngulp.dest(path[,option])\n\n```\n`path`为写入文件的路径\noption为一个可选的参数，通常我们不需要用到\n","slug":"gulp（一）","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxs0026vvxiddpw6hu9","content":"<p>因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：<a href=\"http://www.cnblogs.com/2050/p/4198792.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/2050/p/4198792.html</a>.   以及gulp的官网<br><a id=\"more\"></a></p>\n<h1 id=\"gulp的工作原理简述\"><a href=\"#gulp的工作原理简述\" class=\"headerlink\" title=\"gulp的工作原理简述\"></a>gulp的工作原理简述</h1><h2 id=\"下Grunt-js和Gulp-js工作方式的区别\"><a href=\"#下Grunt-js和Gulp-js工作方式的区别\" class=\"headerlink\" title=\"下Grunt.js和Gulp.js工作方式的区别\"></a>下Grunt.js和Gulp.js工作方式的区别</h2><blockquote>\n<p>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务…但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的<code>pipe()</code>方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因</p>\n</blockquote>\n<h2 id=\"gulp传入的路径参数与最终生成文件的关系\"><a href=\"#gulp传入的路径参数与最终生成文件的关系\" class=\"headerlink\" title=\"gulp传入的路径参数与最终生成文件的关系\"></a>gulp传入的路径参数与最终生成文件的关系</h2><blockquote>\n<p>理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用<code>gulp.dest()</code>这个方法。gulp的流程是这样的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给<code>gulp.dest()</code>传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，<strong>所以生成的文件名是由导入到它的文件流决定的</strong>即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名</p>\n</blockquote>\n<h1 id=\"gulp安装\"><a href=\"#gulp安装\" class=\"headerlink\" title=\"gulp安装\"></a>gulp安装</h1><p>gulp是基于node环境的，所以首先需要安装node环境<br>然后以全局方式安装gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g gulp</div></pre></td></tr></table></figure></p>\n<p>全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp</div></pre></td></tr></table></figure></p>\n<p>如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 –save-dev<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp</div></pre></td></tr></table></figure></p>\n<h1 id=\"开始使用gulp\"><a href=\"#开始使用gulp\" class=\"headerlink\" title=\"开始使用gulp\"></a>开始使用gulp</h1><h2 id=\"建立gulpfile-js文件\"><a href=\"#建立gulpfile-js文件\" class=\"headerlink\" title=\"建立gulpfile.js文件\"></a>建立gulpfile.js文件</h2><p>建立一个<code>gulpfile.js</code>文件，这个文件就是gulp的主文件，之后要做的事情就是在<code>gulpfile.js</code>文件中定义我们的任务就好，下面是一个最简单的<code>gulpfile.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;,function()&#123;</div><div class=\"line\">  console.log(&apos;Hello world&apos;)  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时我们的目录结构是这样的<br>├── gulpfile.js<br>├── node_modules<br>│ └── gulp<br>└── package.json</p>\n<h2 id=\"运行gulp任务\"><a href=\"#运行gulp任务\" class=\"headerlink\" title=\"运行gulp任务\"></a>运行gulp任务</h2><p>要运行gulp任务，只需切换到存放<code>gulpfile.js</code>文件的目录，然后在命令行执行<code>gulp</code>命令就可以，<code>gulp</code>后面加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名。则是按照默认的<code>defaule</code>任务</p>\n<h1 id=\"gulp的api\"><a href=\"#gulp的api\" class=\"headerlink\" title=\"gulp的api\"></a>gulp的api</h1><p>gulp只要四个api，<code>gulp.task()</code>、<code>gulp.src()</code>,<code>gulp.dest()</code>,<code>gulp.watch()</code></p>\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src\"></a>gulp.src</h2><p>这个方法用来读取你需要操作的文件</p>\n<p><code>gulp.src()</code>方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(globs[,options])</div></pre></td></tr></table></figure>\n<p>globs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组</p>\n<p>option是可选参数，通常情况下我们不需要用到</p>\n<h1 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h1><p><code>gulp.dest()</code>是用来写文件的，其语法为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.dest(path[,option])</div></pre></td></tr></table></figure></p>\n<p><code>path</code>为写入文件的路径<br>option为一个可选的参数，通常我们不需要用到</p>\n","site":{"data":{}},"excerpt":"<p>因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：<a href=\"http://www.cnblogs.com/2050/p/4198792.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/2050/p/4198792.html</a>.   以及gulp的官网<br>","more":"</p>\n<h1 id=\"gulp的工作原理简述\"><a href=\"#gulp的工作原理简述\" class=\"headerlink\" title=\"gulp的工作原理简述\"></a>gulp的工作原理简述</h1><h2 id=\"下Grunt-js和Gulp-js工作方式的区别\"><a href=\"#下Grunt-js和Gulp-js工作方式的区别\" class=\"headerlink\" title=\"下Grunt.js和Gulp.js工作方式的区别\"></a>下Grunt.js和Gulp.js工作方式的区别</h2><blockquote>\n<p>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务…但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的<code>pipe()</code>方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因</p>\n</blockquote>\n<h2 id=\"gulp传入的路径参数与最终生成文件的关系\"><a href=\"#gulp传入的路径参数与最终生成文件的关系\" class=\"headerlink\" title=\"gulp传入的路径参数与最终生成文件的关系\"></a>gulp传入的路径参数与最终生成文件的关系</h2><blockquote>\n<p>理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用<code>gulp.dest()</code>这个方法。gulp的流程是这样的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给<code>gulp.dest()</code>传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，<strong>所以生成的文件名是由导入到它的文件流决定的</strong>即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名</p>\n</blockquote>\n<h1 id=\"gulp安装\"><a href=\"#gulp安装\" class=\"headerlink\" title=\"gulp安装\"></a>gulp安装</h1><p>gulp是基于node环境的，所以首先需要安装node环境<br>然后以全局方式安装gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g gulp</div></pre></td></tr></table></figure></p>\n<p>全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp</div></pre></td></tr></table></figure></p>\n<p>如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 –save-dev<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp</div></pre></td></tr></table></figure></p>\n<h1 id=\"开始使用gulp\"><a href=\"#开始使用gulp\" class=\"headerlink\" title=\"开始使用gulp\"></a>开始使用gulp</h1><h2 id=\"建立gulpfile-js文件\"><a href=\"#建立gulpfile-js文件\" class=\"headerlink\" title=\"建立gulpfile.js文件\"></a>建立gulpfile.js文件</h2><p>建立一个<code>gulpfile.js</code>文件，这个文件就是gulp的主文件，之后要做的事情就是在<code>gulpfile.js</code>文件中定义我们的任务就好，下面是一个最简单的<code>gulpfile.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;,function()&#123;</div><div class=\"line\">  console.log(&apos;Hello world&apos;)  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时我们的目录结构是这样的<br>├── gulpfile.js<br>├── node_modules<br>│ └── gulp<br>└── package.json</p>\n<h2 id=\"运行gulp任务\"><a href=\"#运行gulp任务\" class=\"headerlink\" title=\"运行gulp任务\"></a>运行gulp任务</h2><p>要运行gulp任务，只需切换到存放<code>gulpfile.js</code>文件的目录，然后在命令行执行<code>gulp</code>命令就可以，<code>gulp</code>后面加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名。则是按照默认的<code>defaule</code>任务</p>\n<h1 id=\"gulp的api\"><a href=\"#gulp的api\" class=\"headerlink\" title=\"gulp的api\"></a>gulp的api</h1><p>gulp只要四个api，<code>gulp.task()</code>、<code>gulp.src()</code>,<code>gulp.dest()</code>,<code>gulp.watch()</code></p>\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src\"></a>gulp.src</h2><p>这个方法用来读取你需要操作的文件</p>\n<p><code>gulp.src()</code>方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(globs[,options])</div></pre></td></tr></table></figure>\n<p>globs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组</p>\n<p>option是可选参数，通常情况下我们不需要用到</p>\n<h1 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h1><p><code>gulp.dest()</code>是用来写文件的，其语法为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.dest(path[,option])</div></pre></td></tr></table></figure></p>\n<p><code>path</code>为写入文件的路径<br>option为一个可选的参数，通常我们不需要用到</p>"},{"title":"html5拖放--15行js代码实现两个div内容互换","date":"2017-05-24T05:24:51.000Z","_content":"![html5拖放](http://img.blog.csdn.net/20170523231217677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客:http://cherryblog.site/ ，欢迎大家前去参观\n> 本文项目地址，sortable插件地址：https://github.com/sunshine940326/sortable\n> 源码地址：https://github.com/sunshine940326/drag\n> 项目演示地址：https://sunshine940326.github.io/drag/\n\n 在写我们后台的管理程序中需要有一个拖放的功能，然后我们有一个这样的功能，实现11个固定且大小不一的div互换，效果如下\n![最终效果图](https://user-gold-cdn.xitu.io/2017/5/24/c9919143af8ac22486c3fb9fcfd5b981)\n\npc端演示地址：https://sunshine940326.github.io/drag/\n\n作为一个小菜鸟，听到这样的消息我是蒙逼的= =，在网上找到一个插件，功能挺强大的\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/0c1b872fd140ad1053ec1a7f0b03fa75)\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/3b43ace9a1ed0d25d21a9e694604c71f)\n> 插件地址：https://github.com/sunshine940326/sortable\n\n但是这个插件只能拖动和放置，不能交换，也就是只能将div插入在其他div前面，其余的向后推移，并且不能做到交换div中的内容，而div容器不变的条件，然后我就和其他同事商量了一下交换两个div中的数据要怎么处理，然后同事说这个就比较麻烦了= =。需要写死div，然后先记录鼠标拖动前的div中的内容，然后判断鼠标放下的位置，在哪一个div的范围内，再交换两个的数据= =，真正做起来还不知道有什么坑。听着都怕，于是就暂且搁置了这个功能，直到有一天非做不可了，我百度了一下“怎么交换两个div”，然后找到了一个demo，天啦噜~整个实现过程全部代码50行不到，js代码之后十几行，整个过程不到半个小时就解决了，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！效果如下：\n![demo效果](https://user-gold-cdn.xitu.io/2017/5/24/e214bb0885534cf1b13f15cb563563e3)\n> demo地址：https://github.com/sunshine940326/drag\n查看代码，发现思路如下:\n\n 1. ondragstart（ 用户开始拖动元素时触发）的时候使用该对象的dataTransfer.setData方法，并且用中间量记录点击的div\n 2. ondragover (当某被拖动的对象在另一对象容器范围内拖动时触发此事件),拖动div的时候阻止拖动的默认事件（drop 事件的默认行为是以链接形式打开）\n 3. ondrop (在一个拖动过程中，释放鼠标键时触发此事件)时候交换两个div的html\n 百度了一下发现这是html的新特性drag，研究了一下有如下特点\n# 拖放\n本例的代码如下\n```\n<!DOCTYPE html>\n<!DOCTYPE HTML>\n<html>\n<head>\n    <style type=\"text/css\">\n        #div1\n        {float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n        #div2\n        {float:left; width:200px; height:135px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n\n    </style>\n    <script type=\"text/javascript\">\n        function allowDrop(ev)\n        {\n            ev.preventDefault();\n        }\n\n        var srcdiv = null;\n        function drag(ev,divdom)\n        {\n            srcdiv=divdom;\n            ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n        }\n\n        function drop(ev,divdom)\n        {\n            ev.preventDefault();\n            if(srcdiv != divdom){\n                srcdiv.innerHTML = divdom.innerHTML;\n                divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n            }\n        }\n    </script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>ni hao!</p>\n</div>\n<div id=\"div2\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>Hello world!</p>\n</div>\n\n</body>\n</html>\n```\n拖放是一种常见的特性，即抓取对象以后拖到另一个位置。\n在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。\n## 设置元素为可拖放\n首先，为了使元素可拖动，把 draggable 属性设置为 true ：\n`<div draggable=\"true\"></div>`\n## 设置ondragstart 和并保存数据\nondragstart 属性调用了一个函数，drag(event,this)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值,在这个例子中，数据类型是 \"text/html\"，值是可拖动元素的innerHTML\n```\nfunction drag(ev,divdom){\n   srcdiv=divdom;\n   ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n}\n```\n## 放到何处 - ondragover\nondragover 事件规定在何处放置被拖动的数据。\n默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。\n这要通过调用 ondragover 事件的 event.preventDefault() 方法：\nevent.preventDefault()\n```\nfunction allowDrop(ev){\n   ev.preventDefault();\n}\n``` \n##进行放置 - ondrop\n当放置被拖数据时，会发生 drop 事件。\n在上面的例子中，ondrop 属性调用了一个函数，drop(event)：\n```\n function drop(ev,divdom){\n    ev.preventDefault();\n    if(srcdiv != divdom){\n         srcdiv.innerHTML = divdom.innerHTML;\n      divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n    }\n}\n``` \n \n\n \n ","source":"_posts/html5drag.md","raw":"---\ntitle: html5拖放--15行js代码实现两个div内容互换\ndate: 2017-05-24 13:24:51\ntags: [html5,前端] \ncategories: html5\n---\n![html5拖放](http://img.blog.csdn.net/20170523231217677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客:http://cherryblog.site/ ，欢迎大家前去参观\n> 本文项目地址，sortable插件地址：https://github.com/sunshine940326/sortable\n> 源码地址：https://github.com/sunshine940326/drag\n> 项目演示地址：https://sunshine940326.github.io/drag/\n\n 在写我们后台的管理程序中需要有一个拖放的功能，然后我们有一个这样的功能，实现11个固定且大小不一的div互换，效果如下\n![最终效果图](https://user-gold-cdn.xitu.io/2017/5/24/c9919143af8ac22486c3fb9fcfd5b981)\n\npc端演示地址：https://sunshine940326.github.io/drag/\n\n作为一个小菜鸟，听到这样的消息我是蒙逼的= =，在网上找到一个插件，功能挺强大的\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/0c1b872fd140ad1053ec1a7f0b03fa75)\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/3b43ace9a1ed0d25d21a9e694604c71f)\n> 插件地址：https://github.com/sunshine940326/sortable\n\n但是这个插件只能拖动和放置，不能交换，也就是只能将div插入在其他div前面，其余的向后推移，并且不能做到交换div中的内容，而div容器不变的条件，然后我就和其他同事商量了一下交换两个div中的数据要怎么处理，然后同事说这个就比较麻烦了= =。需要写死div，然后先记录鼠标拖动前的div中的内容，然后判断鼠标放下的位置，在哪一个div的范围内，再交换两个的数据= =，真正做起来还不知道有什么坑。听着都怕，于是就暂且搁置了这个功能，直到有一天非做不可了，我百度了一下“怎么交换两个div”，然后找到了一个demo，天啦噜~整个实现过程全部代码50行不到，js代码之后十几行，整个过程不到半个小时就解决了，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！效果如下：\n![demo效果](https://user-gold-cdn.xitu.io/2017/5/24/e214bb0885534cf1b13f15cb563563e3)\n> demo地址：https://github.com/sunshine940326/drag\n查看代码，发现思路如下:\n\n 1. ondragstart（ 用户开始拖动元素时触发）的时候使用该对象的dataTransfer.setData方法，并且用中间量记录点击的div\n 2. ondragover (当某被拖动的对象在另一对象容器范围内拖动时触发此事件),拖动div的时候阻止拖动的默认事件（drop 事件的默认行为是以链接形式打开）\n 3. ondrop (在一个拖动过程中，释放鼠标键时触发此事件)时候交换两个div的html\n 百度了一下发现这是html的新特性drag，研究了一下有如下特点\n# 拖放\n本例的代码如下\n```\n<!DOCTYPE html>\n<!DOCTYPE HTML>\n<html>\n<head>\n    <style type=\"text/css\">\n        #div1\n        {float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n        #div2\n        {float:left; width:200px; height:135px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n\n    </style>\n    <script type=\"text/javascript\">\n        function allowDrop(ev)\n        {\n            ev.preventDefault();\n        }\n\n        var srcdiv = null;\n        function drag(ev,divdom)\n        {\n            srcdiv=divdom;\n            ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n        }\n\n        function drop(ev,divdom)\n        {\n            ev.preventDefault();\n            if(srcdiv != divdom){\n                srcdiv.innerHTML = divdom.innerHTML;\n                divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n            }\n        }\n    </script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>ni hao!</p>\n</div>\n<div id=\"div2\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>Hello world!</p>\n</div>\n\n</body>\n</html>\n```\n拖放是一种常见的特性，即抓取对象以后拖到另一个位置。\n在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。\n## 设置元素为可拖放\n首先，为了使元素可拖动，把 draggable 属性设置为 true ：\n`<div draggable=\"true\"></div>`\n## 设置ondragstart 和并保存数据\nondragstart 属性调用了一个函数，drag(event,this)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值,在这个例子中，数据类型是 \"text/html\"，值是可拖动元素的innerHTML\n```\nfunction drag(ev,divdom){\n   srcdiv=divdom;\n   ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n}\n```\n## 放到何处 - ondragover\nondragover 事件规定在何处放置被拖动的数据。\n默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。\n这要通过调用 ondragover 事件的 event.preventDefault() 方法：\nevent.preventDefault()\n```\nfunction allowDrop(ev){\n   ev.preventDefault();\n}\n``` \n##进行放置 - ondrop\n当放置被拖数据时，会发生 drop 事件。\n在上面的例子中，ondrop 属性调用了一个函数，drop(event)：\n```\n function drop(ev,divdom){\n    ev.preventDefault();\n    if(srcdiv != divdom){\n         srcdiv.innerHTML = divdom.innerHTML;\n      divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n    }\n}\n``` \n \n\n \n ","slug":"html5drag","published":1,"updated":"2017-08-01T11:20:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zxx002bvvxihzkfg190","content":"<p><img src=\"http://img.blog.csdn.net/20170523231217677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"html5拖放\"><br><a id=\"more\"></a></p>\n<blockquote>\n<p>本文首发于我的个人博客:<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ，欢迎大家前去参观<br>本文项目地址，sortable插件地址：<a href=\"https://github.com/sunshine940326/sortable\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/sortable</a><br>源码地址：<a href=\"https://github.com/sunshine940326/drag\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/drag</a><br>项目演示地址：<a href=\"https://sunshine940326.github.io/drag/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/drag/</a></p>\n</blockquote>\n<p> 在写我们后台的管理程序中需要有一个拖放的功能，然后我们有一个这样的功能，实现11个固定且大小不一的div互换，效果如下<br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/c9919143af8ac22486c3fb9fcfd5b981\" alt=\"最终效果图\"></p>\n<p>pc端演示地址：<a href=\"https://sunshine940326.github.io/drag/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/drag/</a></p>\n<p>作为一个小菜鸟，听到这样的消息我是蒙逼的= =，在网上找到一个插件，功能挺强大的<br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/0c1b872fd140ad1053ec1a7f0b03fa75\" alt=\"sortable插件\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/3b43ace9a1ed0d25d21a9e694604c71f\" alt=\"sortable插件\"></p>\n<blockquote>\n<p>插件地址：<a href=\"https://github.com/sunshine940326/sortable\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/sortable</a></p>\n</blockquote>\n<p>但是这个插件只能拖动和放置，不能交换，也就是只能将div插入在其他div前面，其余的向后推移，并且不能做到交换div中的内容，而div容器不变的条件，然后我就和其他同事商量了一下交换两个div中的数据要怎么处理，然后同事说这个就比较麻烦了= =。需要写死div，然后先记录鼠标拖动前的div中的内容，然后判断鼠标放下的位置，在哪一个div的范围内，再交换两个的数据= =，真正做起来还不知道有什么坑。听着都怕，于是就暂且搁置了这个功能，直到有一天非做不可了，我百度了一下“怎么交换两个div”，然后找到了一个demo，天啦噜~整个实现过程全部代码50行不到，js代码之后十几行，整个过程不到半个小时就解决了，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！效果如下：<br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/e214bb0885534cf1b13f15cb563563e3\" alt=\"demo效果\"></p>\n<blockquote>\n<p>demo地址：<a href=\"https://github.com/sunshine940326/drag\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/drag</a><br>查看代码，发现思路如下:</p>\n</blockquote>\n<ol>\n<li>ondragstart（ 用户开始拖动元素时触发）的时候使用该对象的dataTransfer.setData方法，并且用中间量记录点击的div</li>\n<li>ondragover (当某被拖动的对象在另一对象容器范围内拖动时触发此事件),拖动div的时候阻止拖动的默认事件（drop 事件的默认行为是以链接形式打开）</li>\n<li>ondrop (在一个拖动过程中，释放鼠标键时触发此事件)时候交换两个div的html<br>百度了一下发现这是html的新特性drag，研究了一下有如下特点<h1 id=\"拖放\"><a href=\"#拖放\" class=\"headerlink\" title=\"拖放\"></a>拖放</h1>本例的代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</div><div class=\"line\">        #div1</div><div class=\"line\">        &#123;float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;&#125;</div><div class=\"line\">        #div2</div><div class=\"line\">        &#123;float:left; width:200px; height:135px; margin:10px;padding:10px;border:1px solid #aaaaaa;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/style&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">        function allowDrop(ev)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ev.preventDefault();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        var srcdiv = null;</div><div class=\"line\">        function drag(ev,divdom)</div><div class=\"line\">        &#123;</div><div class=\"line\">            srcdiv=divdom;</div><div class=\"line\">            ev.dataTransfer.setData(&quot;text/html&quot;,divdom.innerHTML);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        function drop(ev,divdom)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ev.preventDefault();</div><div class=\"line\">            if(srcdiv != divdom)&#123;</div><div class=\"line\">                srcdiv.innerHTML = divdom.innerHTML;</div><div class=\"line\">                divdom.innerHTML=ev.dataTransfer.getData(&quot;text/html&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event,this)&quot; ondragover=&quot;allowDrop(event)&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event, this)&quot;&gt;</div><div class=\"line\">    &lt;p&gt;ni hao!&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event,this)&quot; ondragover=&quot;allowDrop(event)&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event, this)&quot;&gt;</div><div class=\"line\">    &lt;p&gt;Hello world!&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>拖放是一种常见的特性，即抓取对象以后拖到另一个位置。<br>在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</p>\n<h2 id=\"设置元素为可拖放\"><a href=\"#设置元素为可拖放\" class=\"headerlink\" title=\"设置元素为可拖放\"></a>设置元素为可拖放</h2><p>首先，为了使元素可拖动，把 draggable 属性设置为 true ：<br><code>&lt;div draggable=&quot;true&quot;&gt;&lt;/div&gt;</code></p>\n<h2 id=\"设置ondragstart-和并保存数据\"><a href=\"#设置ondragstart-和并保存数据\" class=\"headerlink\" title=\"设置ondragstart 和并保存数据\"></a>设置ondragstart 和并保存数据</h2><p>ondragstart 属性调用了一个函数，drag(event,this)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值,在这个例子中，数据类型是 “text/html”，值是可拖动元素的innerHTML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function drag(ev,divdom)&#123;</div><div class=\"line\">   srcdiv=divdom;</div><div class=\"line\">   ev.dataTransfer.setData(&quot;text/html&quot;,divdom.innerHTML);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"放到何处-ondragover\"><a href=\"#放到何处-ondragover\" class=\"headerlink\" title=\"放到何处 - ondragover\"></a>放到何处 - ondragover</h2><p>ondragover 事件规定在何处放置被拖动的数据。<br>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>这要通过调用 ondragover 事件的 event.preventDefault() 方法：<br>event.preventDefault()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function allowDrop(ev)&#123;</div><div class=\"line\">   ev.preventDefault();</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">##进行放置 - ondrop</div><div class=\"line\">当放置被拖数据时，会发生 drop 事件。</div><div class=\"line\">在上面的例子中，ondrop 属性调用了一个函数，drop(event)：</div></pre></td></tr></table></figure></p>\n<p> function drop(ev,divdom){<br>    ev.preventDefault();<br>    if(srcdiv != divdom){<br>         srcdiv.innerHTML = divdom.innerHTML;<br>      divdom.innerHTML=ev.dataTransfer.getData(“text/html”);<br>    }<br>}<br>``` </p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170523231217677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"html5拖放\"><br>","more":"</p>\n<blockquote>\n<p>本文首发于我的个人博客:<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ，欢迎大家前去参观<br>本文项目地址，sortable插件地址：<a href=\"https://github.com/sunshine940326/sortable\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/sortable</a><br>源码地址：<a href=\"https://github.com/sunshine940326/drag\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/drag</a><br>项目演示地址：<a href=\"https://sunshine940326.github.io/drag/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/drag/</a></p>\n</blockquote>\n<p> 在写我们后台的管理程序中需要有一个拖放的功能，然后我们有一个这样的功能，实现11个固定且大小不一的div互换，效果如下<br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/c9919143af8ac22486c3fb9fcfd5b981\" alt=\"最终效果图\"></p>\n<p>pc端演示地址：<a href=\"https://sunshine940326.github.io/drag/\" target=\"_blank\" rel=\"external\">https://sunshine940326.github.io/drag/</a></p>\n<p>作为一个小菜鸟，听到这样的消息我是蒙逼的= =，在网上找到一个插件，功能挺强大的<br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/0c1b872fd140ad1053ec1a7f0b03fa75\" alt=\"sortable插件\"><br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/3b43ace9a1ed0d25d21a9e694604c71f\" alt=\"sortable插件\"></p>\n<blockquote>\n<p>插件地址：<a href=\"https://github.com/sunshine940326/sortable\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/sortable</a></p>\n</blockquote>\n<p>但是这个插件只能拖动和放置，不能交换，也就是只能将div插入在其他div前面，其余的向后推移，并且不能做到交换div中的内容，而div容器不变的条件，然后我就和其他同事商量了一下交换两个div中的数据要怎么处理，然后同事说这个就比较麻烦了= =。需要写死div，然后先记录鼠标拖动前的div中的内容，然后判断鼠标放下的位置，在哪一个div的范围内，再交换两个的数据= =，真正做起来还不知道有什么坑。听着都怕，于是就暂且搁置了这个功能，直到有一天非做不可了，我百度了一下“怎么交换两个div”，然后找到了一个demo，天啦噜~整个实现过程全部代码50行不到，js代码之后十几行，整个过程不到半个小时就解决了，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！效果如下：<br><img src=\"https://user-gold-cdn.xitu.io/2017/5/24/e214bb0885534cf1b13f15cb563563e3\" alt=\"demo效果\"></p>\n<blockquote>\n<p>demo地址：<a href=\"https://github.com/sunshine940326/drag\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/drag</a><br>查看代码，发现思路如下:</p>\n</blockquote>\n<ol>\n<li>ondragstart（ 用户开始拖动元素时触发）的时候使用该对象的dataTransfer.setData方法，并且用中间量记录点击的div</li>\n<li>ondragover (当某被拖动的对象在另一对象容器范围内拖动时触发此事件),拖动div的时候阻止拖动的默认事件（drop 事件的默认行为是以链接形式打开）</li>\n<li>ondrop (在一个拖动过程中，释放鼠标键时触发此事件)时候交换两个div的html<br>百度了一下发现这是html的新特性drag，研究了一下有如下特点<h1 id=\"拖放\"><a href=\"#拖放\" class=\"headerlink\" title=\"拖放\"></a>拖放</h1>本例的代码如下<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;!DOCTYPE HTML&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;style type=&quot;text/css&quot;&gt;</div><div class=\"line\">        #div1</div><div class=\"line\">        &#123;float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;&#125;</div><div class=\"line\">        #div2</div><div class=\"line\">        &#123;float:left; width:200px; height:135px; margin:10px;padding:10px;border:1px solid #aaaaaa;&#125;</div><div class=\"line\"></div><div class=\"line\">    &lt;/style&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">        function allowDrop(ev)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ev.preventDefault();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        var srcdiv = null;</div><div class=\"line\">        function drag(ev,divdom)</div><div class=\"line\">        &#123;</div><div class=\"line\">            srcdiv=divdom;</div><div class=\"line\">            ev.dataTransfer.setData(&quot;text/html&quot;,divdom.innerHTML);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        function drop(ev,divdom)</div><div class=\"line\">        &#123;</div><div class=\"line\">            ev.preventDefault();</div><div class=\"line\">            if(srcdiv != divdom)&#123;</div><div class=\"line\">                srcdiv.innerHTML = divdom.innerHTML;</div><div class=\"line\">                divdom.innerHTML=ev.dataTransfer.getData(&quot;text/html&quot;);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;div1&quot; ondrop=&quot;drop(event,this)&quot; ondragover=&quot;allowDrop(event)&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event, this)&quot;&gt;</div><div class=\"line\">    &lt;p&gt;ni hao!&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;div id=&quot;div2&quot; ondrop=&quot;drop(event,this)&quot; ondragover=&quot;allowDrop(event)&quot; draggable=&quot;true&quot; ondragstart=&quot;drag(event, this)&quot;&gt;</div><div class=\"line\">    &lt;p&gt;Hello world!&lt;/p&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>拖放是一种常见的特性，即抓取对象以后拖到另一个位置。<br>在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。</p>\n<h2 id=\"设置元素为可拖放\"><a href=\"#设置元素为可拖放\" class=\"headerlink\" title=\"设置元素为可拖放\"></a>设置元素为可拖放</h2><p>首先，为了使元素可拖动，把 draggable 属性设置为 true ：<br><code>&lt;div draggable=&quot;true&quot;&gt;&lt;/div&gt;</code></p>\n<h2 id=\"设置ondragstart-和并保存数据\"><a href=\"#设置ondragstart-和并保存数据\" class=\"headerlink\" title=\"设置ondragstart 和并保存数据\"></a>设置ondragstart 和并保存数据</h2><p>ondragstart 属性调用了一个函数，drag(event,this)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值,在这个例子中，数据类型是 “text/html”，值是可拖动元素的innerHTML<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">function drag(ev,divdom)&#123;</div><div class=\"line\">   srcdiv=divdom;</div><div class=\"line\">   ev.dataTransfer.setData(&quot;text/html&quot;,divdom.innerHTML);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"放到何处-ondragover\"><a href=\"#放到何处-ondragover\" class=\"headerlink\" title=\"放到何处 - ondragover\"></a>放到何处 - ondragover</h2><p>ondragover 事件规定在何处放置被拖动的数据。<br>默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。<br>这要通过调用 ondragover 事件的 event.preventDefault() 方法：<br>event.preventDefault()<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function allowDrop(ev)&#123;</div><div class=\"line\">   ev.preventDefault();</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\">##进行放置 - ondrop</div><div class=\"line\">当放置被拖数据时，会发生 drop 事件。</div><div class=\"line\">在上面的例子中，ondrop 属性调用了一个函数，drop(event)：</div></pre></td></tr></table></figure></p>\n<p> function drop(ev,divdom){<br>    ev.preventDefault();<br>    if(srcdiv != divdom){<br>         srcdiv.innerHTML = divdom.innerHTML;<br>      divdom.innerHTML=ev.dataTransfer.getData(“text/html”);<br>    }<br>}<br>``` </p>"},{"title":"javascript面向对象编程，带你认识封装、继承和多态","date":"2017-06-08T06:54:11.000Z","_content":"> 本文首发于我的个人网站：http://cherryblog.site\n\n![这里写图片描述](http://img.blog.csdn.net/20170608233128113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n周末的时候深入的了解了下javascript的面向对象编程思想，收获颇丰，感觉对面向对象编程有了那么一丢丢的了解了~很开森\n<!--more-->\n# 什么是面向对象编程\n![生动描述面向对象概念](http://img.blog.csdn.net/20170605213635589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n先上一张图，可以对面向对象有一个大致的了解，然而什么是面向对象呢，用java中的一句经典语句来说就是：万事万物皆对象。面向对象的思想主要是以对象为主，将一个问题抽象出具体的对象，并且将抽象出来的对象和对象的属性和方法封装成一个类。\n>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。\n\n## 面向对象和面向过程的区别\n面向对象和面向过程是两种不同的编程思想，我们经常会听到两者的比较，刚开始编程的时候，大部分应该都是使用的面向过程的编程，但是随着我们的成长，还是面向对象的编程思想比较好一点~\n其实面向对象和面向过程并不是完全相对的，也并不是完全独立的。\n我认为面向对象和面向过程的主要区别是面向过程主要是以动词为主，解决问题的方式是按照顺序一步一步调用不同的函数。\n而面向对象主要是以名词为主，将问题抽象出具体的对象，而这个对象有自己的属性和方法，在解决问题的时候是将不同的对象组合在一起使用。\n所以说面向对象的好处就是可扩展性更强一些，解决了代码重用性的问题。\n\n - 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n -  面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。\n\n有一个知乎的高票回答很有意思，给大家分享一下~\n>面向对象：  狗.吃(屎)\n面向过程：  吃.(狗,屎)\n\n具体的实现我们看一下最经典的“把大象放冰箱”这个问题\n### 面向过程的解决方法\n在面向过程的编程方式中实现“把大象放冰箱”这个问题答案是耳熟能详的，一共分三步：\n \n 1. 开门（冰箱）；\n 2. 装进（冰箱，大象）；\n 3. 关门（冰箱）。\n\n### 面向对象的解决方法\n 1. 冰箱.开门（）\n 2. 冰箱.装进（大象）\n 3. 冰箱.关门（）\n\n可以看出来面向对象和面向过程的侧重点是不同的，面向过程是以动词为主，完成一个事件就是将不同的动作函数按顺序调用。\n面向对象是以主谓为主。将主谓看成一个一个的对象，然后对象有自己的属性和方法。比如说，冰箱有自己的id属性，有开门的方法。然后就可以直接调用冰箱的开门方法给其传入一个参数大象就可以了。\n简单的例子面向对象和面向过程的好处还不是很明显。\n### 五子棋例子\n下面是一个我认为比较能够说明两者区别的一个栗子~：\n例如五子棋，面向过程的设计思路就是首先分析问题的步骤：\n\n 1. 开始游戏\n 2. 黑子先走\n 3. 绘制画面\n 4. 判断输赢\n 5. 轮到白子\n 6. 绘制画面\n 7. 判断输赢\n 8. 返回步骤2\n\n把上面每个步骤用分别的函数来实现，问题就解决了。\n\n而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为 \n\n 1. 黑白双方，这两方的行为是一模一样的\n 2. 棋盘系统，负责绘制画面\n\n第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的i变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。\n\n可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。\n\n功能上的统一保证了面向对象设计的可扩展性。比如我要加入悔棋的功能，如果要改动面向过程的设计，那么从输入到判断到显示这一连串的步骤都要改动，甚至步骤之间的循序都要进行大规模调整。如果是面向对象的话，只用改动棋盘对象就行了，棋盘系统保存了黑白双方的棋谱，简单回溯就可以了，而显示和规则判断则不用顾及，同时整个对对象功能的调用顺序都没有变化，改动只是局部的。\n\n再比如我要把这个五子棋游戏改为围棋游戏，如果你是面向过程设计，那么五子棋的规则就分布在了你的程序的每一个角落，要改动还不如重写。但是如果你当初就是面向对象的设计，那么你只用改动规则对象就可以了，五子棋和围棋的区别不就是规则吗？（当然棋盘大小好像也不一样，但是你会觉得这是一个难题吗？直接在棋盘对象中进行一番小改动就可以了。）而下棋的大致步骤从面向对象的角度来看没有任何变化。\n\n当然，要达到改动只是局部的需要设计的人有足够的经验，使用对象不能保证你的程序就是面向对象，初学者或者很蹩脚的程序员很可能以面向对象之虚而行面向过程之实，这样设计出来的所谓面向对象的程序很难有良好的可移植性和可扩展性。\n\n# 封装\n面向对象有三大特性，封装、继承和多态。对于ES5来说，没有`class`的概念，并且由于js的函数级作用域（在函数内部的变量在函数外访问不到），所以我们就可以模拟 `class`的概念，在es5中，类其实就是保存了一个函数的变量，这个函数有自己的属性和方法。将属性和方法组成一个类的过程就是封装。\n>封装：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口。\n\n### 通过构造函数添加\njavascript提供了一个构造函数（Constructor）模式，用来在创建对象时初始化对象。\n构造函数其实就是普通的函数，只不过有以下的特点\n\n - 首字母大写（建议构造函数首字母大写，即使用大驼峰命名，非构造函数首字母小写）\n - 内部使用`this`\n - 使用 `new`生成实例\n \n通过构造函数添加属性和方法实际上也就是通过this添加的属性和方法。因为this总是指向当前对象的，所以通过this添加的属性和方法只在当前对象上添加，是该对象自身拥有的。所以我们实例化一个新对象的时候，this指向的属性和方法都会得到相应的创建，也就是会在内存中复制一份，这样就造成了内存的浪费。\n```\nfunction Cat(name,color){\n        this.name = name;\n        this.color = color;\n        this.eat = function () {\n            alert('吃老鼠')\n        }\n    }\n```\n生成实例：\n```\nvar cat1 = new Cat('tom','red')\n```\n**通过this定义的属性和方法，我们实例化对象的时候都会重新复制一份**\n### 通过原型prototype\n在类上通过 `this`的方式添加属性和对象会导致内存浪费的问题，我们就考虑，有什么方法可以让实例化的类所使用的方法直接使用指针指向同一个方法。于是，就想到了原型的方式\n>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n也就是说，对于那些不变的属性和方法，我们可以直接将其添加在类的`prototype` 对象上。\n\n```\n　function Cat(name,color){\n　　　　this.name = name;\n　　　　this.color = color;\n　　}\n　　Cat.prototype.type = \"猫科动物\";\n　　Cat.prototype.eat = function(){alert(\"吃老鼠\")};\n```\n然后生成实例\n```\nvar cat1 = new Cat(\"大毛\",\"黄色\");\n　　var cat2 = new Cat(\"二毛\",\"黑色\");\n　　alert(cat1.type); // 猫科动物\n　　cat1.eat(); // 吃老鼠\n```\n这时所有实例的`type`属性和`eat()`方法，其实都是同一个内存地址，指向`prototype`对象，因此就提高了运行效率。\n### 在类的外部通过.语法添加\n我们还可以在类的外部通过`.` 语法进行添加，因为在实例化对象的时候，并不会执行到在类外部通过`.` 语法添加的属性，所以实例化之后的对象是不能访问到`.` 语法所添加的对象和属性的，只能通过该类访问。\n### 三者的区别\n通过构造函数、原型和`.` 语法三者都可以在类上添加属性和方法。但是三者是有一定的区别的。\n**构造函数**：通过this添加的属性和方法总是指向当前对象的，所以在实例化的时候，通过this添加的属性和方法都会在内存中复制一份，这样就会造成内存的浪费。但是这样创建的好处是即使改变了某一个对象的属性或方法，不会影响其他的对象（因为每一个对象都是复制的一份）。\n**原型**：通过原型继承的方法并不是自身的，我们要在原型链上一层一层的查找，这样创建的好处是只在内存中创建一次，实例化的对象都会指向这个`prototype` 对象，但是这样做也有弊端，因为实例化的对象的原型都是指向同一内存地址，改动其中的一个对象的属性可能会影响到其他的对象\n**`.` 语法**：在类的外部通过`.` 语法创建的属性和方法只会创建一次，但是这样创建的实例化的对象是访问不到的，只能通过类的自身访问\n## javascript也有private public protected\n对于java程序员来说private public protected这三个关键字应该是很熟悉的哈，但是在js中，并没有类似于private public protected这样的关键字，但是我们又希望我们定义的属性和方法有一定的访问限制，于是我们就可以模拟private public protected这些访问权限。\n不熟悉java的小伙伴可能不太清楚private public protected概念（其他语言我也不清楚有没有哈，但是应该都是类似的~），先来科普一下小知识点~\n\n - public：public表明该数据成员、成员函数是对所有用户开放的，所有用户都可以直接进行调用\n - private：private表示私有，私有的意思就是除了class自己之外，任何人都不可以直接使用，私有财产神圣不可侵犯嘛，即便是子女，朋友，都不可以使用。\n - protected：protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。\n\n### js中的private \n因为javascript函数级作用域的特性（在函数中定义的属性和方法外界访问不到），所以我们在函数内部直接定义的属性和方法都是私有的。\n\n### js中的public\n通过new关键词实例化时，this定义的属性和变量都会被复制一遍，所以通过this定义的属性和方法就是公有的。\n通过prototype创建的属性在类的实例化之后类的实例化对象也是可以访问到的，所以也是公有的。\n\n### js中的protected\n在函数的内部，我们可以通过this定义的方法访问到一些类的私有属性和方法，在实例化的时候就可以初始化对象的一些属性了。\n\n### new的实质\n虽然很多人都已经了解了new的实质，那么我还是要再说一下new 的实质\n `var o = new Object()`\n 1. 新建一个对象o\n 2. `o. __proto__ = Object.prototype` 将新创建的对象的`__proto__`属性指向构造函数的`prototype`\n 3. 将this指向新创建的对象\n 4. 返回新对象，但是这里需要看构造函数有没有返回值，如果构造函数的返回值为基本数据类型`string,boolean,number,null,undefined`,那么就返回新对象，如果构造函数的返回值为对象类型，那么就返回这个对象类型\n\n### 栗子~\n```\nvar Book = function (id, name, price) {\n        //private(在函数内部定义，函数外部访问不到，实例化之后实例化的对象访问不到)\n        var num = 1;\n        var id = id;\n        function checkId() {\n            console.log('private')\n        }\n        //protected(可以访问到函数内部的私有属性和私有方法，在实例化之后就可以对实例化的类进行初始化拿到函数的私有属性)\n        this.getName = function () {\n            console.log(id)\n        }\n        this.getPrice = function () {\n            console.log(price)\n        }\n\n        //public(实例化的之后，实例化的对象就可以访问到了~)\n        this.name = name;\n        this.copy = function () {\n            console.log('this is public')\n        }\n\n    }\n\n    //在Book的原型上添加的方法实例化之后可以被实例化对象继承\n    Book.prototype.proFunction = function () {\n        console.log('this is proFunction')\n    }\n\n    //在函数外部通过.语法创建的属性和方法，只能通过该类访问，实例化对象访问不到\n    Book.setTime = function () {\n        console.log('this is new time')\n    }\n    var book1 = new Book('111','悲惨世界','$99')\n    book1.getName();        // 111 getName是protected，可以访问到类的私有属性，所以实例化之后也可以访问到函数的私有属性\n    book1.checkId();        //报错book1.checkId is not a function\n    console.log(book1.id)   // undefined id是在函数内部通过定义的，是私有属性，所以实例化对象访问不到\n    console.log(book1.name) //name 是通过this创建的，所以在实例化的时候会在book1中复制一遍name属性，所以可以访问到\n    book1.copy()            //this is public\n    book1.proFunction();    //this is proFunction\n    Book.setTime();         //this is new time\n    book1.setTime();        //报错book1.setTime is not a function\n```\n# 继承\n> 继承：子类可以使用父类的所有功能，并且对这些功能进行扩展。继承的过程，就是从一般到特殊的过程。\n\n其实继承都是基于以上封装方法的三个特性来实现的。\n## 类式继承\n所谓的类式继承就是使用的原型的方式，将方法添加在父类的原型上，然后子类的原型是父类的一个实例化对象。\n```\n//声明父类\n    var SuperClass = function () {\n        var id = 1;\n        this.name = ['javascript'];\n        this.superValue = function () {\n            console.log('superValue is true');\n            console.log(id)\n        }\n    };\n\n    //为父类添加共有方法\n    SuperClass.prototype.getSuperValue = function () {\n        return this.superValue();\n    };\n\n    //声明子类\n    var SubClass = function () {\n        this.subValue = function () {\n            console.log('this is subValue ')\n        }\n    };\n\n    //继承父类\n    SubClass.prototype = new SuperClass() ;\n\n    //为子类添加共有方法\n    SubClass.prototype.getSubValue= function () {\n        return this.subValue()\n    };\n\n    var sub = new SubClass();\n    var sub2 =  new  SubClass();\n\n    sub.getSuperValue();   //superValue is true\n    sub.getSubValue();     //this is subValue\n\n    console.log(sub.id);    //undefined\n    console.log(sub.name);  //javascript\n\n    sub.name.push('java');  //[\"javascript\"]\n    console.log(sub2.name)  //[\"javascript\", \"java\"]\n```\n其中最核心的一句代码是` SubClass.prototype = new SuperClass() ;`\n类的原型对象`prototype`对象的作用就是为类的原型添加共有方法的，但是类不能直接访问这些方法，只有将类实例化之后，新创建的对象复制了父类构造函数中的属性和方法，并将原型`__proto__` 指向了父类的原型对象。这样子类就可以访问父类的`public` 和`protected` 的属性和方法，同时，父类中的`private` 的属性和方法不会被子类继承。\n\n敲黑板，如上述代码的最后一段，使用类继承的方法，如果父类的构造函数中有引用类型，就会在子类中被所有实例共用，因此一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例。\n**提一个小问题~为什么一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例呢，在javascript中，什么是引用类型呢，引用类型和其他的类型又有什么区别呢？**\n## 构造函数继承\n正式因为有了上述的缺点，才有了构造函数继承，构造函数继承的核心思想就是`SuperClass.call(this,id)`,直接改变this的指向，使通过this创建的属性和方法在子类中复制一份，因为是单独复制的，所以各个实例化的子类互不影响。但是会造成内存浪费的问题\n```\n//构造函数继承\n    //声明父类\n    function SuperClass(id) {\n        var name = 'javascript'\n        this.books=['javascript','html','css'];\n        this.id = id\n    }\n\n    //声明父类原型方法\n    SuperClass.prototype.showBooks = function () {\n        console.log(this.books)\n    }\n\n    //声明子类\n    function SubClass(id) {\n        SuperClass.call(this,id)\n    }\n\n    //创建第一个子类实例\n    var subclass1 = new SubClass(10);\n    var subclass2 = new SubClass(11);\n\n    console.log(subclass1.books);\n    console.log(subclass2.id);\n    console.log(subclass1.name);   //undefined\n    subclass2.showBooks();\n```\n## 组合式继承\n我们先来总结一下类继承和构造函数继承的优缺点\n\n|  | 类继承 | 构造函数继承 |\n| ------------- |:-------------| :-----|\n| 核心思想 | 子类的原型是父类实例化的对象 | SuperClass.call(this,id) |\n| 优点 | 子类实例化对象的属性和方法都指向父类的原型 | 每个实例化的子类互不影响 |\n| 缺点 | 子类之间可能会互相影响 | 内存浪费 |\n所以组合式继承就是汲取两者的优点，即避免了内存浪费，又使得每个实例化的子类互不影响。\n```\n//组合式继承\n    //声明父类\n    var SuperClass = function (name) {\n        this.name = name;\n        this.books=['javascript','html','css']\n    };\n    //声明父类原型上的方法\n    SuperClass.prototype.showBooks = function () {\n        console.log(this.books)\n    };\n\n    //声明子类\n    var SubClass = function (name) {\n        SuperClass.call(this, name)\n\n    };\n\n    //子类继承父类（链式继承）\n    SubClass.prototype = new SuperClass();\n\n    //实例化子类\n    var subclass1 = new SubClass('java');\n    var subclass2 = new SubClass('php');\n    subclass2.showBooks();\n    subclass1.books.push('ios');    //[\"javascript\", \"html\", \"css\"]\n    console.log(subclass1.books);  //[\"javascript\", \"html\", \"css\", \"ios\"]\n    console.log(subclass2.books);   //[\"javascript\", \"html\", \"css\"]\n\n```\n \n## 寄生组合继承\n那么问题又来了~组合式继承的方法固然好，但是会导致一个问题，父类的构造函数会被创建两次（call()的时候一遍，new的时候又一遍），所以为了解决这个问题，又出现了寄生组合继承。\n刚刚问题的关键是父类的构造函数在类继承和构造函数继承的组合形式中被创建了两遍，但是在类继承中我们并不需要创建父类的构造函数，我们只是要子类继承父类的原型即可。所以说我们先给父类的原型创建一个副本，然后修改子类`constructor`属性，最后在设置子类的原型就可以了~\n \n```\n//寄生式继承\n    function inheritObject(subClass,superClass) {\n        //复制一份父类的原型保存在变量中\n        var p = inheritObject(superClass.prototype);\n        //修正因为重写子类原型导致子类constructor属性被修改\n        p.constructor = subClass;\n        //设置子类的原型\n        subClass.prototype = p;\n    }\n    //定义父类\n    var SuperClass = function (name) {\n        this.name = name;\n        this.books = ['javascript','html','css']\n    };\n    //定义父类原型方法\n    SuperClass.prototype.getBooks = function () {\n        console.log(this.books)\n    };\n\n    //定义子类\n    var SubClass = function (name) {\n        SuperClass.call(this,name)\n    }\n\n    inheritObject(SubClass,SuperClass);\n    \n    var subclass1 = new SubClass('php')\n```\n\n \n \n \n \n\n \n \n \n \n \n \n \n \n\n \n \n\n \n \n \n \n \n\n  \n\n\n\n \n \n\n \n\n \n \n\n \n \n\n ","source":"_posts/javascript-oop.md","raw":"---\ntitle: javascript面向对象编程，带你认识封装、继承和多态\ndate: 2017-06-8 14:54:11\ntags: [js,面向对象编程,软件工程] \ncategories: [js,面向对象]\n---\n> 本文首发于我的个人网站：http://cherryblog.site\n\n![这里写图片描述](http://img.blog.csdn.net/20170608233128113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n周末的时候深入的了解了下javascript的面向对象编程思想，收获颇丰，感觉对面向对象编程有了那么一丢丢的了解了~很开森\n<!--more-->\n# 什么是面向对象编程\n![生动描述面向对象概念](http://img.blog.csdn.net/20170605213635589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n先上一张图，可以对面向对象有一个大致的了解，然而什么是面向对象呢，用java中的一句经典语句来说就是：万事万物皆对象。面向对象的思想主要是以对象为主，将一个问题抽象出具体的对象，并且将抽象出来的对象和对象的属性和方法封装成一个类。\n>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。\n\n## 面向对象和面向过程的区别\n面向对象和面向过程是两种不同的编程思想，我们经常会听到两者的比较，刚开始编程的时候，大部分应该都是使用的面向过程的编程，但是随着我们的成长，还是面向对象的编程思想比较好一点~\n其实面向对象和面向过程并不是完全相对的，也并不是完全独立的。\n我认为面向对象和面向过程的主要区别是面向过程主要是以动词为主，解决问题的方式是按照顺序一步一步调用不同的函数。\n而面向对象主要是以名词为主，将问题抽象出具体的对象，而这个对象有自己的属性和方法，在解决问题的时候是将不同的对象组合在一起使用。\n所以说面向对象的好处就是可扩展性更强一些，解决了代码重用性的问题。\n\n - 面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。\n -  面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。\n\n有一个知乎的高票回答很有意思，给大家分享一下~\n>面向对象：  狗.吃(屎)\n面向过程：  吃.(狗,屎)\n\n具体的实现我们看一下最经典的“把大象放冰箱”这个问题\n### 面向过程的解决方法\n在面向过程的编程方式中实现“把大象放冰箱”这个问题答案是耳熟能详的，一共分三步：\n \n 1. 开门（冰箱）；\n 2. 装进（冰箱，大象）；\n 3. 关门（冰箱）。\n\n### 面向对象的解决方法\n 1. 冰箱.开门（）\n 2. 冰箱.装进（大象）\n 3. 冰箱.关门（）\n\n可以看出来面向对象和面向过程的侧重点是不同的，面向过程是以动词为主，完成一个事件就是将不同的动作函数按顺序调用。\n面向对象是以主谓为主。将主谓看成一个一个的对象，然后对象有自己的属性和方法。比如说，冰箱有自己的id属性，有开门的方法。然后就可以直接调用冰箱的开门方法给其传入一个参数大象就可以了。\n简单的例子面向对象和面向过程的好处还不是很明显。\n### 五子棋例子\n下面是一个我认为比较能够说明两者区别的一个栗子~：\n例如五子棋，面向过程的设计思路就是首先分析问题的步骤：\n\n 1. 开始游戏\n 2. 黑子先走\n 3. 绘制画面\n 4. 判断输赢\n 5. 轮到白子\n 6. 绘制画面\n 7. 判断输赢\n 8. 返回步骤2\n\n把上面每个步骤用分别的函数来实现，问题就解决了。\n\n而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为 \n\n 1. 黑白双方，这两方的行为是一模一样的\n 2. 棋盘系统，负责绘制画面\n\n第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的i变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。\n\n可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。\n\n功能上的统一保证了面向对象设计的可扩展性。比如我要加入悔棋的功能，如果要改动面向过程的设计，那么从输入到判断到显示这一连串的步骤都要改动，甚至步骤之间的循序都要进行大规模调整。如果是面向对象的话，只用改动棋盘对象就行了，棋盘系统保存了黑白双方的棋谱，简单回溯就可以了，而显示和规则判断则不用顾及，同时整个对对象功能的调用顺序都没有变化，改动只是局部的。\n\n再比如我要把这个五子棋游戏改为围棋游戏，如果你是面向过程设计，那么五子棋的规则就分布在了你的程序的每一个角落，要改动还不如重写。但是如果你当初就是面向对象的设计，那么你只用改动规则对象就可以了，五子棋和围棋的区别不就是规则吗？（当然棋盘大小好像也不一样，但是你会觉得这是一个难题吗？直接在棋盘对象中进行一番小改动就可以了。）而下棋的大致步骤从面向对象的角度来看没有任何变化。\n\n当然，要达到改动只是局部的需要设计的人有足够的经验，使用对象不能保证你的程序就是面向对象，初学者或者很蹩脚的程序员很可能以面向对象之虚而行面向过程之实，这样设计出来的所谓面向对象的程序很难有良好的可移植性和可扩展性。\n\n# 封装\n面向对象有三大特性，封装、继承和多态。对于ES5来说，没有`class`的概念，并且由于js的函数级作用域（在函数内部的变量在函数外访问不到），所以我们就可以模拟 `class`的概念，在es5中，类其实就是保存了一个函数的变量，这个函数有自己的属性和方法。将属性和方法组成一个类的过程就是封装。\n>封装：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口。\n\n### 通过构造函数添加\njavascript提供了一个构造函数（Constructor）模式，用来在创建对象时初始化对象。\n构造函数其实就是普通的函数，只不过有以下的特点\n\n - 首字母大写（建议构造函数首字母大写，即使用大驼峰命名，非构造函数首字母小写）\n - 内部使用`this`\n - 使用 `new`生成实例\n \n通过构造函数添加属性和方法实际上也就是通过this添加的属性和方法。因为this总是指向当前对象的，所以通过this添加的属性和方法只在当前对象上添加，是该对象自身拥有的。所以我们实例化一个新对象的时候，this指向的属性和方法都会得到相应的创建，也就是会在内存中复制一份，这样就造成了内存的浪费。\n```\nfunction Cat(name,color){\n        this.name = name;\n        this.color = color;\n        this.eat = function () {\n            alert('吃老鼠')\n        }\n    }\n```\n生成实例：\n```\nvar cat1 = new Cat('tom','red')\n```\n**通过this定义的属性和方法，我们实例化对象的时候都会重新复制一份**\n### 通过原型prototype\n在类上通过 `this`的方式添加属性和对象会导致内存浪费的问题，我们就考虑，有什么方法可以让实例化的类所使用的方法直接使用指针指向同一个方法。于是，就想到了原型的方式\n>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n也就是说，对于那些不变的属性和方法，我们可以直接将其添加在类的`prototype` 对象上。\n\n```\n　function Cat(name,color){\n　　　　this.name = name;\n　　　　this.color = color;\n　　}\n　　Cat.prototype.type = \"猫科动物\";\n　　Cat.prototype.eat = function(){alert(\"吃老鼠\")};\n```\n然后生成实例\n```\nvar cat1 = new Cat(\"大毛\",\"黄色\");\n　　var cat2 = new Cat(\"二毛\",\"黑色\");\n　　alert(cat1.type); // 猫科动物\n　　cat1.eat(); // 吃老鼠\n```\n这时所有实例的`type`属性和`eat()`方法，其实都是同一个内存地址，指向`prototype`对象，因此就提高了运行效率。\n### 在类的外部通过.语法添加\n我们还可以在类的外部通过`.` 语法进行添加，因为在实例化对象的时候，并不会执行到在类外部通过`.` 语法添加的属性，所以实例化之后的对象是不能访问到`.` 语法所添加的对象和属性的，只能通过该类访问。\n### 三者的区别\n通过构造函数、原型和`.` 语法三者都可以在类上添加属性和方法。但是三者是有一定的区别的。\n**构造函数**：通过this添加的属性和方法总是指向当前对象的，所以在实例化的时候，通过this添加的属性和方法都会在内存中复制一份，这样就会造成内存的浪费。但是这样创建的好处是即使改变了某一个对象的属性或方法，不会影响其他的对象（因为每一个对象都是复制的一份）。\n**原型**：通过原型继承的方法并不是自身的，我们要在原型链上一层一层的查找，这样创建的好处是只在内存中创建一次，实例化的对象都会指向这个`prototype` 对象，但是这样做也有弊端，因为实例化的对象的原型都是指向同一内存地址，改动其中的一个对象的属性可能会影响到其他的对象\n**`.` 语法**：在类的外部通过`.` 语法创建的属性和方法只会创建一次，但是这样创建的实例化的对象是访问不到的，只能通过类的自身访问\n## javascript也有private public protected\n对于java程序员来说private public protected这三个关键字应该是很熟悉的哈，但是在js中，并没有类似于private public protected这样的关键字，但是我们又希望我们定义的属性和方法有一定的访问限制，于是我们就可以模拟private public protected这些访问权限。\n不熟悉java的小伙伴可能不太清楚private public protected概念（其他语言我也不清楚有没有哈，但是应该都是类似的~），先来科普一下小知识点~\n\n - public：public表明该数据成员、成员函数是对所有用户开放的，所有用户都可以直接进行调用\n - private：private表示私有，私有的意思就是除了class自己之外，任何人都不可以直接使用，私有财产神圣不可侵犯嘛，即便是子女，朋友，都不可以使用。\n - protected：protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。\n\n### js中的private \n因为javascript函数级作用域的特性（在函数中定义的属性和方法外界访问不到），所以我们在函数内部直接定义的属性和方法都是私有的。\n\n### js中的public\n通过new关键词实例化时，this定义的属性和变量都会被复制一遍，所以通过this定义的属性和方法就是公有的。\n通过prototype创建的属性在类的实例化之后类的实例化对象也是可以访问到的，所以也是公有的。\n\n### js中的protected\n在函数的内部，我们可以通过this定义的方法访问到一些类的私有属性和方法，在实例化的时候就可以初始化对象的一些属性了。\n\n### new的实质\n虽然很多人都已经了解了new的实质，那么我还是要再说一下new 的实质\n `var o = new Object()`\n 1. 新建一个对象o\n 2. `o. __proto__ = Object.prototype` 将新创建的对象的`__proto__`属性指向构造函数的`prototype`\n 3. 将this指向新创建的对象\n 4. 返回新对象，但是这里需要看构造函数有没有返回值，如果构造函数的返回值为基本数据类型`string,boolean,number,null,undefined`,那么就返回新对象，如果构造函数的返回值为对象类型，那么就返回这个对象类型\n\n### 栗子~\n```\nvar Book = function (id, name, price) {\n        //private(在函数内部定义，函数外部访问不到，实例化之后实例化的对象访问不到)\n        var num = 1;\n        var id = id;\n        function checkId() {\n            console.log('private')\n        }\n        //protected(可以访问到函数内部的私有属性和私有方法，在实例化之后就可以对实例化的类进行初始化拿到函数的私有属性)\n        this.getName = function () {\n            console.log(id)\n        }\n        this.getPrice = function () {\n            console.log(price)\n        }\n\n        //public(实例化的之后，实例化的对象就可以访问到了~)\n        this.name = name;\n        this.copy = function () {\n            console.log('this is public')\n        }\n\n    }\n\n    //在Book的原型上添加的方法实例化之后可以被实例化对象继承\n    Book.prototype.proFunction = function () {\n        console.log('this is proFunction')\n    }\n\n    //在函数外部通过.语法创建的属性和方法，只能通过该类访问，实例化对象访问不到\n    Book.setTime = function () {\n        console.log('this is new time')\n    }\n    var book1 = new Book('111','悲惨世界','$99')\n    book1.getName();        // 111 getName是protected，可以访问到类的私有属性，所以实例化之后也可以访问到函数的私有属性\n    book1.checkId();        //报错book1.checkId is not a function\n    console.log(book1.id)   // undefined id是在函数内部通过定义的，是私有属性，所以实例化对象访问不到\n    console.log(book1.name) //name 是通过this创建的，所以在实例化的时候会在book1中复制一遍name属性，所以可以访问到\n    book1.copy()            //this is public\n    book1.proFunction();    //this is proFunction\n    Book.setTime();         //this is new time\n    book1.setTime();        //报错book1.setTime is not a function\n```\n# 继承\n> 继承：子类可以使用父类的所有功能，并且对这些功能进行扩展。继承的过程，就是从一般到特殊的过程。\n\n其实继承都是基于以上封装方法的三个特性来实现的。\n## 类式继承\n所谓的类式继承就是使用的原型的方式，将方法添加在父类的原型上，然后子类的原型是父类的一个实例化对象。\n```\n//声明父类\n    var SuperClass = function () {\n        var id = 1;\n        this.name = ['javascript'];\n        this.superValue = function () {\n            console.log('superValue is true');\n            console.log(id)\n        }\n    };\n\n    //为父类添加共有方法\n    SuperClass.prototype.getSuperValue = function () {\n        return this.superValue();\n    };\n\n    //声明子类\n    var SubClass = function () {\n        this.subValue = function () {\n            console.log('this is subValue ')\n        }\n    };\n\n    //继承父类\n    SubClass.prototype = new SuperClass() ;\n\n    //为子类添加共有方法\n    SubClass.prototype.getSubValue= function () {\n        return this.subValue()\n    };\n\n    var sub = new SubClass();\n    var sub2 =  new  SubClass();\n\n    sub.getSuperValue();   //superValue is true\n    sub.getSubValue();     //this is subValue\n\n    console.log(sub.id);    //undefined\n    console.log(sub.name);  //javascript\n\n    sub.name.push('java');  //[\"javascript\"]\n    console.log(sub2.name)  //[\"javascript\", \"java\"]\n```\n其中最核心的一句代码是` SubClass.prototype = new SuperClass() ;`\n类的原型对象`prototype`对象的作用就是为类的原型添加共有方法的，但是类不能直接访问这些方法，只有将类实例化之后，新创建的对象复制了父类构造函数中的属性和方法，并将原型`__proto__` 指向了父类的原型对象。这样子类就可以访问父类的`public` 和`protected` 的属性和方法，同时，父类中的`private` 的属性和方法不会被子类继承。\n\n敲黑板，如上述代码的最后一段，使用类继承的方法，如果父类的构造函数中有引用类型，就会在子类中被所有实例共用，因此一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例。\n**提一个小问题~为什么一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例呢，在javascript中，什么是引用类型呢，引用类型和其他的类型又有什么区别呢？**\n## 构造函数继承\n正式因为有了上述的缺点，才有了构造函数继承，构造函数继承的核心思想就是`SuperClass.call(this,id)`,直接改变this的指向，使通过this创建的属性和方法在子类中复制一份，因为是单独复制的，所以各个实例化的子类互不影响。但是会造成内存浪费的问题\n```\n//构造函数继承\n    //声明父类\n    function SuperClass(id) {\n        var name = 'javascript'\n        this.books=['javascript','html','css'];\n        this.id = id\n    }\n\n    //声明父类原型方法\n    SuperClass.prototype.showBooks = function () {\n        console.log(this.books)\n    }\n\n    //声明子类\n    function SubClass(id) {\n        SuperClass.call(this,id)\n    }\n\n    //创建第一个子类实例\n    var subclass1 = new SubClass(10);\n    var subclass2 = new SubClass(11);\n\n    console.log(subclass1.books);\n    console.log(subclass2.id);\n    console.log(subclass1.name);   //undefined\n    subclass2.showBooks();\n```\n## 组合式继承\n我们先来总结一下类继承和构造函数继承的优缺点\n\n|  | 类继承 | 构造函数继承 |\n| ------------- |:-------------| :-----|\n| 核心思想 | 子类的原型是父类实例化的对象 | SuperClass.call(this,id) |\n| 优点 | 子类实例化对象的属性和方法都指向父类的原型 | 每个实例化的子类互不影响 |\n| 缺点 | 子类之间可能会互相影响 | 内存浪费 |\n所以组合式继承就是汲取两者的优点，即避免了内存浪费，又使得每个实例化的子类互不影响。\n```\n//组合式继承\n    //声明父类\n    var SuperClass = function (name) {\n        this.name = name;\n        this.books=['javascript','html','css']\n    };\n    //声明父类原型上的方法\n    SuperClass.prototype.showBooks = function () {\n        console.log(this.books)\n    };\n\n    //声明子类\n    var SubClass = function (name) {\n        SuperClass.call(this, name)\n\n    };\n\n    //子类继承父类（链式继承）\n    SubClass.prototype = new SuperClass();\n\n    //实例化子类\n    var subclass1 = new SubClass('java');\n    var subclass2 = new SubClass('php');\n    subclass2.showBooks();\n    subclass1.books.push('ios');    //[\"javascript\", \"html\", \"css\"]\n    console.log(subclass1.books);  //[\"javascript\", \"html\", \"css\", \"ios\"]\n    console.log(subclass2.books);   //[\"javascript\", \"html\", \"css\"]\n\n```\n \n## 寄生组合继承\n那么问题又来了~组合式继承的方法固然好，但是会导致一个问题，父类的构造函数会被创建两次（call()的时候一遍，new的时候又一遍），所以为了解决这个问题，又出现了寄生组合继承。\n刚刚问题的关键是父类的构造函数在类继承和构造函数继承的组合形式中被创建了两遍，但是在类继承中我们并不需要创建父类的构造函数，我们只是要子类继承父类的原型即可。所以说我们先给父类的原型创建一个副本，然后修改子类`constructor`属性，最后在设置子类的原型就可以了~\n \n```\n//寄生式继承\n    function inheritObject(subClass,superClass) {\n        //复制一份父类的原型保存在变量中\n        var p = inheritObject(superClass.prototype);\n        //修正因为重写子类原型导致子类constructor属性被修改\n        p.constructor = subClass;\n        //设置子类的原型\n        subClass.prototype = p;\n    }\n    //定义父类\n    var SuperClass = function (name) {\n        this.name = name;\n        this.books = ['javascript','html','css']\n    };\n    //定义父类原型方法\n    SuperClass.prototype.getBooks = function () {\n        console.log(this.books)\n    };\n\n    //定义子类\n    var SubClass = function (name) {\n        SuperClass.call(this,name)\n    }\n\n    inheritObject(SubClass,SuperClass);\n    \n    var subclass1 = new SubClass('php')\n```\n\n \n \n \n \n\n \n \n \n \n \n \n \n \n\n \n \n\n \n \n \n \n \n\n  \n\n\n\n \n \n\n \n\n \n \n\n \n \n\n ","slug":"javascript-oop","published":1,"updated":"2017-08-08T11:29:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zy2002evvxiy3uec9w0","content":"<blockquote>\n<p>本文首发于我的个人网站：<a href=\"http://cherryblog.site\">http://cherryblog.site</a></p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170608233128113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>周末的时候深入的了解了下javascript的面向对象编程思想，收获颇丰，感觉对面向对象编程有了那么一丢丢的了解了~很开森<br><a id=\"more\"></a></p>\n<h1 id=\"什么是面向对象编程\"><a href=\"#什么是面向对象编程\" class=\"headerlink\" title=\"什么是面向对象编程\"></a>什么是面向对象编程</h1><p><img src=\"http://img.blog.csdn.net/20170605213635589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"生动描述面向对象概念\"><br>先上一张图，可以对面向对象有一个大致的了解，然而什么是面向对象呢，用java中的一句经典语句来说就是：万事万物皆对象。面向对象的思想主要是以对象为主，将一个问题抽象出具体的对象，并且将抽象出来的对象和对象的属性和方法封装成一个类。</p>\n<blockquote>\n<p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p>\n</blockquote>\n<h2 id=\"面向对象和面向过程的区别\"><a href=\"#面向对象和面向过程的区别\" class=\"headerlink\" title=\"面向对象和面向过程的区别\"></a>面向对象和面向过程的区别</h2><p>面向对象和面向过程是两种不同的编程思想，我们经常会听到两者的比较，刚开始编程的时候，大部分应该都是使用的面向过程的编程，但是随着我们的成长，还是面向对象的编程思想比较好一点~<br>其实面向对象和面向过程并不是完全相对的，也并不是完全独立的。<br>我认为面向对象和面向过程的主要区别是面向过程主要是以动词为主，解决问题的方式是按照顺序一步一步调用不同的函数。<br>而面向对象主要是以名词为主，将问题抽象出具体的对象，而这个对象有自己的属性和方法，在解决问题的时候是将不同的对象组合在一起使用。<br>所以说面向对象的好处就是可扩展性更强一些，解决了代码重用性的问题。</p>\n<ul>\n<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</li>\n<li>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</li>\n</ul>\n<p>有一个知乎的高票回答很有意思，给大家分享一下~</p>\n<blockquote>\n<p>面向对象：  狗.吃(屎)<br>面向过程：  吃.(狗,屎)</p>\n</blockquote>\n<p>具体的实现我们看一下最经典的“把大象放冰箱”这个问题</p>\n<h3 id=\"面向过程的解决方法\"><a href=\"#面向过程的解决方法\" class=\"headerlink\" title=\"面向过程的解决方法\"></a>面向过程的解决方法</h3><p>在面向过程的编程方式中实现“把大象放冰箱”这个问题答案是耳熟能详的，一共分三步：</p>\n<ol>\n<li>开门（冰箱）；</li>\n<li>装进（冰箱，大象）；</li>\n<li>关门（冰箱）。</li>\n</ol>\n<h3 id=\"面向对象的解决方法\"><a href=\"#面向对象的解决方法\" class=\"headerlink\" title=\"面向对象的解决方法\"></a>面向对象的解决方法</h3><ol>\n<li>冰箱.开门（）</li>\n<li>冰箱.装进（大象）</li>\n<li>冰箱.关门（）</li>\n</ol>\n<p>可以看出来面向对象和面向过程的侧重点是不同的，面向过程是以动词为主，完成一个事件就是将不同的动作函数按顺序调用。<br>面向对象是以主谓为主。将主谓看成一个一个的对象，然后对象有自己的属性和方法。比如说，冰箱有自己的id属性，有开门的方法。然后就可以直接调用冰箱的开门方法给其传入一个参数大象就可以了。<br>简单的例子面向对象和面向过程的好处还不是很明显。</p>\n<h3 id=\"五子棋例子\"><a href=\"#五子棋例子\" class=\"headerlink\" title=\"五子棋例子\"></a>五子棋例子</h3><p>下面是一个我认为比较能够说明两者区别的一个栗子~：<br>例如五子棋，面向过程的设计思路就是首先分析问题的步骤：</p>\n<ol>\n<li>开始游戏</li>\n<li>黑子先走</li>\n<li>绘制画面</li>\n<li>判断输赢</li>\n<li>轮到白子</li>\n<li>绘制画面</li>\n<li>判断输赢</li>\n<li>返回步骤2</li>\n</ol>\n<p>把上面每个步骤用分别的函数来实现，问题就解决了。</p>\n<p>而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为 </p>\n<ol>\n<li>黑白双方，这两方的行为是一模一样的</li>\n<li>棋盘系统，负责绘制画面</li>\n</ol>\n<p>第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的i变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。</p>\n<p>可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。</p>\n<p>功能上的统一保证了面向对象设计的可扩展性。比如我要加入悔棋的功能，如果要改动面向过程的设计，那么从输入到判断到显示这一连串的步骤都要改动，甚至步骤之间的循序都要进行大规模调整。如果是面向对象的话，只用改动棋盘对象就行了，棋盘系统保存了黑白双方的棋谱，简单回溯就可以了，而显示和规则判断则不用顾及，同时整个对对象功能的调用顺序都没有变化，改动只是局部的。</p>\n<p>再比如我要把这个五子棋游戏改为围棋游戏，如果你是面向过程设计，那么五子棋的规则就分布在了你的程序的每一个角落，要改动还不如重写。但是如果你当初就是面向对象的设计，那么你只用改动规则对象就可以了，五子棋和围棋的区别不就是规则吗？（当然棋盘大小好像也不一样，但是你会觉得这是一个难题吗？直接在棋盘对象中进行一番小改动就可以了。）而下棋的大致步骤从面向对象的角度来看没有任何变化。</p>\n<p>当然，要达到改动只是局部的需要设计的人有足够的经验，使用对象不能保证你的程序就是面向对象，初学者或者很蹩脚的程序员很可能以面向对象之虚而行面向过程之实，这样设计出来的所谓面向对象的程序很难有良好的可移植性和可扩展性。</p>\n<h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><p>面向对象有三大特性，封装、继承和多态。对于ES5来说，没有<code>class</code>的概念，并且由于js的函数级作用域（在函数内部的变量在函数外访问不到），所以我们就可以模拟 <code>class</code>的概念，在es5中，类其实就是保存了一个函数的变量，这个函数有自己的属性和方法。将属性和方法组成一个类的过程就是封装。</p>\n<blockquote>\n<p>封装：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口。</p>\n</blockquote>\n<h3 id=\"通过构造函数添加\"><a href=\"#通过构造函数添加\" class=\"headerlink\" title=\"通过构造函数添加\"></a>通过构造函数添加</h3><p>javascript提供了一个构造函数（Constructor）模式，用来在创建对象时初始化对象。<br>构造函数其实就是普通的函数，只不过有以下的特点</p>\n<ul>\n<li>首字母大写（建议构造函数首字母大写，即使用大驼峰命名，非构造函数首字母小写）</li>\n<li>内部使用<code>this</code></li>\n<li>使用 <code>new</code>生成实例</li>\n</ul>\n<p>通过构造函数添加属性和方法实际上也就是通过this添加的属性和方法。因为this总是指向当前对象的，所以通过this添加的属性和方法只在当前对象上添加，是该对象自身拥有的。所以我们实例化一个新对象的时候，this指向的属性和方法都会得到相应的创建，也就是会在内存中复制一份，这样就造成了内存的浪费。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Cat(name,color)&#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.color = color;</div><div class=\"line\">        this.eat = function () &#123;</div><div class=\"line\">            alert(&apos;吃老鼠&apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>生成实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var cat1 = new Cat(&apos;tom&apos;,&apos;red&apos;)</div></pre></td></tr></table></figure></p>\n<p><strong>通过this定义的属性和方法，我们实例化对象的时候都会重新复制一份</strong></p>\n<h3 id=\"通过原型prototype\"><a href=\"#通过原型prototype\" class=\"headerlink\" title=\"通过原型prototype\"></a>通过原型prototype</h3><p>在类上通过 <code>this</code>的方式添加属性和对象会导致内存浪费的问题，我们就考虑，有什么方法可以让实例化的类所使用的方法直接使用指针指向同一个方法。于是，就想到了原型的方式</p>\n<blockquote>\n<p>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>也就是说，对于那些不变的属性和方法，我们可以直接将其添加在类的<code>prototype</code> 对象上。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　function Cat(name,color)&#123;</div><div class=\"line\">　　　　this.name = name;</div><div class=\"line\">　　　　this.color = color;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　Cat.prototype.type = &quot;猫科动物&quot;;</div><div class=\"line\">　　Cat.prototype.eat = function()&#123;alert(&quot;吃老鼠&quot;)&#125;;</div></pre></td></tr></table></figure>\n<p>然后生成实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;);</div><div class=\"line\">　　var cat2 = new Cat(&quot;二毛&quot;,&quot;黑色&quot;);</div><div class=\"line\">　　alert(cat1.type); // 猫科动物</div><div class=\"line\">　　cat1.eat(); // 吃老鼠</div></pre></td></tr></table></figure></p>\n<p>这时所有实例的<code>type</code>属性和<code>eat()</code>方法，其实都是同一个内存地址，指向<code>prototype</code>对象，因此就提高了运行效率。</p>\n<h3 id=\"在类的外部通过-语法添加\"><a href=\"#在类的外部通过-语法添加\" class=\"headerlink\" title=\"在类的外部通过.语法添加\"></a>在类的外部通过.语法添加</h3><p>我们还可以在类的外部通过<code>.</code> 语法进行添加，因为在实例化对象的时候，并不会执行到在类外部通过<code>.</code> 语法添加的属性，所以实例化之后的对象是不能访问到<code>.</code> 语法所添加的对象和属性的，只能通过该类访问。</p>\n<h3 id=\"三者的区别\"><a href=\"#三者的区别\" class=\"headerlink\" title=\"三者的区别\"></a>三者的区别</h3><p>通过构造函数、原型和<code>.</code> 语法三者都可以在类上添加属性和方法。但是三者是有一定的区别的。<br><strong>构造函数</strong>：通过this添加的属性和方法总是指向当前对象的，所以在实例化的时候，通过this添加的属性和方法都会在内存中复制一份，这样就会造成内存的浪费。但是这样创建的好处是即使改变了某一个对象的属性或方法，不会影响其他的对象（因为每一个对象都是复制的一份）。<br><strong>原型</strong>：通过原型继承的方法并不是自身的，我们要在原型链上一层一层的查找，这样创建的好处是只在内存中创建一次，实例化的对象都会指向这个<code>prototype</code> 对象，但是这样做也有弊端，因为实例化的对象的原型都是指向同一内存地址，改动其中的一个对象的属性可能会影响到其他的对象<br><strong><code>.</code> 语法</strong>：在类的外部通过<code>.</code> 语法创建的属性和方法只会创建一次，但是这样创建的实例化的对象是访问不到的，只能通过类的自身访问</p>\n<h2 id=\"javascript也有private-public-protected\"><a href=\"#javascript也有private-public-protected\" class=\"headerlink\" title=\"javascript也有private public protected\"></a>javascript也有private public protected</h2><p>对于java程序员来说private public protected这三个关键字应该是很熟悉的哈，但是在js中，并没有类似于private public protected这样的关键字，但是我们又希望我们定义的属性和方法有一定的访问限制，于是我们就可以模拟private public protected这些访问权限。<br>不熟悉java的小伙伴可能不太清楚private public protected概念（其他语言我也不清楚有没有哈，但是应该都是类似的~），先来科普一下小知识点~</p>\n<ul>\n<li>public：public表明该数据成员、成员函数是对所有用户开放的，所有用户都可以直接进行调用</li>\n<li>private：private表示私有，私有的意思就是除了class自己之外，任何人都不可以直接使用，私有财产神圣不可侵犯嘛，即便是子女，朋友，都不可以使用。</li>\n<li>protected：protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。</li>\n</ul>\n<h3 id=\"js中的private\"><a href=\"#js中的private\" class=\"headerlink\" title=\"js中的private\"></a>js中的private</h3><p>因为javascript函数级作用域的特性（在函数中定义的属性和方法外界访问不到），所以我们在函数内部直接定义的属性和方法都是私有的。</p>\n<h3 id=\"js中的public\"><a href=\"#js中的public\" class=\"headerlink\" title=\"js中的public\"></a>js中的public</h3><p>通过new关键词实例化时，this定义的属性和变量都会被复制一遍，所以通过this定义的属性和方法就是公有的。<br>通过prototype创建的属性在类的实例化之后类的实例化对象也是可以访问到的，所以也是公有的。</p>\n<h3 id=\"js中的protected\"><a href=\"#js中的protected\" class=\"headerlink\" title=\"js中的protected\"></a>js中的protected</h3><p>在函数的内部，我们可以通过this定义的方法访问到一些类的私有属性和方法，在实例化的时候就可以初始化对象的一些属性了。</p>\n<h3 id=\"new的实质\"><a href=\"#new的实质\" class=\"headerlink\" title=\"new的实质\"></a>new的实质</h3><p>虽然很多人都已经了解了new的实质，那么我还是要再说一下new 的实质<br> <code>var o = new Object()</code></p>\n<ol>\n<li>新建一个对象o</li>\n<li><code>o. __proto__ = Object.prototype</code> 将新创建的对象的<code>__proto__</code>属性指向构造函数的<code>prototype</code></li>\n<li>将this指向新创建的对象</li>\n<li>返回新对象，但是这里需要看构造函数有没有返回值，如果构造函数的返回值为基本数据类型<code>string,boolean,number,null,undefined</code>,那么就返回新对象，如果构造函数的返回值为对象类型，那么就返回这个对象类型</li>\n</ol>\n<h3 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子~\"></a>栗子~</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Book = function (id, name, price) &#123;</div><div class=\"line\">        //private(在函数内部定义，函数外部访问不到，实例化之后实例化的对象访问不到)</div><div class=\"line\">        var num = 1;</div><div class=\"line\">        var id = id;</div><div class=\"line\">        function checkId() &#123;</div><div class=\"line\">            console.log(&apos;private&apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        //protected(可以访问到函数内部的私有属性和私有方法，在实例化之后就可以对实例化的类进行初始化拿到函数的私有属性)</div><div class=\"line\">        this.getName = function () &#123;</div><div class=\"line\">            console.log(id)</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.getPrice = function () &#123;</div><div class=\"line\">            console.log(price)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //public(实例化的之后，实例化的对象就可以访问到了~)</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.copy = function () &#123;</div><div class=\"line\">            console.log(&apos;this is public&apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //在Book的原型上添加的方法实例化之后可以被实例化对象继承</div><div class=\"line\">    Book.prototype.proFunction = function () &#123;</div><div class=\"line\">        console.log(&apos;this is proFunction&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //在函数外部通过.语法创建的属性和方法，只能通过该类访问，实例化对象访问不到</div><div class=\"line\">    Book.setTime = function () &#123;</div><div class=\"line\">        console.log(&apos;this is new time&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    var book1 = new Book(&apos;111&apos;,&apos;悲惨世界&apos;,&apos;$99&apos;)</div><div class=\"line\">    book1.getName();        // 111 getName是protected，可以访问到类的私有属性，所以实例化之后也可以访问到函数的私有属性</div><div class=\"line\">    book1.checkId();        //报错book1.checkId is not a function</div><div class=\"line\">    console.log(book1.id)   // undefined id是在函数内部通过定义的，是私有属性，所以实例化对象访问不到</div><div class=\"line\">    console.log(book1.name) //name 是通过this创建的，所以在实例化的时候会在book1中复制一遍name属性，所以可以访问到</div><div class=\"line\">    book1.copy()            //this is public</div><div class=\"line\">    book1.proFunction();    //this is proFunction</div><div class=\"line\">    Book.setTime();         //this is new time</div><div class=\"line\">    book1.setTime();        //报错book1.setTime is not a function</div></pre></td></tr></table></figure>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><blockquote>\n<p>继承：子类可以使用父类的所有功能，并且对这些功能进行扩展。继承的过程，就是从一般到特殊的过程。</p>\n</blockquote>\n<p>其实继承都是基于以上封装方法的三个特性来实现的。</p>\n<h2 id=\"类式继承\"><a href=\"#类式继承\" class=\"headerlink\" title=\"类式继承\"></a>类式继承</h2><p>所谓的类式继承就是使用的原型的方式，将方法添加在父类的原型上，然后子类的原型是父类的一个实例化对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//声明父类</div><div class=\"line\">    var SuperClass = function () &#123;</div><div class=\"line\">        var id = 1;</div><div class=\"line\">        this.name = [&apos;javascript&apos;];</div><div class=\"line\">        this.superValue = function () &#123;</div><div class=\"line\">            console.log(&apos;superValue is true&apos;);</div><div class=\"line\">            console.log(id)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //为父类添加共有方法</div><div class=\"line\">    SuperClass.prototype.getSuperValue = function () &#123;</div><div class=\"line\">        return this.superValue();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //声明子类</div><div class=\"line\">    var SubClass = function () &#123;</div><div class=\"line\">        this.subValue = function () &#123;</div><div class=\"line\">            console.log(&apos;this is subValue &apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //继承父类</div><div class=\"line\">    SubClass.prototype = new SuperClass() ;</div><div class=\"line\"></div><div class=\"line\">    //为子类添加共有方法</div><div class=\"line\">    SubClass.prototype.getSubValue= function () &#123;</div><div class=\"line\">        return this.subValue()</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    var sub = new SubClass();</div><div class=\"line\">    var sub2 =  new  SubClass();</div><div class=\"line\"></div><div class=\"line\">    sub.getSuperValue();   //superValue is true</div><div class=\"line\">    sub.getSubValue();     //this is subValue</div><div class=\"line\"></div><div class=\"line\">    console.log(sub.id);    //undefined</div><div class=\"line\">    console.log(sub.name);  //javascript</div><div class=\"line\"></div><div class=\"line\">    sub.name.push(&apos;java&apos;);  //[&quot;javascript&quot;]</div><div class=\"line\">    console.log(sub2.name)  //[&quot;javascript&quot;, &quot;java&quot;]</div></pre></td></tr></table></figure></p>\n<p>其中最核心的一句代码是<code>SubClass.prototype = new SuperClass() ;</code><br>类的原型对象<code>prototype</code>对象的作用就是为类的原型添加共有方法的，但是类不能直接访问这些方法，只有将类实例化之后，新创建的对象复制了父类构造函数中的属性和方法，并将原型<code>__proto__</code> 指向了父类的原型对象。这样子类就可以访问父类的<code>public</code> 和<code>protected</code> 的属性和方法，同时，父类中的<code>private</code> 的属性和方法不会被子类继承。</p>\n<p>敲黑板，如上述代码的最后一段，使用类继承的方法，如果父类的构造函数中有引用类型，就会在子类中被所有实例共用，因此一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例。<br><strong>提一个小问题~为什么一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例呢，在javascript中，什么是引用类型呢，引用类型和其他的类型又有什么区别呢？</strong></p>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><p>正式因为有了上述的缺点，才有了构造函数继承，构造函数继承的核心思想就是<code>SuperClass.call(this,id)</code>,直接改变this的指向，使通过this创建的属性和方法在子类中复制一份，因为是单独复制的，所以各个实例化的子类互不影响。但是会造成内存浪费的问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">//构造函数继承</div><div class=\"line\">    //声明父类</div><div class=\"line\">    function SuperClass(id) &#123;</div><div class=\"line\">        var name = &apos;javascript&apos;</div><div class=\"line\">        this.books=[&apos;javascript&apos;,&apos;html&apos;,&apos;css&apos;];</div><div class=\"line\">        this.id = id</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //声明父类原型方法</div><div class=\"line\">    SuperClass.prototype.showBooks = function () &#123;</div><div class=\"line\">        console.log(this.books)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //声明子类</div><div class=\"line\">    function SubClass(id) &#123;</div><div class=\"line\">        SuperClass.call(this,id)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //创建第一个子类实例</div><div class=\"line\">    var subclass1 = new SubClass(10);</div><div class=\"line\">    var subclass2 = new SubClass(11);</div><div class=\"line\"></div><div class=\"line\">    console.log(subclass1.books);</div><div class=\"line\">    console.log(subclass2.id);</div><div class=\"line\">    console.log(subclass1.name);   //undefined</div><div class=\"line\">    subclass2.showBooks();</div></pre></td></tr></table></figure></p>\n<h2 id=\"组合式继承\"><a href=\"#组合式继承\" class=\"headerlink\" title=\"组合式继承\"></a>组合式继承</h2><p>我们先来总结一下类继承和构造函数继承的优缺点</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:left\">类继承</th>\n<th style=\"text-align:left\">构造函数继承</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>核心思想</td>\n<td style=\"text-align:left\">子类的原型是父类实例化的对象</td>\n<td style=\"text-align:left\">SuperClass.call(this,id)</td>\n</tr>\n<tr>\n<td>优点</td>\n<td style=\"text-align:left\">子类实例化对象的属性和方法都指向父类的原型</td>\n<td style=\"text-align:left\">每个实例化的子类互不影响</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td style=\"text-align:left\">子类之间可能会互相影响</td>\n<td style=\"text-align:left\">内存浪费</td>\n</tr>\n</tbody>\n</table>\n<p>所以组合式继承就是汲取两者的优点，即避免了内存浪费，又使得每个实例化的子类互不影响。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//组合式继承</div><div class=\"line\">    //声明父类</div><div class=\"line\">    var SuperClass = function (name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.books=[&apos;javascript&apos;,&apos;html&apos;,&apos;css&apos;]</div><div class=\"line\">    &#125;;</div><div class=\"line\">    //声明父类原型上的方法</div><div class=\"line\">    SuperClass.prototype.showBooks = function () &#123;</div><div class=\"line\">        console.log(this.books)</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //声明子类</div><div class=\"line\">    var SubClass = function (name) &#123;</div><div class=\"line\">        SuperClass.call(this, name)</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //子类继承父类（链式继承）</div><div class=\"line\">    SubClass.prototype = new SuperClass();</div><div class=\"line\"></div><div class=\"line\">    //实例化子类</div><div class=\"line\">    var subclass1 = new SubClass(&apos;java&apos;);</div><div class=\"line\">    var subclass2 = new SubClass(&apos;php&apos;);</div><div class=\"line\">    subclass2.showBooks();</div><div class=\"line\">    subclass1.books.push(&apos;ios&apos;);    //[&quot;javascript&quot;, &quot;html&quot;, &quot;css&quot;]</div><div class=\"line\">    console.log(subclass1.books);  //[&quot;javascript&quot;, &quot;html&quot;, &quot;css&quot;, &quot;ios&quot;]</div><div class=\"line\">    console.log(subclass2.books);   //[&quot;javascript&quot;, &quot;html&quot;, &quot;css&quot;]</div></pre></td></tr></table></figure></p>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>那么问题又来了~组合式继承的方法固然好，但是会导致一个问题，父类的构造函数会被创建两次（call()的时候一遍，new的时候又一遍），所以为了解决这个问题，又出现了寄生组合继承。<br>刚刚问题的关键是父类的构造函数在类继承和构造函数继承的组合形式中被创建了两遍，但是在类继承中我们并不需要创建父类的构造函数，我们只是要子类继承父类的原型即可。所以说我们先给父类的原型创建一个副本，然后修改子类<code>constructor</code>属性，最后在设置子类的原型就可以了~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//寄生式继承</div><div class=\"line\">    function inheritObject(subClass,superClass) &#123;</div><div class=\"line\">        //复制一份父类的原型保存在变量中</div><div class=\"line\">        var p = inheritObject(superClass.prototype);</div><div class=\"line\">        //修正因为重写子类原型导致子类constructor属性被修改</div><div class=\"line\">        p.constructor = subClass;</div><div class=\"line\">        //设置子类的原型</div><div class=\"line\">        subClass.prototype = p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //定义父类</div><div class=\"line\">    var SuperClass = function (name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.books = [&apos;javascript&apos;,&apos;html&apos;,&apos;css&apos;]</div><div class=\"line\">    &#125;;</div><div class=\"line\">    //定义父类原型方法</div><div class=\"line\">    SuperClass.prototype.getBooks = function () &#123;</div><div class=\"line\">        console.log(this.books)</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //定义子类</div><div class=\"line\">    var SubClass = function (name) &#123;</div><div class=\"line\">        SuperClass.call(this,name)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    inheritObject(SubClass,SuperClass);</div><div class=\"line\">    </div><div class=\"line\">    var subclass1 = new SubClass(&apos;php&apos;)</div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本文首发于我的个人网站：<a href=\"http://cherryblog.site\">http://cherryblog.site</a></p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170608233128113?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>周末的时候深入的了解了下javascript的面向对象编程思想，收获颇丰，感觉对面向对象编程有了那么一丢丢的了解了~很开森<br>","more":"</p>\n<h1 id=\"什么是面向对象编程\"><a href=\"#什么是面向对象编程\" class=\"headerlink\" title=\"什么是面向对象编程\"></a>什么是面向对象编程</h1><p><img src=\"http://img.blog.csdn.net/20170605213635589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"生动描述面向对象概念\"><br>先上一张图，可以对面向对象有一个大致的了解，然而什么是面向对象呢，用java中的一句经典语句来说就是：万事万物皆对象。面向对象的思想主要是以对象为主，将一个问题抽象出具体的对象，并且将抽象出来的对象和对象的属性和方法封装成一个类。</p>\n<blockquote>\n<p>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</p>\n</blockquote>\n<h2 id=\"面向对象和面向过程的区别\"><a href=\"#面向对象和面向过程的区别\" class=\"headerlink\" title=\"面向对象和面向过程的区别\"></a>面向对象和面向过程的区别</h2><p>面向对象和面向过程是两种不同的编程思想，我们经常会听到两者的比较，刚开始编程的时候，大部分应该都是使用的面向过程的编程，但是随着我们的成长，还是面向对象的编程思想比较好一点~<br>其实面向对象和面向过程并不是完全相对的，也并不是完全独立的。<br>我认为面向对象和面向过程的主要区别是面向过程主要是以动词为主，解决问题的方式是按照顺序一步一步调用不同的函数。<br>而面向对象主要是以名词为主，将问题抽象出具体的对象，而这个对象有自己的属性和方法，在解决问题的时候是将不同的对象组合在一起使用。<br>所以说面向对象的好处就是可扩展性更强一些，解决了代码重用性的问题。</p>\n<ul>\n<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了。</li>\n<li>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。</li>\n</ul>\n<p>有一个知乎的高票回答很有意思，给大家分享一下~</p>\n<blockquote>\n<p>面向对象：  狗.吃(屎)<br>面向过程：  吃.(狗,屎)</p>\n</blockquote>\n<p>具体的实现我们看一下最经典的“把大象放冰箱”这个问题</p>\n<h3 id=\"面向过程的解决方法\"><a href=\"#面向过程的解决方法\" class=\"headerlink\" title=\"面向过程的解决方法\"></a>面向过程的解决方法</h3><p>在面向过程的编程方式中实现“把大象放冰箱”这个问题答案是耳熟能详的，一共分三步：</p>\n<ol>\n<li>开门（冰箱）；</li>\n<li>装进（冰箱，大象）；</li>\n<li>关门（冰箱）。</li>\n</ol>\n<h3 id=\"面向对象的解决方法\"><a href=\"#面向对象的解决方法\" class=\"headerlink\" title=\"面向对象的解决方法\"></a>面向对象的解决方法</h3><ol>\n<li>冰箱.开门（）</li>\n<li>冰箱.装进（大象）</li>\n<li>冰箱.关门（）</li>\n</ol>\n<p>可以看出来面向对象和面向过程的侧重点是不同的，面向过程是以动词为主，完成一个事件就是将不同的动作函数按顺序调用。<br>面向对象是以主谓为主。将主谓看成一个一个的对象，然后对象有自己的属性和方法。比如说，冰箱有自己的id属性，有开门的方法。然后就可以直接调用冰箱的开门方法给其传入一个参数大象就可以了。<br>简单的例子面向对象和面向过程的好处还不是很明显。</p>\n<h3 id=\"五子棋例子\"><a href=\"#五子棋例子\" class=\"headerlink\" title=\"五子棋例子\"></a>五子棋例子</h3><p>下面是一个我认为比较能够说明两者区别的一个栗子~：<br>例如五子棋，面向过程的设计思路就是首先分析问题的步骤：</p>\n<ol>\n<li>开始游戏</li>\n<li>黑子先走</li>\n<li>绘制画面</li>\n<li>判断输赢</li>\n<li>轮到白子</li>\n<li>绘制画面</li>\n<li>判断输赢</li>\n<li>返回步骤2</li>\n</ol>\n<p>把上面每个步骤用分别的函数来实现，问题就解决了。</p>\n<p>而面向对象的设计则是从另外的思路来解决问题。整个五子棋可以分为 </p>\n<ol>\n<li>黑白双方，这两方的行为是一模一样的</li>\n<li>棋盘系统，负责绘制画面</li>\n</ol>\n<p>第一类对象（玩家对象）负责接受用户输入，并告知第二类对象（棋盘对象）棋子布局的变化，棋盘对象接收到了棋子的i变化就要负责在屏幕上面显示出这种变化，同时利用第三类对象（规则系统）来对棋局进行判定。</p>\n<p>可以明显地看出，面向对象是以功能来划分问题，而不是步骤。同样是绘制棋局，这样的行为在面向过程的设计中分散在了总多步骤中，很可能出现不同的绘制版本，因为通常设计人员会考虑到实际情况进行各种各样的简化。而面向对象的设计中，绘图只可能在棋盘对象中出现，从而保证了绘图的统一。</p>\n<p>功能上的统一保证了面向对象设计的可扩展性。比如我要加入悔棋的功能，如果要改动面向过程的设计，那么从输入到判断到显示这一连串的步骤都要改动，甚至步骤之间的循序都要进行大规模调整。如果是面向对象的话，只用改动棋盘对象就行了，棋盘系统保存了黑白双方的棋谱，简单回溯就可以了，而显示和规则判断则不用顾及，同时整个对对象功能的调用顺序都没有变化，改动只是局部的。</p>\n<p>再比如我要把这个五子棋游戏改为围棋游戏，如果你是面向过程设计，那么五子棋的规则就分布在了你的程序的每一个角落，要改动还不如重写。但是如果你当初就是面向对象的设计，那么你只用改动规则对象就可以了，五子棋和围棋的区别不就是规则吗？（当然棋盘大小好像也不一样，但是你会觉得这是一个难题吗？直接在棋盘对象中进行一番小改动就可以了。）而下棋的大致步骤从面向对象的角度来看没有任何变化。</p>\n<p>当然，要达到改动只是局部的需要设计的人有足够的经验，使用对象不能保证你的程序就是面向对象，初学者或者很蹩脚的程序员很可能以面向对象之虚而行面向过程之实，这样设计出来的所谓面向对象的程序很难有良好的可移植性和可扩展性。</p>\n<h1 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h1><p>面向对象有三大特性，封装、继承和多态。对于ES5来说，没有<code>class</code>的概念，并且由于js的函数级作用域（在函数内部的变量在函数外访问不到），所以我们就可以模拟 <code>class</code>的概念，在es5中，类其实就是保存了一个函数的变量，这个函数有自己的属性和方法。将属性和方法组成一个类的过程就是封装。</p>\n<blockquote>\n<p>封装：把客观事物封装成抽象的类，隐藏属性和方法的实现细节，仅对外公开接口。</p>\n</blockquote>\n<h3 id=\"通过构造函数添加\"><a href=\"#通过构造函数添加\" class=\"headerlink\" title=\"通过构造函数添加\"></a>通过构造函数添加</h3><p>javascript提供了一个构造函数（Constructor）模式，用来在创建对象时初始化对象。<br>构造函数其实就是普通的函数，只不过有以下的特点</p>\n<ul>\n<li>首字母大写（建议构造函数首字母大写，即使用大驼峰命名，非构造函数首字母小写）</li>\n<li>内部使用<code>this</code></li>\n<li>使用 <code>new</code>生成实例</li>\n</ul>\n<p>通过构造函数添加属性和方法实际上也就是通过this添加的属性和方法。因为this总是指向当前对象的，所以通过this添加的属性和方法只在当前对象上添加，是该对象自身拥有的。所以我们实例化一个新对象的时候，this指向的属性和方法都会得到相应的创建，也就是会在内存中复制一份，这样就造成了内存的浪费。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Cat(name,color)&#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.color = color;</div><div class=\"line\">        this.eat = function () &#123;</div><div class=\"line\">            alert(&apos;吃老鼠&apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>生成实例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var cat1 = new Cat(&apos;tom&apos;,&apos;red&apos;)</div></pre></td></tr></table></figure></p>\n<p><strong>通过this定义的属性和方法，我们实例化对象的时候都会重新复制一份</strong></p>\n<h3 id=\"通过原型prototype\"><a href=\"#通过原型prototype\" class=\"headerlink\" title=\"通过原型prototype\"></a>通过原型prototype</h3><p>在类上通过 <code>this</code>的方式添加属性和对象会导致内存浪费的问题，我们就考虑，有什么方法可以让实例化的类所使用的方法直接使用指针指向同一个方法。于是，就想到了原型的方式</p>\n<blockquote>\n<p>Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>也就是说，对于那些不变的属性和方法，我们可以直接将其添加在类的<code>prototype</code> 对象上。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　function Cat(name,color)&#123;</div><div class=\"line\">　　　　this.name = name;</div><div class=\"line\">　　　　this.color = color;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　Cat.prototype.type = &quot;猫科动物&quot;;</div><div class=\"line\">　　Cat.prototype.eat = function()&#123;alert(&quot;吃老鼠&quot;)&#125;;</div></pre></td></tr></table></figure>\n<p>然后生成实例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;);</div><div class=\"line\">　　var cat2 = new Cat(&quot;二毛&quot;,&quot;黑色&quot;);</div><div class=\"line\">　　alert(cat1.type); // 猫科动物</div><div class=\"line\">　　cat1.eat(); // 吃老鼠</div></pre></td></tr></table></figure></p>\n<p>这时所有实例的<code>type</code>属性和<code>eat()</code>方法，其实都是同一个内存地址，指向<code>prototype</code>对象，因此就提高了运行效率。</p>\n<h3 id=\"在类的外部通过-语法添加\"><a href=\"#在类的外部通过-语法添加\" class=\"headerlink\" title=\"在类的外部通过.语法添加\"></a>在类的外部通过.语法添加</h3><p>我们还可以在类的外部通过<code>.</code> 语法进行添加，因为在实例化对象的时候，并不会执行到在类外部通过<code>.</code> 语法添加的属性，所以实例化之后的对象是不能访问到<code>.</code> 语法所添加的对象和属性的，只能通过该类访问。</p>\n<h3 id=\"三者的区别\"><a href=\"#三者的区别\" class=\"headerlink\" title=\"三者的区别\"></a>三者的区别</h3><p>通过构造函数、原型和<code>.</code> 语法三者都可以在类上添加属性和方法。但是三者是有一定的区别的。<br><strong>构造函数</strong>：通过this添加的属性和方法总是指向当前对象的，所以在实例化的时候，通过this添加的属性和方法都会在内存中复制一份，这样就会造成内存的浪费。但是这样创建的好处是即使改变了某一个对象的属性或方法，不会影响其他的对象（因为每一个对象都是复制的一份）。<br><strong>原型</strong>：通过原型继承的方法并不是自身的，我们要在原型链上一层一层的查找，这样创建的好处是只在内存中创建一次，实例化的对象都会指向这个<code>prototype</code> 对象，但是这样做也有弊端，因为实例化的对象的原型都是指向同一内存地址，改动其中的一个对象的属性可能会影响到其他的对象<br><strong><code>.</code> 语法</strong>：在类的外部通过<code>.</code> 语法创建的属性和方法只会创建一次，但是这样创建的实例化的对象是访问不到的，只能通过类的自身访问</p>\n<h2 id=\"javascript也有private-public-protected\"><a href=\"#javascript也有private-public-protected\" class=\"headerlink\" title=\"javascript也有private public protected\"></a>javascript也有private public protected</h2><p>对于java程序员来说private public protected这三个关键字应该是很熟悉的哈，但是在js中，并没有类似于private public protected这样的关键字，但是我们又希望我们定义的属性和方法有一定的访问限制，于是我们就可以模拟private public protected这些访问权限。<br>不熟悉java的小伙伴可能不太清楚private public protected概念（其他语言我也不清楚有没有哈，但是应该都是类似的~），先来科普一下小知识点~</p>\n<ul>\n<li>public：public表明该数据成员、成员函数是对所有用户开放的，所有用户都可以直接进行调用</li>\n<li>private：private表示私有，私有的意思就是除了class自己之外，任何人都不可以直接使用，私有财产神圣不可侵犯嘛，即便是子女，朋友，都不可以使用。</li>\n<li>protected：protected对于子女、朋友来说，就是public的，可以自由使用，没有任何限制，而对于其他的外部class，protected就变成private。</li>\n</ul>\n<h3 id=\"js中的private\"><a href=\"#js中的private\" class=\"headerlink\" title=\"js中的private\"></a>js中的private</h3><p>因为javascript函数级作用域的特性（在函数中定义的属性和方法外界访问不到），所以我们在函数内部直接定义的属性和方法都是私有的。</p>\n<h3 id=\"js中的public\"><a href=\"#js中的public\" class=\"headerlink\" title=\"js中的public\"></a>js中的public</h3><p>通过new关键词实例化时，this定义的属性和变量都会被复制一遍，所以通过this定义的属性和方法就是公有的。<br>通过prototype创建的属性在类的实例化之后类的实例化对象也是可以访问到的，所以也是公有的。</p>\n<h3 id=\"js中的protected\"><a href=\"#js中的protected\" class=\"headerlink\" title=\"js中的protected\"></a>js中的protected</h3><p>在函数的内部，我们可以通过this定义的方法访问到一些类的私有属性和方法，在实例化的时候就可以初始化对象的一些属性了。</p>\n<h3 id=\"new的实质\"><a href=\"#new的实质\" class=\"headerlink\" title=\"new的实质\"></a>new的实质</h3><p>虽然很多人都已经了解了new的实质，那么我还是要再说一下new 的实质<br> <code>var o = new Object()</code></p>\n<ol>\n<li>新建一个对象o</li>\n<li><code>o. __proto__ = Object.prototype</code> 将新创建的对象的<code>__proto__</code>属性指向构造函数的<code>prototype</code></li>\n<li>将this指向新创建的对象</li>\n<li>返回新对象，但是这里需要看构造函数有没有返回值，如果构造函数的返回值为基本数据类型<code>string,boolean,number,null,undefined</code>,那么就返回新对象，如果构造函数的返回值为对象类型，那么就返回这个对象类型</li>\n</ol>\n<h3 id=\"栗子\"><a href=\"#栗子\" class=\"headerlink\" title=\"栗子~\"></a>栗子~</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">var Book = function (id, name, price) &#123;</div><div class=\"line\">        //private(在函数内部定义，函数外部访问不到，实例化之后实例化的对象访问不到)</div><div class=\"line\">        var num = 1;</div><div class=\"line\">        var id = id;</div><div class=\"line\">        function checkId() &#123;</div><div class=\"line\">            console.log(&apos;private&apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\">        //protected(可以访问到函数内部的私有属性和私有方法，在实例化之后就可以对实例化的类进行初始化拿到函数的私有属性)</div><div class=\"line\">        this.getName = function () &#123;</div><div class=\"line\">            console.log(id)</div><div class=\"line\">        &#125;</div><div class=\"line\">        this.getPrice = function () &#123;</div><div class=\"line\">            console.log(price)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        //public(实例化的之后，实例化的对象就可以访问到了~)</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.copy = function () &#123;</div><div class=\"line\">            console.log(&apos;this is public&apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //在Book的原型上添加的方法实例化之后可以被实例化对象继承</div><div class=\"line\">    Book.prototype.proFunction = function () &#123;</div><div class=\"line\">        console.log(&apos;this is proFunction&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //在函数外部通过.语法创建的属性和方法，只能通过该类访问，实例化对象访问不到</div><div class=\"line\">    Book.setTime = function () &#123;</div><div class=\"line\">        console.log(&apos;this is new time&apos;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    var book1 = new Book(&apos;111&apos;,&apos;悲惨世界&apos;,&apos;$99&apos;)</div><div class=\"line\">    book1.getName();        // 111 getName是protected，可以访问到类的私有属性，所以实例化之后也可以访问到函数的私有属性</div><div class=\"line\">    book1.checkId();        //报错book1.checkId is not a function</div><div class=\"line\">    console.log(book1.id)   // undefined id是在函数内部通过定义的，是私有属性，所以实例化对象访问不到</div><div class=\"line\">    console.log(book1.name) //name 是通过this创建的，所以在实例化的时候会在book1中复制一遍name属性，所以可以访问到</div><div class=\"line\">    book1.copy()            //this is public</div><div class=\"line\">    book1.proFunction();    //this is proFunction</div><div class=\"line\">    Book.setTime();         //this is new time</div><div class=\"line\">    book1.setTime();        //报错book1.setTime is not a function</div></pre></td></tr></table></figure>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><blockquote>\n<p>继承：子类可以使用父类的所有功能，并且对这些功能进行扩展。继承的过程，就是从一般到特殊的过程。</p>\n</blockquote>\n<p>其实继承都是基于以上封装方法的三个特性来实现的。</p>\n<h2 id=\"类式继承\"><a href=\"#类式继承\" class=\"headerlink\" title=\"类式继承\"></a>类式继承</h2><p>所谓的类式继承就是使用的原型的方式，将方法添加在父类的原型上，然后子类的原型是父类的一个实例化对象。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\">//声明父类</div><div class=\"line\">    var SuperClass = function () &#123;</div><div class=\"line\">        var id = 1;</div><div class=\"line\">        this.name = [&apos;javascript&apos;];</div><div class=\"line\">        this.superValue = function () &#123;</div><div class=\"line\">            console.log(&apos;superValue is true&apos;);</div><div class=\"line\">            console.log(id)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //为父类添加共有方法</div><div class=\"line\">    SuperClass.prototype.getSuperValue = function () &#123;</div><div class=\"line\">        return this.superValue();</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //声明子类</div><div class=\"line\">    var SubClass = function () &#123;</div><div class=\"line\">        this.subValue = function () &#123;</div><div class=\"line\">            console.log(&apos;this is subValue &apos;)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //继承父类</div><div class=\"line\">    SubClass.prototype = new SuperClass() ;</div><div class=\"line\"></div><div class=\"line\">    //为子类添加共有方法</div><div class=\"line\">    SubClass.prototype.getSubValue= function () &#123;</div><div class=\"line\">        return this.subValue()</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    var sub = new SubClass();</div><div class=\"line\">    var sub2 =  new  SubClass();</div><div class=\"line\"></div><div class=\"line\">    sub.getSuperValue();   //superValue is true</div><div class=\"line\">    sub.getSubValue();     //this is subValue</div><div class=\"line\"></div><div class=\"line\">    console.log(sub.id);    //undefined</div><div class=\"line\">    console.log(sub.name);  //javascript</div><div class=\"line\"></div><div class=\"line\">    sub.name.push(&apos;java&apos;);  //[&quot;javascript&quot;]</div><div class=\"line\">    console.log(sub2.name)  //[&quot;javascript&quot;, &quot;java&quot;]</div></pre></td></tr></table></figure></p>\n<p>其中最核心的一句代码是<code>SubClass.prototype = new SuperClass() ;</code><br>类的原型对象<code>prototype</code>对象的作用就是为类的原型添加共有方法的，但是类不能直接访问这些方法，只有将类实例化之后，新创建的对象复制了父类构造函数中的属性和方法，并将原型<code>__proto__</code> 指向了父类的原型对象。这样子类就可以访问父类的<code>public</code> 和<code>protected</code> 的属性和方法，同时，父类中的<code>private</code> 的属性和方法不会被子类继承。</p>\n<p>敲黑板，如上述代码的最后一段，使用类继承的方法，如果父类的构造函数中有引用类型，就会在子类中被所有实例共用，因此一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例。<br><strong>提一个小问题~为什么一个子类的实例如果更改了这个引用类型，就会影响到其他子类的实例呢，在javascript中，什么是引用类型呢，引用类型和其他的类型又有什么区别呢？</strong></p>\n<h2 id=\"构造函数继承\"><a href=\"#构造函数继承\" class=\"headerlink\" title=\"构造函数继承\"></a>构造函数继承</h2><p>正式因为有了上述的缺点，才有了构造函数继承，构造函数继承的核心思想就是<code>SuperClass.call(this,id)</code>,直接改变this的指向，使通过this创建的属性和方法在子类中复制一份，因为是单独复制的，所以各个实例化的子类互不影响。但是会造成内存浪费的问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">//构造函数继承</div><div class=\"line\">    //声明父类</div><div class=\"line\">    function SuperClass(id) &#123;</div><div class=\"line\">        var name = &apos;javascript&apos;</div><div class=\"line\">        this.books=[&apos;javascript&apos;,&apos;html&apos;,&apos;css&apos;];</div><div class=\"line\">        this.id = id</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //声明父类原型方法</div><div class=\"line\">    SuperClass.prototype.showBooks = function () &#123;</div><div class=\"line\">        console.log(this.books)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //声明子类</div><div class=\"line\">    function SubClass(id) &#123;</div><div class=\"line\">        SuperClass.call(this,id)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //创建第一个子类实例</div><div class=\"line\">    var subclass1 = new SubClass(10);</div><div class=\"line\">    var subclass2 = new SubClass(11);</div><div class=\"line\"></div><div class=\"line\">    console.log(subclass1.books);</div><div class=\"line\">    console.log(subclass2.id);</div><div class=\"line\">    console.log(subclass1.name);   //undefined</div><div class=\"line\">    subclass2.showBooks();</div></pre></td></tr></table></figure></p>\n<h2 id=\"组合式继承\"><a href=\"#组合式继承\" class=\"headerlink\" title=\"组合式继承\"></a>组合式继承</h2><p>我们先来总结一下类继承和构造函数继承的优缺点</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th style=\"text-align:left\">类继承</th>\n<th style=\"text-align:left\">构造函数继承</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>核心思想</td>\n<td style=\"text-align:left\">子类的原型是父类实例化的对象</td>\n<td style=\"text-align:left\">SuperClass.call(this,id)</td>\n</tr>\n<tr>\n<td>优点</td>\n<td style=\"text-align:left\">子类实例化对象的属性和方法都指向父类的原型</td>\n<td style=\"text-align:left\">每个实例化的子类互不影响</td>\n</tr>\n<tr>\n<td>缺点</td>\n<td style=\"text-align:left\">子类之间可能会互相影响</td>\n<td style=\"text-align:left\">内存浪费</td>\n</tr>\n</tbody>\n</table>\n<p>所以组合式继承就是汲取两者的优点，即避免了内存浪费，又使得每个实例化的子类互不影响。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//组合式继承</div><div class=\"line\">    //声明父类</div><div class=\"line\">    var SuperClass = function (name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.books=[&apos;javascript&apos;,&apos;html&apos;,&apos;css&apos;]</div><div class=\"line\">    &#125;;</div><div class=\"line\">    //声明父类原型上的方法</div><div class=\"line\">    SuperClass.prototype.showBooks = function () &#123;</div><div class=\"line\">        console.log(this.books)</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //声明子类</div><div class=\"line\">    var SubClass = function (name) &#123;</div><div class=\"line\">        SuperClass.call(this, name)</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //子类继承父类（链式继承）</div><div class=\"line\">    SubClass.prototype = new SuperClass();</div><div class=\"line\"></div><div class=\"line\">    //实例化子类</div><div class=\"line\">    var subclass1 = new SubClass(&apos;java&apos;);</div><div class=\"line\">    var subclass2 = new SubClass(&apos;php&apos;);</div><div class=\"line\">    subclass2.showBooks();</div><div class=\"line\">    subclass1.books.push(&apos;ios&apos;);    //[&quot;javascript&quot;, &quot;html&quot;, &quot;css&quot;]</div><div class=\"line\">    console.log(subclass1.books);  //[&quot;javascript&quot;, &quot;html&quot;, &quot;css&quot;, &quot;ios&quot;]</div><div class=\"line\">    console.log(subclass2.books);   //[&quot;javascript&quot;, &quot;html&quot;, &quot;css&quot;]</div></pre></td></tr></table></figure></p>\n<h2 id=\"寄生组合继承\"><a href=\"#寄生组合继承\" class=\"headerlink\" title=\"寄生组合继承\"></a>寄生组合继承</h2><p>那么问题又来了~组合式继承的方法固然好，但是会导致一个问题，父类的构造函数会被创建两次（call()的时候一遍，new的时候又一遍），所以为了解决这个问题，又出现了寄生组合继承。<br>刚刚问题的关键是父类的构造函数在类继承和构造函数继承的组合形式中被创建了两遍，但是在类继承中我们并不需要创建父类的构造函数，我们只是要子类继承父类的原型即可。所以说我们先给父类的原型创建一个副本，然后修改子类<code>constructor</code>属性，最后在设置子类的原型就可以了~</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">//寄生式继承</div><div class=\"line\">    function inheritObject(subClass,superClass) &#123;</div><div class=\"line\">        //复制一份父类的原型保存在变量中</div><div class=\"line\">        var p = inheritObject(superClass.prototype);</div><div class=\"line\">        //修正因为重写子类原型导致子类constructor属性被修改</div><div class=\"line\">        p.constructor = subClass;</div><div class=\"line\">        //设置子类的原型</div><div class=\"line\">        subClass.prototype = p;</div><div class=\"line\">    &#125;</div><div class=\"line\">    //定义父类</div><div class=\"line\">    var SuperClass = function (name) &#123;</div><div class=\"line\">        this.name = name;</div><div class=\"line\">        this.books = [&apos;javascript&apos;,&apos;html&apos;,&apos;css&apos;]</div><div class=\"line\">    &#125;;</div><div class=\"line\">    //定义父类原型方法</div><div class=\"line\">    SuperClass.prototype.getBooks = function () &#123;</div><div class=\"line\">        console.log(this.books)</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    //定义子类</div><div class=\"line\">    var SubClass = function (name) &#123;</div><div class=\"line\">        SuperClass.call(this,name)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    inheritObject(SubClass,SuperClass);</div><div class=\"line\">    </div><div class=\"line\">    var subclass1 = new SubClass(&apos;php&apos;)</div></pre></td></tr></table></figure>"},{"title":"中国式穷人思维：越穷越省，越省越穷！（转载)","date":"2017-08-06T13:55:57.000Z","_content":"首先特别声明一点：节俭的对立面并不非得是奢侈浪费。两者中间还有适度消费。\n\n\n中国人曾经很穷。\n\n墙上挂着一条咸鱼，一家人围着一盘咸菜扒拉着白饭。低头吃一口饭，抬头看一眼鱼，就算是吃着肉了。孩子忍不住多看了一眼，父亲要责骂他贪婪。有白米饭就咸菜，墙上还有鱼，已然是十分不错了。还有更多的人只能吃野菜、草根，甚至是观音土。\n\n长期处于农耕社会，看天吃饭，不知道何时，天灾人祸就会忽然降临。普罗大众既穷困，又要时刻准备着无妄之灾。勤俭节约，成了生存与生活的智慧，几千年不变。\n\n<!--more-->\n\n如今，中国人富裕了，但是幸福指数并没有同等上升。罗奶奶买了几斤香蕉，回到家发现有两根有点发黑，局部有点腐烂了，赶紧给吃了。看到剩下的都还好，舍不得吃，决定再放放。过了两天，又发现两根开始腐烂了，罗奶奶赶紧又吃了……如此循环，几斤香蕉吃完了，但一根好的都没吃到。\n\n喜欢做这样的事情的，可不只有罗奶奶。肖大妈的儿子给她买了一件几千块钱的衣服。每逢有亲朋上门，她都要拿出来展览一番，但就是舍不得穿。只是每年大年初一的早上穿几个小时，又赶紧脱下来收好。直到有一次拿出来却发现衣服被老鼠啃烂了。\n\n该吃的不吃，该穿的不穿，该用的不用……很多中国人依然过着紧巴巴的日子。这可不仅仅是因为还没适应富裕的日子。这是一种习惯，一种思维，一种眼界，一种格局。\n\n\n我们家离小镇大概五公里，步行一个小时。父亲舍不得五块钱的车费，去镇上从来都是步行。冬春倒也罢了，40度高温的夏天，他照样倔强地顶着烈日一步一步走到镇上，再走回来。我们劝他坐车，反而总是引来一顿教训。终于一天，他因此而中暑，住院的医药费够两年的车费。满以为他会吸取教训，有所改变。不曾想，他因为住院花了钱而更加变本加厉，甚至有重物在身，也不坐车。\n\n父亲还有一个习惯，有病不看医生。先是熬着，希望“过几天就好了”；如果熬不过，就根据自己的理解，去小药铺拿药吃，甚至自己根据偏方配草药。直到十分严重，才会答应去医院看正经医生。但往往在这个时候，病情已经沉重，所花的钱是几倍。\n\n并不是家里缺车费或是药费。他只是习惯了“坚持节约的传统美德”。而且这种习惯固执而倔强，不可撼动。肯定不止我一个人有这样的父亲。\n\n\n固守勤俭的人，不论做什么事都非常注重省钱。在心理学领域有一种心态叫“稀缺心态”，即你越觉得自己缺什么，就会越在意什么。而事实却往往，你越在意什么，就越缺什么。\n\n山东烟台的孙大爷年轻的时候经历过一段苦日子，“缺钱”在他心中已经根深蒂固。哪怕现在儿女成人，生活毫无压力，他依然觉得自己很穷困，也担心将来会再次遭遇穷困。“苦日子过怕了”的他，一直很节俭。\n\n为了节省水费，孙大爷洗菜的时候总是草草了事，如果看着干净，他甚至不洗。加上他又特别喜欢吃凉拌菜。因为经常吃没有洗净的菜，孙大爷感染了黄疸型戊型病毒性肝炎（一种由进食为主要感染源的病毒肝炎疾病），差点因此而丧命。最终住院费花了近七万元，才捡回一条命。七万元，够孙大爷活两辈子的水费了。\n\n“稀缺心理”会严重影响人的认知智慧，导致人们只看到眼前的蝇头小利，而因小失大。这是一种典型的穷人思维，却也总是和“节俭”的优良品质同在。\n\n\n因为地处三峡库区。三峡工程蓄水前期，县城需要搬迁。搬县城就需要大兴土木，需要很多建房子的砖。我们镇上正好是两条河的交汇处，河沙堆积，是优质的建材。有头脑的人去河里挖沙，打成砖，运到县城去卖。有利可图，村民群起效仿。\n\n政府觉得这是惠民的好事，愿意支持。政府给一家垫资十万元，置办打砖的机械。但是这十万元要还，还有利息。有个聪明的人算了一个账，县城搬迁大概也就三五年的事情，需要的砖总共就那么多。大家都打砖，最后一家肯定挣了十万块钱。于是得出结论，这是一个大坑，千万别吃亏。大家交相称赞，并且庆幸有他这么个聪明人。\n\n唯独老王例外。他找政府贷了款，买了打砖的机械。十多年过去了。县城搬迁早已结束，但是县城的房价一涨再涨，房子建了一波又一波。连镇上的房子也如雨后春笋，一夜之间到处都是工地。老王不仅还了政府的贷款，还扩大了砖厂的规模，机械日夜轰鸣。政府为了规范，关闭了所有打砖的小作坊，全镇就剩了老王一家砖厂。村里身强力壮的劳动力都去给老王打工。\n\n节俭的人心中往往只有一个想法：省钱。为了省钱，就要算账，就怕吃亏。\n算着算着，就容易只看到手里那点钱，而鼠目寸光，看不到远处。省钱，反而失去了挣钱的机会。\n\n还是我父亲的故事。我们县是名副其实的老少边穷地区，国家贫困县市榜上排名前列。同是面朝黄土背朝天，父亲却能靠自己的勤劳和节俭比同村别的人有更多的储蓄。这让他颇为自得。十年前，政府大力发展原生态旅游业，在各个乡镇成立旅游公司。为了筹措资金，旅游公司有部分股份归村集体所有，号召大家入股、融资。我舅舅找到父亲，极力鼓动他拿出那点积蓄去认购股份。\n\n父亲不仅不为所动，还以老大哥的身份把舅舅教训了一通：“你就是从小没吃过苦，不懂得勤俭，老想着投机取巧的事情。我那点钱是一点一点攒的，得用在该用的地方。你也别多想，还是踏踏实实种地，过日子吧。”\n\n老实本分，勒紧裤腰带过着紧巴巴的日子，不作非分之想。这是父亲勤俭半辈子得出的经验。\n\n舅舅没有办法，以个人的名义借走了父亲的积蓄，认购了股份。\n十年的时间，舅舅每年能坐收相当可观的分红，如今在县城大街上有房，有车，有产业。而父亲那点可怜的积蓄早也不知道被消耗了在何处。\n\n节俭的人，总是特别懂得劳动的辛酸，所以对劳动成果尤为珍惜。他们总是要把劳动所得看得紧紧的，省了又省，减了又减。但他们的小心谨慎，使得他们总是只懂得珍惜过去的，却看不到未来的。只知道怎么可以尽量少把手中的钱花出去，却不知道如何投资获得更大的汇报。最终影响的是选择、决策的格局，决定的是最终的高度。\n\n1998年金融危机，席卷整个亚洲，影响全世界经济数年之久。中国当然不能幸免。为了复苏经济，政府出台政策，极力拉动内需，不惜投入大量资金救市。然而，老百姓的自然消费却始终疲软不给力。\n\n很多老百姓不是绝对缺钱，而是愿意将钱存在银行。因为大家对过去的苦日子心有余悸，不得不提心吊胆、小心翼翼地把钱存起来，防范于未然。而这些存起来的钱，都是从眼前的日子里一分一分扣出来的，每一分钱上都写着“节俭”两个大字。\n\n节俭是我们在长期历史中形成的一种心态，这种心态一直被称之为美德。但是，现在它正在抹杀很大一部分中国人的幸福。没有存钱，心里不踏实。存了一万，想存十万；存了十万，还想存一百万……不敢吃，不敢穿，不敢用，极度缺乏安全感。\n\n然而，抓不住现在的生活，快乐与幸福该何处安放？\n\n曾经流传着这样一个故事：\n\n一个美国老太太和中国老太太见了面，两人都很高兴，便攀谈起来。\n美国老太太说：“真是开心啊。住了六十年的房子，今天终于把钱还完了。”\n中国老太太说：“我也很开心。存了六十年的钱，终于可以买房子了。”\n这是一个笑话，却很能说明问题。\n\n这代表的是两种消费观念。美国老太太代表的是典型的工业社会、商业社会的消费心态；而中国老太太崇尚的则是农耕文明勤俭的消费观念。\n\n时代变了，我们已经迈入了工业化、商业化的时代。我们的消费心态需要随之改变。深层次的道理不说。国家、社会需要我们适度消费。有消费，有流通，经济才能发展。\n\n我们自己也需要适度消费，生活才有情趣。\n\n刚刚摆脱贫穷的我们很矛盾，容易走上两个极端。一边是暴发户式的狂喜，极尽奢侈之能，毫无底线炫富。一边是沉浸在贫困的惶恐中不能自拔，挣再多的钱也不敢花，存再多的钱也得不到安全感。\n\n我们要学会和自己的能力相匹配的适度消费。\n\n能吃馒头的不必刻意吃糠咽菜，能吃鱼肉的不需天天白饭咸菜。\n多吃新鲜水果对身体好，多穿新衣心情美。\n买得起名牌的尽管买，但不用炫耀；买不起名牌的别逞强，也不用自卑。\n\n勤俭自然是美德，铺张浪费绝对是可耻。但是自己挣的钱自己花也是光荣。\n最重要的是，量力而行，不抠抠搜搜过日子，开开心心享受眼前的生活。\n而一味节俭，坏了生活的兴致，不值得。\n\n比穷更可怕的“穷人思维”\n\n1\n\n有一次我在文章里推荐了一本书《国富论》，经济学祖师、英国第一才子，亚当。斯密写的。\n\n有几个人买了，但大部分人却问我有没有电子书资源，也有几个人自己找到了。\n\n还有一个人，专门加我微信说，“在各大资源站都找遍了，没有免费的电子书，你推荐个JB！” \n　　\n我问他是不是大学生？\n\n他说已经毕业四五年了。\n\n我立马把这个人删除了，讲真，我特别害怕这种人，他不会为你带来任何价值，还会一直消耗你。你要是说错一句话，他都会觉得你坑了他祖宗十八代，所以我希望离这种人远一点儿。\n\n在大学毕业之前，我也特别喜欢寻找免费的资源，因为那个时候确实没钱，还要自己做兼职赚生活费，所以我能理解大学生的心理。\n\n直到大学毕业后，我才明白免费的东西真不是免费的，找资源的时间，绝对会超过一本书的钱，而且免费的资源，质量没有付费的好。\n\n我个人认为看书一定要看纸质版的，为什么？\n\n不仅是因为电子书伤眼睛，更重要的是，只有自己花钱买的书，才会认真去看，免费的资源，扫两眼就存档了，大多都不会珍惜。\n\n我喜欢买书，学习了《断舍离》后，又不愿意囤书。所以朋友来我这里聚餐走时，我就会把自己看完的书给他们送几本，感觉特别满足。\n\n针对上述那个找免费资源的哥们，让我深思，穷人思维的根源，到底出在哪儿？\n\n有人说穷人就是缺钱的人，其实我不太同意，世界上无论是富人还是穷人，都缺钱。有的外表光鲜的有钱人，宝马豪宅妓满屋，实质上欠银行几个亿。\n\n所以不能以缺钱来定义穷富，多和少都是相对的，穷人缺钱，但穷人和富人拥有的时间完全一样。所以，准确来说，穷人就是那种运作的钱相对少，但时间相对多的人。\n\n从经济学的角度上讲，你缺什么，就会把什么看得特别重，不缺什么，就会把这个样东西看得特别轻。\n\n所以穷人把钱看得特别重，而富人把时间看得特别重。\n\n2\n\n穷人思维对我们的第一个影响，就是喜欢用时间换钱。\n\n去年七月份，上映了一部超级烂片《封神**》，虽然投资五亿，但豆瓣上评分不到三分，这片子烂到看几分钟都觉得音箱在影响你的睡眠，但据我观察，这么烂的片子，也很少有人一起中途退场。\n\n如果你觉得电影好看，那么认认真真看完无可厚非，如果觉得难看，还忍受着折磨看完，说明你或多或少有点“穷人思维”。\n\n对于绝大多数人来说，两个小时的时间成本不值33元的票价。\n\n这种现象，用经济学的观点来说，就是过于注重“沉没成本”。\n\n在中国，大部分自助餐厅是很难盈利的，为什么？\n\n因为中国人太注重“沉没成本”。\n\n一群人进了餐厅，每人交了80元的费用，中国人不吃回本绝不会走，有的甚至会吃到吐。\n\n再比如前文说的看电影，花了33块钱买票，无论电影好看不好看，这个钱都回不来了，但很多人即便电影再难看，也会一股脑看完。\n\n还有的人买鞋子，买时很满意，但真正穿时却发现夹脚，退又退不掉，于是，大部分人会一直忍受这种痛苦，直到把鞋穿坏为止。\n\n而有钱人的花钱理念会让你眼前一亮：花钱，要么是为了赚钱，要么是为了享受，两样都不沾，就不会掏腰包。\n\n花错钱了，也决不去追回沉没成本。\n\n3\n　　\n“穷人思维”过于关注于拥有的资源本身，却常常忽略了消费的目标。\n\n比如，商场里的耐克鞋子打折，有三种规格，原价分别是1200、1000、800，现价一律500。销售员也看得出穷人和有钱人的区别：穷人更倾向于买原价1200的——因为感觉省了700元，而有钱人更倾向于适合的款式——自己的目标需求。\n\n再拿买房来说。\n\n有的人买房，先考虑我有多少钱付首付，月收入多少还贷？再倒过来推算，自己该不该买房，买什么房。\n\n还有的人买房，首先问，我要不要买房，想买什么房？然后再算，还差多少，怎么解决。\n\n如果一项任务的目标是合理的，那么我们就不能以“资源不足”为理由，去否定这个目标。\n\n这就是有钱人教会我们的一条重要原则：不要量入为出，要以目标为导向。\n\n4\n\n“穷人思维”会消耗我们有限的自制力，这是最可怕的一点。\n\n行为经济学上有一个概念叫“决策疲劳”，短时间内，你做出的决策越多，你的精力越疲惫，内心越不愿意再一次权衡利弊，导致你的决策越来越随意，甚至错误。\n\n这就是为什么我们在超市买了一大堆打折的东西，回家后却发现很多用不上，甚至会后悔想剁手。\n\n过去有一种看法，穷人的意志力会更强，而事实却是：“决策疲劳”对穷人的影响最大。\n\n美国有六分之一的穷人，他们更喜欢买垃圾食品，他们习惯每买一样东西，都要反复比价。\n\n一方面，这占用了他们的大量时间，没有精力去提高自己的判断能力；另一方面，那些频繁的、无意义的决策，使他们的大脑疲劳。\n\n等到消费快结束时，他们的大脑失去了自制力，已经无法抵御垃圾食品的诱惑。\n\n回想一下，我们减肥时，大量运动消耗了意志力之后，是不是更抵挡不了美食的诱惑了？ \n　　\n电影《华尔街之狼》讲了一个专门骗穷人的股票经纪人，他发现穷人在长期的消费决策中，形成了一种思维惯性——便宜的东西更有吸引力。当他们把这种思维惯性带到了投资中，就成为“垃圾股”的目标客户。\n\n影片里有一句台词：“我们把垃圾卖给垃圾人，因为钱在我们手里，总比在他们手里更能发挥价值。”\n\n这是天下骗子的心声啊。\n\n现实中，也有人专门将“垃圾”卖给穷人以赚取暴利。那些利率高得吓人的垃圾P2P，那些根本不可能上市的“内部原始股”，还有无数次崩盘又卷士重来的“3M骗局”，都是抓住了“穷人思维”的致命弱点——既无判断力，又无自制力。\n\n那么富人是怎么投资的呢？在巴菲特的投资偏好中，既没有房地产，也没有互联网，因为前者不喜欢，后者看不懂。\n\n这就是自制力，如猎豹一般，不浪费精力，把有限的力量集中到擅长的地方，最后全力一击。\n\n5\n　　\n冯小刚的电影《1942》里，张国立演的地主在逃荒路上说了一句话：“我知道咋从一个穷人变成财主，不出十年，你大爷我还是东家，那时候咱再回来……”\n\n如何从穷人变成财主？首先要培养一个牛逼的思维。\n\n1、建立“时间价值”的概念，减少做那些“耗时间收益少”的事情；\n　　\n2、牢记“沉没成本”不可追，钱已经花错了，再浪费时间，就是错上加错；\n　　\n3、培养“以目标为导向”的思维，确立正确目标，再想办法去整合资源；\n　　\n4、减少无意义的频繁决策，节省宝贵的意志力。\n\n5、拓展自己的视野，建立高端的商业意识。\n\n以前，我奶奶每年春节前大扫除时，总爱念叨一句话：“穷人留破烂，越留越穷。”\n\n其实，“穷人思维”才是我们最应扔掉“破烂”。\n\n只有走出思维的怪圈，才有可能变成“表面上挥金如土、暗地里日进斗金”的有钱人。","source":"_posts/something1.md","raw":"---\ntitle: 中国式穷人思维：越穷越省，越省越穷！（转载)\ndate: 2017-08-06 21:55:57\ntags: 脑子里的小想法\ncategories: 随笔\n---\n首先特别声明一点：节俭的对立面并不非得是奢侈浪费。两者中间还有适度消费。\n\n\n中国人曾经很穷。\n\n墙上挂着一条咸鱼，一家人围着一盘咸菜扒拉着白饭。低头吃一口饭，抬头看一眼鱼，就算是吃着肉了。孩子忍不住多看了一眼，父亲要责骂他贪婪。有白米饭就咸菜，墙上还有鱼，已然是十分不错了。还有更多的人只能吃野菜、草根，甚至是观音土。\n\n长期处于农耕社会，看天吃饭，不知道何时，天灾人祸就会忽然降临。普罗大众既穷困，又要时刻准备着无妄之灾。勤俭节约，成了生存与生活的智慧，几千年不变。\n\n<!--more-->\n\n如今，中国人富裕了，但是幸福指数并没有同等上升。罗奶奶买了几斤香蕉，回到家发现有两根有点发黑，局部有点腐烂了，赶紧给吃了。看到剩下的都还好，舍不得吃，决定再放放。过了两天，又发现两根开始腐烂了，罗奶奶赶紧又吃了……如此循环，几斤香蕉吃完了，但一根好的都没吃到。\n\n喜欢做这样的事情的，可不只有罗奶奶。肖大妈的儿子给她买了一件几千块钱的衣服。每逢有亲朋上门，她都要拿出来展览一番，但就是舍不得穿。只是每年大年初一的早上穿几个小时，又赶紧脱下来收好。直到有一次拿出来却发现衣服被老鼠啃烂了。\n\n该吃的不吃，该穿的不穿，该用的不用……很多中国人依然过着紧巴巴的日子。这可不仅仅是因为还没适应富裕的日子。这是一种习惯，一种思维，一种眼界，一种格局。\n\n\n我们家离小镇大概五公里，步行一个小时。父亲舍不得五块钱的车费，去镇上从来都是步行。冬春倒也罢了，40度高温的夏天，他照样倔强地顶着烈日一步一步走到镇上，再走回来。我们劝他坐车，反而总是引来一顿教训。终于一天，他因此而中暑，住院的医药费够两年的车费。满以为他会吸取教训，有所改变。不曾想，他因为住院花了钱而更加变本加厉，甚至有重物在身，也不坐车。\n\n父亲还有一个习惯，有病不看医生。先是熬着，希望“过几天就好了”；如果熬不过，就根据自己的理解，去小药铺拿药吃，甚至自己根据偏方配草药。直到十分严重，才会答应去医院看正经医生。但往往在这个时候，病情已经沉重，所花的钱是几倍。\n\n并不是家里缺车费或是药费。他只是习惯了“坚持节约的传统美德”。而且这种习惯固执而倔强，不可撼动。肯定不止我一个人有这样的父亲。\n\n\n固守勤俭的人，不论做什么事都非常注重省钱。在心理学领域有一种心态叫“稀缺心态”，即你越觉得自己缺什么，就会越在意什么。而事实却往往，你越在意什么，就越缺什么。\n\n山东烟台的孙大爷年轻的时候经历过一段苦日子，“缺钱”在他心中已经根深蒂固。哪怕现在儿女成人，生活毫无压力，他依然觉得自己很穷困，也担心将来会再次遭遇穷困。“苦日子过怕了”的他，一直很节俭。\n\n为了节省水费，孙大爷洗菜的时候总是草草了事，如果看着干净，他甚至不洗。加上他又特别喜欢吃凉拌菜。因为经常吃没有洗净的菜，孙大爷感染了黄疸型戊型病毒性肝炎（一种由进食为主要感染源的病毒肝炎疾病），差点因此而丧命。最终住院费花了近七万元，才捡回一条命。七万元，够孙大爷活两辈子的水费了。\n\n“稀缺心理”会严重影响人的认知智慧，导致人们只看到眼前的蝇头小利，而因小失大。这是一种典型的穷人思维，却也总是和“节俭”的优良品质同在。\n\n\n因为地处三峡库区。三峡工程蓄水前期，县城需要搬迁。搬县城就需要大兴土木，需要很多建房子的砖。我们镇上正好是两条河的交汇处，河沙堆积，是优质的建材。有头脑的人去河里挖沙，打成砖，运到县城去卖。有利可图，村民群起效仿。\n\n政府觉得这是惠民的好事，愿意支持。政府给一家垫资十万元，置办打砖的机械。但是这十万元要还，还有利息。有个聪明的人算了一个账，县城搬迁大概也就三五年的事情，需要的砖总共就那么多。大家都打砖，最后一家肯定挣了十万块钱。于是得出结论，这是一个大坑，千万别吃亏。大家交相称赞，并且庆幸有他这么个聪明人。\n\n唯独老王例外。他找政府贷了款，买了打砖的机械。十多年过去了。县城搬迁早已结束，但是县城的房价一涨再涨，房子建了一波又一波。连镇上的房子也如雨后春笋，一夜之间到处都是工地。老王不仅还了政府的贷款，还扩大了砖厂的规模，机械日夜轰鸣。政府为了规范，关闭了所有打砖的小作坊，全镇就剩了老王一家砖厂。村里身强力壮的劳动力都去给老王打工。\n\n节俭的人心中往往只有一个想法：省钱。为了省钱，就要算账，就怕吃亏。\n算着算着，就容易只看到手里那点钱，而鼠目寸光，看不到远处。省钱，反而失去了挣钱的机会。\n\n还是我父亲的故事。我们县是名副其实的老少边穷地区，国家贫困县市榜上排名前列。同是面朝黄土背朝天，父亲却能靠自己的勤劳和节俭比同村别的人有更多的储蓄。这让他颇为自得。十年前，政府大力发展原生态旅游业，在各个乡镇成立旅游公司。为了筹措资金，旅游公司有部分股份归村集体所有，号召大家入股、融资。我舅舅找到父亲，极力鼓动他拿出那点积蓄去认购股份。\n\n父亲不仅不为所动，还以老大哥的身份把舅舅教训了一通：“你就是从小没吃过苦，不懂得勤俭，老想着投机取巧的事情。我那点钱是一点一点攒的，得用在该用的地方。你也别多想，还是踏踏实实种地，过日子吧。”\n\n老实本分，勒紧裤腰带过着紧巴巴的日子，不作非分之想。这是父亲勤俭半辈子得出的经验。\n\n舅舅没有办法，以个人的名义借走了父亲的积蓄，认购了股份。\n十年的时间，舅舅每年能坐收相当可观的分红，如今在县城大街上有房，有车，有产业。而父亲那点可怜的积蓄早也不知道被消耗了在何处。\n\n节俭的人，总是特别懂得劳动的辛酸，所以对劳动成果尤为珍惜。他们总是要把劳动所得看得紧紧的，省了又省，减了又减。但他们的小心谨慎，使得他们总是只懂得珍惜过去的，却看不到未来的。只知道怎么可以尽量少把手中的钱花出去，却不知道如何投资获得更大的汇报。最终影响的是选择、决策的格局，决定的是最终的高度。\n\n1998年金融危机，席卷整个亚洲，影响全世界经济数年之久。中国当然不能幸免。为了复苏经济，政府出台政策，极力拉动内需，不惜投入大量资金救市。然而，老百姓的自然消费却始终疲软不给力。\n\n很多老百姓不是绝对缺钱，而是愿意将钱存在银行。因为大家对过去的苦日子心有余悸，不得不提心吊胆、小心翼翼地把钱存起来，防范于未然。而这些存起来的钱，都是从眼前的日子里一分一分扣出来的，每一分钱上都写着“节俭”两个大字。\n\n节俭是我们在长期历史中形成的一种心态，这种心态一直被称之为美德。但是，现在它正在抹杀很大一部分中国人的幸福。没有存钱，心里不踏实。存了一万，想存十万；存了十万，还想存一百万……不敢吃，不敢穿，不敢用，极度缺乏安全感。\n\n然而，抓不住现在的生活，快乐与幸福该何处安放？\n\n曾经流传着这样一个故事：\n\n一个美国老太太和中国老太太见了面，两人都很高兴，便攀谈起来。\n美国老太太说：“真是开心啊。住了六十年的房子，今天终于把钱还完了。”\n中国老太太说：“我也很开心。存了六十年的钱，终于可以买房子了。”\n这是一个笑话，却很能说明问题。\n\n这代表的是两种消费观念。美国老太太代表的是典型的工业社会、商业社会的消费心态；而中国老太太崇尚的则是农耕文明勤俭的消费观念。\n\n时代变了，我们已经迈入了工业化、商业化的时代。我们的消费心态需要随之改变。深层次的道理不说。国家、社会需要我们适度消费。有消费，有流通，经济才能发展。\n\n我们自己也需要适度消费，生活才有情趣。\n\n刚刚摆脱贫穷的我们很矛盾，容易走上两个极端。一边是暴发户式的狂喜，极尽奢侈之能，毫无底线炫富。一边是沉浸在贫困的惶恐中不能自拔，挣再多的钱也不敢花，存再多的钱也得不到安全感。\n\n我们要学会和自己的能力相匹配的适度消费。\n\n能吃馒头的不必刻意吃糠咽菜，能吃鱼肉的不需天天白饭咸菜。\n多吃新鲜水果对身体好，多穿新衣心情美。\n买得起名牌的尽管买，但不用炫耀；买不起名牌的别逞强，也不用自卑。\n\n勤俭自然是美德，铺张浪费绝对是可耻。但是自己挣的钱自己花也是光荣。\n最重要的是，量力而行，不抠抠搜搜过日子，开开心心享受眼前的生活。\n而一味节俭，坏了生活的兴致，不值得。\n\n比穷更可怕的“穷人思维”\n\n1\n\n有一次我在文章里推荐了一本书《国富论》，经济学祖师、英国第一才子，亚当。斯密写的。\n\n有几个人买了，但大部分人却问我有没有电子书资源，也有几个人自己找到了。\n\n还有一个人，专门加我微信说，“在各大资源站都找遍了，没有免费的电子书，你推荐个JB！” \n　　\n我问他是不是大学生？\n\n他说已经毕业四五年了。\n\n我立马把这个人删除了，讲真，我特别害怕这种人，他不会为你带来任何价值，还会一直消耗你。你要是说错一句话，他都会觉得你坑了他祖宗十八代，所以我希望离这种人远一点儿。\n\n在大学毕业之前，我也特别喜欢寻找免费的资源，因为那个时候确实没钱，还要自己做兼职赚生活费，所以我能理解大学生的心理。\n\n直到大学毕业后，我才明白免费的东西真不是免费的，找资源的时间，绝对会超过一本书的钱，而且免费的资源，质量没有付费的好。\n\n我个人认为看书一定要看纸质版的，为什么？\n\n不仅是因为电子书伤眼睛，更重要的是，只有自己花钱买的书，才会认真去看，免费的资源，扫两眼就存档了，大多都不会珍惜。\n\n我喜欢买书，学习了《断舍离》后，又不愿意囤书。所以朋友来我这里聚餐走时，我就会把自己看完的书给他们送几本，感觉特别满足。\n\n针对上述那个找免费资源的哥们，让我深思，穷人思维的根源，到底出在哪儿？\n\n有人说穷人就是缺钱的人，其实我不太同意，世界上无论是富人还是穷人，都缺钱。有的外表光鲜的有钱人，宝马豪宅妓满屋，实质上欠银行几个亿。\n\n所以不能以缺钱来定义穷富，多和少都是相对的，穷人缺钱，但穷人和富人拥有的时间完全一样。所以，准确来说，穷人就是那种运作的钱相对少，但时间相对多的人。\n\n从经济学的角度上讲，你缺什么，就会把什么看得特别重，不缺什么，就会把这个样东西看得特别轻。\n\n所以穷人把钱看得特别重，而富人把时间看得特别重。\n\n2\n\n穷人思维对我们的第一个影响，就是喜欢用时间换钱。\n\n去年七月份，上映了一部超级烂片《封神**》，虽然投资五亿，但豆瓣上评分不到三分，这片子烂到看几分钟都觉得音箱在影响你的睡眠，但据我观察，这么烂的片子，也很少有人一起中途退场。\n\n如果你觉得电影好看，那么认认真真看完无可厚非，如果觉得难看，还忍受着折磨看完，说明你或多或少有点“穷人思维”。\n\n对于绝大多数人来说，两个小时的时间成本不值33元的票价。\n\n这种现象，用经济学的观点来说，就是过于注重“沉没成本”。\n\n在中国，大部分自助餐厅是很难盈利的，为什么？\n\n因为中国人太注重“沉没成本”。\n\n一群人进了餐厅，每人交了80元的费用，中国人不吃回本绝不会走，有的甚至会吃到吐。\n\n再比如前文说的看电影，花了33块钱买票，无论电影好看不好看，这个钱都回不来了，但很多人即便电影再难看，也会一股脑看完。\n\n还有的人买鞋子，买时很满意，但真正穿时却发现夹脚，退又退不掉，于是，大部分人会一直忍受这种痛苦，直到把鞋穿坏为止。\n\n而有钱人的花钱理念会让你眼前一亮：花钱，要么是为了赚钱，要么是为了享受，两样都不沾，就不会掏腰包。\n\n花错钱了，也决不去追回沉没成本。\n\n3\n　　\n“穷人思维”过于关注于拥有的资源本身，却常常忽略了消费的目标。\n\n比如，商场里的耐克鞋子打折，有三种规格，原价分别是1200、1000、800，现价一律500。销售员也看得出穷人和有钱人的区别：穷人更倾向于买原价1200的——因为感觉省了700元，而有钱人更倾向于适合的款式——自己的目标需求。\n\n再拿买房来说。\n\n有的人买房，先考虑我有多少钱付首付，月收入多少还贷？再倒过来推算，自己该不该买房，买什么房。\n\n还有的人买房，首先问，我要不要买房，想买什么房？然后再算，还差多少，怎么解决。\n\n如果一项任务的目标是合理的，那么我们就不能以“资源不足”为理由，去否定这个目标。\n\n这就是有钱人教会我们的一条重要原则：不要量入为出，要以目标为导向。\n\n4\n\n“穷人思维”会消耗我们有限的自制力，这是最可怕的一点。\n\n行为经济学上有一个概念叫“决策疲劳”，短时间内，你做出的决策越多，你的精力越疲惫，内心越不愿意再一次权衡利弊，导致你的决策越来越随意，甚至错误。\n\n这就是为什么我们在超市买了一大堆打折的东西，回家后却发现很多用不上，甚至会后悔想剁手。\n\n过去有一种看法，穷人的意志力会更强，而事实却是：“决策疲劳”对穷人的影响最大。\n\n美国有六分之一的穷人，他们更喜欢买垃圾食品，他们习惯每买一样东西，都要反复比价。\n\n一方面，这占用了他们的大量时间，没有精力去提高自己的判断能力；另一方面，那些频繁的、无意义的决策，使他们的大脑疲劳。\n\n等到消费快结束时，他们的大脑失去了自制力，已经无法抵御垃圾食品的诱惑。\n\n回想一下，我们减肥时，大量运动消耗了意志力之后，是不是更抵挡不了美食的诱惑了？ \n　　\n电影《华尔街之狼》讲了一个专门骗穷人的股票经纪人，他发现穷人在长期的消费决策中，形成了一种思维惯性——便宜的东西更有吸引力。当他们把这种思维惯性带到了投资中，就成为“垃圾股”的目标客户。\n\n影片里有一句台词：“我们把垃圾卖给垃圾人，因为钱在我们手里，总比在他们手里更能发挥价值。”\n\n这是天下骗子的心声啊。\n\n现实中，也有人专门将“垃圾”卖给穷人以赚取暴利。那些利率高得吓人的垃圾P2P，那些根本不可能上市的“内部原始股”，还有无数次崩盘又卷士重来的“3M骗局”，都是抓住了“穷人思维”的致命弱点——既无判断力，又无自制力。\n\n那么富人是怎么投资的呢？在巴菲特的投资偏好中，既没有房地产，也没有互联网，因为前者不喜欢，后者看不懂。\n\n这就是自制力，如猎豹一般，不浪费精力，把有限的力量集中到擅长的地方，最后全力一击。\n\n5\n　　\n冯小刚的电影《1942》里，张国立演的地主在逃荒路上说了一句话：“我知道咋从一个穷人变成财主，不出十年，你大爷我还是东家，那时候咱再回来……”\n\n如何从穷人变成财主？首先要培养一个牛逼的思维。\n\n1、建立“时间价值”的概念，减少做那些“耗时间收益少”的事情；\n　　\n2、牢记“沉没成本”不可追，钱已经花错了，再浪费时间，就是错上加错；\n　　\n3、培养“以目标为导向”的思维，确立正确目标，再想办法去整合资源；\n　　\n4、减少无意义的频繁决策，节省宝贵的意志力。\n\n5、拓展自己的视野，建立高端的商业意识。\n\n以前，我奶奶每年春节前大扫除时，总爱念叨一句话：“穷人留破烂，越留越穷。”\n\n其实，“穷人思维”才是我们最应扔掉“破烂”。\n\n只有走出思维的怪圈，才有可能变成“表面上挥金如土、暗地里日进斗金”的有钱人。","slug":"something1","published":1,"updated":"2017-08-07T02:15:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zy3002jvvxiyyb3ujmj","content":"<p>首先特别声明一点：节俭的对立面并不非得是奢侈浪费。两者中间还有适度消费。</p>\n<p>中国人曾经很穷。</p>\n<p>墙上挂着一条咸鱼，一家人围着一盘咸菜扒拉着白饭。低头吃一口饭，抬头看一眼鱼，就算是吃着肉了。孩子忍不住多看了一眼，父亲要责骂他贪婪。有白米饭就咸菜，墙上还有鱼，已然是十分不错了。还有更多的人只能吃野菜、草根，甚至是观音土。</p>\n<p>长期处于农耕社会，看天吃饭，不知道何时，天灾人祸就会忽然降临。普罗大众既穷困，又要时刻准备着无妄之灾。勤俭节约，成了生存与生活的智慧，几千年不变。</p>\n<a id=\"more\"></a>\n<p>如今，中国人富裕了，但是幸福指数并没有同等上升。罗奶奶买了几斤香蕉，回到家发现有两根有点发黑，局部有点腐烂了，赶紧给吃了。看到剩下的都还好，舍不得吃，决定再放放。过了两天，又发现两根开始腐烂了，罗奶奶赶紧又吃了……如此循环，几斤香蕉吃完了，但一根好的都没吃到。</p>\n<p>喜欢做这样的事情的，可不只有罗奶奶。肖大妈的儿子给她买了一件几千块钱的衣服。每逢有亲朋上门，她都要拿出来展览一番，但就是舍不得穿。只是每年大年初一的早上穿几个小时，又赶紧脱下来收好。直到有一次拿出来却发现衣服被老鼠啃烂了。</p>\n<p>该吃的不吃，该穿的不穿，该用的不用……很多中国人依然过着紧巴巴的日子。这可不仅仅是因为还没适应富裕的日子。这是一种习惯，一种思维，一种眼界，一种格局。</p>\n<p>我们家离小镇大概五公里，步行一个小时。父亲舍不得五块钱的车费，去镇上从来都是步行。冬春倒也罢了，40度高温的夏天，他照样倔强地顶着烈日一步一步走到镇上，再走回来。我们劝他坐车，反而总是引来一顿教训。终于一天，他因此而中暑，住院的医药费够两年的车费。满以为他会吸取教训，有所改变。不曾想，他因为住院花了钱而更加变本加厉，甚至有重物在身，也不坐车。</p>\n<p>父亲还有一个习惯，有病不看医生。先是熬着，希望“过几天就好了”；如果熬不过，就根据自己的理解，去小药铺拿药吃，甚至自己根据偏方配草药。直到十分严重，才会答应去医院看正经医生。但往往在这个时候，病情已经沉重，所花的钱是几倍。</p>\n<p>并不是家里缺车费或是药费。他只是习惯了“坚持节约的传统美德”。而且这种习惯固执而倔强，不可撼动。肯定不止我一个人有这样的父亲。</p>\n<p>固守勤俭的人，不论做什么事都非常注重省钱。在心理学领域有一种心态叫“稀缺心态”，即你越觉得自己缺什么，就会越在意什么。而事实却往往，你越在意什么，就越缺什么。</p>\n<p>山东烟台的孙大爷年轻的时候经历过一段苦日子，“缺钱”在他心中已经根深蒂固。哪怕现在儿女成人，生活毫无压力，他依然觉得自己很穷困，也担心将来会再次遭遇穷困。“苦日子过怕了”的他，一直很节俭。</p>\n<p>为了节省水费，孙大爷洗菜的时候总是草草了事，如果看着干净，他甚至不洗。加上他又特别喜欢吃凉拌菜。因为经常吃没有洗净的菜，孙大爷感染了黄疸型戊型病毒性肝炎（一种由进食为主要感染源的病毒肝炎疾病），差点因此而丧命。最终住院费花了近七万元，才捡回一条命。七万元，够孙大爷活两辈子的水费了。</p>\n<p>“稀缺心理”会严重影响人的认知智慧，导致人们只看到眼前的蝇头小利，而因小失大。这是一种典型的穷人思维，却也总是和“节俭”的优良品质同在。</p>\n<p>因为地处三峡库区。三峡工程蓄水前期，县城需要搬迁。搬县城就需要大兴土木，需要很多建房子的砖。我们镇上正好是两条河的交汇处，河沙堆积，是优质的建材。有头脑的人去河里挖沙，打成砖，运到县城去卖。有利可图，村民群起效仿。</p>\n<p>政府觉得这是惠民的好事，愿意支持。政府给一家垫资十万元，置办打砖的机械。但是这十万元要还，还有利息。有个聪明的人算了一个账，县城搬迁大概也就三五年的事情，需要的砖总共就那么多。大家都打砖，最后一家肯定挣了十万块钱。于是得出结论，这是一个大坑，千万别吃亏。大家交相称赞，并且庆幸有他这么个聪明人。</p>\n<p>唯独老王例外。他找政府贷了款，买了打砖的机械。十多年过去了。县城搬迁早已结束，但是县城的房价一涨再涨，房子建了一波又一波。连镇上的房子也如雨后春笋，一夜之间到处都是工地。老王不仅还了政府的贷款，还扩大了砖厂的规模，机械日夜轰鸣。政府为了规范，关闭了所有打砖的小作坊，全镇就剩了老王一家砖厂。村里身强力壮的劳动力都去给老王打工。</p>\n<p>节俭的人心中往往只有一个想法：省钱。为了省钱，就要算账，就怕吃亏。<br>算着算着，就容易只看到手里那点钱，而鼠目寸光，看不到远处。省钱，反而失去了挣钱的机会。</p>\n<p>还是我父亲的故事。我们县是名副其实的老少边穷地区，国家贫困县市榜上排名前列。同是面朝黄土背朝天，父亲却能靠自己的勤劳和节俭比同村别的人有更多的储蓄。这让他颇为自得。十年前，政府大力发展原生态旅游业，在各个乡镇成立旅游公司。为了筹措资金，旅游公司有部分股份归村集体所有，号召大家入股、融资。我舅舅找到父亲，极力鼓动他拿出那点积蓄去认购股份。</p>\n<p>父亲不仅不为所动，还以老大哥的身份把舅舅教训了一通：“你就是从小没吃过苦，不懂得勤俭，老想着投机取巧的事情。我那点钱是一点一点攒的，得用在该用的地方。你也别多想，还是踏踏实实种地，过日子吧。”</p>\n<p>老实本分，勒紧裤腰带过着紧巴巴的日子，不作非分之想。这是父亲勤俭半辈子得出的经验。</p>\n<p>舅舅没有办法，以个人的名义借走了父亲的积蓄，认购了股份。<br>十年的时间，舅舅每年能坐收相当可观的分红，如今在县城大街上有房，有车，有产业。而父亲那点可怜的积蓄早也不知道被消耗了在何处。</p>\n<p>节俭的人，总是特别懂得劳动的辛酸，所以对劳动成果尤为珍惜。他们总是要把劳动所得看得紧紧的，省了又省，减了又减。但他们的小心谨慎，使得他们总是只懂得珍惜过去的，却看不到未来的。只知道怎么可以尽量少把手中的钱花出去，却不知道如何投资获得更大的汇报。最终影响的是选择、决策的格局，决定的是最终的高度。</p>\n<p>1998年金融危机，席卷整个亚洲，影响全世界经济数年之久。中国当然不能幸免。为了复苏经济，政府出台政策，极力拉动内需，不惜投入大量资金救市。然而，老百姓的自然消费却始终疲软不给力。</p>\n<p>很多老百姓不是绝对缺钱，而是愿意将钱存在银行。因为大家对过去的苦日子心有余悸，不得不提心吊胆、小心翼翼地把钱存起来，防范于未然。而这些存起来的钱，都是从眼前的日子里一分一分扣出来的，每一分钱上都写着“节俭”两个大字。</p>\n<p>节俭是我们在长期历史中形成的一种心态，这种心态一直被称之为美德。但是，现在它正在抹杀很大一部分中国人的幸福。没有存钱，心里不踏实。存了一万，想存十万；存了十万，还想存一百万……不敢吃，不敢穿，不敢用，极度缺乏安全感。</p>\n<p>然而，抓不住现在的生活，快乐与幸福该何处安放？</p>\n<p>曾经流传着这样一个故事：</p>\n<p>一个美国老太太和中国老太太见了面，两人都很高兴，便攀谈起来。<br>美国老太太说：“真是开心啊。住了六十年的房子，今天终于把钱还完了。”<br>中国老太太说：“我也很开心。存了六十年的钱，终于可以买房子了。”<br>这是一个笑话，却很能说明问题。</p>\n<p>这代表的是两种消费观念。美国老太太代表的是典型的工业社会、商业社会的消费心态；而中国老太太崇尚的则是农耕文明勤俭的消费观念。</p>\n<p>时代变了，我们已经迈入了工业化、商业化的时代。我们的消费心态需要随之改变。深层次的道理不说。国家、社会需要我们适度消费。有消费，有流通，经济才能发展。</p>\n<p>我们自己也需要适度消费，生活才有情趣。</p>\n<p>刚刚摆脱贫穷的我们很矛盾，容易走上两个极端。一边是暴发户式的狂喜，极尽奢侈之能，毫无底线炫富。一边是沉浸在贫困的惶恐中不能自拔，挣再多的钱也不敢花，存再多的钱也得不到安全感。</p>\n<p>我们要学会和自己的能力相匹配的适度消费。</p>\n<p>能吃馒头的不必刻意吃糠咽菜，能吃鱼肉的不需天天白饭咸菜。<br>多吃新鲜水果对身体好，多穿新衣心情美。<br>买得起名牌的尽管买，但不用炫耀；买不起名牌的别逞强，也不用自卑。</p>\n<p>勤俭自然是美德，铺张浪费绝对是可耻。但是自己挣的钱自己花也是光荣。<br>最重要的是，量力而行，不抠抠搜搜过日子，开开心心享受眼前的生活。<br>而一味节俭，坏了生活的兴致，不值得。</p>\n<p>比穷更可怕的“穷人思维”</p>\n<p>1</p>\n<p>有一次我在文章里推荐了一本书《国富论》，经济学祖师、英国第一才子，亚当。斯密写的。</p>\n<p>有几个人买了，但大部分人却问我有没有电子书资源，也有几个人自己找到了。</p>\n<p>还有一个人，专门加我微信说，“在各大资源站都找遍了，没有免费的电子书，你推荐个JB！”<br>　　<br>我问他是不是大学生？</p>\n<p>他说已经毕业四五年了。</p>\n<p>我立马把这个人删除了，讲真，我特别害怕这种人，他不会为你带来任何价值，还会一直消耗你。你要是说错一句话，他都会觉得你坑了他祖宗十八代，所以我希望离这种人远一点儿。</p>\n<p>在大学毕业之前，我也特别喜欢寻找免费的资源，因为那个时候确实没钱，还要自己做兼职赚生活费，所以我能理解大学生的心理。</p>\n<p>直到大学毕业后，我才明白免费的东西真不是免费的，找资源的时间，绝对会超过一本书的钱，而且免费的资源，质量没有付费的好。</p>\n<p>我个人认为看书一定要看纸质版的，为什么？</p>\n<p>不仅是因为电子书伤眼睛，更重要的是，只有自己花钱买的书，才会认真去看，免费的资源，扫两眼就存档了，大多都不会珍惜。</p>\n<p>我喜欢买书，学习了《断舍离》后，又不愿意囤书。所以朋友来我这里聚餐走时，我就会把自己看完的书给他们送几本，感觉特别满足。</p>\n<p>针对上述那个找免费资源的哥们，让我深思，穷人思维的根源，到底出在哪儿？</p>\n<p>有人说穷人就是缺钱的人，其实我不太同意，世界上无论是富人还是穷人，都缺钱。有的外表光鲜的有钱人，宝马豪宅妓满屋，实质上欠银行几个亿。</p>\n<p>所以不能以缺钱来定义穷富，多和少都是相对的，穷人缺钱，但穷人和富人拥有的时间完全一样。所以，准确来说，穷人就是那种运作的钱相对少，但时间相对多的人。</p>\n<p>从经济学的角度上讲，你缺什么，就会把什么看得特别重，不缺什么，就会把这个样东西看得特别轻。</p>\n<p>所以穷人把钱看得特别重，而富人把时间看得特别重。</p>\n<p>2</p>\n<p>穷人思维对我们的第一个影响，就是喜欢用时间换钱。</p>\n<p>去年七月份，上映了一部超级烂片《封神**》，虽然投资五亿，但豆瓣上评分不到三分，这片子烂到看几分钟都觉得音箱在影响你的睡眠，但据我观察，这么烂的片子，也很少有人一起中途退场。</p>\n<p>如果你觉得电影好看，那么认认真真看完无可厚非，如果觉得难看，还忍受着折磨看完，说明你或多或少有点“穷人思维”。</p>\n<p>对于绝大多数人来说，两个小时的时间成本不值33元的票价。</p>\n<p>这种现象，用经济学的观点来说，就是过于注重“沉没成本”。</p>\n<p>在中国，大部分自助餐厅是很难盈利的，为什么？</p>\n<p>因为中国人太注重“沉没成本”。</p>\n<p>一群人进了餐厅，每人交了80元的费用，中国人不吃回本绝不会走，有的甚至会吃到吐。</p>\n<p>再比如前文说的看电影，花了33块钱买票，无论电影好看不好看，这个钱都回不来了，但很多人即便电影再难看，也会一股脑看完。</p>\n<p>还有的人买鞋子，买时很满意，但真正穿时却发现夹脚，退又退不掉，于是，大部分人会一直忍受这种痛苦，直到把鞋穿坏为止。</p>\n<p>而有钱人的花钱理念会让你眼前一亮：花钱，要么是为了赚钱，要么是为了享受，两样都不沾，就不会掏腰包。</p>\n<p>花错钱了，也决不去追回沉没成本。</p>\n<p>3<br>　　<br>“穷人思维”过于关注于拥有的资源本身，却常常忽略了消费的目标。</p>\n<p>比如，商场里的耐克鞋子打折，有三种规格，原价分别是1200、1000、800，现价一律500。销售员也看得出穷人和有钱人的区别：穷人更倾向于买原价1200的——因为感觉省了700元，而有钱人更倾向于适合的款式——自己的目标需求。</p>\n<p>再拿买房来说。</p>\n<p>有的人买房，先考虑我有多少钱付首付，月收入多少还贷？再倒过来推算，自己该不该买房，买什么房。</p>\n<p>还有的人买房，首先问，我要不要买房，想买什么房？然后再算，还差多少，怎么解决。</p>\n<p>如果一项任务的目标是合理的，那么我们就不能以“资源不足”为理由，去否定这个目标。</p>\n<p>这就是有钱人教会我们的一条重要原则：不要量入为出，要以目标为导向。</p>\n<p>4</p>\n<p>“穷人思维”会消耗我们有限的自制力，这是最可怕的一点。</p>\n<p>行为经济学上有一个概念叫“决策疲劳”，短时间内，你做出的决策越多，你的精力越疲惫，内心越不愿意再一次权衡利弊，导致你的决策越来越随意，甚至错误。</p>\n<p>这就是为什么我们在超市买了一大堆打折的东西，回家后却发现很多用不上，甚至会后悔想剁手。</p>\n<p>过去有一种看法，穷人的意志力会更强，而事实却是：“决策疲劳”对穷人的影响最大。</p>\n<p>美国有六分之一的穷人，他们更喜欢买垃圾食品，他们习惯每买一样东西，都要反复比价。</p>\n<p>一方面，这占用了他们的大量时间，没有精力去提高自己的判断能力；另一方面，那些频繁的、无意义的决策，使他们的大脑疲劳。</p>\n<p>等到消费快结束时，他们的大脑失去了自制力，已经无法抵御垃圾食品的诱惑。</p>\n<p>回想一下，我们减肥时，大量运动消耗了意志力之后，是不是更抵挡不了美食的诱惑了？<br>　　<br>电影《华尔街之狼》讲了一个专门骗穷人的股票经纪人，他发现穷人在长期的消费决策中，形成了一种思维惯性——便宜的东西更有吸引力。当他们把这种思维惯性带到了投资中，就成为“垃圾股”的目标客户。</p>\n<p>影片里有一句台词：“我们把垃圾卖给垃圾人，因为钱在我们手里，总比在他们手里更能发挥价值。”</p>\n<p>这是天下骗子的心声啊。</p>\n<p>现实中，也有人专门将“垃圾”卖给穷人以赚取暴利。那些利率高得吓人的垃圾P2P，那些根本不可能上市的“内部原始股”，还有无数次崩盘又卷士重来的“3M骗局”，都是抓住了“穷人思维”的致命弱点——既无判断力，又无自制力。</p>\n<p>那么富人是怎么投资的呢？在巴菲特的投资偏好中，既没有房地产，也没有互联网，因为前者不喜欢，后者看不懂。</p>\n<p>这就是自制力，如猎豹一般，不浪费精力，把有限的力量集中到擅长的地方，最后全力一击。</p>\n<p>5<br>　　<br>冯小刚的电影《1942》里，张国立演的地主在逃荒路上说了一句话：“我知道咋从一个穷人变成财主，不出十年，你大爷我还是东家，那时候咱再回来……”</p>\n<p>如何从穷人变成财主？首先要培养一个牛逼的思维。</p>\n<p>1、建立“时间价值”的概念，减少做那些“耗时间收益少”的事情；<br>　　<br>2、牢记“沉没成本”不可追，钱已经花错了，再浪费时间，就是错上加错；<br>　　<br>3、培养“以目标为导向”的思维，确立正确目标，再想办法去整合资源；<br>　　<br>4、减少无意义的频繁决策，节省宝贵的意志力。</p>\n<p>5、拓展自己的视野，建立高端的商业意识。</p>\n<p>以前，我奶奶每年春节前大扫除时，总爱念叨一句话：“穷人留破烂，越留越穷。”</p>\n<p>其实，“穷人思维”才是我们最应扔掉“破烂”。</p>\n<p>只有走出思维的怪圈，才有可能变成“表面上挥金如土、暗地里日进斗金”的有钱人。</p>\n","site":{"data":{}},"excerpt":"<p>首先特别声明一点：节俭的对立面并不非得是奢侈浪费。两者中间还有适度消费。</p>\n<p>中国人曾经很穷。</p>\n<p>墙上挂着一条咸鱼，一家人围着一盘咸菜扒拉着白饭。低头吃一口饭，抬头看一眼鱼，就算是吃着肉了。孩子忍不住多看了一眼，父亲要责骂他贪婪。有白米饭就咸菜，墙上还有鱼，已然是十分不错了。还有更多的人只能吃野菜、草根，甚至是观音土。</p>\n<p>长期处于农耕社会，看天吃饭，不知道何时，天灾人祸就会忽然降临。普罗大众既穷困，又要时刻准备着无妄之灾。勤俭节约，成了生存与生活的智慧，几千年不变。</p>","more":"<p>如今，中国人富裕了，但是幸福指数并没有同等上升。罗奶奶买了几斤香蕉，回到家发现有两根有点发黑，局部有点腐烂了，赶紧给吃了。看到剩下的都还好，舍不得吃，决定再放放。过了两天，又发现两根开始腐烂了，罗奶奶赶紧又吃了……如此循环，几斤香蕉吃完了，但一根好的都没吃到。</p>\n<p>喜欢做这样的事情的，可不只有罗奶奶。肖大妈的儿子给她买了一件几千块钱的衣服。每逢有亲朋上门，她都要拿出来展览一番，但就是舍不得穿。只是每年大年初一的早上穿几个小时，又赶紧脱下来收好。直到有一次拿出来却发现衣服被老鼠啃烂了。</p>\n<p>该吃的不吃，该穿的不穿，该用的不用……很多中国人依然过着紧巴巴的日子。这可不仅仅是因为还没适应富裕的日子。这是一种习惯，一种思维，一种眼界，一种格局。</p>\n<p>我们家离小镇大概五公里，步行一个小时。父亲舍不得五块钱的车费，去镇上从来都是步行。冬春倒也罢了，40度高温的夏天，他照样倔强地顶着烈日一步一步走到镇上，再走回来。我们劝他坐车，反而总是引来一顿教训。终于一天，他因此而中暑，住院的医药费够两年的车费。满以为他会吸取教训，有所改变。不曾想，他因为住院花了钱而更加变本加厉，甚至有重物在身，也不坐车。</p>\n<p>父亲还有一个习惯，有病不看医生。先是熬着，希望“过几天就好了”；如果熬不过，就根据自己的理解，去小药铺拿药吃，甚至自己根据偏方配草药。直到十分严重，才会答应去医院看正经医生。但往往在这个时候，病情已经沉重，所花的钱是几倍。</p>\n<p>并不是家里缺车费或是药费。他只是习惯了“坚持节约的传统美德”。而且这种习惯固执而倔强，不可撼动。肯定不止我一个人有这样的父亲。</p>\n<p>固守勤俭的人，不论做什么事都非常注重省钱。在心理学领域有一种心态叫“稀缺心态”，即你越觉得自己缺什么，就会越在意什么。而事实却往往，你越在意什么，就越缺什么。</p>\n<p>山东烟台的孙大爷年轻的时候经历过一段苦日子，“缺钱”在他心中已经根深蒂固。哪怕现在儿女成人，生活毫无压力，他依然觉得自己很穷困，也担心将来会再次遭遇穷困。“苦日子过怕了”的他，一直很节俭。</p>\n<p>为了节省水费，孙大爷洗菜的时候总是草草了事，如果看着干净，他甚至不洗。加上他又特别喜欢吃凉拌菜。因为经常吃没有洗净的菜，孙大爷感染了黄疸型戊型病毒性肝炎（一种由进食为主要感染源的病毒肝炎疾病），差点因此而丧命。最终住院费花了近七万元，才捡回一条命。七万元，够孙大爷活两辈子的水费了。</p>\n<p>“稀缺心理”会严重影响人的认知智慧，导致人们只看到眼前的蝇头小利，而因小失大。这是一种典型的穷人思维，却也总是和“节俭”的优良品质同在。</p>\n<p>因为地处三峡库区。三峡工程蓄水前期，县城需要搬迁。搬县城就需要大兴土木，需要很多建房子的砖。我们镇上正好是两条河的交汇处，河沙堆积，是优质的建材。有头脑的人去河里挖沙，打成砖，运到县城去卖。有利可图，村民群起效仿。</p>\n<p>政府觉得这是惠民的好事，愿意支持。政府给一家垫资十万元，置办打砖的机械。但是这十万元要还，还有利息。有个聪明的人算了一个账，县城搬迁大概也就三五年的事情，需要的砖总共就那么多。大家都打砖，最后一家肯定挣了十万块钱。于是得出结论，这是一个大坑，千万别吃亏。大家交相称赞，并且庆幸有他这么个聪明人。</p>\n<p>唯独老王例外。他找政府贷了款，买了打砖的机械。十多年过去了。县城搬迁早已结束，但是县城的房价一涨再涨，房子建了一波又一波。连镇上的房子也如雨后春笋，一夜之间到处都是工地。老王不仅还了政府的贷款，还扩大了砖厂的规模，机械日夜轰鸣。政府为了规范，关闭了所有打砖的小作坊，全镇就剩了老王一家砖厂。村里身强力壮的劳动力都去给老王打工。</p>\n<p>节俭的人心中往往只有一个想法：省钱。为了省钱，就要算账，就怕吃亏。<br>算着算着，就容易只看到手里那点钱，而鼠目寸光，看不到远处。省钱，反而失去了挣钱的机会。</p>\n<p>还是我父亲的故事。我们县是名副其实的老少边穷地区，国家贫困县市榜上排名前列。同是面朝黄土背朝天，父亲却能靠自己的勤劳和节俭比同村别的人有更多的储蓄。这让他颇为自得。十年前，政府大力发展原生态旅游业，在各个乡镇成立旅游公司。为了筹措资金，旅游公司有部分股份归村集体所有，号召大家入股、融资。我舅舅找到父亲，极力鼓动他拿出那点积蓄去认购股份。</p>\n<p>父亲不仅不为所动，还以老大哥的身份把舅舅教训了一通：“你就是从小没吃过苦，不懂得勤俭，老想着投机取巧的事情。我那点钱是一点一点攒的，得用在该用的地方。你也别多想，还是踏踏实实种地，过日子吧。”</p>\n<p>老实本分，勒紧裤腰带过着紧巴巴的日子，不作非分之想。这是父亲勤俭半辈子得出的经验。</p>\n<p>舅舅没有办法，以个人的名义借走了父亲的积蓄，认购了股份。<br>十年的时间，舅舅每年能坐收相当可观的分红，如今在县城大街上有房，有车，有产业。而父亲那点可怜的积蓄早也不知道被消耗了在何处。</p>\n<p>节俭的人，总是特别懂得劳动的辛酸，所以对劳动成果尤为珍惜。他们总是要把劳动所得看得紧紧的，省了又省，减了又减。但他们的小心谨慎，使得他们总是只懂得珍惜过去的，却看不到未来的。只知道怎么可以尽量少把手中的钱花出去，却不知道如何投资获得更大的汇报。最终影响的是选择、决策的格局，决定的是最终的高度。</p>\n<p>1998年金融危机，席卷整个亚洲，影响全世界经济数年之久。中国当然不能幸免。为了复苏经济，政府出台政策，极力拉动内需，不惜投入大量资金救市。然而，老百姓的自然消费却始终疲软不给力。</p>\n<p>很多老百姓不是绝对缺钱，而是愿意将钱存在银行。因为大家对过去的苦日子心有余悸，不得不提心吊胆、小心翼翼地把钱存起来，防范于未然。而这些存起来的钱，都是从眼前的日子里一分一分扣出来的，每一分钱上都写着“节俭”两个大字。</p>\n<p>节俭是我们在长期历史中形成的一种心态，这种心态一直被称之为美德。但是，现在它正在抹杀很大一部分中国人的幸福。没有存钱，心里不踏实。存了一万，想存十万；存了十万，还想存一百万……不敢吃，不敢穿，不敢用，极度缺乏安全感。</p>\n<p>然而，抓不住现在的生活，快乐与幸福该何处安放？</p>\n<p>曾经流传着这样一个故事：</p>\n<p>一个美国老太太和中国老太太见了面，两人都很高兴，便攀谈起来。<br>美国老太太说：“真是开心啊。住了六十年的房子，今天终于把钱还完了。”<br>中国老太太说：“我也很开心。存了六十年的钱，终于可以买房子了。”<br>这是一个笑话，却很能说明问题。</p>\n<p>这代表的是两种消费观念。美国老太太代表的是典型的工业社会、商业社会的消费心态；而中国老太太崇尚的则是农耕文明勤俭的消费观念。</p>\n<p>时代变了，我们已经迈入了工业化、商业化的时代。我们的消费心态需要随之改变。深层次的道理不说。国家、社会需要我们适度消费。有消费，有流通，经济才能发展。</p>\n<p>我们自己也需要适度消费，生活才有情趣。</p>\n<p>刚刚摆脱贫穷的我们很矛盾，容易走上两个极端。一边是暴发户式的狂喜，极尽奢侈之能，毫无底线炫富。一边是沉浸在贫困的惶恐中不能自拔，挣再多的钱也不敢花，存再多的钱也得不到安全感。</p>\n<p>我们要学会和自己的能力相匹配的适度消费。</p>\n<p>能吃馒头的不必刻意吃糠咽菜，能吃鱼肉的不需天天白饭咸菜。<br>多吃新鲜水果对身体好，多穿新衣心情美。<br>买得起名牌的尽管买，但不用炫耀；买不起名牌的别逞强，也不用自卑。</p>\n<p>勤俭自然是美德，铺张浪费绝对是可耻。但是自己挣的钱自己花也是光荣。<br>最重要的是，量力而行，不抠抠搜搜过日子，开开心心享受眼前的生活。<br>而一味节俭，坏了生活的兴致，不值得。</p>\n<p>比穷更可怕的“穷人思维”</p>\n<p>1</p>\n<p>有一次我在文章里推荐了一本书《国富论》，经济学祖师、英国第一才子，亚当。斯密写的。</p>\n<p>有几个人买了，但大部分人却问我有没有电子书资源，也有几个人自己找到了。</p>\n<p>还有一个人，专门加我微信说，“在各大资源站都找遍了，没有免费的电子书，你推荐个JB！”<br>　　<br>我问他是不是大学生？</p>\n<p>他说已经毕业四五年了。</p>\n<p>我立马把这个人删除了，讲真，我特别害怕这种人，他不会为你带来任何价值，还会一直消耗你。你要是说错一句话，他都会觉得你坑了他祖宗十八代，所以我希望离这种人远一点儿。</p>\n<p>在大学毕业之前，我也特别喜欢寻找免费的资源，因为那个时候确实没钱，还要自己做兼职赚生活费，所以我能理解大学生的心理。</p>\n<p>直到大学毕业后，我才明白免费的东西真不是免费的，找资源的时间，绝对会超过一本书的钱，而且免费的资源，质量没有付费的好。</p>\n<p>我个人认为看书一定要看纸质版的，为什么？</p>\n<p>不仅是因为电子书伤眼睛，更重要的是，只有自己花钱买的书，才会认真去看，免费的资源，扫两眼就存档了，大多都不会珍惜。</p>\n<p>我喜欢买书，学习了《断舍离》后，又不愿意囤书。所以朋友来我这里聚餐走时，我就会把自己看完的书给他们送几本，感觉特别满足。</p>\n<p>针对上述那个找免费资源的哥们，让我深思，穷人思维的根源，到底出在哪儿？</p>\n<p>有人说穷人就是缺钱的人，其实我不太同意，世界上无论是富人还是穷人，都缺钱。有的外表光鲜的有钱人，宝马豪宅妓满屋，实质上欠银行几个亿。</p>\n<p>所以不能以缺钱来定义穷富，多和少都是相对的，穷人缺钱，但穷人和富人拥有的时间完全一样。所以，准确来说，穷人就是那种运作的钱相对少，但时间相对多的人。</p>\n<p>从经济学的角度上讲，你缺什么，就会把什么看得特别重，不缺什么，就会把这个样东西看得特别轻。</p>\n<p>所以穷人把钱看得特别重，而富人把时间看得特别重。</p>\n<p>2</p>\n<p>穷人思维对我们的第一个影响，就是喜欢用时间换钱。</p>\n<p>去年七月份，上映了一部超级烂片《封神**》，虽然投资五亿，但豆瓣上评分不到三分，这片子烂到看几分钟都觉得音箱在影响你的睡眠，但据我观察，这么烂的片子，也很少有人一起中途退场。</p>\n<p>如果你觉得电影好看，那么认认真真看完无可厚非，如果觉得难看，还忍受着折磨看完，说明你或多或少有点“穷人思维”。</p>\n<p>对于绝大多数人来说，两个小时的时间成本不值33元的票价。</p>\n<p>这种现象，用经济学的观点来说，就是过于注重“沉没成本”。</p>\n<p>在中国，大部分自助餐厅是很难盈利的，为什么？</p>\n<p>因为中国人太注重“沉没成本”。</p>\n<p>一群人进了餐厅，每人交了80元的费用，中国人不吃回本绝不会走，有的甚至会吃到吐。</p>\n<p>再比如前文说的看电影，花了33块钱买票，无论电影好看不好看，这个钱都回不来了，但很多人即便电影再难看，也会一股脑看完。</p>\n<p>还有的人买鞋子，买时很满意，但真正穿时却发现夹脚，退又退不掉，于是，大部分人会一直忍受这种痛苦，直到把鞋穿坏为止。</p>\n<p>而有钱人的花钱理念会让你眼前一亮：花钱，要么是为了赚钱，要么是为了享受，两样都不沾，就不会掏腰包。</p>\n<p>花错钱了，也决不去追回沉没成本。</p>\n<p>3<br>　　<br>“穷人思维”过于关注于拥有的资源本身，却常常忽略了消费的目标。</p>\n<p>比如，商场里的耐克鞋子打折，有三种规格，原价分别是1200、1000、800，现价一律500。销售员也看得出穷人和有钱人的区别：穷人更倾向于买原价1200的——因为感觉省了700元，而有钱人更倾向于适合的款式——自己的目标需求。</p>\n<p>再拿买房来说。</p>\n<p>有的人买房，先考虑我有多少钱付首付，月收入多少还贷？再倒过来推算，自己该不该买房，买什么房。</p>\n<p>还有的人买房，首先问，我要不要买房，想买什么房？然后再算，还差多少，怎么解决。</p>\n<p>如果一项任务的目标是合理的，那么我们就不能以“资源不足”为理由，去否定这个目标。</p>\n<p>这就是有钱人教会我们的一条重要原则：不要量入为出，要以目标为导向。</p>\n<p>4</p>\n<p>“穷人思维”会消耗我们有限的自制力，这是最可怕的一点。</p>\n<p>行为经济学上有一个概念叫“决策疲劳”，短时间内，你做出的决策越多，你的精力越疲惫，内心越不愿意再一次权衡利弊，导致你的决策越来越随意，甚至错误。</p>\n<p>这就是为什么我们在超市买了一大堆打折的东西，回家后却发现很多用不上，甚至会后悔想剁手。</p>\n<p>过去有一种看法，穷人的意志力会更强，而事实却是：“决策疲劳”对穷人的影响最大。</p>\n<p>美国有六分之一的穷人，他们更喜欢买垃圾食品，他们习惯每买一样东西，都要反复比价。</p>\n<p>一方面，这占用了他们的大量时间，没有精力去提高自己的判断能力；另一方面，那些频繁的、无意义的决策，使他们的大脑疲劳。</p>\n<p>等到消费快结束时，他们的大脑失去了自制力，已经无法抵御垃圾食品的诱惑。</p>\n<p>回想一下，我们减肥时，大量运动消耗了意志力之后，是不是更抵挡不了美食的诱惑了？<br>　　<br>电影《华尔街之狼》讲了一个专门骗穷人的股票经纪人，他发现穷人在长期的消费决策中，形成了一种思维惯性——便宜的东西更有吸引力。当他们把这种思维惯性带到了投资中，就成为“垃圾股”的目标客户。</p>\n<p>影片里有一句台词：“我们把垃圾卖给垃圾人，因为钱在我们手里，总比在他们手里更能发挥价值。”</p>\n<p>这是天下骗子的心声啊。</p>\n<p>现实中，也有人专门将“垃圾”卖给穷人以赚取暴利。那些利率高得吓人的垃圾P2P，那些根本不可能上市的“内部原始股”，还有无数次崩盘又卷士重来的“3M骗局”，都是抓住了“穷人思维”的致命弱点——既无判断力，又无自制力。</p>\n<p>那么富人是怎么投资的呢？在巴菲特的投资偏好中，既没有房地产，也没有互联网，因为前者不喜欢，后者看不懂。</p>\n<p>这就是自制力，如猎豹一般，不浪费精力，把有限的力量集中到擅长的地方，最后全力一击。</p>\n<p>5<br>　　<br>冯小刚的电影《1942》里，张国立演的地主在逃荒路上说了一句话：“我知道咋从一个穷人变成财主，不出十年，你大爷我还是东家，那时候咱再回来……”</p>\n<p>如何从穷人变成财主？首先要培养一个牛逼的思维。</p>\n<p>1、建立“时间价值”的概念，减少做那些“耗时间收益少”的事情；<br>　　<br>2、牢记“沉没成本”不可追，钱已经花错了，再浪费时间，就是错上加错；<br>　　<br>3、培养“以目标为导向”的思维，确立正确目标，再想办法去整合资源；<br>　　<br>4、减少无意义的频繁决策，节省宝贵的意志力。</p>\n<p>5、拓展自己的视野，建立高端的商业意识。</p>\n<p>以前，我奶奶每年春节前大扫除时，总爱念叨一句话：“穷人留破烂，越留越穷。”</p>\n<p>其实，“穷人思维”才是我们最应扔掉“破烂”。</p>\n<p>只有走出思维的怪圈，才有可能变成“表面上挥金如土、暗地里日进斗金”的有钱人。</p>"},{"title":"css：默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式","date":"2017-05-10T12:54:11.000Z","_content":"![](http://img.blog.csdn.net/20170515213354489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 项目的github地址为： https://github.com/sunshine940326/css3formeledemo \n > 本文首发于我的个人博客，http://cherryblog.site/ ；欢迎大家查看我的其他博客\n最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：\n\n - 因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改\n - input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id\n - 只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。\n - 使用sass，只需要改变参数就可以反复多次使用\n <!--more-->\n\n# 思路\n大致的原理都是使用html原生的标签元素标签`checkbox`或者`input`，在后面加上`label`标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是\n```\ndiv.container\n    input type=\"checkbox\" id=\"checkbox\" \n    label for=\"checkbox\"\n    div.bottom-line\n```\n都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置`input[type=checkbox]:checked+label`的样式 \n# checkbox\n## checkbox demo1\n首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性\n    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。\n    先将after和before设置宽度为width*0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。\n    然后用css动画设置使其height达到width*0.7和width*0.35并控制动画使其连贯播放，\n###  html\n```\n<div class=\"cb-container\">\n    <input type=\"checkbox\" id=\"checkbox\">\n    <label for=\"checkbox\" class=\"cb-label\"></label>\n</div>\n```\n###  scss\n```\n\n$checked-color: #fff;\n$checked-bg:rgb(101,141,181);\n$unchecked-color: #cfcece;\n$unchecked-bg:rgb(249,249,249);\n$checkbox-height: 100px;\n$background-color:#fff;\n$font-color:#dcdcdc;\n$duration: .4s;\n.cb-container{\n  width: 1000px;\n  text-align: center;\n  margin-top: 50px;\n}\n\nhtml, body{\n  padding:0;\n  margin:0;\n  background-color: $background-color;\n  color:$font-color;\n  font-family:'Open Sans';\n}\n#checkbox{\n  display:none;\n}\n\n.cb-label{\n  height: $checkbox-height;\n  width: $checkbox-height;\n  background: $unchecked-bg;\n  border: $checkbox-height * .1 solid $unchecked-color;\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box;\n  transition: border-color ease $duration/2;\n  -moz-transition: border-color ease $duration/2;\n  -o-transition: border-color ease $duration/2;\n  -webkit-transition: border-color ease $duration/2;\n  cursor: pointer;\n  &::before,&::after{\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    position: absolute;\n    height: 0;\n    width: $checkbox-height * 0.2;\n    background: $checked-color;\n    display: inline-block;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -o-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n    content: '';\n    -webkit-transition: opacity ease 0.5s;\n    -moz-transition: opacity ease 0.5s;\n    transition: opacity ease 0.5s;\n  }\n  &::before{\n    top:$checkbox-height * 0.76;\n    left: $checkbox-height * 0.31;\n    -moz-transform: rotate(-135deg);\n    -ms-transform: rotate(-135deg);\n    -o-transform: rotate(-135deg);\n    -webkit-transform: rotate(-135deg);\n    transform: rotate(-135deg);\n  }\n  &::after {\n    top: $checkbox-height * .45;\n    left: $checkbox-height * 0;\n    -moz-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n    -o-transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n  }\n}\ninput[type=checkbox]:checked + .cb-label,\n.cb-label.checked{\n\n  background: $checked-bg;\n  border-color:$checked-bg;\n  &::after{\n    border-color:$checked-color;\n    height: $checkbox-height * .35;\n    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    animation: dothabottomcheck $duration/2 ease 0s forwards;\n  }\n\n  &::before{\n    border-color:$checked-color;\n    height: $checkbox-height * 1;\n    -moz-animation: dothatopcheck $duration ease 0s forwards;\n    -o-animation: dothatopcheck $duration ease 0s forwards;\n    -webkit-animation: dothatopcheck $duration ease 0s forwards;\n    animation: dothatopcheck $duration ease 0s forwards;\n  }\n\n}\n@-moz-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@-webkit-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35;  }\n}\n\n@keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-webkit-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-moz-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n\n```\n![经过改变后的checkbox](http://img.blog.csdn.net/20170514194453879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo2\n![checkboxdemo2](http://img.blog.csdn.net/20170514230458375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo3\n![checkboxdemo3](http://img.blog.csdn.net/20170514230233384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo4\n![checkboxdemo4](http://img.blog.csdn.net/20170514230324436?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# input\ninput的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。\n![input效果](http://img.blog.csdn.net/20170512115931755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n - 输入框清除默认样式\n - 当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100\n - 如果没有输入内容，还变为未输入的状态\n先贴上代码\n## html代码\nhtml结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的`placeholder`，而是使用的label，但是也设置有`placeholder`,只不过是把`placeholder`的透明度设置为0，因为我们需要根据`placeholder`是否显示来设置下方line的宽度和label的位置。\n \n```\ndiv.input-container\n    input type=\"input\" id=\"input\" placeholder=\"请输入内容\"\n    label for=\"input\"\n    div.bottom-line\n```\n完整html代码如下\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"scss/main.css\">\n</head>\n<body>\n<div class=\"input-container\">\n    <input type=\"input\" id=\"input\" placeholder=\"请输入内容\">\n    <label for=\"input\">请输入内容</label>\n    <div class=\"bottom-line\"></div>\n</div>\n</body>\n</html>\n```\n## css代码\n全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小\n代码如下:\n```\n$width: 500px;\n$label-font-color: #3f4f5b;\n$label-focus-font-color: rgb(82, 97, 108);\n$border-bottom-color: #d5d5d5;\n$focus-border-color: rgb(101, 141, 181);\n$transform-top: 10px;\n$transform-time: 0.3s;\n$scale: 0.9;\n\n.input-container {\n  width: $width;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-flow: column-reverse;\n  flex-flow: column-reverse;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  margin: 100px auto\n}\n\n.input-container input {\n  -webkit-box-ordinal-group: 11;\n  order: 10;\n  -ms-flex-order: 10;\n  outline: none;\n  border: none;\n  width: 100%;\n  padding: 10px 0;\n  font-size: 20px;\n  border-bottom: 1px solid $border-bottom-color;\n  text-indent: 10px;\n}\n\n.input-container input::-moz-placeholder {\n  opacity: 0;\n}\n\n.input-container input::-webkit-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input:-ms-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input, .input-container label {\n  transition: all $transform-time;\n}\n\n.input-container label {\n  -webkit-box-ordinal-group: 101;\n  -ms-flex-order: 100;\n  order: 100;\n  color: $label-font-color;\n  -webkit-transform-origin: left bottom;\n  transform-origin: left bottom;\n  -webkit-transform: translate(10px, 40px);\n  transform: translate(0px, 40px);\n}\n\n.input-container .bottom-line {\n  order: 2;\n  width: 0;\n  height: 2px;\n  background: $focus-border-color;\n  transition: all $transform-time;\n}\n\n.input-container input:focus {\n  border-bottom-color: #fff;\n}\n\n.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div {\n  width: 100%\n}\n\n.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label {\n  color: $label-focus-font-color;\n  -webkit-transform: translate(10px) scale($scale);\n  transform: translate(10px) scale($scale)\n}\n\n```\n \n","source":"_posts/css-checkbox-input-radio.md","raw":"---\ntitle: css：默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式\ndate: 2017-05-10 20:54:11\ntags: [css,checkbox优化,input优化,radio优化] \ncategories: css\n---\n![](http://img.blog.csdn.net/20170515213354489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 项目的github地址为： https://github.com/sunshine940326/css3formeledemo \n > 本文首发于我的个人博客，http://cherryblog.site/ ；欢迎大家查看我的其他博客\n最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：\n\n - 因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改\n - input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id\n - 只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。\n - 使用sass，只需要改变参数就可以反复多次使用\n <!--more-->\n\n# 思路\n大致的原理都是使用html原生的标签元素标签`checkbox`或者`input`，在后面加上`label`标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是\n```\ndiv.container\n    input type=\"checkbox\" id=\"checkbox\" \n    label for=\"checkbox\"\n    div.bottom-line\n```\n都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置`input[type=checkbox]:checked+label`的样式 \n# checkbox\n## checkbox demo1\n首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性\n    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。\n    先将after和before设置宽度为width*0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。\n    然后用css动画设置使其height达到width*0.7和width*0.35并控制动画使其连贯播放，\n###  html\n```\n<div class=\"cb-container\">\n    <input type=\"checkbox\" id=\"checkbox\">\n    <label for=\"checkbox\" class=\"cb-label\"></label>\n</div>\n```\n###  scss\n```\n\n$checked-color: #fff;\n$checked-bg:rgb(101,141,181);\n$unchecked-color: #cfcece;\n$unchecked-bg:rgb(249,249,249);\n$checkbox-height: 100px;\n$background-color:#fff;\n$font-color:#dcdcdc;\n$duration: .4s;\n.cb-container{\n  width: 1000px;\n  text-align: center;\n  margin-top: 50px;\n}\n\nhtml, body{\n  padding:0;\n  margin:0;\n  background-color: $background-color;\n  color:$font-color;\n  font-family:'Open Sans';\n}\n#checkbox{\n  display:none;\n}\n\n.cb-label{\n  height: $checkbox-height;\n  width: $checkbox-height;\n  background: $unchecked-bg;\n  border: $checkbox-height * .1 solid $unchecked-color;\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box;\n  transition: border-color ease $duration/2;\n  -moz-transition: border-color ease $duration/2;\n  -o-transition: border-color ease $duration/2;\n  -webkit-transition: border-color ease $duration/2;\n  cursor: pointer;\n  &::before,&::after{\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    position: absolute;\n    height: 0;\n    width: $checkbox-height * 0.2;\n    background: $checked-color;\n    display: inline-block;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -o-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n    content: '';\n    -webkit-transition: opacity ease 0.5s;\n    -moz-transition: opacity ease 0.5s;\n    transition: opacity ease 0.5s;\n  }\n  &::before{\n    top:$checkbox-height * 0.76;\n    left: $checkbox-height * 0.31;\n    -moz-transform: rotate(-135deg);\n    -ms-transform: rotate(-135deg);\n    -o-transform: rotate(-135deg);\n    -webkit-transform: rotate(-135deg);\n    transform: rotate(-135deg);\n  }\n  &::after {\n    top: $checkbox-height * .45;\n    left: $checkbox-height * 0;\n    -moz-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n    -o-transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n  }\n}\ninput[type=checkbox]:checked + .cb-label,\n.cb-label.checked{\n\n  background: $checked-bg;\n  border-color:$checked-bg;\n  &::after{\n    border-color:$checked-color;\n    height: $checkbox-height * .35;\n    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    animation: dothabottomcheck $duration/2 ease 0s forwards;\n  }\n\n  &::before{\n    border-color:$checked-color;\n    height: $checkbox-height * 1;\n    -moz-animation: dothatopcheck $duration ease 0s forwards;\n    -o-animation: dothatopcheck $duration ease 0s forwards;\n    -webkit-animation: dothatopcheck $duration ease 0s forwards;\n    animation: dothatopcheck $duration ease 0s forwards;\n  }\n\n}\n@-moz-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@-webkit-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35;  }\n}\n\n@keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-webkit-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-moz-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n\n```\n![经过改变后的checkbox](http://img.blog.csdn.net/20170514194453879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo2\n![checkboxdemo2](http://img.blog.csdn.net/20170514230458375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo3\n![checkboxdemo3](http://img.blog.csdn.net/20170514230233384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo4\n![checkboxdemo4](http://img.blog.csdn.net/20170514230324436?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# input\ninput的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。\n![input效果](http://img.blog.csdn.net/20170512115931755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n - 输入框清除默认样式\n - 当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100\n - 如果没有输入内容，还变为未输入的状态\n先贴上代码\n## html代码\nhtml结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的`placeholder`，而是使用的label，但是也设置有`placeholder`,只不过是把`placeholder`的透明度设置为0，因为我们需要根据`placeholder`是否显示来设置下方line的宽度和label的位置。\n \n```\ndiv.input-container\n    input type=\"input\" id=\"input\" placeholder=\"请输入内容\"\n    label for=\"input\"\n    div.bottom-line\n```\n完整html代码如下\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"scss/main.css\">\n</head>\n<body>\n<div class=\"input-container\">\n    <input type=\"input\" id=\"input\" placeholder=\"请输入内容\">\n    <label for=\"input\">请输入内容</label>\n    <div class=\"bottom-line\"></div>\n</div>\n</body>\n</html>\n```\n## css代码\n全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小\n代码如下:\n```\n$width: 500px;\n$label-font-color: #3f4f5b;\n$label-focus-font-color: rgb(82, 97, 108);\n$border-bottom-color: #d5d5d5;\n$focus-border-color: rgb(101, 141, 181);\n$transform-top: 10px;\n$transform-time: 0.3s;\n$scale: 0.9;\n\n.input-container {\n  width: $width;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-flow: column-reverse;\n  flex-flow: column-reverse;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  margin: 100px auto\n}\n\n.input-container input {\n  -webkit-box-ordinal-group: 11;\n  order: 10;\n  -ms-flex-order: 10;\n  outline: none;\n  border: none;\n  width: 100%;\n  padding: 10px 0;\n  font-size: 20px;\n  border-bottom: 1px solid $border-bottom-color;\n  text-indent: 10px;\n}\n\n.input-container input::-moz-placeholder {\n  opacity: 0;\n}\n\n.input-container input::-webkit-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input:-ms-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input, .input-container label {\n  transition: all $transform-time;\n}\n\n.input-container label {\n  -webkit-box-ordinal-group: 101;\n  -ms-flex-order: 100;\n  order: 100;\n  color: $label-font-color;\n  -webkit-transform-origin: left bottom;\n  transform-origin: left bottom;\n  -webkit-transform: translate(10px, 40px);\n  transform: translate(0px, 40px);\n}\n\n.input-container .bottom-line {\n  order: 2;\n  width: 0;\n  height: 2px;\n  background: $focus-border-color;\n  transition: all $transform-time;\n}\n\n.input-container input:focus {\n  border-bottom-color: #fff;\n}\n\n.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div {\n  width: 100%\n}\n\n.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label {\n  color: $label-focus-font-color;\n  -webkit-transform: translate(10px) scale($scale);\n  transform: translate(10px) scale($scale)\n}\n\n```\n \n","slug":"css-checkbox-input-radio","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zy6002mvvxi2cbmf84b","content":"<p><img src=\"http://img.blog.csdn.net/20170515213354489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<blockquote>\n<p>项目的github地址为： <a href=\"https://github.com/sunshine940326/css3formeledemo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/css3formeledemo</a><br>本文首发于我的个人博客，<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ；欢迎大家查看我的其他博客<br>最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：</p>\n</blockquote>\n<ul>\n<li>因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改</li>\n<li>input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id</li>\n<li>只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。</li>\n<li>使用sass，只需要改变参数就可以反复多次使用<a id=\"more\"></a>\n</li>\n</ul>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>大致的原理都是使用html原生的标签元素标签<code>checkbox</code>或者<code>input</code>，在后面加上<code>label</code>标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.container</div><div class=\"line\">    input type=&quot;checkbox&quot; id=&quot;checkbox&quot; </div><div class=\"line\">    label for=&quot;checkbox&quot;</div><div class=\"line\">    div.bottom-line</div></pre></td></tr></table></figure></p>\n<p>都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置<code>input[type=checkbox]:checked+label</code>的样式 </p>\n<h1 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h1><h2 id=\"checkbox-demo1\"><a href=\"#checkbox-demo1\" class=\"headerlink\" title=\"checkbox demo1\"></a>checkbox demo1</h2><p>首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性<br>    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。<br>    先将after和before设置宽度为width<em>0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。<br>    然后用css动画设置使其height达到width</em>0.7和width*0.35并控制动画使其连贯播放，</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;cb-container&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;checkbox&quot; class=&quot;cb-label&quot;&gt;&lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"scss\"><a href=\"#scss\" class=\"headerlink\" title=\"scss\"></a>scss</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$checked-color: #fff;</div><div class=\"line\">$checked-bg:rgb(101,141,181);</div><div class=\"line\">$unchecked-color: #cfcece;</div><div class=\"line\">$unchecked-bg:rgb(249,249,249);</div><div class=\"line\">$checkbox-height: 100px;</div><div class=\"line\">$background-color:#fff;</div><div class=\"line\">$font-color:#dcdcdc;</div><div class=\"line\">$duration: .4s;</div><div class=\"line\">.cb-container&#123;</div><div class=\"line\">  width: 1000px;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  margin-top: 50px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">html, body&#123;</div><div class=\"line\">  padding:0;</div><div class=\"line\">  margin:0;</div><div class=\"line\">  background-color: $background-color;</div><div class=\"line\">  color:$font-color;</div><div class=\"line\">  font-family:&apos;Open Sans&apos;;</div><div class=\"line\">&#125;</div><div class=\"line\">#checkbox&#123;</div><div class=\"line\">  display:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.cb-label&#123;</div><div class=\"line\">  height: $checkbox-height;</div><div class=\"line\">  width: $checkbox-height;</div><div class=\"line\">  background: $unchecked-bg;</div><div class=\"line\">  border: $checkbox-height * .1 solid $unchecked-color;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  transition: border-color ease $duration/2;</div><div class=\"line\">  -moz-transition: border-color ease $duration/2;</div><div class=\"line\">  -o-transition: border-color ease $duration/2;</div><div class=\"line\">  -webkit-transition: border-color ease $duration/2;</div><div class=\"line\">  cursor: pointer;</div><div class=\"line\">  &amp;::before,&amp;::after&#123;</div><div class=\"line\">    -moz-box-sizing: border-box;</div><div class=\"line\">    -webkit-box-sizing: border-box;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    height: 0;</div><div class=\"line\">    width: $checkbox-height * 0.2;</div><div class=\"line\">    background: $checked-color;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    -moz-transform-origin: left top;</div><div class=\"line\">    -ms-transform-origin: left top;</div><div class=\"line\">    -o-transform-origin: left top;</div><div class=\"line\">    -webkit-transform-origin: left top;</div><div class=\"line\">    transform-origin: left top;</div><div class=\"line\">    content: &apos;&apos;;</div><div class=\"line\">    -webkit-transition: opacity ease 0.5s;</div><div class=\"line\">    -moz-transition: opacity ease 0.5s;</div><div class=\"line\">    transition: opacity ease 0.5s;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;::before&#123;</div><div class=\"line\">    top:$checkbox-height * 0.76;</div><div class=\"line\">    left: $checkbox-height * 0.31;</div><div class=\"line\">    -moz-transform: rotate(-135deg);</div><div class=\"line\">    -ms-transform: rotate(-135deg);</div><div class=\"line\">    -o-transform: rotate(-135deg);</div><div class=\"line\">    -webkit-transform: rotate(-135deg);</div><div class=\"line\">    transform: rotate(-135deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;::after &#123;</div><div class=\"line\">    top: $checkbox-height * .45;</div><div class=\"line\">    left: $checkbox-height * 0;</div><div class=\"line\">    -moz-transform: rotate(-45deg);</div><div class=\"line\">    -ms-transform: rotate(-45deg);</div><div class=\"line\">    -o-transform: rotate(-45deg);</div><div class=\"line\">    -webkit-transform: rotate(-45deg);</div><div class=\"line\">    transform: rotate(-45deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">input[type=checkbox]:checked + .cb-label,</div><div class=\"line\">.cb-label.checked&#123;</div><div class=\"line\"></div><div class=\"line\">  background: $checked-bg;</div><div class=\"line\">  border-color:$checked-bg;</div><div class=\"line\">  &amp;::after&#123;</div><div class=\"line\">    border-color:$checked-color;</div><div class=\"line\">    height: $checkbox-height * .35;</div><div class=\"line\">    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">    animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  &amp;::before&#123;</div><div class=\"line\">    border-color:$checked-color;</div><div class=\"line\">    height: $checkbox-height * 1;</div><div class=\"line\">    -moz-animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">    -o-animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">    -webkit-animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">    animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@-moz-keyframes dothabottomcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height *0.35; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-webkit-keyframes dothabottomcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height *0.35; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes dothabottomcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height *0.35;  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes dothatopcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  50% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height * 0.7; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-webkit-keyframes dothatopcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  50% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height * 0.7; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-moz-keyframes dothatopcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  50% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height * 0.7; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170514194453879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"经过改变后的checkbox\"></p>\n<h2 id=\"checkboxdemo2\"><a href=\"#checkboxdemo2\" class=\"headerlink\" title=\"checkboxdemo2\"></a>checkboxdemo2</h2><p><img src=\"http://img.blog.csdn.net/20170514230458375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"checkboxdemo2\"></p>\n<h2 id=\"checkboxdemo3\"><a href=\"#checkboxdemo3\" class=\"headerlink\" title=\"checkboxdemo3\"></a>checkboxdemo3</h2><p><img src=\"http://img.blog.csdn.net/20170514230233384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"checkboxdemo3\"></p>\n<h2 id=\"checkboxdemo4\"><a href=\"#checkboxdemo4\" class=\"headerlink\" title=\"checkboxdemo4\"></a>checkboxdemo4</h2><p><img src=\"http://img.blog.csdn.net/20170514230324436?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"checkboxdemo4\"></p>\n<h1 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h1><p>input的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。<br><img src=\"http://img.blog.csdn.net/20170512115931755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"input效果\"></p>\n<ul>\n<li>输入框清除默认样式</li>\n<li>当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100</li>\n<li>如果没有输入内容，还变为未输入的状态<br>先贴上代码<h2 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h2>html结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的<code>placeholder</code>，而是使用的label，但是也设置有<code>placeholder</code>,只不过是把<code>placeholder</code>的透明度设置为0，因为我们需要根据<code>placeholder</code>是否显示来设置下方line的宽度和label的位置。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.input-container</div><div class=\"line\">    input type=&quot;input&quot; id=&quot;input&quot; placeholder=&quot;请输入内容&quot;</div><div class=\"line\">    label for=&quot;input&quot;</div><div class=\"line\">    div.bottom-line</div></pre></td></tr></table></figure>\n<p>完整html代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;scss/main.css&quot;&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;input-container&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;input&quot; id=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;input&quot;&gt;请输入内容&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h2><p>全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小<br>代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\">$width: 500px;</div><div class=\"line\">$label-font-color: #3f4f5b;</div><div class=\"line\">$label-focus-font-color: rgb(82, 97, 108);</div><div class=\"line\">$border-bottom-color: #d5d5d5;</div><div class=\"line\">$focus-border-color: rgb(101, 141, 181);</div><div class=\"line\">$transform-top: 10px;</div><div class=\"line\">$transform-time: 0.3s;</div><div class=\"line\">$scale: 0.9;</div><div class=\"line\"></div><div class=\"line\">.input-container &#123;</div><div class=\"line\">  width: $width;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  display: -webkit-box;</div><div class=\"line\">  display: -ms-flexbox;</div><div class=\"line\">  display: flex;</div><div class=\"line\">  -webkit-box-orient: vertical;</div><div class=\"line\">  -webkit-box-direction: reverse;</div><div class=\"line\">  -ms-flex-flow: column-reverse;</div><div class=\"line\">  flex-flow: column-reverse;</div><div class=\"line\">  -webkit-box-align: start;</div><div class=\"line\">  -ms-flex-align: start;</div><div class=\"line\">  align-items: flex-start;</div><div class=\"line\">  margin: 100px auto</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input &#123;</div><div class=\"line\">  -webkit-box-ordinal-group: 11;</div><div class=\"line\">  order: 10;</div><div class=\"line\">  -ms-flex-order: 10;</div><div class=\"line\">  outline: none;</div><div class=\"line\">  border: none;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  padding: 10px 0;</div><div class=\"line\">  font-size: 20px;</div><div class=\"line\">  border-bottom: 1px solid $border-bottom-color;</div><div class=\"line\">  text-indent: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input::-moz-placeholder &#123;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input::-webkit-input-placeholder &#123;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:-ms-input-placeholder &#123;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input, .input-container label &#123;</div><div class=\"line\">  transition: all $transform-time;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container label &#123;</div><div class=\"line\">  -webkit-box-ordinal-group: 101;</div><div class=\"line\">  -ms-flex-order: 100;</div><div class=\"line\">  order: 100;</div><div class=\"line\">  color: $label-font-color;</div><div class=\"line\">  -webkit-transform-origin: left bottom;</div><div class=\"line\">  transform-origin: left bottom;</div><div class=\"line\">  -webkit-transform: translate(10px, 40px);</div><div class=\"line\">  transform: translate(0px, 40px);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container .bottom-line &#123;</div><div class=\"line\">  order: 2;</div><div class=\"line\">  width: 0;</div><div class=\"line\">  height: 2px;</div><div class=\"line\">  background: $focus-border-color;</div><div class=\"line\">  transition: all $transform-time;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:focus &#123;</div><div class=\"line\">  border-bottom-color: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div &#123;</div><div class=\"line\">  width: 100%</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label &#123;</div><div class=\"line\">  color: $label-focus-font-color;</div><div class=\"line\">  -webkit-transform: translate(10px) scale($scale);</div><div class=\"line\">  transform: translate(10px) scale($scale)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170515213354489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"\"></p>\n<blockquote>\n<p>项目的github地址为： <a href=\"https://github.com/sunshine940326/css3formeledemo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/css3formeledemo</a><br>本文首发于我的个人博客，<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ；欢迎大家查看我的其他博客<br>最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：</p>\n</blockquote>\n<ul>\n<li>因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改</li>\n<li>input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id</li>\n<li>只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。</li>\n<li>使用sass，只需要改变参数就可以反复多次使用","more":"</li>\n</ul>\n<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>大致的原理都是使用html原生的标签元素标签<code>checkbox</code>或者<code>input</code>，在后面加上<code>label</code>标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.container</div><div class=\"line\">    input type=&quot;checkbox&quot; id=&quot;checkbox&quot; </div><div class=\"line\">    label for=&quot;checkbox&quot;</div><div class=\"line\">    div.bottom-line</div></pre></td></tr></table></figure></p>\n<p>都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置<code>input[type=checkbox]:checked+label</code>的样式 </p>\n<h1 id=\"checkbox\"><a href=\"#checkbox\" class=\"headerlink\" title=\"checkbox\"></a>checkbox</h1><h2 id=\"checkbox-demo1\"><a href=\"#checkbox-demo1\" class=\"headerlink\" title=\"checkbox demo1\"></a>checkbox demo1</h2><p>首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性<br>    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。<br>    先将after和before设置宽度为width<em>0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。<br>    然后用css动画设置使其height达到width</em>0.7和width*0.35并控制动画使其连贯播放，</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;cb-container&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;checkbox&quot; id=&quot;checkbox&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;checkbox&quot; class=&quot;cb-label&quot;&gt;&lt;/label&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"scss\"><a href=\"#scss\" class=\"headerlink\" title=\"scss\"></a>scss</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">$checked-color: #fff;</div><div class=\"line\">$checked-bg:rgb(101,141,181);</div><div class=\"line\">$unchecked-color: #cfcece;</div><div class=\"line\">$unchecked-bg:rgb(249,249,249);</div><div class=\"line\">$checkbox-height: 100px;</div><div class=\"line\">$background-color:#fff;</div><div class=\"line\">$font-color:#dcdcdc;</div><div class=\"line\">$duration: .4s;</div><div class=\"line\">.cb-container&#123;</div><div class=\"line\">  width: 1000px;</div><div class=\"line\">  text-align: center;</div><div class=\"line\">  margin-top: 50px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">html, body&#123;</div><div class=\"line\">  padding:0;</div><div class=\"line\">  margin:0;</div><div class=\"line\">  background-color: $background-color;</div><div class=\"line\">  color:$font-color;</div><div class=\"line\">  font-family:&apos;Open Sans&apos;;</div><div class=\"line\">&#125;</div><div class=\"line\">#checkbox&#123;</div><div class=\"line\">  display:none;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.cb-label&#123;</div><div class=\"line\">  height: $checkbox-height;</div><div class=\"line\">  width: $checkbox-height;</div><div class=\"line\">  background: $unchecked-bg;</div><div class=\"line\">  border: $checkbox-height * .1 solid $unchecked-color;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  display: inline-block;</div><div class=\"line\">  box-sizing: border-box;</div><div class=\"line\">  transition: border-color ease $duration/2;</div><div class=\"line\">  -moz-transition: border-color ease $duration/2;</div><div class=\"line\">  -o-transition: border-color ease $duration/2;</div><div class=\"line\">  -webkit-transition: border-color ease $duration/2;</div><div class=\"line\">  cursor: pointer;</div><div class=\"line\">  &amp;::before,&amp;::after&#123;</div><div class=\"line\">    -moz-box-sizing: border-box;</div><div class=\"line\">    -webkit-box-sizing: border-box;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    height: 0;</div><div class=\"line\">    width: $checkbox-height * 0.2;</div><div class=\"line\">    background: $checked-color;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">    -moz-transform-origin: left top;</div><div class=\"line\">    -ms-transform-origin: left top;</div><div class=\"line\">    -o-transform-origin: left top;</div><div class=\"line\">    -webkit-transform-origin: left top;</div><div class=\"line\">    transform-origin: left top;</div><div class=\"line\">    content: &apos;&apos;;</div><div class=\"line\">    -webkit-transition: opacity ease 0.5s;</div><div class=\"line\">    -moz-transition: opacity ease 0.5s;</div><div class=\"line\">    transition: opacity ease 0.5s;</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;::before&#123;</div><div class=\"line\">    top:$checkbox-height * 0.76;</div><div class=\"line\">    left: $checkbox-height * 0.31;</div><div class=\"line\">    -moz-transform: rotate(-135deg);</div><div class=\"line\">    -ms-transform: rotate(-135deg);</div><div class=\"line\">    -o-transform: rotate(-135deg);</div><div class=\"line\">    -webkit-transform: rotate(-135deg);</div><div class=\"line\">    transform: rotate(-135deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">  &amp;::after &#123;</div><div class=\"line\">    top: $checkbox-height * .45;</div><div class=\"line\">    left: $checkbox-height * 0;</div><div class=\"line\">    -moz-transform: rotate(-45deg);</div><div class=\"line\">    -ms-transform: rotate(-45deg);</div><div class=\"line\">    -o-transform: rotate(-45deg);</div><div class=\"line\">    -webkit-transform: rotate(-45deg);</div><div class=\"line\">    transform: rotate(-45deg);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">input[type=checkbox]:checked + .cb-label,</div><div class=\"line\">.cb-label.checked&#123;</div><div class=\"line\"></div><div class=\"line\">  background: $checked-bg;</div><div class=\"line\">  border-color:$checked-bg;</div><div class=\"line\">  &amp;::after&#123;</div><div class=\"line\">    border-color:$checked-color;</div><div class=\"line\">    height: $checkbox-height * .35;</div><div class=\"line\">    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">    animation: dothabottomcheck $duration/2 ease 0s forwards;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  &amp;::before&#123;</div><div class=\"line\">    border-color:$checked-color;</div><div class=\"line\">    height: $checkbox-height * 1;</div><div class=\"line\">    -moz-animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">    -o-animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">    -webkit-animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">    animation: dothatopcheck $duration ease 0s forwards;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">@-moz-keyframes dothabottomcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height *0.35; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@-webkit-keyframes dothabottomcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height *0.35; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes dothabottomcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height *0.35;  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes dothatopcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  50% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height * 0.7; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-webkit-keyframes dothatopcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  50% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height * 0.7; &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">@-moz-keyframes dothatopcheck&#123;</div><div class=\"line\">  0% &#123; height: 0; &#125;</div><div class=\"line\">  50% &#123; height: 0; &#125;</div><div class=\"line\">  100% &#123; height: $checkbox-height * 0.7; &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170514194453879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"经过改变后的checkbox\"></p>\n<h2 id=\"checkboxdemo2\"><a href=\"#checkboxdemo2\" class=\"headerlink\" title=\"checkboxdemo2\"></a>checkboxdemo2</h2><p><img src=\"http://img.blog.csdn.net/20170514230458375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"checkboxdemo2\"></p>\n<h2 id=\"checkboxdemo3\"><a href=\"#checkboxdemo3\" class=\"headerlink\" title=\"checkboxdemo3\"></a>checkboxdemo3</h2><p><img src=\"http://img.blog.csdn.net/20170514230233384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"checkboxdemo3\"></p>\n<h2 id=\"checkboxdemo4\"><a href=\"#checkboxdemo4\" class=\"headerlink\" title=\"checkboxdemo4\"></a>checkboxdemo4</h2><p><img src=\"http://img.blog.csdn.net/20170514230324436?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"checkboxdemo4\"></p>\n<h1 id=\"input\"><a href=\"#input\" class=\"headerlink\" title=\"input\"></a>input</h1><p>input的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。<br><img src=\"http://img.blog.csdn.net/20170512115931755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"input效果\"></p>\n<ul>\n<li>输入框清除默认样式</li>\n<li>当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100</li>\n<li>如果没有输入内容，还变为未输入的状态<br>先贴上代码<h2 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h2>html结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的<code>placeholder</code>，而是使用的label，但是也设置有<code>placeholder</code>,只不过是把<code>placeholder</code>的透明度设置为0，因为我们需要根据<code>placeholder</code>是否显示来设置下方line的宽度和label的位置。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.input-container</div><div class=\"line\">    input type=&quot;input&quot; id=&quot;input&quot; placeholder=&quot;请输入内容&quot;</div><div class=\"line\">    label for=&quot;input&quot;</div><div class=\"line\">    div.bottom-line</div></pre></td></tr></table></figure>\n<p>完整html代码如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;link rel=&quot;stylesheet&quot; href=&quot;scss/main.css&quot;&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div class=&quot;input-container&quot;&gt;</div><div class=\"line\">    &lt;input type=&quot;input&quot; id=&quot;input&quot; placeholder=&quot;请输入内容&quot;&gt;</div><div class=\"line\">    &lt;label for=&quot;input&quot;&gt;请输入内容&lt;/label&gt;</div><div class=\"line\">    &lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"css代码\"><a href=\"#css代码\" class=\"headerlink\" title=\"css代码\"></a>css代码</h2><p>全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小<br>代码如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\">$width: 500px;</div><div class=\"line\">$label-font-color: #3f4f5b;</div><div class=\"line\">$label-focus-font-color: rgb(82, 97, 108);</div><div class=\"line\">$border-bottom-color: #d5d5d5;</div><div class=\"line\">$focus-border-color: rgb(101, 141, 181);</div><div class=\"line\">$transform-top: 10px;</div><div class=\"line\">$transform-time: 0.3s;</div><div class=\"line\">$scale: 0.9;</div><div class=\"line\"></div><div class=\"line\">.input-container &#123;</div><div class=\"line\">  width: $width;</div><div class=\"line\">  position: relative;</div><div class=\"line\">  display: -webkit-box;</div><div class=\"line\">  display: -ms-flexbox;</div><div class=\"line\">  display: flex;</div><div class=\"line\">  -webkit-box-orient: vertical;</div><div class=\"line\">  -webkit-box-direction: reverse;</div><div class=\"line\">  -ms-flex-flow: column-reverse;</div><div class=\"line\">  flex-flow: column-reverse;</div><div class=\"line\">  -webkit-box-align: start;</div><div class=\"line\">  -ms-flex-align: start;</div><div class=\"line\">  align-items: flex-start;</div><div class=\"line\">  margin: 100px auto</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input &#123;</div><div class=\"line\">  -webkit-box-ordinal-group: 11;</div><div class=\"line\">  order: 10;</div><div class=\"line\">  -ms-flex-order: 10;</div><div class=\"line\">  outline: none;</div><div class=\"line\">  border: none;</div><div class=\"line\">  width: 100%;</div><div class=\"line\">  padding: 10px 0;</div><div class=\"line\">  font-size: 20px;</div><div class=\"line\">  border-bottom: 1px solid $border-bottom-color;</div><div class=\"line\">  text-indent: 10px;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input::-moz-placeholder &#123;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input::-webkit-input-placeholder &#123;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:-ms-input-placeholder &#123;</div><div class=\"line\">  opacity: 0;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input, .input-container label &#123;</div><div class=\"line\">  transition: all $transform-time;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container label &#123;</div><div class=\"line\">  -webkit-box-ordinal-group: 101;</div><div class=\"line\">  -ms-flex-order: 100;</div><div class=\"line\">  order: 100;</div><div class=\"line\">  color: $label-font-color;</div><div class=\"line\">  -webkit-transform-origin: left bottom;</div><div class=\"line\">  transform-origin: left bottom;</div><div class=\"line\">  -webkit-transform: translate(10px, 40px);</div><div class=\"line\">  transform: translate(0px, 40px);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container .bottom-line &#123;</div><div class=\"line\">  order: 2;</div><div class=\"line\">  width: 0;</div><div class=\"line\">  height: 2px;</div><div class=\"line\">  background: $focus-border-color;</div><div class=\"line\">  transition: all $transform-time;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:focus &#123;</div><div class=\"line\">  border-bottom-color: #fff;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div &#123;</div><div class=\"line\">  width: 100%</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label &#123;</div><div class=\"line\">  color: $label-focus-font-color;</div><div class=\"line\">  -webkit-transform: translate(10px) scale($scale);</div><div class=\"line\">  transform: translate(10px) scale($scale)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"html5canvas教你实现知乎登录动态粒子背景","date":"2017-05-24T05:24:51.000Z","_content":"![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客：http://cherryblog.site/\n> github项目地址：https://github.com/sunshine940326/canvas-nest\n\n\n首先上效果图：\n![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n实现起来也是很简单的， 按照我的步骤一步一步来就可以了~\n# html代码\n首先要制作我们的页面，用到的是html5的新标签canvas；其实canvas就是我们需要用javascript脚本语言来绘图的“画布”，只是相当于一个容器呈现我们画图的结果，所以我们在页面中需要创建一个充满屏幕的canvas\n```\n<body>\n   <canvas id=\"canvas\"></canvas>\n   <div class=\"text\">仿知乎动态粒子效果背景</div>\n</body>\n```\n是的，`body`中只有这两行代码就可以了，甚至可以只有一行代码\n# css样式\ncss样式也没有什么好说的，只是要让canvas充满屏幕就可以了\n```\nhtml{height: 100%}\n        body{margin: 0;height: 100%;\n            background: #fff;}\n        canvas{display: block;width: 100%;height: 100%;}\n        .text{\n            width: 100%;\n            background: transparent;\n            display: flex;\n            justify-content: center;\n            height: 100%;\n            line-height: 100%;\n            top: 0;\n            position: absolute;\n            top: 50%;\n            font-size: 50px;\n        }\n```\n写法不唯一，只要要你的canvas是充满整个屏幕的就好，当然，你要是不需要充满屏幕也可以~\n# js代码\n说完了html和css，那么就剩js了，主要是通过js脚本来创建每个线段和粒子的~github上的例子中使用的是es6编写的，不过在demo中也使用了gulp安装babel可以将es6代码转化为es5（所以索demo中同时有es6的代码也有es5的代码，大家按需下载~）主要的思路如下\n\n 1. 设置单个粒子的随机x，y坐标和圆圈的半径\n 2. 使用canvas的api进行绘制粒子（圆圈）和粒子之前连线，设置一个范围，在此范围内的粒子圆心到圆心通过直线连接\n 3. 让粒子在屏幕范围内移动\n 4. 设置鼠标的交互事件，相当于以鼠标位置的x,y坐标为圆心，固定或随机值为半径重新创建了一个粒子，并且也在一定范围内也设置和其他粒子的连线（同第二步）\n 其实思路就以上五点，只不过我们需要了解canvas的api才能绘出我们想要的结果\n \n##  设置单个粒子的随机x，y坐标和圆圈的半径\n```\n//创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n```\n\n## canvas 画圆和画直线\n\n```\n{  //canvas 画圆和画直线\n   //画圆就是正常的用canvas画一个圆\n   //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n   drawCircle(ctx) {\n      // beginPath() 方法开始一条路径，或重置当前的路径\n     ctx.beginPath();   \n     //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n     ctx.arc(this.x, this.y, this.r, 0, 360)\n     //closePath() 方法创建从当前点到开始点的路径。\n     ctx.closePath();\n     //fillStyle()方法设置或返回用于填充绘画的颜色、渐变或模式。\n     ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n     //fill()方法\t填充当前绘图（路径）\n     ctx.fill();\n   }\n\n   drawLine(ctx, _circle) {\n      let dx = this.x - _circle.x;\n      let dy = this.y - _circle.y;\n      let d = Math.sqrt(dx * dx + dy * dy)\n      //设置粒子圆心之间连线的范围为150\n      if (d < 150) {\n         ctx.beginPath();\n         //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n         ctx.moveTo(this.x, this.y);   //起始点\n         ctx.lineTo(_circle.x, _circle.y);   //终点\n         ctx.closePath();\n         ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n          ctx.stroke();\n   }\n}\n``` \n\n## 粒子移动\n\n```\n{\n    // 粒子移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n    \n   \n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n```\n\n## 完整js\n\n```\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n }\n //鼠标点画圆闪烁变动\n class currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.6)'\n        ctx.fill();\n\n    }\n }\n //更新页面用requestAnimationFrame替代setTimeout\n window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n let canvas = document.getElementById('canvas');\n let ctx = canvas.getContext('2d');\n let w = canvas.width = canvas.offsetWidth;\n let h = canvas.height = canvas.offsetHeight;\n let circles = [];\n let current_circle = new currentCirle(0, 0)\n\n let draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n }\n\n let init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n }\n window.addEventListener('load', init(60));\n window.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n }\n window.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n};\n```\n\n\n# 更多canvas的api\ncanvas现在可以写出很多酷炫的效果，详细的api请见：http://www.runoob.com/jsref/dom-obj-canvas.html\n \n \n  \n","source":"_posts/html5zhihubg.md","raw":"---\ntitle: html5canvas教你实现知乎登录动态粒子背景\ndate: 2017-05-24 13:24:51\ntags: [html5,前端,canvas] \ncategories: [html5,canvas]\n---\n![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客：http://cherryblog.site/\n> github项目地址：https://github.com/sunshine940326/canvas-nest\n\n\n首先上效果图：\n![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n实现起来也是很简单的， 按照我的步骤一步一步来就可以了~\n# html代码\n首先要制作我们的页面，用到的是html5的新标签canvas；其实canvas就是我们需要用javascript脚本语言来绘图的“画布”，只是相当于一个容器呈现我们画图的结果，所以我们在页面中需要创建一个充满屏幕的canvas\n```\n<body>\n   <canvas id=\"canvas\"></canvas>\n   <div class=\"text\">仿知乎动态粒子效果背景</div>\n</body>\n```\n是的，`body`中只有这两行代码就可以了，甚至可以只有一行代码\n# css样式\ncss样式也没有什么好说的，只是要让canvas充满屏幕就可以了\n```\nhtml{height: 100%}\n        body{margin: 0;height: 100%;\n            background: #fff;}\n        canvas{display: block;width: 100%;height: 100%;}\n        .text{\n            width: 100%;\n            background: transparent;\n            display: flex;\n            justify-content: center;\n            height: 100%;\n            line-height: 100%;\n            top: 0;\n            position: absolute;\n            top: 50%;\n            font-size: 50px;\n        }\n```\n写法不唯一，只要要你的canvas是充满整个屏幕的就好，当然，你要是不需要充满屏幕也可以~\n# js代码\n说完了html和css，那么就剩js了，主要是通过js脚本来创建每个线段和粒子的~github上的例子中使用的是es6编写的，不过在demo中也使用了gulp安装babel可以将es6代码转化为es5（所以索demo中同时有es6的代码也有es5的代码，大家按需下载~）主要的思路如下\n\n 1. 设置单个粒子的随机x，y坐标和圆圈的半径\n 2. 使用canvas的api进行绘制粒子（圆圈）和粒子之前连线，设置一个范围，在此范围内的粒子圆心到圆心通过直线连接\n 3. 让粒子在屏幕范围内移动\n 4. 设置鼠标的交互事件，相当于以鼠标位置的x,y坐标为圆心，固定或随机值为半径重新创建了一个粒子，并且也在一定范围内也设置和其他粒子的连线（同第二步）\n 其实思路就以上五点，只不过我们需要了解canvas的api才能绘出我们想要的结果\n \n##  设置单个粒子的随机x，y坐标和圆圈的半径\n```\n//创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n```\n\n## canvas 画圆和画直线\n\n```\n{  //canvas 画圆和画直线\n   //画圆就是正常的用canvas画一个圆\n   //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n   drawCircle(ctx) {\n      // beginPath() 方法开始一条路径，或重置当前的路径\n     ctx.beginPath();   \n     //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n     ctx.arc(this.x, this.y, this.r, 0, 360)\n     //closePath() 方法创建从当前点到开始点的路径。\n     ctx.closePath();\n     //fillStyle()方法设置或返回用于填充绘画的颜色、渐变或模式。\n     ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n     //fill()方法\t填充当前绘图（路径）\n     ctx.fill();\n   }\n\n   drawLine(ctx, _circle) {\n      let dx = this.x - _circle.x;\n      let dy = this.y - _circle.y;\n      let d = Math.sqrt(dx * dx + dy * dy)\n      //设置粒子圆心之间连线的范围为150\n      if (d < 150) {\n         ctx.beginPath();\n         //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n         ctx.moveTo(this.x, this.y);   //起始点\n         ctx.lineTo(_circle.x, _circle.y);   //终点\n         ctx.closePath();\n         ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n          ctx.stroke();\n   }\n}\n``` \n\n## 粒子移动\n\n```\n{\n    // 粒子移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n    \n   \n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n```\n\n## 完整js\n\n```\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n }\n //鼠标点画圆闪烁变动\n class currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.6)'\n        ctx.fill();\n\n    }\n }\n //更新页面用requestAnimationFrame替代setTimeout\n window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n let canvas = document.getElementById('canvas');\n let ctx = canvas.getContext('2d');\n let w = canvas.width = canvas.offsetWidth;\n let h = canvas.height = canvas.offsetHeight;\n let circles = [];\n let current_circle = new currentCirle(0, 0)\n\n let draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n }\n\n let init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n }\n window.addEventListener('load', init(60));\n window.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n }\n window.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n};\n```\n\n\n# 更多canvas的api\ncanvas现在可以写出很多酷炫的效果，详细的api请见：http://www.runoob.com/jsref/dom-obj-canvas.html\n \n \n  \n","slug":"html5zhihubg","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zy7002pvvxiccyrit5p","content":"<p><img src=\"http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"最终效果图\"><br><a id=\"more\"></a></p>\n<blockquote>\n<p>本文首发于我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a><br>github项目地址：<a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvas-nest</a></p>\n</blockquote>\n<p>首先上效果图：<br><img src=\"http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"最终效果图\"><br>实现起来也是很简单的， 按照我的步骤一步一步来就可以了~</p>\n<h1 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h1><p>首先要制作我们的页面，用到的是html5的新标签canvas；其实canvas就是我们需要用javascript脚本语言来绘图的“画布”，只是相当于一个容器呈现我们画图的结果，所以我们在页面中需要创建一个充满屏幕的canvas<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">   &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\">   &lt;div class=&quot;text&quot;&gt;仿知乎动态粒子效果背景&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>是的，<code>body</code>中只有这两行代码就可以了，甚至可以只有一行代码</p>\n<h1 id=\"css样式\"><a href=\"#css样式\" class=\"headerlink\" title=\"css样式\"></a>css样式</h1><p>css样式也没有什么好说的，只是要让canvas充满屏幕就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">html&#123;height: 100%&#125;</div><div class=\"line\">        body&#123;margin: 0;height: 100%;</div><div class=\"line\">            background: #fff;&#125;</div><div class=\"line\">        canvas&#123;display: block;width: 100%;height: 100%;&#125;</div><div class=\"line\">        .text&#123;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            background: transparent;</div><div class=\"line\">            display: flex;</div><div class=\"line\">            justify-content: center;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">            line-height: 100%;</div><div class=\"line\">            top: 0;</div><div class=\"line\">            position: absolute;</div><div class=\"line\">            top: 50%;</div><div class=\"line\">            font-size: 50px;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>写法不唯一，只要要你的canvas是充满整个屏幕的就好，当然，你要是不需要充满屏幕也可以~</p>\n<h1 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h1><p>说完了html和css，那么就剩js了，主要是通过js脚本来创建每个线段和粒子的~github上的例子中使用的是es6编写的，不过在demo中也使用了gulp安装babel可以将es6代码转化为es5（所以索demo中同时有es6的代码也有es5的代码，大家按需下载~）主要的思路如下</p>\n<ol>\n<li>设置单个粒子的随机x，y坐标和圆圈的半径</li>\n<li>使用canvas的api进行绘制粒子（圆圈）和粒子之前连线，设置一个范围，在此范围内的粒子圆心到圆心通过直线连接</li>\n<li>让粒子在屏幕范围内移动</li>\n<li>设置鼠标的交互事件，相当于以鼠标位置的x,y坐标为圆心，固定或随机值为半径重新创建了一个粒子，并且也在一定范围内也设置和其他粒子的连线（同第二步）<br>其实思路就以上五点，只不过我们需要了解canvas的api才能绘出我们想要的结果</li>\n</ol>\n<h2 id=\"设置单个粒子的随机x，y坐标和圆圈的半径\"><a href=\"#设置单个粒子的随机x，y坐标和圆圈的半径\" class=\"headerlink\" title=\"设置单个粒子的随机x，y坐标和圆圈的半径\"></a>设置单个粒子的随机x，y坐标和圆圈的半径</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建对象</div><div class=\"line\">    //以一个圆为对象</div><div class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</div><div class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</div><div class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.random() * 10 ;</div><div class=\"line\">        this._mx = Math.random() ;</div><div class=\"line\">        this._my = Math.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"canvas-画圆和画直线\"><a href=\"#canvas-画圆和画直线\" class=\"headerlink\" title=\"canvas 画圆和画直线\"></a>canvas 画圆和画直线</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  //canvas 画圆和画直线</div><div class=\"line\">   //画圆就是正常的用canvas画一个圆</div><div class=\"line\">   //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</div><div class=\"line\">   drawCircle(ctx) &#123;</div><div class=\"line\">      // beginPath() 方法开始一条路径，或重置当前的路径</div><div class=\"line\">     ctx.beginPath();   </div><div class=\"line\">     //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">     ctx.arc(this.x, this.y, this.r, 0, 360)</div><div class=\"line\">     //closePath() 方法创建从当前点到开始点的路径。</div><div class=\"line\">     ctx.closePath();</div><div class=\"line\">     //fillStyle()方法设置或返回用于填充绘画的颜色、渐变或模式。</div><div class=\"line\">     ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">     //fill()方法\t填充当前绘图（路径）</div><div class=\"line\">     ctx.fill();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   drawLine(ctx, _circle) &#123;</div><div class=\"line\">      let dx = this.x - _circle.x;</div><div class=\"line\">      let dy = this.y - _circle.y;</div><div class=\"line\">      let d = Math.sqrt(dx * dx + dy * dy)</div><div class=\"line\">      //设置粒子圆心之间连线的范围为150</div><div class=\"line\">      if (d &lt; 150) &#123;</div><div class=\"line\">         ctx.beginPath();</div><div class=\"line\">         //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</div><div class=\"line\">         ctx.moveTo(this.x, this.y);   //起始点</div><div class=\"line\">         ctx.lineTo(_circle.x, _circle.y);   //终点</div><div class=\"line\">         ctx.closePath();</div><div class=\"line\">         ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">          ctx.stroke();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">## 粒子移动</div></pre></td></tr></table></figure>\n<p>{<br>    // 粒子移动<br>    // 圆圈移动的距离必须在屏幕范围内<br>    move(w, h) {</p>\n<pre><code>    this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);\n    this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);\n    this.x += this._mx / 2;\n    this.y += this._my / 2;\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 完整js</div></pre></td></tr></table></figure></p>\n<p>class Circle {<br>    //创建对象<br>    //以一个圆为对象<br>    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离<br>    //this.r是创建圆的半径，参数越大半径越大<br>    //this._mx,this._my是移动的距离，参数越大移动<br>    constructor(x, y) {<br>        this.x = x;<br>        this.y = y;<br>        this.r = Math.random() * 10 ;<br>        this._mx = Math.random() ;<br>        this._my = Math.random() ;</p>\n<pre><code>}\n\n//canvas 画圆和画直线\n//画圆就是正常的用canvas画一个圆\n//画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\ndrawCircle(ctx) {\n    ctx.beginPath();\n    //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n    ctx.arc(this.x, this.y, this.r, 0, 360)\n    ctx.closePath();\n    ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;\n    ctx.fill();\n}\n\ndrawLine(ctx, _circle) {\n    let dx = this.x - _circle.x;\n    let dy = this.y - _circle.y;\n    let d = Math.sqrt(dx * dx + dy * dy)\n    if (d &lt; 150) {\n        ctx.beginPath();\n        //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n        ctx.moveTo(this.x, this.y);   //起始点\n        ctx.lineTo(_circle.x, _circle.y);   //终点\n        ctx.closePath();\n        ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;\n        ctx.stroke();\n    }\n}\n\n// 圆圈移动\n// 圆圈移动的距离必须在屏幕范围内\nmove(w, h) {\n    this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);\n    this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);\n    this.x += this._mx / 2;\n    this.y += this._my / 2;\n}\n</code></pre><p> }<br> //鼠标点画圆闪烁变动<br> class currentCirle extends Circle {<br>    constructor(x, y) {<br>        super(x, y)<br>    }</p>\n<pre><code>drawCircle(ctx) {\n    ctx.beginPath();\n    //注释内容为鼠标焦点的地方圆圈半径变化\n    //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;\n    this.r = 8;\n    ctx.arc(this.x, this.y, this.r, 0, 360);\n    ctx.closePath();\n    //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;\n    ctx.fillStyle = &apos;rgba(255, 77, 54, 0.6)&apos;\n    ctx.fill();\n\n}\n</code></pre><p> }<br> //更新页面用requestAnimationFrame替代setTimeout<br> window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</p>\n<p> let canvas = document.getElementById(‘canvas’);<br> let ctx = canvas.getContext(‘2d’);<br> let w = canvas.width = canvas.offsetWidth;<br> let h = canvas.height = canvas.offsetHeight;<br> let circles = [];<br> let current_circle = new currentCirle(0, 0)</p>\n<p> let draw = function () {<br>    ctx.clearRect(0, 0, w, h);<br>    for (let i = 0; i &lt; circles.length; i++) {<br>        circles[i].move(w, h);<br>        circles[i].drawCircle(ctx);<br>        for (j = i + 1; j &lt; circles.length; j++) {<br>            circles[i].drawLine(ctx, circles[j])<br>        }<br>    }<br>    if (current_circle.x) {<br>        current_circle.drawCircle(ctx);<br>        for (var k = 1; k &lt; circles.length; k++) {<br>            current_circle.drawLine(ctx, circles[k])<br>        }<br>    }<br>    requestAnimationFrame(draw)<br> }</p>\n<p> let init = function (num) {<br>    for (var i = 0; i &lt; num; i++) {<br>        circles.push(new Circle(Math.random() <em> w, Math.random() </em> h));<br>    }<br>    draw();<br> }<br> window.addEventListener(‘load’, init(60));<br> window.onmousemove = function (e) {<br>    e = e || window.event;<br>    current_circle.x = e.clientX;<br>    current_circle.y = e.clientY;<br> }<br> window.onmouseout = function () {<br>    current_circle.x = null;<br>    current_circle.y = null;<br>};<br>```</p>\n<h1 id=\"更多canvas的api\"><a href=\"#更多canvas的api\" class=\"headerlink\" title=\"更多canvas的api\"></a>更多canvas的api</h1><p>canvas现在可以写出很多酷炫的效果，详细的api请见：<a href=\"http://www.runoob.com/jsref/dom-obj-canvas.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/jsref/dom-obj-canvas.html</a></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"最终效果图\"><br>","more":"</p>\n<blockquote>\n<p>本文首发于我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a><br>github项目地址：<a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvas-nest</a></p>\n</blockquote>\n<p>首先上效果图：<br><img src=\"http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"最终效果图\"><br>实现起来也是很简单的， 按照我的步骤一步一步来就可以了~</p>\n<h1 id=\"html代码\"><a href=\"#html代码\" class=\"headerlink\" title=\"html代码\"></a>html代码</h1><p>首先要制作我们的页面，用到的是html5的新标签canvas；其实canvas就是我们需要用javascript脚本语言来绘图的“画布”，只是相当于一个容器呈现我们画图的结果，所以我们在页面中需要创建一个充满屏幕的canvas<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">   &lt;canvas id=&quot;canvas&quot;&gt;&lt;/canvas&gt;</div><div class=\"line\">   &lt;div class=&quot;text&quot;&gt;仿知乎动态粒子效果背景&lt;/div&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure></p>\n<p>是的，<code>body</code>中只有这两行代码就可以了，甚至可以只有一行代码</p>\n<h1 id=\"css样式\"><a href=\"#css样式\" class=\"headerlink\" title=\"css样式\"></a>css样式</h1><p>css样式也没有什么好说的，只是要让canvas充满屏幕就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">html&#123;height: 100%&#125;</div><div class=\"line\">        body&#123;margin: 0;height: 100%;</div><div class=\"line\">            background: #fff;&#125;</div><div class=\"line\">        canvas&#123;display: block;width: 100%;height: 100%;&#125;</div><div class=\"line\">        .text&#123;</div><div class=\"line\">            width: 100%;</div><div class=\"line\">            background: transparent;</div><div class=\"line\">            display: flex;</div><div class=\"line\">            justify-content: center;</div><div class=\"line\">            height: 100%;</div><div class=\"line\">            line-height: 100%;</div><div class=\"line\">            top: 0;</div><div class=\"line\">            position: absolute;</div><div class=\"line\">            top: 50%;</div><div class=\"line\">            font-size: 50px;</div><div class=\"line\">        &#125;</div></pre></td></tr></table></figure></p>\n<p>写法不唯一，只要要你的canvas是充满整个屏幕的就好，当然，你要是不需要充满屏幕也可以~</p>\n<h1 id=\"js代码\"><a href=\"#js代码\" class=\"headerlink\" title=\"js代码\"></a>js代码</h1><p>说完了html和css，那么就剩js了，主要是通过js脚本来创建每个线段和粒子的~github上的例子中使用的是es6编写的，不过在demo中也使用了gulp安装babel可以将es6代码转化为es5（所以索demo中同时有es6的代码也有es5的代码，大家按需下载~）主要的思路如下</p>\n<ol>\n<li>设置单个粒子的随机x，y坐标和圆圈的半径</li>\n<li>使用canvas的api进行绘制粒子（圆圈）和粒子之前连线，设置一个范围，在此范围内的粒子圆心到圆心通过直线连接</li>\n<li>让粒子在屏幕范围内移动</li>\n<li>设置鼠标的交互事件，相当于以鼠标位置的x,y坐标为圆心，固定或随机值为半径重新创建了一个粒子，并且也在一定范围内也设置和其他粒子的连线（同第二步）<br>其实思路就以上五点，只不过我们需要了解canvas的api才能绘出我们想要的结果</li>\n</ol>\n<h2 id=\"设置单个粒子的随机x，y坐标和圆圈的半径\"><a href=\"#设置单个粒子的随机x，y坐标和圆圈的半径\" class=\"headerlink\" title=\"设置单个粒子的随机x，y坐标和圆圈的半径\"></a>设置单个粒子的随机x，y坐标和圆圈的半径</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建对象</div><div class=\"line\">    //以一个圆为对象</div><div class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</div><div class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</div><div class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.random() * 10 ;</div><div class=\"line\">        this._mx = Math.random() ;</div><div class=\"line\">        this._my = Math.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"canvas-画圆和画直线\"><a href=\"#canvas-画圆和画直线\" class=\"headerlink\" title=\"canvas 画圆和画直线\"></a>canvas 画圆和画直线</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;  //canvas 画圆和画直线</div><div class=\"line\">   //画圆就是正常的用canvas画一个圆</div><div class=\"line\">   //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</div><div class=\"line\">   drawCircle(ctx) &#123;</div><div class=\"line\">      // beginPath() 方法开始一条路径，或重置当前的路径</div><div class=\"line\">     ctx.beginPath();   </div><div class=\"line\">     //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">     ctx.arc(this.x, this.y, this.r, 0, 360)</div><div class=\"line\">     //closePath() 方法创建从当前点到开始点的路径。</div><div class=\"line\">     ctx.closePath();</div><div class=\"line\">     //fillStyle()方法设置或返回用于填充绘画的颜色、渐变或模式。</div><div class=\"line\">     ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">     //fill()方法\t填充当前绘图（路径）</div><div class=\"line\">     ctx.fill();</div><div class=\"line\">   &#125;</div><div class=\"line\"></div><div class=\"line\">   drawLine(ctx, _circle) &#123;</div><div class=\"line\">      let dx = this.x - _circle.x;</div><div class=\"line\">      let dy = this.y - _circle.y;</div><div class=\"line\">      let d = Math.sqrt(dx * dx + dy * dy)</div><div class=\"line\">      //设置粒子圆心之间连线的范围为150</div><div class=\"line\">      if (d &lt; 150) &#123;</div><div class=\"line\">         ctx.beginPath();</div><div class=\"line\">         //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</div><div class=\"line\">         ctx.moveTo(this.x, this.y);   //起始点</div><div class=\"line\">         ctx.lineTo(_circle.x, _circle.y);   //终点</div><div class=\"line\">         ctx.closePath();</div><div class=\"line\">         ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">          ctx.stroke();</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">``` </div><div class=\"line\"></div><div class=\"line\">## 粒子移动</div></pre></td></tr></table></figure>\n<p>{<br>    // 粒子移动<br>    // 圆圈移动的距离必须在屏幕范围内<br>    move(w, h) {</p>\n<pre><code>    this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);\n    this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);\n    this.x += this._mx / 2;\n    this.y += this._my / 2;\n}\n</code></pre><p>}<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">## 完整js</div></pre></td></tr></table></figure></p>\n<p>class Circle {<br>    //创建对象<br>    //以一个圆为对象<br>    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离<br>    //this.r是创建圆的半径，参数越大半径越大<br>    //this._mx,this._my是移动的距离，参数越大移动<br>    constructor(x, y) {<br>        this.x = x;<br>        this.y = y;<br>        this.r = Math.random() * 10 ;<br>        this._mx = Math.random() ;<br>        this._my = Math.random() ;</p>\n<pre><code>}\n\n//canvas 画圆和画直线\n//画圆就是正常的用canvas画一个圆\n//画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\ndrawCircle(ctx) {\n    ctx.beginPath();\n    //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n    ctx.arc(this.x, this.y, this.r, 0, 360)\n    ctx.closePath();\n    ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;\n    ctx.fill();\n}\n\ndrawLine(ctx, _circle) {\n    let dx = this.x - _circle.x;\n    let dy = this.y - _circle.y;\n    let d = Math.sqrt(dx * dx + dy * dy)\n    if (d &lt; 150) {\n        ctx.beginPath();\n        //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n        ctx.moveTo(this.x, this.y);   //起始点\n        ctx.lineTo(_circle.x, _circle.y);   //终点\n        ctx.closePath();\n        ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;\n        ctx.stroke();\n    }\n}\n\n// 圆圈移动\n// 圆圈移动的距离必须在屏幕范围内\nmove(w, h) {\n    this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);\n    this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);\n    this.x += this._mx / 2;\n    this.y += this._my / 2;\n}\n</code></pre><p> }<br> //鼠标点画圆闪烁变动<br> class currentCirle extends Circle {<br>    constructor(x, y) {<br>        super(x, y)<br>    }</p>\n<pre><code>drawCircle(ctx) {\n    ctx.beginPath();\n    //注释内容为鼠标焦点的地方圆圈半径变化\n    //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;\n    this.r = 8;\n    ctx.arc(this.x, this.y, this.r, 0, 360);\n    ctx.closePath();\n    //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;\n    ctx.fillStyle = &apos;rgba(255, 77, 54, 0.6)&apos;\n    ctx.fill();\n\n}\n</code></pre><p> }<br> //更新页面用requestAnimationFrame替代setTimeout<br> window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</p>\n<p> let canvas = document.getElementById(‘canvas’);<br> let ctx = canvas.getContext(‘2d’);<br> let w = canvas.width = canvas.offsetWidth;<br> let h = canvas.height = canvas.offsetHeight;<br> let circles = [];<br> let current_circle = new currentCirle(0, 0)</p>\n<p> let draw = function () {<br>    ctx.clearRect(0, 0, w, h);<br>    for (let i = 0; i &lt; circles.length; i++) {<br>        circles[i].move(w, h);<br>        circles[i].drawCircle(ctx);<br>        for (j = i + 1; j &lt; circles.length; j++) {<br>            circles[i].drawLine(ctx, circles[j])<br>        }<br>    }<br>    if (current_circle.x) {<br>        current_circle.drawCircle(ctx);<br>        for (var k = 1; k &lt; circles.length; k++) {<br>            current_circle.drawLine(ctx, circles[k])<br>        }<br>    }<br>    requestAnimationFrame(draw)<br> }</p>\n<p> let init = function (num) {<br>    for (var i = 0; i &lt; num; i++) {<br>        circles.push(new Circle(Math.random() <em> w, Math.random() </em> h));<br>    }<br>    draw();<br> }<br> window.addEventListener(‘load’, init(60));<br> window.onmousemove = function (e) {<br>    e = e || window.event;<br>    current_circle.x = e.clientX;<br>    current_circle.y = e.clientY;<br> }<br> window.onmouseout = function () {<br>    current_circle.x = null;<br>    current_circle.y = null;<br>};<br>```</p>\n<h1 id=\"更多canvas的api\"><a href=\"#更多canvas的api\" class=\"headerlink\" title=\"更多canvas的api\"></a>更多canvas的api</h1><p>canvas现在可以写出很多酷炫的效果，详细的api请见：<a href=\"http://www.runoob.com/jsref/dom-obj-canvas.html\" target=\"_blank\" rel=\"external\">http://www.runoob.com/jsref/dom-obj-canvas.html</a></p>"},{"title":"hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？","date":"2017-04-16T05:24:51.000Z","_content":"![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 本文首发在我的个人博客：http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~\n\n上一次在掘金上发表的`hexo`高阶教程：[hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能](http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html)，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  \n \n - seo优化\n - 多终端修改项目\n - 同时托管到github和coding上\n - 设置google和百度sitemap，让搜索引擎更好的抓取你的网站\n - 使用gulp对css、js进行优化\n - 接入七牛图床\n - 加入打赏功能\n - 加入照片模块\n \n开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  \n> 酒香不敌巷子深\n> 我们要做对搜索引擎友好的站点\n<!--more-->\n所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~\n\n作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩\n\n在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。\n# seo优化\n推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好\n> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。\n## 让百度收录你的站点\n我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入`site:<域名>`,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站\n![查看站点是否被百度收录](http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 验证网站所有权\n登录百度站长平台：http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\n![百度站长添加网站](http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，**但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的`layout:false`，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）**，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~\n![验证网站所有权](http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 生成网站地图\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎\n#### 安装sitemap插件\n```\nnpm install hexo-generator-sitemap --save     \nnpm install hexo-generator-baidu-sitemap --save\n```\n#### 修改博客配置文件\n在根目录配置文件中修改url为你的站点地址\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n**执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件**，可以通过http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\n### 向百度提交链接\n然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap\n> 如何选择链接提交方式\n> 1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n> 2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n> 3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n> 4、手动提交：一次性提交链接给百度，可以使用此种方式。\n\n一般主动提交比手动提交效果好，这里介绍主动提交的三种方法\n从效率上来说：\n> **主动推送>自动推送>sitemap**\n\n![连接提交](http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 主动推送\n安装插件`npm install hexo-baidu-url-submit --save`\n然后再根目录的配置文件中新增字段\n```\nbaidu_url_submit:\n  count: 100 # 提交最新的一个链接\n  host: www.cherryblog.site # 在百度站长平台中注册的域名\n  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n```\n在加入新的deploye\n```\ndeploy:\n - type:baidu_url_submitter\n```\n 这样执行`hexo deploy`的时候，新的链接就会被推送了\n#### 设置自动推送\n在主题配置文件下设置,将baidu_push设置为true：\n```\n# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO\nbaidu_push: true\n```\n然后就会将一下代码自动推送到百度，位置是themes\\next\\layout\\_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap\n```\n{% if theme.baidu_push %}\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n{% endif %}\n```\n#### sitemap\n将我们上一步生成的sitemap文件提交到百度就可以了~\n![将sitemap提交到百度](http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果\n在百度搜索`site:cherryblog.site`已经可以搜索到结果\n![站点已被百度收录](http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在搜索框输入域名也可以找到站点\n![站点已被百度收录](http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n输入关键字的名字也可以在第二页就找到呢，好开森~\n![站点已被百度收录](http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让google收录你的站点\n相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap\ngoogle站点平台：https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\n![站点已被google收录](http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让其他搜索引擎收录你的站点\n除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的\n ，大家就自行选择添加哈，这里就不再赘述了~\n## 优化你的url\nseo搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：\n```\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n## 其他seo优化\nseo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述\n在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so....\n - 网站**外链**的推广度、数量和质量\n - 网站的**内链**足够强大\n - 网站的**原创**质量\n - 网站的**年龄**时间\n - 网站的**更新频率**（更新次数越多越好）\n - 网站的**服务器**\n - 网站的**流量**：流量越高网站的权重越高\n - 网站的**关键词排名**：关键词排名越靠前，网站的权重越高\n - 网站的**收录**数量：网站百度收录数量越多，网站百度权重越高\n - 网站的浏览量及深度：**用户体验**越好，网站的百度权重越高\n# 同时托管到github和coding上\n前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding\n## 将你的项目托管在coding上\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。\n> 2016年3月CODING宣布收购代码托管平台GitCafe。\n\n之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。\n### 在coding上创建仓库\n首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起\n![创建coding项目](http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 将hexo博客同步到新创建的仓库中\n第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上\n![自己的ssh公钥](http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![coding中贴入ssh](http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch] \n```\n所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    #github: git@github.com:sunshine940326/sunshine940326.github.io.git\n    github: https://github.com/sunshine940326/sunshine940326.github.io.git\n    coding: git@git.coding.net:cherry940326/cherry940326.git\n    #coding: https://git.coding.net/cherry940326/cherry940326.git\n```\n完成之后在git bash 中输入\n```\nssh -T git@git.coding.net\n```\n如果得到如图提示就说明配置成功了\n![配置成功ssh](http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后重新部署hexo就将代码上传至coding上了\n### 设置coding的pages服务\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n![找到pages](http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![配置pages](http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 设置域名解析\n然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：\n![域名解析](http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n----------\n至此就完成了将你的hexo编译的博客同时部署在github和coding上\n# 多终端编辑hexo博客\n之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。\n> 更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\n## 创建Hexo分支\n创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n## 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。**.git文件夹被删除后整个文件对应的git仓库状态也会被清空**)\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n```\n/.deploy_git\n/public  \n/_config.yml\n\n```\n> .deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 \n## 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n```\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n## 将博客源文件上传至Hexo分支\n依次执行\n```\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n提交网站相关的文件； \n## 对B电脑进行的操作\n假设B电脑现在没有我们的源文件\n```\ngit init\ngit remote add origin <server> #将本地文件和云端仓库映射起来。\ngit fetch --all\ngit reset --hard origin/master\n```\n## 日常改动\n平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~\n1. 依次执行git add .、git commit -m \"...\"、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；\n2. 然后才执行hexo g -d发布网站到master分支上。\n# 使用gulp压缩你的代码\n当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~\n## 什么是gulp\n在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。\ngulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。\n> 能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~\n\n### npm小知识\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）\n####使用npm安装插件：`npm install <name> [g] [--save -dev]`\n\n - `<name>`:node 插件名称\n - `-g`:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：`C:\\Users\\Administrator\\AppData\\Roaming\\npm`;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的`node_modules`文件夹\n - `--save`：将配置信息保存在node项目配置文件`package.json`中\n - `-dev`：保存至`package.json` 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~\n -  为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是`npm install`，就可以下载`package.json` 下所有需要的包。`npm install --production`则只下载dependencies下的包\n####  使用npm卸载插件：`npm unstall <name> [-g] [--save-dev]`\n -  在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用`npm unstall <name> [-g] [--save-dev]` 命令\n -  删除全部插件:`rimraf node_modules `（首先你需要先安装rimraf 插件）\n#### 更新npm插件：`npm update <name> [g] [--save-dev]`\n### 使用cnpm\n什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~\n> 这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\ncnpm 官网地址：http://npm.taobao.org；\n安装命令为`npm install cnpm -g --registry=https://registry.npm.taobao.org`\n> 注意：安装完后最好查看其版本号`cnpm -v`或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；\n## 全局安装gulp\n言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码\n`npm install gulp -g`,然后`npm -v` 查看版本号就可以知道我们是不是安装成功了~*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！\n## 新建package.json\n使用`npm init`就可以创建package.json文件\n![创建package.json文件](http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~\n```\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n    \"hexo\": \"^3.2.0\",\n    \"hexo-baidu-url-submit\": \"0.0.5\",\n    \"hexo-deployer-git\": \"^0.2.0\",\n    \"hexo-generator-archive\": \"^0.1.4\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.0\",\n    \"hexo-generator-sitemap\": \"^1.1.2\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.10\",\n    \"hexo-renderer-stylus\": \"^0.3.1\",\n    \"hexo-server\": \"^0.2.0\",\n    \"hexo-util\": \"^0.6.0\",\n    \"hexo-wordcount\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\"\n  }\n}\n```\n## 本地安装gulp插件\n在你的Hexo目录下右键`git bash here`然后执行`npm install <name> --save`,和gulp有关的包名称有以下几个，只需将`<name>`替换一下就好~\n```\n\"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n```\n聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中`dependencies`下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~\n## 建立gulp.js\ngulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）\n我的gulp.js文件如下\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,  //清除HTML注释\n            collapseWhitespace: true,  //压缩HTML\n            collapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n            removeEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n            removeScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n            removeStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n            minifyJS: true,  //压缩页面JS\n            minifyCSS: true  //压缩页面CSS\n        }))\n        .on('error', function(err) {\n            console.log('html Error!', err.message);\n            this.end();\n        })\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n        // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 执行 gulp 命令时执行的任务\ngulp.task('build', [\n    'minify-html','minify-css','minify-js','images',\n]);\n```\n## 执行gulp：`gulp build`\n![gulpbuild执行结果](http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 在git bash中执行\n在git bash中直接输入命令`gulp build`就可以，这个`gulp build`是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字\n### 在webstorm中执行\nwebstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp\n![在webstorm中执行gulp](http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 增加七牛图床\n增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~\n## 注册七牛\n万年不变的第一步，注册。官网：[七牛云](https://portal.qiniu.com/signup?code=3lnd6wvc103f6)\n## 上传资源\n在登录成功之后，点击对象存储\n![上传资源至七牛](http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~\n![上传资源至七牛](http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 添加水印\n使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。\n七牛可以对上传的图片添加图片样式\n![增加图片样式](http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。\n![增加图片样式](http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\n![这里写图片描述](http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在该地址后加上我设置的连接符,\"-\"和我的样式名称：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\n![这里写图片描述](http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ","source":"_posts/hexo-3.md","raw":"---\ntitle: hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？\ndate: 2017-04-16 13:24:51\ntags: [hexo高阶教程,hexo+gulp,hexo+七牛,hexo百度收录,hexo百度统计,hexo seo] \ncategories: git\n---\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 本文首发在我的个人博客：http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~\n\n上一次在掘金上发表的`hexo`高阶教程：[hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能](http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html)，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  \n \n - seo优化\n - 多终端修改项目\n - 同时托管到github和coding上\n - 设置google和百度sitemap，让搜索引擎更好的抓取你的网站\n - 使用gulp对css、js进行优化\n - 接入七牛图床\n - 加入打赏功能\n - 加入照片模块\n \n开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  \n> 酒香不敌巷子深\n> 我们要做对搜索引擎友好的站点\n<!--more-->\n所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~\n\n作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩\n\n在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。\n# seo优化\n推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好\n> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。\n## 让百度收录你的站点\n我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入`site:<域名>`,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站\n![查看站点是否被百度收录](http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 验证网站所有权\n登录百度站长平台：http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\n![百度站长添加网站](http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，**但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的`layout:false`，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）**，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~\n![验证网站所有权](http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 生成网站地图\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎\n#### 安装sitemap插件\n```\nnpm install hexo-generator-sitemap --save     \nnpm install hexo-generator-baidu-sitemap --save\n```\n#### 修改博客配置文件\n在根目录配置文件中修改url为你的站点地址\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n**执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件**，可以通过http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\n### 向百度提交链接\n然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap\n> 如何选择链接提交方式\n> 1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n> 2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n> 3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n> 4、手动提交：一次性提交链接给百度，可以使用此种方式。\n\n一般主动提交比手动提交效果好，这里介绍主动提交的三种方法\n从效率上来说：\n> **主动推送>自动推送>sitemap**\n\n![连接提交](http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 主动推送\n安装插件`npm install hexo-baidu-url-submit --save`\n然后再根目录的配置文件中新增字段\n```\nbaidu_url_submit:\n  count: 100 # 提交最新的一个链接\n  host: www.cherryblog.site # 在百度站长平台中注册的域名\n  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n```\n在加入新的deploye\n```\ndeploy:\n - type:baidu_url_submitter\n```\n 这样执行`hexo deploy`的时候，新的链接就会被推送了\n#### 设置自动推送\n在主题配置文件下设置,将baidu_push设置为true：\n```\n# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO\nbaidu_push: true\n```\n然后就会将一下代码自动推送到百度，位置是themes\\next\\layout\\_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap\n```\n{% if theme.baidu_push %}\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n{% endif %}\n```\n#### sitemap\n将我们上一步生成的sitemap文件提交到百度就可以了~\n![将sitemap提交到百度](http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果\n在百度搜索`site:cherryblog.site`已经可以搜索到结果\n![站点已被百度收录](http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在搜索框输入域名也可以找到站点\n![站点已被百度收录](http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n输入关键字的名字也可以在第二页就找到呢，好开森~\n![站点已被百度收录](http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让google收录你的站点\n相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap\ngoogle站点平台：https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\n![站点已被google收录](http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让其他搜索引擎收录你的站点\n除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的\n ，大家就自行选择添加哈，这里就不再赘述了~\n## 优化你的url\nseo搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：\n```\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n## 其他seo优化\nseo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述\n在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so....\n - 网站**外链**的推广度、数量和质量\n - 网站的**内链**足够强大\n - 网站的**原创**质量\n - 网站的**年龄**时间\n - 网站的**更新频率**（更新次数越多越好）\n - 网站的**服务器**\n - 网站的**流量**：流量越高网站的权重越高\n - 网站的**关键词排名**：关键词排名越靠前，网站的权重越高\n - 网站的**收录**数量：网站百度收录数量越多，网站百度权重越高\n - 网站的浏览量及深度：**用户体验**越好，网站的百度权重越高\n# 同时托管到github和coding上\n前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding\n## 将你的项目托管在coding上\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。\n> 2016年3月CODING宣布收购代码托管平台GitCafe。\n\n之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。\n### 在coding上创建仓库\n首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起\n![创建coding项目](http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 将hexo博客同步到新创建的仓库中\n第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上\n![自己的ssh公钥](http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![coding中贴入ssh](http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch] \n```\n所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    #github: git@github.com:sunshine940326/sunshine940326.github.io.git\n    github: https://github.com/sunshine940326/sunshine940326.github.io.git\n    coding: git@git.coding.net:cherry940326/cherry940326.git\n    #coding: https://git.coding.net/cherry940326/cherry940326.git\n```\n完成之后在git bash 中输入\n```\nssh -T git@git.coding.net\n```\n如果得到如图提示就说明配置成功了\n![配置成功ssh](http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后重新部署hexo就将代码上传至coding上了\n### 设置coding的pages服务\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n![找到pages](http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![配置pages](http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 设置域名解析\n然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：\n![域名解析](http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n----------\n至此就完成了将你的hexo编译的博客同时部署在github和coding上\n# 多终端编辑hexo博客\n之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。\n> 更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\n## 创建Hexo分支\n创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n## 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。**.git文件夹被删除后整个文件对应的git仓库状态也会被清空**)\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n```\n/.deploy_git\n/public  \n/_config.yml\n\n```\n> .deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 \n## 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n```\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n## 将博客源文件上传至Hexo分支\n依次执行\n```\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n提交网站相关的文件； \n## 对B电脑进行的操作\n假设B电脑现在没有我们的源文件\n```\ngit init\ngit remote add origin <server> #将本地文件和云端仓库映射起来。\ngit fetch --all\ngit reset --hard origin/master\n```\n## 日常改动\n平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~\n1. 依次执行git add .、git commit -m \"...\"、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；\n2. 然后才执行hexo g -d发布网站到master分支上。\n# 使用gulp压缩你的代码\n当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~\n## 什么是gulp\n在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。\ngulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。\n> 能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~\n\n### npm小知识\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）\n####使用npm安装插件：`npm install <name> [g] [--save -dev]`\n\n - `<name>`:node 插件名称\n - `-g`:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：`C:\\Users\\Administrator\\AppData\\Roaming\\npm`;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的`node_modules`文件夹\n - `--save`：将配置信息保存在node项目配置文件`package.json`中\n - `-dev`：保存至`package.json` 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~\n -  为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是`npm install`，就可以下载`package.json` 下所有需要的包。`npm install --production`则只下载dependencies下的包\n####  使用npm卸载插件：`npm unstall <name> [-g] [--save-dev]`\n -  在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用`npm unstall <name> [-g] [--save-dev]` 命令\n -  删除全部插件:`rimraf node_modules `（首先你需要先安装rimraf 插件）\n#### 更新npm插件：`npm update <name> [g] [--save-dev]`\n### 使用cnpm\n什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~\n> 这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\ncnpm 官网地址：http://npm.taobao.org；\n安装命令为`npm install cnpm -g --registry=https://registry.npm.taobao.org`\n> 注意：安装完后最好查看其版本号`cnpm -v`或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；\n## 全局安装gulp\n言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码\n`npm install gulp -g`,然后`npm -v` 查看版本号就可以知道我们是不是安装成功了~*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！\n## 新建package.json\n使用`npm init`就可以创建package.json文件\n![创建package.json文件](http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~\n```\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n    \"hexo\": \"^3.2.0\",\n    \"hexo-baidu-url-submit\": \"0.0.5\",\n    \"hexo-deployer-git\": \"^0.2.0\",\n    \"hexo-generator-archive\": \"^0.1.4\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.0\",\n    \"hexo-generator-sitemap\": \"^1.1.2\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.10\",\n    \"hexo-renderer-stylus\": \"^0.3.1\",\n    \"hexo-server\": \"^0.2.0\",\n    \"hexo-util\": \"^0.6.0\",\n    \"hexo-wordcount\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\"\n  }\n}\n```\n## 本地安装gulp插件\n在你的Hexo目录下右键`git bash here`然后执行`npm install <name> --save`,和gulp有关的包名称有以下几个，只需将`<name>`替换一下就好~\n```\n\"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n```\n聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中`dependencies`下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~\n## 建立gulp.js\ngulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）\n我的gulp.js文件如下\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,  //清除HTML注释\n            collapseWhitespace: true,  //压缩HTML\n            collapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n            removeEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n            removeScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n            removeStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n            minifyJS: true,  //压缩页面JS\n            minifyCSS: true  //压缩页面CSS\n        }))\n        .on('error', function(err) {\n            console.log('html Error!', err.message);\n            this.end();\n        })\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n        // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 执行 gulp 命令时执行的任务\ngulp.task('build', [\n    'minify-html','minify-css','minify-js','images',\n]);\n```\n## 执行gulp：`gulp build`\n![gulpbuild执行结果](http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 在git bash中执行\n在git bash中直接输入命令`gulp build`就可以，这个`gulp build`是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字\n### 在webstorm中执行\nwebstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp\n![在webstorm中执行gulp](http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 增加七牛图床\n增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~\n## 注册七牛\n万年不变的第一步，注册。官网：[七牛云](https://portal.qiniu.com/signup?code=3lnd6wvc103f6)\n## 上传资源\n在登录成功之后，点击对象存储\n![上传资源至七牛](http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~\n![上传资源至七牛](http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 添加水印\n使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。\n七牛可以对上传的图片添加图片样式\n![增加图片样式](http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。\n![增加图片样式](http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\n![这里写图片描述](http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在该地址后加上我设置的连接符,\"-\"和我的样式名称：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\n![这里写图片描述](http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ","slug":"hexo-3","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj63j7zy9002tvvxi8tanpzh3","content":"<p><img src=\"http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding\"></p>\n<blockquote>\n<p>本文首发在我的个人博客：<a href=\"http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~\">http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~</a></p>\n</blockquote>\n<p>上一次在掘金上发表的<code>hexo</code>高阶教程：<a href=\"http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html\">hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能</a>，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  </p>\n<ul>\n<li>seo优化</li>\n<li>多终端修改项目</li>\n<li>同时托管到github和coding上</li>\n<li>设置google和百度sitemap，让搜索引擎更好的抓取你的网站</li>\n<li>使用gulp对css、js进行优化</li>\n<li>接入七牛图床</li>\n<li>加入打赏功能</li>\n<li>加入照片模块</li>\n</ul>\n<p>开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  </p>\n<blockquote>\n<p>酒香不敌巷子深<br>我们要做对搜索引擎友好的站点<br><a id=\"more\"></a><br>所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~</p>\n</blockquote>\n<p>作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩</p>\n<p>在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。</p>\n<h1 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h1><p>推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好</p>\n<blockquote>\n<p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p>\n<h2 id=\"让百度收录你的站点\"><a href=\"#让百度收录你的站点\" class=\"headerlink\" title=\"让百度收录你的站点\"></a>让百度收录你的站点</h2><p>我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站<br><img src=\"http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"查看站点是否被百度收录\"></p>\n<h3 id=\"验证网站所有权\"><a href=\"#验证网站所有权\" class=\"headerlink\" title=\"验证网站所有权\"></a>验证网站所有权</h3><p>登录百度站长平台：<a href=\"http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\" target=\"_blank\" rel=\"external\">http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</a><br><img src=\"http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"百度站长添加网站\"><br>在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，<strong>但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的<code>layout:false</code>，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）</strong>，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~<br><img src=\"http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"验证网站所有权\"></p>\n<h3 id=\"生成网站地图\"><a href=\"#生成网站地图\" class=\"headerlink\" title=\"生成网站地图\"></a>生成网站地图</h3><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p>\n<h4 id=\"安装sitemap插件\"><a href=\"#安装sitemap插件\" class=\"headerlink\" title=\"安装sitemap插件\"></a>安装sitemap插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save     </div><div class=\"line\">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"修改博客配置文件\"><a href=\"#修改博客配置文件\" class=\"headerlink\" title=\"修改博客配置文件\"></a>修改博客配置文件</h4><p>在根目录配置文件中修改url为你的站点地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://cherryblog.site</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :title.html</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure></p>\n<p><strong>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件</strong>，可以通过<a href=\"http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\" target=\"_blank\" rel=\"external\">http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</a></p>\n<h3 id=\"向百度提交链接\"><a href=\"#向百度提交链接\" class=\"headerlink\" title=\"向百度提交链接\"></a>向百度提交链接</h3><p>然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p>\n<blockquote>\n<p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p>\n</blockquote>\n<p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法<br>从效率上来说：</p>\n<blockquote>\n<p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"连接提交\"></p>\n<h4 id=\"主动推送\"><a href=\"#主动推送\" class=\"headerlink\" title=\"主动推送\"></a>主动推送</h4><p>安装插件<code>npm install hexo-baidu-url-submit --save</code><br>然后再根目录的配置文件中新增字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">baidu_url_submit:</div><div class=\"line\">  count: 100 # 提交最新的一个链接</div><div class=\"line\">  host: www.cherryblog.site # 在百度站长平台中注册的域名</div><div class=\"line\">  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</div><div class=\"line\">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</div></pre></td></tr></table></figure></p>\n<p>在加入新的deploye<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\"> - type:baidu_url_submitter</div></pre></td></tr></table></figure></p>\n<p> 这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了</p>\n<h4 id=\"设置自动推送\"><a href=\"#设置自动推送\" class=\"headerlink\" title=\"设置自动推送\"></a>设置自动推送</h4><p>在主题配置文件下设置,将baidu_push设置为true：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class=\"line\">baidu_push: true</div></pre></td></tr></table></figure></p>\n<p>然后就会将一下代码自动推送到百度，位置是themes\\next\\layout_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.baidu_push %&#125;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(function()&#123;</div><div class=\"line\">    var bp = document.createElement(&apos;script&apos;);</div><div class=\"line\">    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</div><div class=\"line\">    if (curProtocol === &apos;https&apos;) &#123;</div><div class=\"line\">        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</div><div class=\"line\">    s.parentNode.insertBefore(bp, s);</div><div class=\"line\">&#125;)();</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h4><p>将我们上一步生成的sitemap文件提交到百度就可以了~<br><img src=\"http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"将sitemap提交到百度\"><br>我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果<br>在百度搜索<code>site:cherryblog.site</code>已经可以搜索到结果<br><img src=\"http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>在搜索框输入域名也可以找到站点<br><img src=\"http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>输入关键字的名字也可以在第二页就找到呢，好开森~<br><img src=\"http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"></p>\n<h2 id=\"让google收录你的站点\"><a href=\"#让google收录你的站点\" class=\"headerlink\" title=\"让google收录你的站点\"></a>让google收录你的站点</h2><p>相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap<br>google站点平台：<a href=\"https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\" target=\"_blank\" rel=\"external\">https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了</a><br><img src=\"http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"></p>\n<h2 id=\"让其他搜索引擎收录你的站点\"><a href=\"#让其他搜索引擎收录你的站点\" class=\"headerlink\" title=\"让其他搜索引擎收录你的站点\"></a>让其他搜索引擎收录你的站点</h2><p>除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的<br> ，大家就自行选择添加哈，这里就不再赘述了~</p>\n<h2 id=\"优化你的url\"><a href=\"#优化你的url\" class=\"headerlink\" title=\"优化你的url\"></a>优化你的url</h2><p>seo搜索引擎优化认为，网站的最佳结构是<strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: http://cherryblog.site</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :title.html</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure></p>\n<h2 id=\"其他seo优化\"><a href=\"#其他seo优化\" class=\"headerlink\" title=\"其他seo优化\"></a>其他seo优化</h2><p>seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述<br>在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so….</p>\n<ul>\n<li>网站<strong>外链</strong>的推广度、数量和质量</li>\n<li>网站的<strong>内链</strong>足够强大</li>\n<li>网站的<strong>原创</strong>质量</li>\n<li>网站的<strong>年龄</strong>时间</li>\n<li>网站的<strong>更新频率</strong>（更新次数越多越好）</li>\n<li>网站的<strong>服务器</strong></li>\n<li>网站的<strong>流量</strong>：流量越高网站的权重越高</li>\n<li>网站的<strong>关键词排名</strong>：关键词排名越靠前，网站的权重越高</li>\n<li>网站的<strong>收录</strong>数量：网站百度收录数量越多，网站百度权重越高</li>\n<li>网站的浏览量及深度：<strong>用户体验</strong>越好，网站的百度权重越高<h1 id=\"同时托管到github和coding上\"><a href=\"#同时托管到github和coding上\" class=\"headerlink\" title=\"同时托管到github和coding上\"></a>同时托管到github和coding上</h1>前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding<h2 id=\"将你的项目托管在coding上\"><a href=\"#将你的项目托管在coding上\" class=\"headerlink\" title=\"将你的项目托管在coding上\"></a>将你的项目托管在coding上</h2><img src=\"http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding\"><blockquote>\n<p>Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。<br>2016年3月CODING宣布收购代码托管平台GitCafe。</p>\n</blockquote>\n</li>\n</ul>\n<p>之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。</p>\n<h3 id=\"在coding上创建仓库\"><a href=\"#在coding上创建仓库\" class=\"headerlink\" title=\"在coding上创建仓库\"></a>在coding上创建仓库</h3><p>首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起<br><img src=\"http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建coding项目\"></p>\n<h3 id=\"将hexo博客同步到新创建的仓库中\"><a href=\"#将hexo博客同步到新创建的仓库中\" class=\"headerlink\" title=\"将hexo博客同步到新创建的仓库中\"></a>将hexo博客同步到新创建的仓库中</h3><p>第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上<br><img src=\"http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"自己的ssh公钥\"><br><img src=\"http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding中贴入ssh\"><br>在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  message: [message]</div><div class=\"line\">  repo:</div><div class=\"line\">    github: &lt;repository url&gt;,[branch]</div><div class=\"line\">    gitcafe: &lt;repository url&gt;,[branch]</div></pre></td></tr></table></figure></p>\n<p>所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo:</div><div class=\"line\">    #github: git@github.com:sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">    github: https://github.com/sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">    coding: git@git.coding.net:cherry940326/cherry940326.git</div><div class=\"line\">    #coding: https://git.coding.net/cherry940326/cherry940326.git</div></pre></td></tr></table></figure></p>\n<p>完成之后在git bash 中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@git.coding.net</div></pre></td></tr></table></figure></p>\n<p>如果得到如图提示就说明配置成功了<br><img src=\"http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置成功ssh\"><br>然后重新部署hexo就将代码上传至coding上了</p>\n<h3 id=\"设置coding的pages服务\"><a href=\"#设置coding的pages服务\" class=\"headerlink\" title=\"设置coding的pages服务\"></a>设置coding的pages服务</h3><p>将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了<br><img src=\"http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"找到pages\"><br><img src=\"http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置pages\"></p>\n<h3 id=\"设置域名解析\"><a href=\"#设置域名解析\" class=\"headerlink\" title=\"设置域名解析\"></a>设置域名解析</h3><p>然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：<br><img src=\"http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"域名解析\"></p>\n<hr>\n<p>至此就完成了将你的hexo编译的博客同时部署在github和coding上</p>\n<h1 id=\"多终端编辑hexo博客\"><a href=\"#多终端编辑hexo博客\" class=\"headerlink\" title=\"多终端编辑hexo博客\"></a>多终端编辑hexo博客</h1><p>之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。</p>\n<blockquote>\n<p>更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：<a href=\"http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\" target=\"_blank\" rel=\"external\">http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/</a></p>\n<h2 id=\"创建Hexo分支\"><a href=\"#创建Hexo分支\" class=\"headerlink\" title=\"创建Hexo分支\"></a>创建Hexo分支</h2><p>创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）</p>\n<h2 id=\"删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\"><a href=\"#删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\" class=\"headerlink\" title=\"删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\"></a>删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件</h2><p>因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。<strong>.git文件夹被删除后整个文件对应的git仓库状态也会被清空</strong>)<br>.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public  </div><div class=\"line\">/_config.yml</div></pre></td></tr></table></figure></p>\n<p>.deploy_git是hexo默认的.git配置文件夹，不需要同步<br>public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多<br>即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 </p>\n<h2 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h2><p>然后我们再初始化仓库，重新对我们的代码进行版本控制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><code>&lt;server&gt;</code>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</p>\n<h2 id=\"将博客源文件上传至Hexo分支\"><a href=\"#将博客源文件上传至Hexo分支\" class=\"headerlink\" title=\"将博客源文件上传至Hexo分支\"></a>将博客源文件上传至Hexo分支</h2><p>依次执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;...&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>提交网站相关的文件； </p>\n<h2 id=\"对B电脑进行的操作\"><a href=\"#对B电脑进行的操作\" class=\"headerlink\" title=\"对B电脑进行的操作\"></a>对B电脑进行的操作</h2><p>假设B电脑现在没有我们的源文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin &lt;server&gt; #将本地文件和云端仓库映射起来。</div><div class=\"line\">git fetch --all</div><div class=\"line\">git reset --hard origin/master</div></pre></td></tr></table></figure></p>\n<h2 id=\"日常改动\"><a href=\"#日常改动\" class=\"headerlink\" title=\"日常改动\"></a>日常改动</h2><p>平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~</p>\n<ol>\n<li>依次执行git add .、git commit -m “…”、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；</li>\n<li>然后才执行hexo g -d发布网站到master分支上。<h1 id=\"使用gulp压缩你的代码\"><a href=\"#使用gulp压缩你的代码\" class=\"headerlink\" title=\"使用gulp压缩你的代码\"></a>使用gulp压缩你的代码</h1>当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~<h2 id=\"什么是gulp\"><a href=\"#什么是gulp\" class=\"headerlink\" title=\"什么是gulp\"></a>什么是gulp</h2>在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。<br>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。<blockquote>\n<p>能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。</p>\n</blockquote>\n</li>\n</ol>\n<p>既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~</p>\n<h3 id=\"npm小知识\"><a href=\"#npm小知识\" class=\"headerlink\" title=\"npm小知识\"></a>npm小知识</h3><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>\n<p>####使用npm安装插件：<code>npm install &lt;name&gt; [g] [--save -dev]</code></p>\n<ul>\n<li><code>&lt;name&gt;</code>:node 插件名称</li>\n<li><code>-g</code>:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm</code>;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的<code>node_modules</code>文件夹</li>\n<li><code>--save</code>：将配置信息保存在node项目配置文件<code>package.json</code>中</li>\n<li><code>-dev</code>：保存至<code>package.json</code> 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~</li>\n<li>为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是<code>npm install</code>，就可以下载<code>package.json</code> 下所有需要的包。<code>npm install --production</code>则只下载dependencies下的包<h4 id=\"使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\"><a href=\"#使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"使用npm卸载插件：npm unstall &lt;name&gt; [-g] [--save-dev]\"></a>使用npm卸载插件：<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code></h4></li>\n<li>在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code> 命令</li>\n<li>删除全部插件:<code>rimraf node_modules</code>（首先你需要先安装rimraf 插件）<h4 id=\"更新npm插件：npm-update-lt-name-gt-g-save-dev\"><a href=\"#更新npm插件：npm-update-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"更新npm插件：npm update &lt;name&gt; [g] [--save-dev]\"></a>更新npm插件：<code>npm update &lt;name&gt; [g] [--save-dev]</code></h4><h3 id=\"使用cnpm\"><a href=\"#使用cnpm\" class=\"headerlink\" title=\"使用cnpm\"></a>使用cnpm</h3>什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~<blockquote>\n<p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n</blockquote>\n</li>\n</ul>\n<p>cnpm 官网地址：<a href=\"http://npm.taobao.org；\" target=\"_blank\" rel=\"external\">http://npm.taobao.org；</a><br>安装命令为<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></p>\n<blockquote>\n<p>注意：安装完后最好查看其版本号<code>cnpm -v</code>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；</p>\n<h2 id=\"全局安装gulp\"><a href=\"#全局安装gulp\" class=\"headerlink\" title=\"全局安装gulp\"></a>全局安装gulp</h2><p>言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码<br><code>npm install gulp -g</code>,然后<code>npm -v</code> 查看版本号就可以知道我们是不是安装成功了~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！</p>\n<h2 id=\"新建package-json\"><a href=\"#新建package-json\" class=\"headerlink\" title=\"新建package.json\"></a>新建package.json</h2><p>使用<code>npm init</code>就可以创建package.json文件<br><img src=\"http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建package.json文件\">，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class=\"line\">  &quot;private&quot;: true,</div><div class=\"line\">  &quot;hexo&quot;: &#123;</div><div class=\"line\">    &quot;version&quot;: &quot;3.2.2&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</div><div class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</div><div class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</div><div class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</div><div class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</div><div class=\"line\">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;hexo-baidu-url-submit&quot;: &quot;0.0.5&quot;,</div><div class=\"line\">    &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</div><div class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class=\"line\">    &quot;hexo-server&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-util&quot;: &quot;^0.6.0&quot;,</div><div class=\"line\">    &quot;hexo-wordcount&quot;: &quot;^2.0.1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;gulp-babel&quot;: &quot;^6.1.2&quot;,</div><div class=\"line\">    &quot;gulp-clean&quot;: &quot;^0.3.2&quot;,</div><div class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"本地安装gulp插件\"><a href=\"#本地安装gulp插件\" class=\"headerlink\" title=\"本地安装gulp插件\"></a>本地安装gulp插件</h2><p>在你的Hexo目录下右键<code>git bash here</code>然后执行<code>npm install &lt;name&gt; --save</code>,和gulp有关的包名称有以下几个，只需将<code>&lt;name&gt;</code>替换一下就好~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;gulp&quot;: &quot;^3.9.1&quot;,</div><div class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</div><div class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</div><div class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</div><div class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</div></pre></td></tr></table></figure></p>\n<p>聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中<code>dependencies</code>下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~</p>\n<h2 id=\"建立gulp-js\"><a href=\"#建立gulp-js\" class=\"headerlink\" title=\"建立gulp.js\"></a>建立gulp.js</h2><p>gulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）<br>我的gulp.js文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var minifycss = require(&apos;gulp-minify-css&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);</div><div class=\"line\">var htmlclean = require(&apos;gulp-htmlclean&apos;);</div><div class=\"line\"></div><div class=\"line\">// 获取 gulp-imagemin 模块</div><div class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;)</div><div class=\"line\"></div><div class=\"line\">// 压缩 public 目录 css</div><div class=\"line\">gulp.task(&apos;minify-css&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&apos;./public/**/*.css&apos;)</div><div class=\"line\">        .pipe(minifycss())</div><div class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// 压缩 public 目录 html</div><div class=\"line\">gulp.task(&apos;minify-html&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&apos;./public/**/*.html&apos;)</div><div class=\"line\">        .pipe(htmlclean())</div><div class=\"line\">        .pipe(htmlmin(&#123;</div><div class=\"line\">            removeComments: true,  //清除HTML注释</div><div class=\"line\">            collapseWhitespace: true,  //压缩HTML</div><div class=\"line\">            collapseBooleanAttributes: true,  //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;</div><div class=\"line\">            removeEmptyAttributes: true,  //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</div><div class=\"line\">            removeScriptTypeAttributes: true,  //删除&lt;script&gt;的type=&quot;text/javascript&quot;</div><div class=\"line\">            removeStyleLinkTypeAttributes: true,  //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</div><div class=\"line\">            minifyJS: true,  //压缩页面JS</div><div class=\"line\">            minifyCSS: true  //压缩页面CSS</div><div class=\"line\">        &#125;))</div><div class=\"line\">        .on(&apos;error&apos;, function(err) &#123;</div><div class=\"line\">            console.log(&apos;html Error!&apos;, err.message);</div><div class=\"line\">            this.end();</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;))</div><div class=\"line\">&#125;);</div><div class=\"line\">// 压缩 public/js 目录 js</div><div class=\"line\">gulp.task(&apos;minify-js&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&apos;./public/**/*.js&apos;)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 压缩图片任务</div><div class=\"line\">// 在命令行输入 gulp images 启动此任务</div><div class=\"line\">gulp.task(&apos;images&apos;, function () &#123;</div><div class=\"line\">    // 1. 找到图片</div><div class=\"line\">    gulp.src(&apos;./photos/*.*&apos;)</div><div class=\"line\">    // 2. 压缩图片</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            progressive: true</div><div class=\"line\">        &#125;))</div><div class=\"line\">        // 3. 另存图片</div><div class=\"line\">        .pipe(gulp.dest(&apos;dist/images&apos;))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 执行 gulp 命令时执行的任务</div><div class=\"line\">gulp.task(&apos;build&apos;, [</div><div class=\"line\">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;images&apos;,</div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<h2 id=\"执行gulp：gulp-build\"><a href=\"#执行gulp：gulp-build\" class=\"headerlink\" title=\"执行gulp：gulp build\"></a>执行gulp：<code>gulp build</code></h2><p><img src=\"http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gulpbuild执行结果\"></p>\n<h3 id=\"在git-bash中执行\"><a href=\"#在git-bash中执行\" class=\"headerlink\" title=\"在git bash中执行\"></a>在git bash中执行</h3><p>在git bash中直接输入命令<code>gulp build</code>就可以，这个<code>gulp build</code>是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字</p>\n<h3 id=\"在webstorm中执行\"><a href=\"#在webstorm中执行\" class=\"headerlink\" title=\"在webstorm中执行\"></a>在webstorm中执行</h3><p>webstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp<br><img src=\"http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"在webstorm中执行gulp\"></p>\n<h1 id=\"增加七牛图床\"><a href=\"#增加七牛图床\" class=\"headerlink\" title=\"增加七牛图床\"></a>增加七牛图床</h1><p>增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~</p>\n<h2 id=\"注册七牛\"><a href=\"#注册七牛\" class=\"headerlink\" title=\"注册七牛\"></a>注册七牛</h2><p>万年不变的第一步，注册。官网：<a href=\"https://portal.qiniu.com/signup?code=3lnd6wvc103f6\" target=\"_blank\" rel=\"external\">七牛云</a></p>\n<h2 id=\"上传资源\"><a href=\"#上传资源\" class=\"headerlink\" title=\"上传资源\"></a>上传资源</h2><p>在登录成功之后，点击对象存储<br><img src=\"http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"><br>上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~<br><img src=\"http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"></p>\n<h3 id=\"添加水印\"><a href=\"#添加水印\" class=\"headerlink\" title=\"添加水印\"></a>添加水印</h3><p>使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。<br>七牛可以对上传的图片添加图片样式<br><img src=\"http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。<br><img src=\"http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\" target=\"_blank\" rel=\"external\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片</a><br><img src=\"http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在该地址后加上我设置的连接符,”-“和我的样式名称：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\" target=\"_blank\" rel=\"external\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印</a><br><img src=\"http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n","site":{"data":{}},"excerpt":"<p><img src=\"http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding\"></p>\n<blockquote>\n<p>本文首发在我的个人博客：<a href=\"http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~\">http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~</a></p>\n</blockquote>\n<p>上一次在掘金上发表的<code>hexo</code>高阶教程：<a href=\"http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html\">hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能</a>，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  </p>\n<ul>\n<li>seo优化</li>\n<li>多终端修改项目</li>\n<li>同时托管到github和coding上</li>\n<li>设置google和百度sitemap，让搜索引擎更好的抓取你的网站</li>\n<li>使用gulp对css、js进行优化</li>\n<li>接入七牛图床</li>\n<li>加入打赏功能</li>\n<li>加入照片模块</li>\n</ul>\n<p>开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  </p>\n<blockquote>\n<p>酒香不敌巷子深<br>我们要做对搜索引擎友好的站点<br>","more":"<br>所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~</p>\n</blockquote>\n<p>作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩</p>\n<p>在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。</p>\n<h1 id=\"seo优化\"><a href=\"#seo优化\" class=\"headerlink\" title=\"seo优化\"></a>seo优化</h1><p>推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好</p>\n<blockquote>\n<p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</p>\n<h2 id=\"让百度收录你的站点\"><a href=\"#让百度收录你的站点\" class=\"headerlink\" title=\"让百度收录你的站点\"></a>让百度收录你的站点</h2><p>我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入<code>site:&lt;域名&gt;</code>,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站<br><img src=\"http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"查看站点是否被百度收录\"></p>\n<h3 id=\"验证网站所有权\"><a href=\"#验证网站所有权\" class=\"headerlink\" title=\"验证网站所有权\"></a>验证网站所有权</h3><p>登录百度站长平台：<a href=\"http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\" target=\"_blank\" rel=\"external\">http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名</a><br><img src=\"http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"百度站长添加网站\"><br>在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，<strong>但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的<code>layout:false</code>，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）</strong>，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~<br><img src=\"http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"验证网站所有权\"></p>\n<h3 id=\"生成网站地图\"><a href=\"#生成网站地图\" class=\"headerlink\" title=\"生成网站地图\"></a>生成网站地图</h3><p>我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎</p>\n<h4 id=\"安装sitemap插件\"><a href=\"#安装sitemap插件\" class=\"headerlink\" title=\"安装sitemap插件\"></a>安装sitemap插件</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install hexo-generator-sitemap --save     </div><div class=\"line\">npm install hexo-generator-baidu-sitemap --save</div></pre></td></tr></table></figure>\n</blockquote>\n<h4 id=\"修改博客配置文件\"><a href=\"#修改博客配置文件\" class=\"headerlink\" title=\"修改博客配置文件\"></a>修改博客配置文件</h4><p>在根目录配置文件中修改url为你的站点地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://cherryblog.site</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :title.html</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure></p>\n<p><strong>执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件</strong>，可以通过<a href=\"http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\" target=\"_blank\" rel=\"external\">http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。</a></p>\n<h3 id=\"向百度提交链接\"><a href=\"#向百度提交链接\" class=\"headerlink\" title=\"向百度提交链接\"></a>向百度提交链接</h3><p>然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap</p>\n<blockquote>\n<p>如何选择链接提交方式<br>1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。<br>2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。<br>3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。<br>4、手动提交：一次性提交链接给百度，可以使用此种方式。</p>\n</blockquote>\n<p>一般主动提交比手动提交效果好，这里介绍主动提交的三种方法<br>从效率上来说：</p>\n<blockquote>\n<p><strong>主动推送&gt;自动推送&gt;sitemap</strong></p>\n</blockquote>\n<p><img src=\"http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"连接提交\"></p>\n<h4 id=\"主动推送\"><a href=\"#主动推送\" class=\"headerlink\" title=\"主动推送\"></a>主动推送</h4><p>安装插件<code>npm install hexo-baidu-url-submit --save</code><br>然后再根目录的配置文件中新增字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">baidu_url_submit:</div><div class=\"line\">  count: 100 # 提交最新的一个链接</div><div class=\"line\">  host: www.cherryblog.site # 在百度站长平台中注册的域名</div><div class=\"line\">  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!</div><div class=\"line\">  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</div></pre></td></tr></table></figure></p>\n<p>在加入新的deploye<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\"> - type:baidu_url_submitter</div></pre></td></tr></table></figure></p>\n<p> 这样执行<code>hexo deploy</code>的时候，新的链接就会被推送了</p>\n<h4 id=\"设置自动推送\"><a href=\"#设置自动推送\" class=\"headerlink\" title=\"设置自动推送\"></a>设置自动推送</h4><p>在主题配置文件下设置,将baidu_push设置为true：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO</div><div class=\"line\">baidu_push: true</div></pre></td></tr></table></figure></p>\n<p>然后就会将一下代码自动推送到百度，位置是themes\\next\\layout_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.baidu_push %&#125;</div><div class=\"line\">&lt;script&gt;</div><div class=\"line\">(function()&#123;</div><div class=\"line\">    var bp = document.createElement(&apos;script&apos;);</div><div class=\"line\">    var curProtocol = window.location.protocol.split(&apos;:&apos;)[0];</div><div class=\"line\">    if (curProtocol === &apos;https&apos;) &#123;</div><div class=\"line\">        bp.src = &apos;https://zz.bdstatic.com/linksubmit/push.js&apos;;        </div><div class=\"line\">    &#125;</div><div class=\"line\">    else &#123;</div><div class=\"line\">        bp.src = &apos;http://push.zhanzhang.baidu.com/push.js&apos;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    var s = document.getElementsByTagName(&quot;script&quot;)[0];</div><div class=\"line\">    s.parentNode.insertBefore(bp, s);</div><div class=\"line\">&#125;)();</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"sitemap\"><a href=\"#sitemap\" class=\"headerlink\" title=\"sitemap\"></a>sitemap</h4><p>将我们上一步生成的sitemap文件提交到百度就可以了~<br><img src=\"http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"将sitemap提交到百度\"><br>我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果<br>在百度搜索<code>site:cherryblog.site</code>已经可以搜索到结果<br><img src=\"http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>在搜索框输入域名也可以找到站点<br><img src=\"http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"><br>输入关键字的名字也可以在第二页就找到呢，好开森~<br><img src=\"http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被百度收录\"></p>\n<h2 id=\"让google收录你的站点\"><a href=\"#让google收录你的站点\" class=\"headerlink\" title=\"让google收录你的站点\"></a>让google收录你的站点</h2><p>相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap<br>google站点平台：<a href=\"https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\" target=\"_blank\" rel=\"external\">https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了</a><br><img src=\"http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"><br><img src=\"http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"站点已被google收录\"></p>\n<h2 id=\"让其他搜索引擎收录你的站点\"><a href=\"#让其他搜索引擎收录你的站点\" class=\"headerlink\" title=\"让其他搜索引擎收录你的站点\"></a>让其他搜索引擎收录你的站点</h2><p>除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的<br> ，大家就自行选择添加哈，这里就不再赘述了~</p>\n<h2 id=\"优化你的url\"><a href=\"#优化你的url\" class=\"headerlink\" title=\"优化你的url\"></a>优化你的url</h2><p>seo搜索引擎优化认为，网站的最佳结构是<strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">url: http://cherryblog.site</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :title.html</div><div class=\"line\">permalink_defaults:</div></pre></td></tr></table></figure></p>\n<h2 id=\"其他seo优化\"><a href=\"#其他seo优化\" class=\"headerlink\" title=\"其他seo优化\"></a>其他seo优化</h2><p>seo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述<br>在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so….</p>\n<ul>\n<li>网站<strong>外链</strong>的推广度、数量和质量</li>\n<li>网站的<strong>内链</strong>足够强大</li>\n<li>网站的<strong>原创</strong>质量</li>\n<li>网站的<strong>年龄</strong>时间</li>\n<li>网站的<strong>更新频率</strong>（更新次数越多越好）</li>\n<li>网站的<strong>服务器</strong></li>\n<li>网站的<strong>流量</strong>：流量越高网站的权重越高</li>\n<li>网站的<strong>关键词排名</strong>：关键词排名越靠前，网站的权重越高</li>\n<li>网站的<strong>收录</strong>数量：网站百度收录数量越多，网站百度权重越高</li>\n<li>网站的浏览量及深度：<strong>用户体验</strong>越好，网站的百度权重越高<h1 id=\"同时托管到github和coding上\"><a href=\"#同时托管到github和coding上\" class=\"headerlink\" title=\"同时托管到github和coding上\"></a>同时托管到github和coding上</h1>前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding<h2 id=\"将你的项目托管在coding上\"><a href=\"#将你的项目托管在coding上\" class=\"headerlink\" title=\"将你的项目托管在coding上\"></a>将你的项目托管在coding上</h2><img src=\"http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding\"><blockquote>\n<p>Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。<br>2016年3月CODING宣布收购代码托管平台GitCafe。</p>\n</blockquote>\n</li>\n</ul>\n<p>之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。</p>\n<h3 id=\"在coding上创建仓库\"><a href=\"#在coding上创建仓库\" class=\"headerlink\" title=\"在coding上创建仓库\"></a>在coding上创建仓库</h3><p>首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起<br><img src=\"http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建coding项目\"></p>\n<h3 id=\"将hexo博客同步到新创建的仓库中\"><a href=\"#将hexo博客同步到新创建的仓库中\" class=\"headerlink\" title=\"将hexo博客同步到新创建的仓库中\"></a>将hexo博客同步到新创建的仓库中</h3><p>第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上<br><img src=\"http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"自己的ssh公钥\"><br><img src=\"http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"coding中贴入ssh\"><br>在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  message: [message]</div><div class=\"line\">  repo:</div><div class=\"line\">    github: &lt;repository url&gt;,[branch]</div><div class=\"line\">    gitcafe: &lt;repository url&gt;,[branch]</div></pre></td></tr></table></figure></p>\n<p>所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo:</div><div class=\"line\">    #github: git@github.com:sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">    github: https://github.com/sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">    coding: git@git.coding.net:cherry940326/cherry940326.git</div><div class=\"line\">    #coding: https://git.coding.net/cherry940326/cherry940326.git</div></pre></td></tr></table></figure></p>\n<p>完成之后在git bash 中输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh -T git@git.coding.net</div></pre></td></tr></table></figure></p>\n<p>如果得到如图提示就说明配置成功了<br><img src=\"http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置成功ssh\"><br>然后重新部署hexo就将代码上传至coding上了</p>\n<h3 id=\"设置coding的pages服务\"><a href=\"#设置coding的pages服务\" class=\"headerlink\" title=\"设置coding的pages服务\"></a>设置coding的pages服务</h3><p>将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了<br><img src=\"http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"找到pages\"><br><img src=\"http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"配置pages\"></p>\n<h3 id=\"设置域名解析\"><a href=\"#设置域名解析\" class=\"headerlink\" title=\"设置域名解析\"></a>设置域名解析</h3><p>然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：<br><img src=\"http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"域名解析\"></p>\n<hr>\n<p>至此就完成了将你的hexo编译的博客同时部署在github和coding上</p>\n<h1 id=\"多终端编辑hexo博客\"><a href=\"#多终端编辑hexo博客\" class=\"headerlink\" title=\"多终端编辑hexo博客\"></a>多终端编辑hexo博客</h1><p>之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。</p>\n<blockquote>\n<p>更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：<a href=\"http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\" target=\"_blank\" rel=\"external\">http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/</a></p>\n<h2 id=\"创建Hexo分支\"><a href=\"#创建Hexo分支\" class=\"headerlink\" title=\"创建Hexo分支\"></a>创建Hexo分支</h2><p>创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）</p>\n<h2 id=\"删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\"><a href=\"#删除文件夹内原有的-git缓存文件夹并编辑-gitignore文件\" class=\"headerlink\" title=\"删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\"></a>删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件</h2><p>因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。<strong>.git文件夹被删除后整个文件对应的git仓库状态也会被清空</strong>)<br>.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/.deploy_git</div><div class=\"line\">/public  </div><div class=\"line\">/_config.yml</div></pre></td></tr></table></figure></p>\n<p>.deploy_git是hexo默认的.git配置文件夹，不需要同步<br>public内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多<br>即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 </p>\n<h2 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h2><p>然后我们再初始化仓库，重新对我们的代码进行版本控制<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin &lt;server&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p><code>&lt;server&gt;</code>是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端</p>\n<h2 id=\"将博客源文件上传至Hexo分支\"><a href=\"#将博客源文件上传至Hexo分支\" class=\"headerlink\" title=\"将博客源文件上传至Hexo分支\"></a>将博客源文件上传至Hexo分支</h2><p>依次执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit -m &quot;...&quot;</div><div class=\"line\">git push origin hexo</div></pre></td></tr></table></figure></p>\n<p>提交网站相关的文件； </p>\n<h2 id=\"对B电脑进行的操作\"><a href=\"#对B电脑进行的操作\" class=\"headerlink\" title=\"对B电脑进行的操作\"></a>对B电脑进行的操作</h2><p>假设B电脑现在没有我们的源文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">git init</div><div class=\"line\">git remote add origin &lt;server&gt; #将本地文件和云端仓库映射起来。</div><div class=\"line\">git fetch --all</div><div class=\"line\">git reset --hard origin/master</div></pre></td></tr></table></figure></p>\n<h2 id=\"日常改动\"><a href=\"#日常改动\" class=\"headerlink\" title=\"日常改动\"></a>日常改动</h2><p>平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~</p>\n<ol>\n<li>依次执行git add .、git commit -m “…”、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；</li>\n<li>然后才执行hexo g -d发布网站到master分支上。<h1 id=\"使用gulp压缩你的代码\"><a href=\"#使用gulp压缩你的代码\" class=\"headerlink\" title=\"使用gulp压缩你的代码\"></a>使用gulp压缩你的代码</h1>当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~<h2 id=\"什么是gulp\"><a href=\"#什么是gulp\" class=\"headerlink\" title=\"什么是gulp\"></a>什么是gulp</h2>在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。<br>gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。<blockquote>\n<p>能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。</p>\n</blockquote>\n</li>\n</ol>\n<p>既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~</p>\n<h3 id=\"npm小知识\"><a href=\"#npm小知识\" class=\"headerlink\" title=\"npm小知识\"></a>npm小知识</h3><p>npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）</p>\n<p>####使用npm安装插件：<code>npm install &lt;name&gt; [g] [--save -dev]</code></p>\n<ul>\n<li><code>&lt;name&gt;</code>:node 插件名称</li>\n<li><code>-g</code>:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：<code>C:\\Users\\Administrator\\AppData\\Roaming\\npm</code>;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的<code>node_modules</code>文件夹</li>\n<li><code>--save</code>：将配置信息保存在node项目配置文件<code>package.json</code>中</li>\n<li><code>-dev</code>：保存至<code>package.json</code> 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~</li>\n<li>为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是<code>npm install</code>，就可以下载<code>package.json</code> 下所有需要的包。<code>npm install --production</code>则只下载dependencies下的包<h4 id=\"使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\"><a href=\"#使用npm卸载插件：npm-unstall-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"使用npm卸载插件：npm unstall &lt;name&gt; [-g] [--save-dev]\"></a>使用npm卸载插件：<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code></h4></li>\n<li>在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用<code>npm unstall &lt;name&gt; [-g] [--save-dev]</code> 命令</li>\n<li>删除全部插件:<code>rimraf node_modules</code>（首先你需要先安装rimraf 插件）<h4 id=\"更新npm插件：npm-update-lt-name-gt-g-save-dev\"><a href=\"#更新npm插件：npm-update-lt-name-gt-g-save-dev\" class=\"headerlink\" title=\"更新npm插件：npm update &lt;name&gt; [g] [--save-dev]\"></a>更新npm插件：<code>npm update &lt;name&gt; [g] [--save-dev]</code></h4><h3 id=\"使用cnpm\"><a href=\"#使用cnpm\" class=\"headerlink\" title=\"使用cnpm\"></a>使用cnpm</h3>什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~<blockquote>\n<p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。</p>\n</blockquote>\n</li>\n</ul>\n<p>cnpm 官网地址：<a href=\"http://npm.taobao.org；\" target=\"_blank\" rel=\"external\">http://npm.taobao.org；</a><br>安装命令为<code>npm install cnpm -g --registry=https://registry.npm.taobao.org</code></p>\n<blockquote>\n<p>注意：安装完后最好查看其版本号<code>cnpm -v</code>或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；</p>\n<h2 id=\"全局安装gulp\"><a href=\"#全局安装gulp\" class=\"headerlink\" title=\"全局安装gulp\"></a>全局安装gulp</h2><p>言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码<br><code>npm install gulp -g</code>,然后<code>npm -v</code> 查看版本号就可以知道我们是不是安装成功了~<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！</p>\n<h2 id=\"新建package-json\"><a href=\"#新建package-json\" class=\"headerlink\" title=\"新建package.json\"></a>新建package.json</h2><p>使用<code>npm init</code>就可以创建package.json文件<br><img src=\"http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"创建package.json文件\">，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</div><div class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</div><div class=\"line\">  &quot;private&quot;: true,</div><div class=\"line\">  &quot;hexo&quot;: &#123;</div><div class=\"line\">    &quot;version&quot;: &quot;3.2.2&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;dependencies&quot;: &#123;</div><div class=\"line\">    &quot;gulp&quot;: &quot;^3.9.1&quot;,</div><div class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</div><div class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</div><div class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</div><div class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</div><div class=\"line\">    &quot;hexo&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;hexo-baidu-url-submit&quot;: &quot;0.0.5&quot;,</div><div class=\"line\">    &quot;hexo-deployer-git&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^0.1.4&quot;,</div><div class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;,</div><div class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;,</div><div class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-generator-sitemap&quot;: &quot;^1.1.2&quot;,</div><div class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^0.2.10&quot;,</div><div class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^0.3.1&quot;,</div><div class=\"line\">    &quot;hexo-server&quot;: &quot;^0.2.0&quot;,</div><div class=\"line\">    &quot;hexo-util&quot;: &quot;^0.6.0&quot;,</div><div class=\"line\">    &quot;hexo-wordcount&quot;: &quot;^2.0.1&quot;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  &quot;devDependencies&quot;: &#123;</div><div class=\"line\">    &quot;gulp-babel&quot;: &quot;^6.1.2&quot;,</div><div class=\"line\">    &quot;gulp-clean&quot;: &quot;^0.3.2&quot;,</div><div class=\"line\">    &quot;hexo-generator-baidu-sitemap&quot;: &quot;^0.1.2&quot;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"本地安装gulp插件\"><a href=\"#本地安装gulp插件\" class=\"headerlink\" title=\"本地安装gulp插件\"></a>本地安装gulp插件</h2><p>在你的Hexo目录下右键<code>git bash here</code>然后执行<code>npm install &lt;name&gt; --save</code>,和gulp有关的包名称有以下几个，只需将<code>&lt;name&gt;</code>替换一下就好~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;gulp&quot;: &quot;^3.9.1&quot;,</div><div class=\"line\">    &quot;gulp-htmlclean&quot;: &quot;^2.7.14&quot;,</div><div class=\"line\">    &quot;gulp-htmlmin&quot;: &quot;^3.0.0&quot;,</div><div class=\"line\">    &quot;gulp-imagemin&quot;: &quot;^3.2.0&quot;,</div><div class=\"line\">    &quot;gulp-minify-css&quot;: &quot;^1.2.4&quot;,</div><div class=\"line\">    &quot;gulp-uglify&quot;: &quot;^2.1.2&quot;,</div></pre></td></tr></table></figure></p>\n<p>聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中<code>dependencies</code>下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~</p>\n<h2 id=\"建立gulp-js\"><a href=\"#建立gulp-js\" class=\"headerlink\" title=\"建立gulp.js\"></a>建立gulp.js</h2><p>gulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）<br>我的gulp.js文件如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var minifycss = require(&apos;gulp-minify-css&apos;);</div><div class=\"line\">var uglify = require(&apos;gulp-uglify&apos;);</div><div class=\"line\">var htmlmin = require(&apos;gulp-htmlmin&apos;);</div><div class=\"line\">var htmlclean = require(&apos;gulp-htmlclean&apos;);</div><div class=\"line\"></div><div class=\"line\">// 获取 gulp-imagemin 模块</div><div class=\"line\">var imagemin = require(&apos;gulp-imagemin&apos;)</div><div class=\"line\"></div><div class=\"line\">// 压缩 public 目录 css</div><div class=\"line\">gulp.task(&apos;minify-css&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&apos;./public/**/*.css&apos;)</div><div class=\"line\">        .pipe(minifycss())</div><div class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\">// 压缩 public 目录 html</div><div class=\"line\">gulp.task(&apos;minify-html&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&apos;./public/**/*.html&apos;)</div><div class=\"line\">        .pipe(htmlclean())</div><div class=\"line\">        .pipe(htmlmin(&#123;</div><div class=\"line\">            removeComments: true,  //清除HTML注释</div><div class=\"line\">            collapseWhitespace: true,  //压缩HTML</div><div class=\"line\">            collapseBooleanAttributes: true,  //省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;</div><div class=\"line\">            removeEmptyAttributes: true,  //删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</div><div class=\"line\">            removeScriptTypeAttributes: true,  //删除&lt;script&gt;的type=&quot;text/javascript&quot;</div><div class=\"line\">            removeStyleLinkTypeAttributes: true,  //删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</div><div class=\"line\">            minifyJS: true,  //压缩页面JS</div><div class=\"line\">            minifyCSS: true  //压缩页面CSS</div><div class=\"line\">        &#125;))</div><div class=\"line\">        .on(&apos;error&apos;, function(err) &#123;</div><div class=\"line\">            console.log(&apos;html Error!&apos;, err.message);</div><div class=\"line\">            this.end();</div><div class=\"line\">        &#125;)</div><div class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;))</div><div class=\"line\">&#125;);</div><div class=\"line\">// 压缩 public/js 目录 js</div><div class=\"line\">gulp.task(&apos;minify-js&apos;, function() &#123;</div><div class=\"line\">    return gulp.src(&apos;./public/**/*.js&apos;)</div><div class=\"line\">        .pipe(uglify())</div><div class=\"line\">        .pipe(gulp.dest(&apos;./public&apos;));</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 压缩图片任务</div><div class=\"line\">// 在命令行输入 gulp images 启动此任务</div><div class=\"line\">gulp.task(&apos;images&apos;, function () &#123;</div><div class=\"line\">    // 1. 找到图片</div><div class=\"line\">    gulp.src(&apos;./photos/*.*&apos;)</div><div class=\"line\">    // 2. 压缩图片</div><div class=\"line\">        .pipe(imagemin(&#123;</div><div class=\"line\">            progressive: true</div><div class=\"line\">        &#125;))</div><div class=\"line\">        // 3. 另存图片</div><div class=\"line\">        .pipe(gulp.dest(&apos;dist/images&apos;))</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// 执行 gulp 命令时执行的任务</div><div class=\"line\">gulp.task(&apos;build&apos;, [</div><div class=\"line\">    &apos;minify-html&apos;,&apos;minify-css&apos;,&apos;minify-js&apos;,&apos;images&apos;,</div><div class=\"line\">]);</div></pre></td></tr></table></figure></p>\n<h2 id=\"执行gulp：gulp-build\"><a href=\"#执行gulp：gulp-build\" class=\"headerlink\" title=\"执行gulp：gulp build\"></a>执行gulp：<code>gulp build</code></h2><p><img src=\"http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"gulpbuild执行结果\"></p>\n<h3 id=\"在git-bash中执行\"><a href=\"#在git-bash中执行\" class=\"headerlink\" title=\"在git bash中执行\"></a>在git bash中执行</h3><p>在git bash中直接输入命令<code>gulp build</code>就可以，这个<code>gulp build</code>是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字</p>\n<h3 id=\"在webstorm中执行\"><a href=\"#在webstorm中执行\" class=\"headerlink\" title=\"在webstorm中执行\"></a>在webstorm中执行</h3><p>webstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp<br><img src=\"http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"在webstorm中执行gulp\"></p>\n<h1 id=\"增加七牛图床\"><a href=\"#增加七牛图床\" class=\"headerlink\" title=\"增加七牛图床\"></a>增加七牛图床</h1><p>增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~</p>\n<h2 id=\"注册七牛\"><a href=\"#注册七牛\" class=\"headerlink\" title=\"注册七牛\"></a>注册七牛</h2><p>万年不变的第一步，注册。官网：<a href=\"https://portal.qiniu.com/signup?code=3lnd6wvc103f6\" target=\"_blank\" rel=\"external\">七牛云</a></p>\n<h2 id=\"上传资源\"><a href=\"#上传资源\" class=\"headerlink\" title=\"上传资源\"></a>上传资源</h2><p>在登录成功之后，点击对象存储<br><img src=\"http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"><br>上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~<br><img src=\"http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"上传资源至七牛\"></p>\n<h3 id=\"添加水印\"><a href=\"#添加水印\" class=\"headerlink\" title=\"添加水印\"></a>添加水印</h3><p>使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。<br>七牛可以对上传的图片添加图片样式<br><img src=\"http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。<br><img src=\"http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"增加图片样式\"><br>在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\" target=\"_blank\" rel=\"external\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片</a><br><img src=\"http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在该地址后加上我设置的连接符,”-“和我的样式名称：<a href=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\" target=\"_blank\" rel=\"external\">http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印</a><br><img src=\"http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj63j7zux0009vvxi0ao41554","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zvi000ivvxiotuk05fx"},{"post_id":"cj63j7ztz0001vvxipfn26p7q","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zvs000mvvxixlqw7d6h"},{"post_id":"cj63j7zv4000bvvxiail0rbsy","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zvw000pvvxinn6jiypp"},{"post_id":"cj63j7zvd000gvvxitmtwtxir","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zw3000tvvxidtqxq2oi"},{"post_id":"cj63j7zu70003vvxipvljqhw7","category_id":"cj63j7zv8000cvvxiiw46ztlu","_id":"cj63j7zw7000xvvxiar0a8ger"},{"post_id":"cj63j7zvk000jvvxi8idimxfg","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zwa000zvvxiymwnoayt"},{"post_id":"cj63j7zvt000nvvxi2sbv2hjk","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zwd0012vvxibw733grb"},{"post_id":"cj63j7zuo0007vvxilgvmhfib","category_id":"cj63j7zvo000kvvxid04g2v3m","_id":"cj63j7zwi0015vvxi91uppedl"},{"post_id":"cj63j7zwb0011vvxijr4425tr","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zwn0018vvxiej2ywfsw"},{"post_id":"cj63j7zvx000qvvxi1rnpjll3","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zwq001bvvxij5gb1b58"},{"post_id":"cj63j7zwe0013vvxif8y76swv","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zwu001evvxi4t7gb1li"},{"post_id":"cj63j7zwi0016vvxiotnt93fy","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zwy001ivvxiqk14d4ev"},{"post_id":"cj63j7zw4000uvvxijtie5gxe","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zxb001mvvxiycqafdle"},{"post_id":"cj63j7zwo0019vvxiwx68fpfu","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zxe001pvvxii8z5o6th"},{"post_id":"cj63j7zw7000yvvxilr2h9yld","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zxg001uvvxi7knc08ph"},{"post_id":"cj63j7zxb001nvvxiwaympzom","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zxm001xvvxit6znmzcu"},{"post_id":"cj63j7zwr001cvvxiqmnhyg4w","category_id":"cj63j7zwx001hvvxi9s8ytiol","_id":"cj63j7zxq0022vvxij5cobjdf"},{"post_id":"cj63j7zxe001qvvxitx7eb1tp","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zxs0025vvxipk953ppi"},{"post_id":"cj63j7zxi001vvvxi2vbsnn9t","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zxv0029vvxitdmw6tbm"},{"post_id":"cj63j7zwv001fvvxizj7fgfxz","category_id":"cj63j7zxf001rvvxig9673xsg","_id":"cj63j7zy1002dvvxi827qpd6g"},{"post_id":"cj63j7zwy001jvvxiaazbgfjb","category_id":"cj63j7zxf001rvvxig9673xsg","_id":"cj63j7zy3002hvvxilu3nns80"},{"post_id":"cj63j7zxx002bvvxihzkfg190","category_id":"cj63j7zxu0028vvxii8sc3ozp","_id":"cj63j7zy6002lvvxihpcibseh"},{"post_id":"cj63j7zy3002jvvxiyyb3ujmj","category_id":"cj63j7zv8000cvvxiiw46ztlu","_id":"cj63j7zy9002rvvxi10t06g4f"},{"post_id":"cj63j7zxq0023vvxif61444h2","category_id":"cj63j7zxu0028vvxii8sc3ozp","_id":"cj63j7zyb002uvvxi4dv7jcs1"},{"post_id":"cj63j7zxs0026vvxiddpw6hu9","category_id":"cj63j7zy7002nvvxi4g2a8zcm","_id":"cj63j7zyc002yvvxiwfic5ihg"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","category_id":"cj63j7zuj0005vvxiz4eckxb5","_id":"cj63j7zyd0031vvxi4qh124wt"},{"post_id":"cj63j7zxn001yvvxigao7y68x","category_id":"cj63j7zxu0028vvxii8sc3ozp","_id":"cj63j7zyd0033vvxiqcb5o3rw"},{"post_id":"cj63j7zxn001yvvxigao7y68x","category_id":"cj63j7zyb002vvvxij4g0vb36","_id":"cj63j7zyf0037vvxiziewb091"},{"post_id":"cj63j7zy2002evvxiy3uec9w0","category_id":"cj63j7zw6000wvvxitbj9cms0","_id":"cj63j7zyg0038vvxice2fmag9"},{"post_id":"cj63j7zy2002evvxiy3uec9w0","category_id":"cj63j7zyc002zvvxipbwycib3","_id":"cj63j7zyh003cvvxithtoibfo"},{"post_id":"cj63j7zy6002mvvxi2cbmf84b","category_id":"cj63j7zye0036vvxiekssmkv5","_id":"cj63j7zyj003fvvxid6hiync7"},{"post_id":"cj63j7zy7002pvvxiccyrit5p","category_id":"cj63j7zxu0028vvxii8sc3ozp","_id":"cj63j7zyk003hvvxim1j5hplw"},{"post_id":"cj63j7zy7002pvvxiccyrit5p","category_id":"cj63j7zyb002vvvxij4g0vb36","_id":"cj63j7zyl003jvvxiv05b7u6c"}],"PostTag":[{"post_id":"cj63j7zux0009vvxi0ao41554","tag_id":"cj63j7zun0006vvxidmmw5473","_id":"cj63j7zvc000fvvxi04c3scnd"},{"post_id":"cj63j7ztz0001vvxipfn26p7q","tag_id":"cj63j7zun0006vvxidmmw5473","_id":"cj63j7zvw000ovvxipyky4r1w"},{"post_id":"cj63j7ztz0001vvxipfn26p7q","tag_id":"cj63j7zv8000dvvxiww96bpwd","_id":"cj63j7zvz000rvvxivvr926hc"},{"post_id":"cj63j7zu70003vvxipvljqhw7","tag_id":"cj63j7zvq000lvvxian1pxo5x","_id":"cj63j7zw5000vvvxivpwv5btk"},{"post_id":"cj63j7zuo0007vvxilgvmhfib","tag_id":"cj63j7zw2000svvxir03z7y5m","_id":"cj63j7zwx001gvvxi3709rgog"},{"post_id":"cj63j7zuo0007vvxilgvmhfib","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zx9001kvvxi2jyc2s5u"},{"post_id":"cj63j7zuo0007vvxilgvmhfib","tag_id":"cj63j7zwk0017vvxiifua2qkw","_id":"cj63j7zxd001ovvxixiv1720g"},{"post_id":"cj63j7zv4000bvvxiail0rbsy","tag_id":"cj63j7zwu001dvvxiupmnui02","_id":"cj63j7zxf001svvxica1dru6h"},{"post_id":"cj63j7zxb001nvvxiwaympzom","tag_id":"cj63j7zun0006vvxidmmw5473","_id":"cj63j7zxm001wvvxiii121hia"},{"post_id":"cj63j7zvd000gvvxitmtwtxir","tag_id":"cj63j7zwu001dvvxiupmnui02","_id":"cj63j7zxo001zvvxikxes45cx"},{"post_id":"cj63j7zxe001qvvxitx7eb1tp","tag_id":"cj63j7zwu001dvvxiupmnui02","_id":"cj63j7zxr0024vvxi2m24ogh4"},{"post_id":"cj63j7zxi001vvvxi2vbsnn9t","tag_id":"cj63j7zun0006vvxidmmw5473","_id":"cj63j7zxt0027vvxikia3o65m"},{"post_id":"cj63j7zvk000jvvxi8idimxfg","tag_id":"cj63j7zwu001dvvxiupmnui02","_id":"cj63j7zy1002cvvxi3ba4xxgw"},{"post_id":"cj63j7zvt000nvvxi2sbv2hjk","tag_id":"cj63j7zun0006vvxidmmw5473","_id":"cj63j7zy3002fvvxi1x6817se"},{"post_id":"cj63j7zvt000nvvxi2sbv2hjk","tag_id":"cj63j7zxp0021vvxif36fue0b","_id":"cj63j7zy5002kvvxiyqnpsbv5"},{"post_id":"cj63j7zy3002jvvxiyyb3ujmj","tag_id":"cj63j7zvq000lvvxian1pxo5x","_id":"cj63j7zy7002ovvxig1y5kem2"},{"post_id":"cj63j7zvx000qvvxi1rnpjll3","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zy9002svvxijhm665tr"},{"post_id":"cj63j7zvx000qvvxi1rnpjll3","tag_id":"cj63j7zy3002ivvxiy9ol4gpf","_id":"cj63j7zyb002wvvxih77qkkoa"},{"post_id":"cj63j7zw4000uvvxijtie5gxe","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zyd0032vvxi8k84e8hf"},{"post_id":"cj63j7zw4000uvvxijtie5gxe","tag_id":"cj63j7zy3002ivvxiy9ol4gpf","_id":"cj63j7zyd0034vvxiz5b5si2w"},{"post_id":"cj63j7zw7000yvvxilr2h9yld","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zyh003bvvxiloj4g3xy"},{"post_id":"cj63j7zw7000yvvxilr2h9yld","tag_id":"cj63j7zy3002ivvxiy9ol4gpf","_id":"cj63j7zyi003dvvxiftcsjuyj"},{"post_id":"cj63j7zwb0011vvxijr4425tr","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zyk003ivvxi0kpveubv"},{"post_id":"cj63j7zwb0011vvxijr4425tr","tag_id":"cj63j7zy3002ivvxiy9ol4gpf","_id":"cj63j7zyl003kvvxirvmo9ss2"},{"post_id":"cj63j7zwe0013vvxif8y76swv","tag_id":"cj63j7zyk003gvvxiiljdx1bw","_id":"cj63j7zym003mvvxitsc7738l"},{"post_id":"cj63j7zwe0013vvxif8y76swv","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zym003nvvxivt6dix2x"},{"post_id":"cj63j7zwi0016vvxiotnt93fy","tag_id":"cj63j7zyk003gvvxiiljdx1bw","_id":"cj63j7zym003pvvxiw7eyr0ti"},{"post_id":"cj63j7zwi0016vvxiotnt93fy","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zyn003qvvxi3a9e6ub0"},{"post_id":"cj63j7zwo0019vvxiwx68fpfu","tag_id":"cj63j7zyk003gvvxiiljdx1bw","_id":"cj63j7zyn003svvxi1f1b1t45"},{"post_id":"cj63j7zwo0019vvxiwx68fpfu","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zyn003tvvxiup5u8848"},{"post_id":"cj63j7zwr001cvvxiqmnhyg4w","tag_id":"cj63j7zyn003rvvxivgoucgyc","_id":"cj63j7zyn003vvvxiv541hu03"},{"post_id":"cj63j7zwv001fvvxizj7fgfxz","tag_id":"cj63j7zyn003uvvxiuumasrnu","_id":"cj63j7zyo003xvvxis6iclwjv"},{"post_id":"cj63j7zwy001jvvxiaazbgfjb","tag_id":"cj63j7zyn003uvvxiuumasrnu","_id":"cj63j7zyo003zvvxi6njdhycf"},{"post_id":"cj63j7zxn001yvvxigao7y68x","tag_id":"cj63j7zyo003yvvxizztedu2b","_id":"cj63j7zyp0042vvxiwbvr6jc7"},{"post_id":"cj63j7zxn001yvvxigao7y68x","tag_id":"cj63j7zyo0040vvxi1wy12zk9","_id":"cj63j7zyp0043vvxicn8s6u0q"},{"post_id":"cj63j7zxq0023vvxif61444h2","tag_id":"cj63j7zyo0041vvxiwrhyr04a","_id":"cj63j7zyr0048vvxijwbf4y9m"},{"post_id":"cj63j7zxq0023vvxif61444h2","tag_id":"cj63j7zyp0044vvxiaf7ata5a","_id":"cj63j7zyr0049vvxiyi32fews"},{"post_id":"cj63j7zxq0023vvxif61444h2","tag_id":"cj63j7zyq0045vvxijdfhfnxe","_id":"cj63j7zyr004bvvxih5h67mbj"},{"post_id":"cj63j7zxq0023vvxif61444h2","tag_id":"cj63j7zyq0046vvxirw4ixr2p","_id":"cj63j7zyr004cvvxi2hf2erk1"},{"post_id":"cj63j7zxs0026vvxiddpw6hu9","tag_id":"cj63j7zyq0047vvxiaamcxndu","_id":"cj63j7zyr004evvxi311y20ln"},{"post_id":"cj63j7zxx002bvvxihzkfg190","tag_id":"cj63j7zyo003yvvxizztedu2b","_id":"cj63j7zys004gvvxi33mdictf"},{"post_id":"cj63j7zxx002bvvxihzkfg190","tag_id":"cj63j7zyr004dvvxiw69lxoys","_id":"cj63j7zyt004hvvxibpxzgw95"},{"post_id":"cj63j7zy2002evvxiy3uec9w0","tag_id":"cj63j7zwb0010vvxiowbxbzu7","_id":"cj63j7zyu004kvvxigmd0evws"},{"post_id":"cj63j7zy2002evvxiy3uec9w0","tag_id":"cj63j7zys004fvvxindwud7nt","_id":"cj63j7zyu004lvvxix2hdlwag"},{"post_id":"cj63j7zy2002evvxiy3uec9w0","tag_id":"cj63j7zyt004ivvxi49ahzmqv","_id":"cj63j7zyu004nvvxi8xqs5g9o"},{"post_id":"cj63j7zy6002mvvxi2cbmf84b","tag_id":"cj63j7zyo0041vvxiwrhyr04a","_id":"cj63j7zyx004rvvxiwpxm9tli"},{"post_id":"cj63j7zy6002mvvxi2cbmf84b","tag_id":"cj63j7zyu004mvvxiw1movjq1","_id":"cj63j7zyx004svvxiymydj07n"},{"post_id":"cj63j7zy6002mvvxi2cbmf84b","tag_id":"cj63j7zyv004ovvxi4nayg6su","_id":"cj63j7zyy004uvvxiy5cemqrg"},{"post_id":"cj63j7zy6002mvvxi2cbmf84b","tag_id":"cj63j7zyw004pvvxilw0a1n7a","_id":"cj63j7zyz004vvvxinqp1dox2"},{"post_id":"cj63j7zy7002pvvxiccyrit5p","tag_id":"cj63j7zyo003yvvxizztedu2b","_id":"cj63j7zz1004yvvxifzbrjh3c"},{"post_id":"cj63j7zy7002pvvxiccyrit5p","tag_id":"cj63j7zyr004dvvxiw69lxoys","_id":"cj63j7zz1004zvvxiawxex1h9"},{"post_id":"cj63j7zy7002pvvxiccyrit5p","tag_id":"cj63j7zyo0040vvxi1wy12zk9","_id":"cj63j7zz10051vvxip6se9h4r"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","tag_id":"cj63j7zz0004xvvxiu6sipjjn","_id":"cj63j7zz20056vvxissx76k0c"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","tag_id":"cj63j7zz10050vvxibwxxu2nt","_id":"cj63j7zz20057vvxi517xrkur"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","tag_id":"cj63j7zz10052vvxincvh7k1k","_id":"cj63j7zz20058vvxifdm739yn"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","tag_id":"cj63j7zz20053vvxigv8pizaq","_id":"cj63j7zz20059vvxi2fta3frx"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","tag_id":"cj63j7zz20054vvxiecsf1o3m","_id":"cj63j7zz3005avvxi0oah7c0i"},{"post_id":"cj63j7zy9002tvvxi8tanpzh3","tag_id":"cj63j7zz20055vvxiagrpvpu3","_id":"cj63j7zz3005bvvximlef5h0r"}],"Tag":[{"name":"git","_id":"cj63j7zun0006vvxidmmw5473"},{"name":"实战经验","_id":"cj63j7zv8000dvvxiww96bpwd"},{"name":"脑子里的小想法","_id":"cj63j7zvq000lvvxian1pxo5x"},{"name":"面试","_id":"cj63j7zw2000svvxir03z7y5m"},{"name":"js","_id":"cj63j7zwb0010vvxiowbxbzu7"},{"name":"知识点","_id":"cj63j7zwk0017vvxiifua2qkw"},{"name":"hexo","_id":"cj63j7zwu001dvvxiupmnui02"},{"name":"hexo教程","_id":"cj63j7zxp0021vvxif36fue0b"},{"name":"js设计模式","_id":"cj63j7zy3002ivvxiy9ol4gpf"},{"name":"js模块化","_id":"cj63j7zyk003gvvxiiljdx1bw"},{"name":"调试","_id":"cj63j7zyn003rvvxivgoucgyc"},{"name":"react","_id":"cj63j7zyn003uvvxiuumasrnu"},{"name":"html5","_id":"cj63j7zyo003yvvxizztedu2b"},{"name":"canvas","_id":"cj63j7zyo0040vvxi1wy12zk9"},{"name":"css","_id":"cj63j7zyo0041vvxiwrhyr04a"},{"name":"开发规范","_id":"cj63j7zyp0044vvxiaf7ata5a"},{"name":"js规范","_id":"cj63j7zyq0045vvxijdfhfnxe"},{"name":"jshint","_id":"cj63j7zyq0046vvxirw4ixr2p"},{"name":"gulp","_id":"cj63j7zyq0047vvxiaamcxndu"},{"name":"前端","_id":"cj63j7zyr004dvvxiw69lxoys"},{"name":"面向对象编程","_id":"cj63j7zys004fvvxindwud7nt"},{"name":"软件工程","_id":"cj63j7zyt004ivvxi49ahzmqv"},{"name":"checkbox优化","_id":"cj63j7zyu004mvvxiw1movjq1"},{"name":"input优化","_id":"cj63j7zyv004ovvxi4nayg6su"},{"name":"radio优化","_id":"cj63j7zyw004pvvxilw0a1n7a"},{"name":"hexo高阶教程","_id":"cj63j7zz0004xvvxiu6sipjjn"},{"name":"hexo+gulp","_id":"cj63j7zz10050vvxibwxxu2nt"},{"name":"hexo+七牛","_id":"cj63j7zz10052vvxincvh7k1k"},{"name":"hexo百度收录","_id":"cj63j7zz20053vvxigv8pizaq"},{"name":"hexo百度统计","_id":"cj63j7zz20054vvxiecsf1o3m"},{"name":"hexo seo","_id":"cj63j7zz20055vvxiagrpvpu3"}]}}