{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/3b3acd9d45730fef3202adcb4f2057e8.txt","path":"3b3acd9d45730fef3202adcb4f2057e8.txt","modified":1,"renderable":0},{"_id":"source/sogousiteverification.txt","path":"sogousiteverification.txt","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechat.jpg","path":"images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a30c042bd030112ab9dfedc56324efb2cf410963","modified":1498916667000},{"_id":"source/3b3acd9d45730fef3202adcb4f2057e8.txt","hash":"002d57312c514146f5043007edf4c616fcefe11a","modified":1498916667000},{"_id":"source/google777e1fe2e2ea67b4.html","hash":"a79340f3b9aa87ada8489544bbad4fb735662739","modified":1498916667000},{"_id":"source/sogousiteverification.txt","hash":"964b8effb254c2740e2ead53661b2b803585327e","modified":1498916667000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1498916667000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1498916667000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1498916667000},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1498916667000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1498916667000},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1498916667000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1498916667000},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1498916667000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1498916667000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1498916667000},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1498916667000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1498916667000},{"_id":"themes/next/_config.yml","hash":"0f0ea79153a11257f8327d35a880667a6cb3236c","modified":1498916667000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1498916667000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1498916667000},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1498916667000},{"_id":"source/_posts/Freedom-of-self-discipline.md","hash":"13088affd9aef2e7d09fc48548a2f4a954d39cf9","modified":1498916667000},{"_id":"source/_posts/ErrorReportingInGitUse.md","hash":"42c73884c13101f978d4c7e8dd7ae52c3e8014b4","modified":1498916667000},{"_id":"source/_posts/Front-interview.md","hash":"2ad18cf60315e940894155f315b822471e2069f1","modified":1498916667000},{"_id":"source/_posts/GitCommands.md","hash":"88097c534bb7ec6fcdd8a276bef3b684388f646c","modified":1498916667000},{"_id":"source/_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","hash":"9ecd5f901545c6cfc3e3fef5d5c712fa321ed2f8","modified":1498916667000},{"_id":"source/_posts/Hexo-advanced.md","hash":"9b3b46a5d5ee98ebf3e5526000d38a2681c21b15","modified":1498916667000},{"_id":"source/_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","hash":"ace1f437beb46fbf0ea4c857cda3d6a9f38c8af0","modified":1498916667000},{"_id":"source/_posts/Hexo-insert-music-share-comment-tab-search.md","hash":"06496f27081eed6b5d1fc2d72de07a3201fda204","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern.md","hash":"353402effdc4eae807b989d19b91a90603004f42","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern2modular-mode.md","hash":"54d300ab7470e813f3c147434bab0235d0c43bb7","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern3prototype-model.md","hash":"7f193b207d150b1d84a3ebbd7bfce64a12d61a19","modified":1498916667000},{"_id":"source/_posts/JavaScript-Design-Pattern4factory-mode.md","hash":"4f1d1146f4b592b25deb8a4ac4e806273b1cde52","modified":1498916667000},{"_id":"source/_posts/JavaScript-modular-programming2JSmodulardevelopmenthistory.md","hash":"a84b5f3248fad2b75bb6450f815dbe69c8ad13e9","modified":1498916667000},{"_id":"source/_posts/Javascript-modular-programming1module-writing.md","hash":"f6238a0c77bb95aae4d8a9b3ced72f6b25d1c0b0","modified":1498916667000},{"_id":"source/_posts/Javascript-modular-programming3requirejs-use.md","hash":"0c22c075420f6972c10888bcaa61ff8a7cf735a2","modified":1498916667000},{"_id":"source/_posts/React-first.md","hash":"8bd22082972f38e83286b87b4b92c4650ac93ec0","modified":1498916667000},{"_id":"source/_posts/Upload-project-to-GitHub.md","hash":"904ce2833e7124fae6bfc2231d46fbc2974a377c","modified":1498916667000},{"_id":"source/_posts/Mobile-terminal-debugging-method.md","hash":"2170c55673fc82b807ecb573ada5048216146081","modified":1498916667000},{"_id":"source/_posts/Use-Gitpagehexo-to-develop-their-own-blog.md","hash":"0e9cf8ee6632879dfb7919038e984c92c0de3edc","modified":1498916667000},{"_id":"source/_posts/React2understanding-react-with-examples.md","hash":"52b581265d12b0e10c39fe01ac0bd482c8e1ad26","modified":1498916667000},{"_id":"source/_posts/Use-webstorm-to-connect-GitHub.md","hash":"10eed2d5c35acce9eb2471a9053ec50321a7e349","modified":1498916667000},{"_id":"source/_posts/css-checkbox-input-radio.md","hash":"10df74791c697521677d16c279d9c3e1b0942bf1","modified":1498916667000},{"_id":"source/_posts/gulp（一）.md","hash":"2ae07a1c987e9d1edd725ae9cf322ed45c3fb6b3","modified":1498916667000},{"_id":"source/_posts/developing-guideline.md","hash":"363bb425e6d738e11f2a9fd3a87dfb83640f6260","modified":1498916667000},{"_id":"source/_posts/html5drag.md","hash":"799d7623d238728d509d8c2538f9e5ea297a99c8","modified":1498916667000},{"_id":"source/_posts/hexo-3.md","hash":"6949ed3d7acd3434ee775ceb475b493b8b52ab5e","modified":1498916667000},{"_id":"source/_posts/html5zhihubg.md","hash":"c7c30d582f4e50347ea4876ca2e5ee552673642e","modified":1498916667000},{"_id":"source/about/index.html","hash":"81fc07f5c8e10f586da0d826e424e9e8f29600eb","modified":1498916667000},{"_id":"source/about/index2.md","hash":"996cc654467d2e9eee6d170e718b7521b5c8bd63","modified":1498916667000},{"_id":"source/categories/index.md","hash":"4b55e192217c1738f5deac584deef9f3d4299c79","modified":1498916667000},{"_id":"source/life/index.md","hash":"5a6947d29439a9b11b63009615287c6401543f4a","modified":1498916667000},{"_id":"source/photo/index2.md","hash":"695f068279c81d79a6495d07e7f4b8b72d08ce49","modified":1498916667000},{"_id":"source/photo/index.html","hash":"f37d324b8075431bf22f1145a65da9ad02281b13","modified":1498916667000},{"_id":"source/tags/index.md","hash":"9c32323b2c39d8628153c3852139a311c82852b1","modified":1498916667000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1498916667000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"fdd63b77472612337309eb93ec415a059b90756b","modified":1498916667000},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1498916667000},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1498916667000},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1498916667000},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1498916667000},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1498916667000},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1498916667000},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1498916667000},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1498916667000},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1498916667000},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1498916667000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"c33d74d532238f5263b2422b9c572899a60baaf5","modified":1498916667000},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1498916667000},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1498916667000},{"_id":"themes/next/layout/_layout.swig","hash":"01bd294ac512d0994f5d56b10fe37d55cdae8ffd","modified":1498916667000},{"_id":"themes/next/layout/archive.swig","hash":"a1338223ebd1d9a2e1ddff8a961a0da9c3af8e43","modified":1498916667000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1498916667000},{"_id":"themes/next/layout/index.swig","hash":"bf095df5da3816a361e709cbaac9dd1fdc0637e3","modified":1498916667000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1498916667000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1498916667000},{"_id":"themes/next/layout/schedule.swig","hash":"234dc8c3b9e276e7811c69011efd5d560519ef19","modified":1498916667000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1498916667000},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1498916667000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1498916667000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1498916667000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1498916667000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1498916667000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498916667000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1498916667000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1498916667000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1498916667000},{"_id":"themes/next/layout/_macro/post.swig","hash":"03cb2a1facb054b8b8c425dffbda5d64b7c1e54b","modified":1498916667000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1498916667000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"5d4b6437301f19341581e145bb508720939ee469","modified":1498916667000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1498916667000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1498916667000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"1c7d3c975e499b9aa3119d6724b030b7b00fc87e","modified":1498916667000},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1498916667000},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1498916667000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1498916667000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1498916667000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1498916667000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1498916667000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1498916667000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1498916667000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1498916667000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1498916667000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1498916667000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1498916667000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1498916667000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1498916667000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1498916667000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1498916667000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1498916667000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1498916667000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1498916667000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1498916667000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1498916667000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1498916667000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1498916667000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1498916667000},{"_id":"themes/next/source/images/favicon.ico","hash":"a7700b5e6dd284b3eb00168b701b0e4c560fe108","modified":1498916667000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498916667000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1498916667000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1498916667000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1498916667000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1498916667000},{"_id":"themes/next/source/uploads/avatar.png","hash":"586b6e0b74ab8e3f13e242cf04398b660427c8fd","modified":1498916667000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1498916667000},{"_id":"themes/next/source/images/alipay.jpg","hash":"7d8b5bf7e11c690df75f3628b596f1a978d796a6","modified":1498916667000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1498916667000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1498916667000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1498916667000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1498916667000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1498916667000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1498916667000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1498916667000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"3358d11b9a26185a2d36c96049e4340e701646e4","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1498916667000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"abb92620197a16ed2c0775edf18a0f044a82256e","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1498916667000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1498916667000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1498916667000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"4bded56647d5935d6f1354fd83325bd1fad040a4","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1498916667000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1498916667000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1498916667000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1498916667000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1498916667000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1498916667000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1498916667000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1498916667000},{"_id":"themes/next/source/images/wechat.jpg","hash":"7feb355f496ec745e8a504c787ea865f2daa25f2","modified":1498916667000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1498916667000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1498916667000},{"_id":"themes/next/source/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1498916667000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1498916667000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1498916667000},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1498916667000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1498916667000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1498916667000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1498916667000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1498916667000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1498916667000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1498916667000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1498916667000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1498916667000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1498916667000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1498916667000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1498916667000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1498916667000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1498916667000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"740d37f428b8f4574a76fc95cc25e50e0565f45e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"c196401747019d389da09b7a0fe7f27e3a0ec01f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1498916667000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1498916667000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1498916667000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1498916667000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1498916667000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1498916667000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1498916667000}],"Category":[{"name":"随笔","_id":"cj4ldrqgg0005aaxi1plp7pke"},{"name":"git","_id":"cj4ldrqgv000caaxihxeuiozb"},{"name":"面试题库","_id":"cj4ldrqh5000laaxinuvfabek"},{"name":"js","_id":"cj4ldrqhv0014aaxinqgmv21s"},{"name":"react","_id":"cj4ldrqii0025aaxiztt84gnj"},{"name":"日积月累","_id":"cj4ldrqio002eaaxibcffbak4"},{"name":"css","_id":"cj4ldrqir002paaxi00kbepuy"},{"name":"gulp","_id":"cj4ldrqit002taaxic80au7ch"},{"name":"html","_id":"cj4ldrqiv002xaaxi66izw14e"},{"name":"html5","_id":"cj4ldrqiw0032aaxippccz8zd"},{"name":"开发规范","parent":"cj4ldrqiv002xaaxi66izw14e","_id":"cj4ldrqiy003aaaxi7mvc4yhx"},{"name":"canvas","parent":"cj4ldrqiw0032aaxippccz8zd","_id":"cj4ldrqiz003caaxin6doskdu"}],"Data":[],"Page":[{"layout":"false","_content":"google-site-verification: google777e1fe2e2ea67b4.html","source":"google777e1fe2e2ea67b4.html","raw":"layout: false\n---\ngoogle-site-verification: google777e1fe2e2ea67b4.html","date":"2017-07-01T13:44:27.000Z","updated":"2017-07-01T13:44:27.000Z","path":"google777e1fe2e2ea67b4.html","title":"","comments":1,"_id":"cj4ldrq9h0000aaxi18536n47"},{"layout":"false","_content":"\n<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\" />\n    <meta name=\"description\" content=\"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n很高兴大家能来到我的博客，首先说明我不是什么大牛，但是是想成为大牛的程序媛，梦想是去淘宝，但毕竟前面有“梦想”两个字\n现在任职于一家十八线的小公司，但是很热爱我的工作\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"about\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/about/index.html\">\n    <meta property=\"og:site_name\" content=\"Cherry's Blog\">\n    <meta property=\"og:description\" content=\"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n很高兴大家能来到我的博客，首先说明我不是什么大牛，但是是想成为大牛的程序媛，梦想是去淘宝，但毕竟前面有“梦想”两个字\n现在任职于一家十八线的小公司，但是很热爱我的工作\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/wechatme.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-05-26T15:25:50.514Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"about\">\n    <meta name=\"twitter:description\" content=\"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n很高兴大家能来到我的博客，首先说明我不是什么大牛，但是是想成为大牛的程序媛，梦想是去淘宝，但毕竟前面有“梦想”两个字\n现在任职于一家十八线的小公司，但是很热爱我的工作\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\">\n\n\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n\n\n\n    <link rel=\"canonical\" href=\"http://cherryblog.site/about/\"/>\n    <style>\n        a{\n            color:#fff\n        }\n    </style>\n\n\n\n\n    <title>\n\n\n\n        about | Cherry's Blog\n\n    </title>\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n\n\n\n\n\n\n<script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n        var hm = document.createElement(\"script\");\n        hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(hm, s);\n    })();\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"container sidebar-position-left  \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n        <a href=\"https://github.com/sunshine940326\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a>\n        <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n            <div class=\"site-meta \">\n\n\n                <div class=\"custom-logo-site-title\">\n                    <a href=\"/\"  class=\"brand\" rel=\"start\">\n                        <span class=\"logo-line-before\"><i></i></span>\n                        <span class=\"site-title\">Cherry's Blog</span>\n                        <span class=\"logo-line-after\"><i></i></span>\n                    </a>\n                </div>\n\n                <p class=\"site-subtitle\">To Be a Better Me</p>\n\n            </div>\n\n            <div class=\"site-nav-toggle\">\n                <button>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                </button>\n            </div>\n        </div>\n\n            <nav class=\"site-nav\">\n\n\n\n                <ul id=\"menu\" class=\"menu\">\n\n\n                    <li class=\"menu-item menu-item-home\">\n                        <a href=\"/\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n\n                            首页\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-categories\">\n                        <a href=\"/categories\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n\n                            分类\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-about\">\n                        <a href=\"/about\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n\n                            关于\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-archives\">\n                        <a href=\"/archives\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n\n                            归档\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-tags\">\n                        <a href=\"/tags\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n\n                            标签\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-life\">\n                        <a href=\"/life\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br />\n\n                            生活中的美好\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-photo\">\n                        <a href=\"/photo\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br />\n\n                            照片\n                        </a>\n                    </li>\n\n\n\n                </ul>\n\n\n\n            </nav>\n\n\n\n        </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <div class=\"main-inner\">\n            <div class=\"content-wrap\">\n                <div id=\"content\" class=\"content\">\n\n\n                    <div id=\"posts\" class=\"posts-expand\" style=\"color: #fff\">\n\n                        <p><img src=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\" alt=\"\"><br>我，一个在上海慢慢前行的程序员，坚信越努力，越幸运</p>\n                        <p>很高兴大家能来到我的博客，首先说明<strong>我不是什么大牛，但是是想成为大牛的程序媛</strong>，梦想是去淘宝，但毕竟前面有“梦想”两个字</p>\n                        <p>现在任职于一家十八线的小公司，但是很热爱我的工作</p>\n                        <p>大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作</p>\n                        <p>大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产</p>\n                        <p>大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面</p>\n                        <p>喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。</p>\n                        <p>生活不应该只有coding，我是一个爱生活的girl~</p>\n                        <p>喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈</p>\n                        <p>最近比较喜欢玩狼人杀，真的很烧脑</p>\n                        <p>有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒<br>最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~<br>邮箱:991939332@qq.com<br>QQ:991939332<br>微信:991939332<br>微博:<a href=\"http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo\" target=\"_blank\" rel=\"external\">http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</a><br>掘金:<a href=\"https://juejin.im/user/584d7a3e2f301e00572fb7fc\" target=\"_blank\" rel=\"external\">https://juejin.im/user/584d7a3e2f301e00572fb7fc</a><br>github:<a href=\"https://github.com/sunshine940326\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326</a><br><img src=\"http://oova2i5xh.bkt.clouddn.com/wechatme.jpg\" alt=\"\"></p>\n\n\n                    </div>\n\n\n                </div>\n\n\n\n\n                <div class=\"comments\" id=\"comments\">\n\n                    <div id=\"cloud-tie-wrapper\" class=\"cloud-tie-wrapper\"></div>\n\n                </div>\n\n\n            </div>\n\n\n\n            <div class=\"sidebar-toggle\">\n                <div class=\"sidebar-toggle-line-wrap\">\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                </div>\n            </div>\n\n            <aside id=\"sidebar\" class=\"sidebar\">\n                <div class=\"sidebar-inner\">\n\n\n\n\n\n                    <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n                        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n                            <img class=\"site-author-image\" itemprop=\"image\"\n                                 src=\"/uploads/avatar.png\"\n                                 alt=\"Cherry\" />\n                            <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n\n                            <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n\n                        </div>\n                        <nav class=\"site-state motion-element\">\n\n\n                            <div class=\"site-state-item site-state-posts\">\n                                <a href=\"/archives\">\n                                    <span class=\"site-state-item-count\">26</span>\n                                    <span class=\"site-state-item-name\">日志</span>\n                                </a>\n                            </div>\n\n\n\n\n\n                            <div class=\"site-state-item site-state-categories\">\n                                <a href=\"/categories/index.html\">\n                                    <span class=\"site-state-item-count\">10</span>\n                                    <span class=\"site-state-item-name\">分类</span>\n                                </a>\n                            </div>\n\n\n\n\n\n                            <div class=\"site-state-item site-state-tags\">\n                                <a href=\"/tags/index.html\">\n                                    <span class=\"site-state-item-count\">26</span>\n                                    <span class=\"site-state-item-name\">标签</span>\n                                </a>\n                            </div>\n\n\n                        </nav>\n\n\n\n                        <div class=\"links-of-author motion-element\">\n\n\n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n\n                    <i class=\"fa fa-fw fa-github\"></i>\n\n                  GitHub\n                </a>\n              </span>\n\n                            <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n\n                    <i class=\"fa fa-fw fa-weibo\"></i>\n\n                  Weibo\n                </a>\n              </span>\n\n\n                        </div>\n\n\n\n\n\n\n\n\n\n\n                    </section>\n\n\n\n\n\n                </div>\n\n\n\n        </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <div class=\"footer-inner\">\n            <div class=\"copyright\" >\n\n                &copy;\n                <span itemprop=\"copyrightYear\">2017</span>\n                <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n                <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n            </div>\n\n\n            <div class=\"powered-by\">\n                由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n            </div>\n\n            <div class=\"theme-info\">\n                主题 -\n                <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n                    NexT.Muse\n                </a>\n            </div>\n\n\n\n            <div class=\"busuanzi-count\">\n                <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n\n                <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i> 访问用户：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      人\n    </span>\n\n\n\n                <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i> 访问次数：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      次\n    </span>\n\n            </div>\n\n\n\n        </div>\n    </footer>\n\n\n    <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n\n    </div>\n\n\n</div>\n\n\n\n<script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n        window.Promise = null;\n    }\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n<script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n\n\n\n\n\n\n\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script>\n    var cloudTieConfig = {\n        url: document.location.href,\n        sourceId: \"\",\n        productKey: \"8e7fb6982ddb4d13ad9daf445e511984\",\n        target: \"cloud-tie-wrapper\"\n    };\n</script>\n<script src=\"https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js\"></script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n<script>\n    function showTime(Counter) {\n        var query = new AV.Query(Counter);\n        var entries = [];\n        var $visitors = $(\".leancloud_visitors\");\n\n        $visitors.each(function () {\n            entries.push( $(this).attr(\"id\").trim() );\n        });\n\n        query.containedIn('url', entries);\n        query.find()\n            .done(function (results) {\n                var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n                if (results.length === 0) {\n                    $visitors.find(COUNT_CONTAINER_REF).text(0);\n                    return;\n                }\n\n                for (var i = 0; i < results.length; i++) {\n                    var item = results[i];\n                    var url = item.get('url');\n                    var time = item.get('time');\n                    var element = document.getElementById(url);\n\n                    $(element).find(COUNT_CONTAINER_REF).text(time);\n                }\n                for(var i = 0; i < entries.length; i++) {\n                    var url = entries[i];\n                    var element = document.getElementById(url);\n                    var countSpan = $(element).find(COUNT_CONTAINER_REF);\n                    if( countSpan.text() == '') {\n                        countSpan.text(0);\n                    }\n                }\n            })\n            .fail(function (object, error) {\n                console.log(\"Error: \" + error.code + \" \" + error.message);\n            });\n    }\n\n    function addCount(Counter) {\n        var $visitors = $(\".leancloud_visitors\");\n        var url = $visitors.attr('id').trim();\n        var title = $visitors.attr('data-flag-title').trim();\n        var query = new AV.Query(Counter);\n\n        query.equalTo(\"url\", url);\n        query.find({\n            success: function(results) {\n                if (results.length > 0) {\n                    var counter = results[0];\n                    counter.fetchWhenSave(true);\n                    counter.increment(\"time\");\n                    counter.save(null, {\n                        success: function(counter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(counter.get('time'));\n                        },\n                        error: function(counter, error) {\n                            console.log('Failed to save Visitor num, with error message: ' + error.message);\n                        }\n                    });\n                } else {\n                    var newcounter = new Counter();\n                    /* Set ACL */\n                    var acl = new AV.ACL();\n                    acl.setPublicReadAccess(true);\n                    acl.setPublicWriteAccess(true);\n                    newcounter.setACL(acl);\n                    /* End Set ACL */\n                    newcounter.set(\"title\", title);\n                    newcounter.set(\"url\", url);\n                    newcounter.set(\"time\", 1);\n                    newcounter.save(null, {\n                        success: function(newcounter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n                        },\n                        error: function(newcounter, error) {\n                            console.log('Failed to create');\n                        }\n                    });\n                }\n            },\n            error: function(error) {\n                console.log('Error:' + error.code + \" \" + error.message);\n            }\n        });\n    }\n\n    $(function() {\n        var Counter = AV.Object.extend(\"Counter\");\n        if ($('.leancloud_visitors').length == 1) {\n            addCount(Counter);\n        } else if ($('.post-title-link').length > 1) {\n            showTime(Counter);\n        }\n    });\n</script>\n\n\n\n\n<script>\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https') {\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else {\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n</script>\n\n\n\n\n\n\n\n<div class=\"bg_content\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n<script>\n    //360站长平台\n\n    (function(){\n        var src = (document.location.protocol == \"http:\") ? \"http://js.passport.qihucdn.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\":\"https://jspassport.ssl.qhimg.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\";\n        document.write('<script src=\"' + src + '\" id=\"sozz\"><\\/script>');\n    })();\n\n    //百度站长\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https'){\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else{\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n    function Star(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*2)+1;\n        var alpha = (Math.floor(Math.random()*10)+1)/10/2;\n        this.color = \"rgba(255,255,255,\"+alpha+\")\";\n    }\n\n    Star.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Star.prototype.move = function() {\n        this.y -= .15;\n        if (this.y <= -10) this.y = HEIGHT + 10;\n        this.draw();\n    }\n\n    Star.prototype.die = function() {\n        stars[this.id] = null;\n        delete stars[this.id];\n    }\n\n\n    function Dot(id, x, y, r) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*5)+1;\n        this.maxLinks = 2;\n        this.speed = .5;\n        this.a = .5;\n        this.aReduction = .005;\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n\n        this.dir = Math.floor(Math.random()*140)+200;\n    }\n\n    Dot.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Dot.prototype.link = function() {\n        if (this.id == 0) return;\n        var previousDot1 = getPreviousDot(this.id, 1);\n        var previousDot2 = getPreviousDot(this.id, 2);\n        var previousDot3 = getPreviousDot(this.id, 3);\n        if (!previousDot1) return;\n        ctx.strokeStyle = this.linkColor;\n        ctx.moveTo(previousDot1.x, previousDot1.y);\n        ctx.beginPath();\n        ctx.lineTo(this.x, this.y);\n        if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);\n        if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    function getPreviousDot(id, stepback) {\n        if (id == 0 || id - stepback < 0) return false;\n        if (typeof dots[id - stepback] != \"undefined\") return dots[id - stepback];\n        else return false;//getPreviousDot(id - stepback);\n    }\n\n    Dot.prototype.move = function() {\n        this.a -= this.aReduction;\n        if (this.a <= 0) {\n            this.die();\n            return\n        }\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n        this.x = this.x + Math.cos(degToRad(this.dir))*this.speed,\n            this.y = this.y + Math.sin(degToRad(this.dir))*this.speed;\n\n        this.draw();\n        this.link();\n    }\n\n    Dot.prototype.die = function() {\n        dots[this.id] = null;\n        delete dots[this.id];\n    }\n\n\n    var canvas  = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        WIDTH,\n        HEIGHT,\n        mouseMoving = false,\n        mouseMoveChecker,\n        mouseX,\n        mouseY,\n        stars = [],\n        initStarsPopulation = 80,\n        dots = [],\n        dotsMinDist = 2,\n        maxDistFromCursor = 50;\n\n    setCanvasSize();\n    init();\n\n    function setCanvasSize() {\n        WIDTH = document.documentElement.clientWidth,\n            HEIGHT = document.documentElement.clientHeight;\n\n        canvas.setAttribute(\"width\", WIDTH);\n        canvas.setAttribute(\"height\", HEIGHT);\n    }\n\n    function init() {\n        ctx.strokeStyle = \"white\";\n        ctx.shadowColor = \"white\";\n        for (var i = 0; i < initStarsPopulation; i++) {\n            stars[i] = new Star(i, Math.floor(Math.random()*WIDTH), Math.floor(Math.random()*HEIGHT));\n            //stars[i].draw();\n        }\n        ctx.shadowBlur = 0;\n        animate();\n    }\n\n    function animate() {\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in stars) {\n            stars[i].move();\n        }\n        for (var i in dots) {\n            dots[i].move();\n        }\n        drawIfMouseMoving();\n        requestAnimationFrame(animate);\n    }\n\n    window.onmousemove = function(e){\n        mouseMoving = true;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        clearInterval(mouseMoveChecker);\n        mouseMoveChecker = setTimeout(function() {\n            mouseMoving = false;\n        }, 100);\n    }\n\n\n    function drawIfMouseMoving(){\n        if (!mouseMoving) return;\n\n        if (dots.length == 0) {\n            dots[0] = new Dot(0, mouseX, mouseY);\n            dots[0].draw();\n            return;\n        }\n\n        var previousDot = getPreviousDot(dots.length, 1);\n        var prevX = previousDot.x;\n        var prevY = previousDot.y;\n\n        var diffX = Math.abs(prevX - mouseX);\n        var diffY = Math.abs(prevY - mouseY);\n\n        if (diffX < dotsMinDist || diffY < dotsMinDist) return;\n\n        var xVariation = Math.random() > .5 ? -1 : 1;\n        xVariation = xVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        var yVariation = Math.random() > .5 ? -1 : 1;\n        yVariation = yVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        dots[dots.length] = new Dot(dots.length, mouseX+xVariation, mouseY+yVariation);\n        dots[dots.length-1].draw();\n        dots[dots.length-1].link();\n    }\n    //setInterval(drawIfMouseMoving, 17);\n\n    function degToRad(deg) {\n        return deg * (Math.PI / 180);\n    }\n</script>\n</body>\n</html>\n","source":"about/index.html","raw":"layout: false\n---\n\n<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\" />\n    <meta name=\"description\" content=\"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n很高兴大家能来到我的博客，首先说明我不是什么大牛，但是是想成为大牛的程序媛，梦想是去淘宝，但毕竟前面有“梦想”两个字\n现在任职于一家十八线的小公司，但是很热爱我的工作\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的\">\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"about\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/about/index.html\">\n    <meta property=\"og:site_name\" content=\"Cherry's Blog\">\n    <meta property=\"og:description\" content=\"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n很高兴大家能来到我的博客，首先说明我不是什么大牛，但是是想成为大牛的程序媛，梦想是去淘宝，但毕竟前面有“梦想”两个字\n现在任职于一家十八线的小公司，但是很热爱我的工作\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/wechatme.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-05-26T15:25:50.514Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"about\">\n    <meta name=\"twitter:description\" content=\"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n很高兴大家能来到我的博客，首先说明我不是什么大牛，但是是想成为大牛的程序媛，梦想是去淘宝，但毕竟前面有“梦想”两个字\n现在任职于一家十八线的小公司，但是很热爱我的工作\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\">\n\n\n\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n\n\n\n    <link rel=\"canonical\" href=\"http://cherryblog.site/about/\"/>\n    <style>\n        a{\n            color:#fff\n        }\n    </style>\n\n\n\n\n    <title>\n\n\n\n        about | Cherry's Blog\n\n    </title>\n</head>\n\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n\n\n\n\n\n\n\n<script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n        var hm = document.createElement(\"script\");\n        hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(hm, s);\n    })();\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=\"container sidebar-position-left  \">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n        <a href=\"https://github.com/sunshine940326\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a>\n        <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n            <div class=\"site-meta \">\n\n\n                <div class=\"custom-logo-site-title\">\n                    <a href=\"/\"  class=\"brand\" rel=\"start\">\n                        <span class=\"logo-line-before\"><i></i></span>\n                        <span class=\"site-title\">Cherry's Blog</span>\n                        <span class=\"logo-line-after\"><i></i></span>\n                    </a>\n                </div>\n\n                <p class=\"site-subtitle\">To Be a Better Me</p>\n\n            </div>\n\n            <div class=\"site-nav-toggle\">\n                <button>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                </button>\n            </div>\n        </div>\n\n            <nav class=\"site-nav\">\n\n\n\n                <ul id=\"menu\" class=\"menu\">\n\n\n                    <li class=\"menu-item menu-item-home\">\n                        <a href=\"/\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n\n                            首页\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-categories\">\n                        <a href=\"/categories\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n\n                            分类\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-about\">\n                        <a href=\"/about\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n\n                            关于\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-archives\">\n                        <a href=\"/archives\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n\n                            归档\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-tags\">\n                        <a href=\"/tags\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n\n                            标签\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-life\">\n                        <a href=\"/life\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br />\n\n                            生活中的美好\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-photo\">\n                        <a href=\"/photo\" rel=\"section\">\n\n                            <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br />\n\n                            照片\n                        </a>\n                    </li>\n\n\n\n                </ul>\n\n\n\n            </nav>\n\n\n\n        </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <div class=\"main-inner\">\n            <div class=\"content-wrap\">\n                <div id=\"content\" class=\"content\">\n\n\n                    <div id=\"posts\" class=\"posts-expand\" style=\"color: #fff\">\n\n                        <p><img src=\"http://oova2i5xh.bkt.clouddn.com/head5.jpg\" alt=\"\"><br>我，一个在上海慢慢前行的程序员，坚信越努力，越幸运</p>\n                        <p>很高兴大家能来到我的博客，首先说明<strong>我不是什么大牛，但是是想成为大牛的程序媛</strong>，梦想是去淘宝，但毕竟前面有“梦想”两个字</p>\n                        <p>现在任职于一家十八线的小公司，但是很热爱我的工作</p>\n                        <p>大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作</p>\n                        <p>大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产</p>\n                        <p>大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面</p>\n                        <p>喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。</p>\n                        <p>生活不应该只有coding，我是一个爱生活的girl~</p>\n                        <p>喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈</p>\n                        <p>最近比较喜欢玩狼人杀，真的很烧脑</p>\n                        <p>有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒<br>最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~<br>邮箱:991939332@qq.com<br>QQ:991939332<br>微信:991939332<br>微博:<a href=\"http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo\" target=\"_blank\" rel=\"external\">http://weibo.com/5094854684/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo</a><br>掘金:<a href=\"https://juejin.im/user/584d7a3e2f301e00572fb7fc\" target=\"_blank\" rel=\"external\">https://juejin.im/user/584d7a3e2f301e00572fb7fc</a><br>github:<a href=\"https://github.com/sunshine940326\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326</a><br><img src=\"http://oova2i5xh.bkt.clouddn.com/wechatme.jpg\" alt=\"\"></p>\n\n\n                    </div>\n\n\n                </div>\n\n\n\n\n                <div class=\"comments\" id=\"comments\">\n\n                    <div id=\"cloud-tie-wrapper\" class=\"cloud-tie-wrapper\"></div>\n\n                </div>\n\n\n            </div>\n\n\n\n            <div class=\"sidebar-toggle\">\n                <div class=\"sidebar-toggle-line-wrap\">\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                </div>\n            </div>\n\n            <aside id=\"sidebar\" class=\"sidebar\">\n                <div class=\"sidebar-inner\">\n\n\n\n\n\n                    <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n                        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n                            <img class=\"site-author-image\" itemprop=\"image\"\n                                 src=\"/uploads/avatar.png\"\n                                 alt=\"Cherry\" />\n                            <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n\n                            <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n\n                        </div>\n                        <nav class=\"site-state motion-element\">\n\n\n                            <div class=\"site-state-item site-state-posts\">\n                                <a href=\"/archives\">\n                                    <span class=\"site-state-item-count\">26</span>\n                                    <span class=\"site-state-item-name\">日志</span>\n                                </a>\n                            </div>\n\n\n\n\n\n                            <div class=\"site-state-item site-state-categories\">\n                                <a href=\"/categories/index.html\">\n                                    <span class=\"site-state-item-count\">10</span>\n                                    <span class=\"site-state-item-name\">分类</span>\n                                </a>\n                            </div>\n\n\n\n\n\n                            <div class=\"site-state-item site-state-tags\">\n                                <a href=\"/tags/index.html\">\n                                    <span class=\"site-state-item-count\">26</span>\n                                    <span class=\"site-state-item-name\">标签</span>\n                                </a>\n                            </div>\n\n\n                        </nav>\n\n\n\n                        <div class=\"links-of-author motion-element\">\n\n\n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n\n                    <i class=\"fa fa-fw fa-github\"></i>\n\n                  GitHub\n                </a>\n              </span>\n\n                            <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n\n                    <i class=\"fa fa-fw fa-weibo\"></i>\n\n                  Weibo\n                </a>\n              </span>\n\n\n                        </div>\n\n\n\n\n\n\n\n\n\n\n                    </section>\n\n\n\n\n\n                </div>\n\n\n\n        </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <div class=\"footer-inner\">\n            <div class=\"copyright\" >\n\n                &copy;\n                <span itemprop=\"copyrightYear\">2017</span>\n                <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n                <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n            </div>\n\n\n            <div class=\"powered-by\">\n                由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n            </div>\n\n            <div class=\"theme-info\">\n                主题 -\n                <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n                    NexT.Muse\n                </a>\n            </div>\n\n\n\n            <div class=\"busuanzi-count\">\n                <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n\n                <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i> 访问用户：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      人\n    </span>\n\n\n\n                <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i> 访问次数：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      次\n    </span>\n\n            </div>\n\n\n\n        </div>\n    </footer>\n\n\n    <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n\n    </div>\n\n\n</div>\n\n\n\n<script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n        window.Promise = null;\n    }\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n\n\n<script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n\n\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n\n<script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n\n\n\n\n\n\n\n\n\n\n\n<script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script>\n    var cloudTieConfig = {\n        url: document.location.href,\n        sourceId: \"\",\n        productKey: \"8e7fb6982ddb4d13ad9daf445e511984\",\n        target: \"cloud-tie-wrapper\"\n    };\n</script>\n<script src=\"https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js\"></script>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n<script>\n    function showTime(Counter) {\n        var query = new AV.Query(Counter);\n        var entries = [];\n        var $visitors = $(\".leancloud_visitors\");\n\n        $visitors.each(function () {\n            entries.push( $(this).attr(\"id\").trim() );\n        });\n\n        query.containedIn('url', entries);\n        query.find()\n            .done(function (results) {\n                var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n                if (results.length === 0) {\n                    $visitors.find(COUNT_CONTAINER_REF).text(0);\n                    return;\n                }\n\n                for (var i = 0; i < results.length; i++) {\n                    var item = results[i];\n                    var url = item.get('url');\n                    var time = item.get('time');\n                    var element = document.getElementById(url);\n\n                    $(element).find(COUNT_CONTAINER_REF).text(time);\n                }\n                for(var i = 0; i < entries.length; i++) {\n                    var url = entries[i];\n                    var element = document.getElementById(url);\n                    var countSpan = $(element).find(COUNT_CONTAINER_REF);\n                    if( countSpan.text() == '') {\n                        countSpan.text(0);\n                    }\n                }\n            })\n            .fail(function (object, error) {\n                console.log(\"Error: \" + error.code + \" \" + error.message);\n            });\n    }\n\n    function addCount(Counter) {\n        var $visitors = $(\".leancloud_visitors\");\n        var url = $visitors.attr('id').trim();\n        var title = $visitors.attr('data-flag-title').trim();\n        var query = new AV.Query(Counter);\n\n        query.equalTo(\"url\", url);\n        query.find({\n            success: function(results) {\n                if (results.length > 0) {\n                    var counter = results[0];\n                    counter.fetchWhenSave(true);\n                    counter.increment(\"time\");\n                    counter.save(null, {\n                        success: function(counter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(counter.get('time'));\n                        },\n                        error: function(counter, error) {\n                            console.log('Failed to save Visitor num, with error message: ' + error.message);\n                        }\n                    });\n                } else {\n                    var newcounter = new Counter();\n                    /* Set ACL */\n                    var acl = new AV.ACL();\n                    acl.setPublicReadAccess(true);\n                    acl.setPublicWriteAccess(true);\n                    newcounter.setACL(acl);\n                    /* End Set ACL */\n                    newcounter.set(\"title\", title);\n                    newcounter.set(\"url\", url);\n                    newcounter.set(\"time\", 1);\n                    newcounter.save(null, {\n                        success: function(newcounter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n                        },\n                        error: function(newcounter, error) {\n                            console.log('Failed to create');\n                        }\n                    });\n                }\n            },\n            error: function(error) {\n                console.log('Error:' + error.code + \" \" + error.message);\n            }\n        });\n    }\n\n    $(function() {\n        var Counter = AV.Object.extend(\"Counter\");\n        if ($('.leancloud_visitors').length == 1) {\n            addCount(Counter);\n        } else if ($('.post-title-link').length > 1) {\n            showTime(Counter);\n        }\n    });\n</script>\n\n\n\n\n<script>\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https') {\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else {\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n</script>\n\n\n\n\n\n\n\n<div class=\"bg_content\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n<script>\n    //360站长平台\n\n    (function(){\n        var src = (document.location.protocol == \"http:\") ? \"http://js.passport.qihucdn.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\":\"https://jspassport.ssl.qhimg.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\";\n        document.write('<script src=\"' + src + '\" id=\"sozz\"><\\/script>');\n    })();\n\n    //百度站长\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https'){\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else{\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n    function Star(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*2)+1;\n        var alpha = (Math.floor(Math.random()*10)+1)/10/2;\n        this.color = \"rgba(255,255,255,\"+alpha+\")\";\n    }\n\n    Star.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Star.prototype.move = function() {\n        this.y -= .15;\n        if (this.y <= -10) this.y = HEIGHT + 10;\n        this.draw();\n    }\n\n    Star.prototype.die = function() {\n        stars[this.id] = null;\n        delete stars[this.id];\n    }\n\n\n    function Dot(id, x, y, r) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*5)+1;\n        this.maxLinks = 2;\n        this.speed = .5;\n        this.a = .5;\n        this.aReduction = .005;\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n\n        this.dir = Math.floor(Math.random()*140)+200;\n    }\n\n    Dot.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Dot.prototype.link = function() {\n        if (this.id == 0) return;\n        var previousDot1 = getPreviousDot(this.id, 1);\n        var previousDot2 = getPreviousDot(this.id, 2);\n        var previousDot3 = getPreviousDot(this.id, 3);\n        if (!previousDot1) return;\n        ctx.strokeStyle = this.linkColor;\n        ctx.moveTo(previousDot1.x, previousDot1.y);\n        ctx.beginPath();\n        ctx.lineTo(this.x, this.y);\n        if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);\n        if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    function getPreviousDot(id, stepback) {\n        if (id == 0 || id - stepback < 0) return false;\n        if (typeof dots[id - stepback] != \"undefined\") return dots[id - stepback];\n        else return false;//getPreviousDot(id - stepback);\n    }\n\n    Dot.prototype.move = function() {\n        this.a -= this.aReduction;\n        if (this.a <= 0) {\n            this.die();\n            return\n        }\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n        this.x = this.x + Math.cos(degToRad(this.dir))*this.speed,\n            this.y = this.y + Math.sin(degToRad(this.dir))*this.speed;\n\n        this.draw();\n        this.link();\n    }\n\n    Dot.prototype.die = function() {\n        dots[this.id] = null;\n        delete dots[this.id];\n    }\n\n\n    var canvas  = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        WIDTH,\n        HEIGHT,\n        mouseMoving = false,\n        mouseMoveChecker,\n        mouseX,\n        mouseY,\n        stars = [],\n        initStarsPopulation = 80,\n        dots = [],\n        dotsMinDist = 2,\n        maxDistFromCursor = 50;\n\n    setCanvasSize();\n    init();\n\n    function setCanvasSize() {\n        WIDTH = document.documentElement.clientWidth,\n            HEIGHT = document.documentElement.clientHeight;\n\n        canvas.setAttribute(\"width\", WIDTH);\n        canvas.setAttribute(\"height\", HEIGHT);\n    }\n\n    function init() {\n        ctx.strokeStyle = \"white\";\n        ctx.shadowColor = \"white\";\n        for (var i = 0; i < initStarsPopulation; i++) {\n            stars[i] = new Star(i, Math.floor(Math.random()*WIDTH), Math.floor(Math.random()*HEIGHT));\n            //stars[i].draw();\n        }\n        ctx.shadowBlur = 0;\n        animate();\n    }\n\n    function animate() {\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in stars) {\n            stars[i].move();\n        }\n        for (var i in dots) {\n            dots[i].move();\n        }\n        drawIfMouseMoving();\n        requestAnimationFrame(animate);\n    }\n\n    window.onmousemove = function(e){\n        mouseMoving = true;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        clearInterval(mouseMoveChecker);\n        mouseMoveChecker = setTimeout(function() {\n            mouseMoving = false;\n        }, 100);\n    }\n\n\n    function drawIfMouseMoving(){\n        if (!mouseMoving) return;\n\n        if (dots.length == 0) {\n            dots[0] = new Dot(0, mouseX, mouseY);\n            dots[0].draw();\n            return;\n        }\n\n        var previousDot = getPreviousDot(dots.length, 1);\n        var prevX = previousDot.x;\n        var prevY = previousDot.y;\n\n        var diffX = Math.abs(prevX - mouseX);\n        var diffY = Math.abs(prevY - mouseY);\n\n        if (diffX < dotsMinDist || diffY < dotsMinDist) return;\n\n        var xVariation = Math.random() > .5 ? -1 : 1;\n        xVariation = xVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        var yVariation = Math.random() > .5 ? -1 : 1;\n        yVariation = yVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        dots[dots.length] = new Dot(dots.length, mouseX+xVariation, mouseY+yVariation);\n        dots[dots.length-1].draw();\n        dots[dots.length-1].link();\n    }\n    //setInterval(drawIfMouseMoving, 17);\n\n    function degToRad(deg) {\n        return deg * (Math.PI / 180);\n    }\n</script>\n</body>\n</html>\n","date":"2017-07-01T13:44:27.000Z","updated":"2017-07-01T13:44:27.000Z","path":"about/index.html","title":"","comments":1,"_id":"cj4ldrqg60002aaxi77fzrrk3"},{"title":"about","date":"2016-09-04T09:59:49.000Z","type":"about","_content":"![](http://oova2i5xh.bkt.clouddn.com/head5.jpg)\n我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n\n很高兴大家能来到我的博客，首先说明**我不是什么大牛，但是是想成为大牛的程序媛**，梦想是去淘宝，但毕竟前面有“梦想”两个字\n\n现在任职于一家十八线的小公司，但是很热爱我的工作\n\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产\n\n大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面\n\n喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。\n\n生活不应该只有coding，我是一个爱生活的girl~\n\n喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈\n\n最近比较喜欢玩狼人杀，真的很烧脑\n\n有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒\n最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~\n邮箱:991939332@qq.com\nQQ:991939332\n微信:991939332\n微博:http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\n掘金:https://juejin.im/user/584d7a3e2f301e00572fb7fc\ngithub:https://github.com/sunshine940326\n![](http://oova2i5xh.bkt.clouddn.com/wechatme.jpg)\n","source":"about/index2.md","raw":"---\ntitle: about\ndate: 2016-09-04 17:59:49\ntype: \"about\"\n\n---\n![](http://oova2i5xh.bkt.clouddn.com/head5.jpg)\n我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n\n很高兴大家能来到我的博客，首先说明**我不是什么大牛，但是是想成为大牛的程序媛**，梦想是去淘宝，但毕竟前面有“梦想”两个字\n\n现在任职于一家十八线的小公司，但是很热爱我的工作\n\n大学是java专业，比起后台的工作更喜欢前端，基本上大四开始断断续续的自学前端，毕业之后开始前端开发的工作\n\n大家不要以为我是一个前端大牛，我只是一个小菜鸟罢了~现在正处于前端狂热的爱好者~所以可能会有些高产\n\n大部分的博客都是比较基础的但是容易出错或者不常用的知识点，力求将原理讲的简单全面\n\n喜欢追求新事物，喜欢总结，喜欢对比，喜欢刨根问题。\n\n生活不应该只有coding，我是一个爱生活的girl~\n\n喜欢多肉，喜欢摄影，喜欢旅游，也喜欢游戏，但是不敢经常玩，怕上瘾收不住（王者荣耀s7赛季现在是铂金段位，欢迎加我微信一起开黑），哈哈\n\n最近比较喜欢玩狼人杀，真的很烧脑\n\n有什么技术问题可以给我发邮件，微博上都是生活内容，也欢迎大家加我qq或者微信，来者不拒\n最近在掘金上比较活跃，博文一般都同步在掘金，项目源码都在github上，求follow~\n邮箱:991939332@qq.com\nQQ:991939332\n微信:991939332\n微博:http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\n掘金:https://juejin.im/user/584d7a3e2f301e00572fb7fc\ngithub:https://github.com/sunshine940326\n![](http://oova2i5xh.bkt.clouddn.com/wechatme.jpg)\n","updated":"2017-07-01T13:44:27.000Z","path":"about/index2.html","comments":1,"layout":"page","_id":"cj4ldrqga0004aaxisyyj5ek8"},{"title":"","date":"2017-02-26T09:51:32.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: \ndate: 2017-02-26 17:51:32\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-07-01T13:44:27.000Z","path":"categories/index.html","layout":"page","_id":"cj4ldrqgm0008aaxiwbx00m25"},{"title":"","date":"2017-04-04T14:50:10.000Z","type":"life","_content":"","source":"life/index.md","raw":"---\ntitle: \ndate: 2017-04-04 22:50:10\ntype: \"life\"\n---\n","updated":"2017-07-01T13:44:27.000Z","path":"life/index.html","comments":1,"layout":"page","_id":"cj4ldrqgr000aaaxintuvf3cd"},{"title":"","date":"2017-04-04T14:14:07.000Z","type":"photo","comments":1,"_content":"![第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒](http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱](http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![好喜欢多肉晒的上色之后外圈的颜色，粉粉的，很可爱，要天天晒太阳~](http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![养了半年的多肉，阳光下呈现粉嫩的颜色](http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~](http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花+白色康乃馨，康乃馨是大朵的哦](http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花，漫漫樱花好漂亮](http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)","source":"photo/index2.md","raw":"---\ntitle: \ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: true\n---\n![第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒](http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱](http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![好喜欢多肉晒的上色之后外圈的颜色，粉粉的，很可爱，要天天晒太阳~](http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![养了半年的多肉，阳光下呈现粉嫩的颜色](http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~](http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![太阳花+白色康乃馨，康乃馨是大朵的哦](http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花](http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![上海同济大学的樱花，漫漫樱花好漂亮](http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)\n![看樱花的时候在同济拍的不知道什么名字的菊花](http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg)","updated":"2017-07-01T13:44:27.000Z","path":"photo/index2.html","layout":"page","_id":"cj4ldrqgw000eaaxifbku5f2q"},{"title":"","date":"2016-09-16T16:29:00.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: \ndate: 2016-09-17 00:29:00\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-07-01T13:44:27.000Z","path":"tags/index.html","layout":"page","_id":"cj4ldrqgz000haaxiblnbit82"},{"layout":"false","_content":"<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\" />\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"photo\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/photo/index.html\">\n    <meta property=\"og:site_name\" content=\"Cherry's Blog\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-04-25T14:11:55.658Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"photo\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n    <link rel=\"canonical\" href=\"http://cherryblog.site/photo/\"/>\n    <title>\n        photo | Cherry's Blog\n    </title>\n</head>\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n<script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n        var hm = document.createElement(\"script\");\n        hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(hm, s);\n    })();\n</script>\n<div class=\"container sidebar-position-left  \" id=\"photo\">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n        <a href=\"https://github.com/sunshine940326\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a>\n        <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n            <div class=\"site-meta \">\n                <div class=\"custom-logo-site-title\">\n                    <a href=\"/\"  class=\"brand\" rel=\"start\">\n                        <span class=\"logo-line-before\"><i></i></span>\n                        <span class=\"site-title\">Cherry's Blog</span>\n                        <span class=\"logo-line-after\"><i></i></span>\n                    </a>\n                </div>\n\n                <p class=\"site-subtitle\">To Be a Better Me</p>\n\n            </div>\n\n            <div class=\"site-nav-toggle\">\n                <button>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                </button>\n            </div>\n        </div>\n            <nav class=\"site-nav\">\n                <ul id=\"menu\" class=\"menu\">\n                    <li class=\"menu-item menu-item-home\">\n                        <a href=\"/\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n                            首页\n                        </a>\n                    </li>\n\n                    <li class=\"menu-item menu-item-categories\">\n                        <a href=\"/categories\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n\n                            分类\n                        </a>\n                    </li>\n\n                    <li class=\"menu-item menu-item-about\">\n                        <a href=\"/about\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n                            关于\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-archives\">\n                        <a href=\"/archives\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n                            归档\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-tags\">\n                        <a href=\"/tags\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n                            标签\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-life\">\n                        <a href=\"/life\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br />\n                            留言板\n                        </a>\n                    </li>\n\n                    <li class=\"menu-item menu-item-photo\">\n                        <a href=\"/photo\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br />\n                            照片\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <div class=\"main-inner\">\n            <div class=\"content-wrap\">\n                <div id=\"content\" class=\"content\">\n                    <div id=\"posts\" class=\"posts-expand\">\n                        <p>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG12.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG13.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG14.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG21.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG22.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG23.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG25.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG28.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG29.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG32.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG33.jpg-cherryblogImg\" alt=\"台湾日月潭\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG34.jpg-cherryblogImg\" alt=\"台湾阿里山\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG38.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG39.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG40.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG41.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG42.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG43.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG44.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG45.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG46.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG47.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG48.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E8%99%B9%E4%B9%8B%E7%8E%89.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E7%88%86%E7%9B%86.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG15.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG18.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG27.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG26.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG17.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n\n\n\n\n\n\n\n                        </p>\n                    </div>\n                </div>\n                <div class=\"comments\" id=\"comments\">\n                    <div id=\"cloud-tie-wrapper\" class=\"cloud-tie-wrapper\"></div>\n                </div>\n            </div>\n            <div class=\"sidebar-toggle\">\n                <div class=\"sidebar-toggle-line-wrap\">\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                </div>\n            </div>\n\n            <aside id=\"sidebar\" class=\"sidebar\">\n                <div class=\"sidebar-inner\">\n                    <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n                        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n                            <img class=\"site-author-image\" itemprop=\"image\"\n                                 src=\"/uploads/avatar.png\"\n                                 alt=\"Cherry\" />\n                            <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n\n                            <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n\n                        </div>\n                        <nav class=\"site-state motion-element\">\n                            <div class=\"site-state-item site-state-posts\">\n                                <a href=\"/archives\">\n                                    <span class=\"site-state-item-count\">23</span>\n                                    <span class=\"site-state-item-name\">日志</span>\n                                </a>\n                            </div>\n\n                            <div class=\"site-state-item site-state-categories\">\n                                <a href=\"/categories/index.html\">\n                                    <span class=\"site-state-item-count\">7</span>\n                                    <span class=\"site-state-item-name\">分类</span>\n                                </a>\n                            </div>\n\n                            <div class=\"site-state-item site-state-tags\">\n                                <a href=\"/tags/index.html\">\n                                    <span class=\"site-state-item-count\">13</span>\n                                    <span class=\"site-state-item-name\">标签</span>\n                                </a>\n                            </div>\n                        </nav>\n                        <div class=\"links-of-author motion-element\">\n\n\n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n\n                    <i class=\"fa fa-fw fa-github\"></i>\n\n                  GitHub\n                </a>\n              </span>\n\n                            <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n\n                    <i class=\"fa fa-fw fa-weibo\"></i>\n\n                  Weibo\n                </a>\n              </span></div>\n                    </section>\n\n                </div>\n\n                <div id=\"music163player\">\n                    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\"></iframe>\n                </div>\n            </aside>\n        </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <div class=\"footer-inner\">\n            <div class=\"copyright\" >\n                &copy;\n                <span itemprop=\"copyrightYear\">2017</span>\n                <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n                <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n            </div>\n\n\n            <div class=\"powered-by\">\n                由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n            </div>\n\n            <div class=\"theme-info\">\n                主题 -\n                <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n                    NexT.Muse\n                </a>\n            </div>\n\n\n\n            <div class=\"busuanzi-count\">\n                <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n\n                <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i> 访问用户：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      人\n    </span>\n\n\n\n                <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i> 访问次数：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      次\n    </span>\n\n            </div>\n\n\n\n        </div>\n    </footer>\n\n\n    <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n\n    </div>\n\n\n</div>\n\n\n\n<script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n        window.Promise = null;\n    }\n</script>\n<script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n<script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n<script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n<script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n<script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n<script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n<script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n<script>\n    var cloudTieConfig = {\n        url: document.location.href,\n        sourceId: \"\",\n        productKey: \"8e7fb6982ddb4d13ad9daf445e511984\",\n        target: \"cloud-tie-wrapper\"\n    };\n</script>\n<script src=\"https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js\"></script>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n<script>\n    function showTime(Counter) {\n        var query = new AV.Query(Counter);\n        var entries = [];\n        var $visitors = $(\".leancloud_visitors\");\n\n        $visitors.each(function () {\n            entries.push( $(this).attr(\"id\").trim() );\n        });\n\n        query.containedIn('url', entries);\n        query.find()\n            .done(function (results) {\n                var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n                if (results.length === 0) {\n                    $visitors.find(COUNT_CONTAINER_REF).text(0);\n                    return;\n                }\n\n                for (var i = 0; i < results.length; i++) {\n                    var item = results[i];\n                    var url = item.get('url');\n                    var time = item.get('time');\n                    var element = document.getElementById(url);\n\n                    $(element).find(COUNT_CONTAINER_REF).text(time);\n                }\n                for(var i = 0; i < entries.length; i++) {\n                    var url = entries[i];\n                    var element = document.getElementById(url);\n                    var countSpan = $(element).find(COUNT_CONTAINER_REF);\n                    if( countSpan.text() == '') {\n                        countSpan.text(0);\n                    }\n                }\n            })\n            .fail(function (object, error) {\n                console.log(\"Error: \" + error.code + \" \" + error.message);\n            });\n    }\n\n    function addCount(Counter) {\n        var $visitors = $(\".leancloud_visitors\");\n        var url = $visitors.attr('id').trim();\n        var title = $visitors.attr('data-flag-title').trim();\n        var query = new AV.Query(Counter);\n\n        query.equalTo(\"url\", url);\n        query.find({\n            success: function(results) {\n                if (results.length > 0) {\n                    var counter = results[0];\n                    counter.fetchWhenSave(true);\n                    counter.increment(\"time\");\n                    counter.save(null, {\n                        success: function(counter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(counter.get('time'));\n                        },\n                        error: function(counter, error) {\n                            console.log('Failed to save Visitor num, with error message: ' + error.message);\n                        }\n                    });\n                } else {\n                    var newcounter = new Counter();\n                    /* Set ACL */\n                    var acl = new AV.ACL();\n                    acl.setPublicReadAccess(true);\n                    acl.setPublicWriteAccess(true);\n                    newcounter.setACL(acl);\n                    /* End Set ACL */\n                    newcounter.set(\"title\", title);\n                    newcounter.set(\"url\", url);\n                    newcounter.set(\"time\", 1);\n                    newcounter.save(null, {\n                        success: function(newcounter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n                        },\n                        error: function(newcounter, error) {\n                            console.log('Failed to create');\n                        }\n                    });\n                }\n            },\n            error: function(error) {\n                console.log('Error:' + error.code + \" \" + error.message);\n            }\n        });\n    }\n\n    $(function() {\n        var Counter = AV.Object.extend(\"Counter\");\n        if ($('.leancloud_visitors').length == 1) {\n            addCount(Counter);\n        } else if ($('.post-title-link').length > 1) {\n            showTime(Counter);\n        }\n    });\n</script>\n\n\n\n\n<script>\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https') {\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else {\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n</script>\n\n\n\n\n\n\n\n<div class=\"bg_content\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n<script>\n    //360站长平台\n\n    (function(){\n        var src = (document.location.protocol == \"http:\") ? \"http://js.passport.qihucdn.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\":\"https://jspassport.ssl.qhimg.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\";\n        document.write('<script src=\"' + src + '\" id=\"sozz\"><\\/script>');\n    })();\n\n    //百度站长\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https'){\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else{\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n    function Star(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*2)+1;\n        var alpha = (Math.floor(Math.random()*10)+1)/10/2;\n        this.color = \"rgba(255,255,255,\"+alpha+\")\";\n    }\n\n    Star.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Star.prototype.move = function() {\n        this.y -= .15;\n        if (this.y <= -10) this.y = HEIGHT + 10;\n        this.draw();\n    }\n\n    Star.prototype.die = function() {\n        stars[this.id] = null;\n        delete stars[this.id];\n    }\n\n\n    function Dot(id, x, y, r) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*5)+1;\n        this.maxLinks = 2;\n        this.speed = .5;\n        this.a = .5;\n        this.aReduction = .005;\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n\n        this.dir = Math.floor(Math.random()*140)+200;\n    }\n\n    Dot.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Dot.prototype.link = function() {\n        if (this.id == 0) return;\n        var previousDot1 = getPreviousDot(this.id, 1);\n        var previousDot2 = getPreviousDot(this.id, 2);\n        var previousDot3 = getPreviousDot(this.id, 3);\n        if (!previousDot1) return;\n        ctx.strokeStyle = this.linkColor;\n        ctx.moveTo(previousDot1.x, previousDot1.y);\n        ctx.beginPath();\n        ctx.lineTo(this.x, this.y);\n        if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);\n        if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    function getPreviousDot(id, stepback) {\n        if (id == 0 || id - stepback < 0) return false;\n        if (typeof dots[id - stepback] != \"undefined\") return dots[id - stepback];\n        else return false;//getPreviousDot(id - stepback);\n    }\n\n    Dot.prototype.move = function() {\n        this.a -= this.aReduction;\n        if (this.a <= 0) {\n            this.die();\n            return\n        }\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n        this.x = this.x + Math.cos(degToRad(this.dir))*this.speed,\n            this.y = this.y + Math.sin(degToRad(this.dir))*this.speed;\n\n        this.draw();\n        this.link();\n    }\n\n    Dot.prototype.die = function() {\n        dots[this.id] = null;\n        delete dots[this.id];\n    }\n\n\n    var canvas  = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        WIDTH,\n        HEIGHT,\n        mouseMoving = false,\n        mouseMoveChecker,\n        mouseX,\n        mouseY,\n        stars = [],\n        initStarsPopulation = 80,\n        dots = [],\n        dotsMinDist = 2,\n        maxDistFromCursor = 50;\n\n    setCanvasSize();\n    init();\n\n    function setCanvasSize() {\n        WIDTH = document.documentElement.clientWidth,\n            HEIGHT = document.documentElement.clientHeight;\n\n        canvas.setAttribute(\"width\", WIDTH);\n        canvas.setAttribute(\"height\", HEIGHT);\n    }\n\n    function init() {\n        ctx.strokeStyle = \"white\";\n        ctx.shadowColor = \"white\";\n        for (var i = 0; i < initStarsPopulation; i++) {\n            stars[i] = new Star(i, Math.floor(Math.random()*WIDTH), Math.floor(Math.random()*HEIGHT));\n            //stars[i].draw();\n        }\n        ctx.shadowBlur = 0;\n        animate();\n    }\n\n    function animate() {\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in stars) {\n            stars[i].move();\n        }\n        for (var i in dots) {\n            dots[i].move();\n        }\n        drawIfMouseMoving();\n        requestAnimationFrame(animate);\n    }\n\n    window.onmousemove = function(e){\n        mouseMoving = true;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        clearInterval(mouseMoveChecker);\n        mouseMoveChecker = setTimeout(function() {\n            mouseMoving = false;\n        }, 100);\n    }\n\n\n    function drawIfMouseMoving(){\n        if (!mouseMoving) return;\n\n        if (dots.length == 0) {\n            dots[0] = new Dot(0, mouseX, mouseY);\n            dots[0].draw();\n            return;\n        }\n\n        var previousDot = getPreviousDot(dots.length, 1);\n        var prevX = previousDot.x;\n        var prevY = previousDot.y;\n\n        var diffX = Math.abs(prevX - mouseX);\n        var diffY = Math.abs(prevY - mouseY);\n\n        if (diffX < dotsMinDist || diffY < dotsMinDist) return;\n\n        var xVariation = Math.random() > .5 ? -1 : 1;\n        xVariation = xVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        var yVariation = Math.random() > .5 ? -1 : 1;\n        yVariation = yVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        dots[dots.length] = new Dot(dots.length, mouseX+xVariation, mouseY+yVariation);\n        dots[dots.length-1].draw();\n        dots[dots.length-1].link();\n    }\n    //setInterval(drawIfMouseMoving, 17);\n\n    function degToRad(deg) {\n        return deg * (Math.PI / 180);\n    }\n</script>\n</body>\n</html>\n","source":"photo/index.html","raw":"layout: false\n---\n<!doctype html>\n<html class=\"theme-next muse use-motion\" lang=\"zh-Hans\">\n<head>\n    <meta charset=\"UTF-8\"/>\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\"/>\n    <meta http-equiv=\"Cache-Control\" content=\"no-transform\" />\n    <meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />\n    <link href=\"/lib/fancybox/source/jquery.fancybox.css?v=2.1.5\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"//fonts.googleapis.com/css?family=Lato:300,300italic,400,400italic,700,700italic&subset=latin,latin-ext\" rel=\"stylesheet\" type=\"text/css\">\n    <link href=\"/lib/font-awesome/css/font-awesome.min.css?v=4.6.2\" rel=\"stylesheet\" type=\"text/css\" />\n    <link href=\"/css/main.css?v=5.1.0\" rel=\"stylesheet\" type=\"text/css\" />\n    <link rel=\"shortcut icon\" type=\"image/x-icon\" href=\"/images/favicon.ico?v=5.1.0\" />\n    <meta property=\"og:type\" content=\"website\">\n    <meta property=\"og:title\" content=\"photo\">\n    <meta property=\"og:url\" content=\"http://cherryblog.site/photo/index.html\">\n    <meta property=\"og:site_name\" content=\"Cherry's Blog\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0800_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1002_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0993_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1069_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1067_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1059_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1054_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_1058_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <meta property=\"og:updated_time\" content=\"2017-04-25T14:11:55.658Z\">\n    <meta name=\"twitter:card\" content=\"summary\">\n    <meta name=\"twitter:title\" content=\"photo\">\n    <meta name=\"twitter:image\" content=\"http://oova2i5xh.bkt.clouddn.com/IMG_0795_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\">\n    <script type=\"text/javascript\" id=\"hexo.configurations\">\n        var NexT = window.NexT || {};\n        var CONFIG = {\n            root: '/',\n            scheme: 'Muse',\n            sidebar: {\"position\":\"left\",\"display\":\"post\",\"offset\":12,\"offset_float\":0,\"b2t\":false,\"scrollpercent\":false},\n            fancybox: true,\n            motion: true,\n            duoshuo: {\n                userId: '0',\n                author: '博主'\n            },\n            algolia: {\n                applicationID: '',\n                apiKey: '',\n                indexName: '',\n                hits: {\"per_page\":10},\n                labels: {\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}\n            }\n        };\n    </script>\n    <link rel=\"canonical\" href=\"http://cherryblog.site/photo/\"/>\n    <title>\n        photo | Cherry's Blog\n    </title>\n</head>\n<body itemscope itemtype=\"http://schema.org/WebPage\" lang=\"zh-Hans\">\n<script type=\"text/javascript\">\n    var _hmt = _hmt || [];\n    (function() {\n        var hm = document.createElement(\"script\");\n        hm.src = \"https://hm.baidu.com/hm.js?71ddec12fb1172387f0bd6399e834274\";\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(hm, s);\n    })();\n</script>\n<div class=\"container sidebar-position-left  \" id=\"photo\">\n    <div class=\"headband\"></div>\n\n    <header id=\"header\" class=\"header\" itemscope itemtype=\"http://schema.org/WPHeader\">\n        <a href=\"https://github.com/sunshine940326\"><img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png\"></a>\n        <div class=\"header-inner\"><div class=\"site-brand-wrapper\">\n            <div class=\"site-meta \">\n                <div class=\"custom-logo-site-title\">\n                    <a href=\"/\"  class=\"brand\" rel=\"start\">\n                        <span class=\"logo-line-before\"><i></i></span>\n                        <span class=\"site-title\">Cherry's Blog</span>\n                        <span class=\"logo-line-after\"><i></i></span>\n                    </a>\n                </div>\n\n                <p class=\"site-subtitle\">To Be a Better Me</p>\n\n            </div>\n\n            <div class=\"site-nav-toggle\">\n                <button>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                    <span class=\"btn-bar\"></span>\n                </button>\n            </div>\n        </div>\n            <nav class=\"site-nav\">\n                <ul id=\"menu\" class=\"menu\">\n                    <li class=\"menu-item menu-item-home\">\n                        <a href=\"/\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-home\"></i> <br />\n                            首页\n                        </a>\n                    </li>\n\n                    <li class=\"menu-item menu-item-categories\">\n                        <a href=\"/categories\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-th\"></i> <br />\n\n                            分类\n                        </a>\n                    </li>\n\n                    <li class=\"menu-item menu-item-about\">\n                        <a href=\"/about\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-user\"></i> <br />\n                            关于\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-archives\">\n                        <a href=\"/archives\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-archive\"></i> <br />\n                            归档\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-tags\">\n                        <a href=\"/tags\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-tags\"></i> <br />\n                            标签\n                        </a>\n                    </li>\n\n\n                    <li class=\"menu-item menu-item-life\">\n                        <a href=\"/life\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-heart\"></i> <br />\n                            留言板\n                        </a>\n                    </li>\n\n                    <li class=\"menu-item menu-item-photo\">\n                        <a href=\"/photo\" rel=\"section\">\n                            <i class=\"menu-item-icon fa fa-fw fa-image\"></i> <br />\n                            照片\n                        </a>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <div class=\"main-inner\">\n            <div class=\"content-wrap\">\n                <div id=\"content\" class=\"content\">\n                    <div id=\"posts\" class=\"posts-expand\">\n                        <p>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG12.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG13.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG14.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG21.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG22.jpg-cherryblogImg\" alt=\"上海同济大学樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG23.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG25.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG28.jpg-cherryblogImg\" alt=\"台湾自由广场\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG29.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG32.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG33.jpg-cherryblogImg\" alt=\"台湾日月潭\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG34.jpg-cherryblogImg\" alt=\"台湾阿里山\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG38.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG39.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG40.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG41.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG42.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG43.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG44.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG45.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG46.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG47.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG48.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg\" alt=\"上海野生动物园\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E8%99%B9%E4%B9%8B%E7%8E%89.jpg\" alt=\"第一次喜欢多肉大概是从这一盆开始的吧，这一盆叫虹之玉，算是多肉中的普货，多肉的颜色就是需要晒\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/%E6%9C%80%E5%88%9D%E7%89%88%E7%88%86%E7%9B%86.jpg\" alt=\"跟虹之玉一起买的，购于上海七宝万科~满满的一盆很喜爱\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG15.jpg\" alt=\"养了半年的多肉，阳光下呈现粉嫩的颜色\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1405_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花，在花+上订了一个月的鲜花，第二个星期的鲜花的质量还不错呢~\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1377_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"太阳花+白色康乃馨，康乃馨是大朵的哦\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1191_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1111_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG_1110_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG18.jpg\" alt=\"上海同济大学的樱花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG20.jpg\" alt=\"上海同济大学的樱花，漫漫樱花好漂亮\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG27.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG26.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n                            <img src=\"http://oova2i5xh.bkt.clouddn.com/IMG17.jpg\" alt=\"看樱花的时候在同济拍的不知道什么名字的菊花\"><br>\n\n\n\n\n\n\n\n                        </p>\n                    </div>\n                </div>\n                <div class=\"comments\" id=\"comments\">\n                    <div id=\"cloud-tie-wrapper\" class=\"cloud-tie-wrapper\"></div>\n                </div>\n            </div>\n            <div class=\"sidebar-toggle\">\n                <div class=\"sidebar-toggle-line-wrap\">\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-first\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-middle\"></span>\n                    <span class=\"sidebar-toggle-line sidebar-toggle-line-last\"></span>\n                </div>\n            </div>\n\n            <aside id=\"sidebar\" class=\"sidebar\">\n                <div class=\"sidebar-inner\">\n                    <section class=\"site-overview sidebar-panel sidebar-panel-active\">\n                        <div class=\"site-author motion-element\" itemprop=\"author\" itemscope itemtype=\"http://schema.org/Person\">\n                            <img class=\"site-author-image\" itemprop=\"image\"\n                                 src=\"/uploads/avatar.png\"\n                                 alt=\"Cherry\" />\n                            <p class=\"site-author-name\" itemprop=\"name\">Cherry</p>\n\n                            <p class=\"site-description motion-element\" itemprop=\"description\">做更好的自己</p>\n\n                        </div>\n                        <nav class=\"site-state motion-element\">\n                            <div class=\"site-state-item site-state-posts\">\n                                <a href=\"/archives\">\n                                    <span class=\"site-state-item-count\">23</span>\n                                    <span class=\"site-state-item-name\">日志</span>\n                                </a>\n                            </div>\n\n                            <div class=\"site-state-item site-state-categories\">\n                                <a href=\"/categories/index.html\">\n                                    <span class=\"site-state-item-count\">7</span>\n                                    <span class=\"site-state-item-name\">分类</span>\n                                </a>\n                            </div>\n\n                            <div class=\"site-state-item site-state-tags\">\n                                <a href=\"/tags/index.html\">\n                                    <span class=\"site-state-item-count\">13</span>\n                                    <span class=\"site-state-item-name\">标签</span>\n                                </a>\n                            </div>\n                        </nav>\n                        <div class=\"links-of-author motion-element\">\n\n\n              <span class=\"links-of-author-item\">\n                <a href=\"http://github.com/sunshine940326\" target=\"_blank\" title=\"GitHub\">\n\n                    <i class=\"fa fa-fw fa-github\"></i>\n\n                  GitHub\n                </a>\n              </span>\n\n                            <span class=\"links-of-author-item\">\n                <a href=\"http://weibo.com/5094854684/profile?rightmod=1&wvr=6&mod=personinfo\" target=\"_blank\" title=\"Weibo\">\n\n                    <i class=\"fa fa-fw fa-weibo\"></i>\n\n                  Weibo\n                </a>\n              </span></div>\n                    </section>\n\n                </div>\n\n                <div id=\"music163player\">\n                    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\"></iframe>\n                </div>\n            </aside>\n        </div>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <div class=\"footer-inner\">\n            <div class=\"copyright\" >\n                &copy;\n                <span itemprop=\"copyrightYear\">2017</span>\n                <span class=\"with-love\">\n    <i class=\"fa fa-heart\"></i>\n  </span>\n                <span class=\"author\" itemprop=\"copyrightHolder\">Cherry</span>\n            </div>\n\n\n            <div class=\"powered-by\">\n                由 <a class=\"theme-link\" href=\"https://hexo.io\">Hexo</a> 强力驱动\n            </div>\n\n            <div class=\"theme-info\">\n                主题 -\n                <a class=\"theme-link\" href=\"https://github.com/iissnan/hexo-theme-next\">\n                    NexT.Muse\n                </a>\n            </div>\n\n\n\n            <div class=\"busuanzi-count\">\n                <script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n\n\n                <span class=\"site-uv\">\n      <i class=\"fa fa-user\"></i> 访问用户：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_uv\"></span>\n      人\n    </span>\n\n\n\n                <span class=\"site-pv\">\n      <i class=\"fa fa-eye\"></i> 访问次数：\n      <span class=\"busuanzi-value\" id=\"busuanzi_value_site_pv\"></span>\n      次\n    </span>\n\n            </div>\n\n\n\n        </div>\n    </footer>\n\n\n    <div class=\"back-to-top\">\n        <i class=\"fa fa-arrow-up\"></i>\n\n    </div>\n\n\n</div>\n\n\n\n<script type=\"text/javascript\">\n    if (Object.prototype.toString.call(window.Promise) !== '[object Function]') {\n        window.Promise = null;\n    }\n</script>\n<script type=\"text/javascript\" src=\"/lib/jquery/index.js?v=2.1.3\"></script>\n\n<script type=\"text/javascript\" src=\"/lib/fastclick/lib/fastclick.min.js?v=1.0.6\"></script>\n\n<script type=\"text/javascript\" src=\"/lib/jquery_lazyload/jquery.lazyload.js?v=1.9.7\"></script>\n\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.min.js?v=1.2.1\"></script>\n<script type=\"text/javascript\" src=\"/lib/velocity/velocity.ui.min.js?v=1.2.1\"></script>\n<script type=\"text/javascript\" src=\"/lib/fancybox/source/jquery.fancybox.pack.js?v=2.1.5\"></script>\n<script type=\"text/javascript\" src=\"/js/src/utils.js?v=5.1.0\"></script>\n<script type=\"text/javascript\" src=\"/js/src/motion.js?v=5.1.0\"></script>\n<script type=\"text/javascript\" src=\"/js/src/bootstrap.js?v=5.1.0\"></script>\n<script>\n    var cloudTieConfig = {\n        url: document.location.href,\n        sourceId: \"\",\n        productKey: \"8e7fb6982ddb4d13ad9daf445e511984\",\n        target: \"cloud-tie-wrapper\"\n    };\n</script>\n<script src=\"https://img1.ws.126.net/f2e/tie/yun/sdk/loader.js\"></script>\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"SXu3fAQtWilv2Jtsr5eHvgCH-gzGzoHsz\", \"R79G2KT1xhiu9Ngp3Dnjsn7k\");</script>\n<script>\n    function showTime(Counter) {\n        var query = new AV.Query(Counter);\n        var entries = [];\n        var $visitors = $(\".leancloud_visitors\");\n\n        $visitors.each(function () {\n            entries.push( $(this).attr(\"id\").trim() );\n        });\n\n        query.containedIn('url', entries);\n        query.find()\n            .done(function (results) {\n                var COUNT_CONTAINER_REF = '.leancloud-visitors-count';\n\n                if (results.length === 0) {\n                    $visitors.find(COUNT_CONTAINER_REF).text(0);\n                    return;\n                }\n\n                for (var i = 0; i < results.length; i++) {\n                    var item = results[i];\n                    var url = item.get('url');\n                    var time = item.get('time');\n                    var element = document.getElementById(url);\n\n                    $(element).find(COUNT_CONTAINER_REF).text(time);\n                }\n                for(var i = 0; i < entries.length; i++) {\n                    var url = entries[i];\n                    var element = document.getElementById(url);\n                    var countSpan = $(element).find(COUNT_CONTAINER_REF);\n                    if( countSpan.text() == '') {\n                        countSpan.text(0);\n                    }\n                }\n            })\n            .fail(function (object, error) {\n                console.log(\"Error: \" + error.code + \" \" + error.message);\n            });\n    }\n\n    function addCount(Counter) {\n        var $visitors = $(\".leancloud_visitors\");\n        var url = $visitors.attr('id').trim();\n        var title = $visitors.attr('data-flag-title').trim();\n        var query = new AV.Query(Counter);\n\n        query.equalTo(\"url\", url);\n        query.find({\n            success: function(results) {\n                if (results.length > 0) {\n                    var counter = results[0];\n                    counter.fetchWhenSave(true);\n                    counter.increment(\"time\");\n                    counter.save(null, {\n                        success: function(counter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(counter.get('time'));\n                        },\n                        error: function(counter, error) {\n                            console.log('Failed to save Visitor num, with error message: ' + error.message);\n                        }\n                    });\n                } else {\n                    var newcounter = new Counter();\n                    /* Set ACL */\n                    var acl = new AV.ACL();\n                    acl.setPublicReadAccess(true);\n                    acl.setPublicWriteAccess(true);\n                    newcounter.setACL(acl);\n                    /* End Set ACL */\n                    newcounter.set(\"title\", title);\n                    newcounter.set(\"url\", url);\n                    newcounter.set(\"time\", 1);\n                    newcounter.save(null, {\n                        success: function(newcounter) {\n                            var $element = $(document.getElementById(url));\n                            $element.find('.leancloud-visitors-count').text(newcounter.get('time'));\n                        },\n                        error: function(newcounter, error) {\n                            console.log('Failed to create');\n                        }\n                    });\n                }\n            },\n            error: function(error) {\n                console.log('Error:' + error.code + \" \" + error.message);\n            }\n        });\n    }\n\n    $(function() {\n        var Counter = AV.Object.extend(\"Counter\");\n        if ($('.leancloud_visitors').length == 1) {\n            addCount(Counter);\n        } else if ($('.post-title-link').length > 1) {\n            showTime(Counter);\n        }\n    });\n</script>\n\n\n\n\n<script>\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https') {\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else {\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n</script>\n\n\n\n\n\n\n\n<div class=\"bg_content\">\n    <canvas id=\"canvas\"></canvas>\n</div>\n<script>\n    //360站长平台\n\n    (function(){\n        var src = (document.location.protocol == \"http:\") ? \"http://js.passport.qihucdn.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\":\"https://jspassport.ssl.qhimg.com/11.0.1.js?940223423bbed5ceb474bec1058bc6fb\";\n        document.write('<script src=\"' + src + '\" id=\"sozz\"><\\/script>');\n    })();\n\n    //百度站长\n    (function(){\n        var bp = document.createElement('script');\n        var curProtocol = window.location.protocol.split(':')[0];\n        if (curProtocol === 'https'){\n            bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';\n        }\n        else{\n            bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n        }\n        var s = document.getElementsByTagName(\"script\")[0];\n        s.parentNode.insertBefore(bp, s);\n    })();\n    function Star(id, x, y){\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*2)+1;\n        var alpha = (Math.floor(Math.random()*10)+1)/10/2;\n        this.color = \"rgba(255,255,255,\"+alpha+\")\";\n    }\n\n    Star.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Star.prototype.move = function() {\n        this.y -= .15;\n        if (this.y <= -10) this.y = HEIGHT + 10;\n        this.draw();\n    }\n\n    Star.prototype.die = function() {\n        stars[this.id] = null;\n        delete stars[this.id];\n    }\n\n\n    function Dot(id, x, y, r) {\n        this.id = id;\n        this.x = x;\n        this.y = y;\n        this.r = Math.floor(Math.random()*5)+1;\n        this.maxLinks = 2;\n        this.speed = .5;\n        this.a = .5;\n        this.aReduction = .005;\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n\n        this.dir = Math.floor(Math.random()*140)+200;\n    }\n\n    Dot.prototype.draw = function() {\n        ctx.fillStyle = this.color;\n        ctx.shadowBlur = this.r * 2;\n        ctx.beginPath();\n        ctx.arc(this.x, this.y, this.r, 0, 2 * Math.PI, false);\n        ctx.closePath();\n        ctx.fill();\n    }\n\n    Dot.prototype.link = function() {\n        if (this.id == 0) return;\n        var previousDot1 = getPreviousDot(this.id, 1);\n        var previousDot2 = getPreviousDot(this.id, 2);\n        var previousDot3 = getPreviousDot(this.id, 3);\n        if (!previousDot1) return;\n        ctx.strokeStyle = this.linkColor;\n        ctx.moveTo(previousDot1.x, previousDot1.y);\n        ctx.beginPath();\n        ctx.lineTo(this.x, this.y);\n        if (previousDot2 != false) ctx.lineTo(previousDot2.x, previousDot2.y);\n        if (previousDot3 != false) ctx.lineTo(previousDot3.x, previousDot3.y);\n        ctx.stroke();\n        ctx.closePath();\n    }\n\n    function getPreviousDot(id, stepback) {\n        if (id == 0 || id - stepback < 0) return false;\n        if (typeof dots[id - stepback] != \"undefined\") return dots[id - stepback];\n        else return false;//getPreviousDot(id - stepback);\n    }\n\n    Dot.prototype.move = function() {\n        this.a -= this.aReduction;\n        if (this.a <= 0) {\n            this.die();\n            return\n        }\n        this.color = \"rgba(255,255,255,\"+this.a+\")\";\n        this.linkColor = \"rgba(255,255,255,\"+this.a/4+\")\";\n        this.x = this.x + Math.cos(degToRad(this.dir))*this.speed,\n            this.y = this.y + Math.sin(degToRad(this.dir))*this.speed;\n\n        this.draw();\n        this.link();\n    }\n\n    Dot.prototype.die = function() {\n        dots[this.id] = null;\n        delete dots[this.id];\n    }\n\n\n    var canvas  = document.getElementById('canvas'),\n        ctx = canvas.getContext('2d'),\n        WIDTH,\n        HEIGHT,\n        mouseMoving = false,\n        mouseMoveChecker,\n        mouseX,\n        mouseY,\n        stars = [],\n        initStarsPopulation = 80,\n        dots = [],\n        dotsMinDist = 2,\n        maxDistFromCursor = 50;\n\n    setCanvasSize();\n    init();\n\n    function setCanvasSize() {\n        WIDTH = document.documentElement.clientWidth,\n            HEIGHT = document.documentElement.clientHeight;\n\n        canvas.setAttribute(\"width\", WIDTH);\n        canvas.setAttribute(\"height\", HEIGHT);\n    }\n\n    function init() {\n        ctx.strokeStyle = \"white\";\n        ctx.shadowColor = \"white\";\n        for (var i = 0; i < initStarsPopulation; i++) {\n            stars[i] = new Star(i, Math.floor(Math.random()*WIDTH), Math.floor(Math.random()*HEIGHT));\n            //stars[i].draw();\n        }\n        ctx.shadowBlur = 0;\n        animate();\n    }\n\n    function animate() {\n        ctx.clearRect(0, 0, WIDTH, HEIGHT);\n\n        for (var i in stars) {\n            stars[i].move();\n        }\n        for (var i in dots) {\n            dots[i].move();\n        }\n        drawIfMouseMoving();\n        requestAnimationFrame(animate);\n    }\n\n    window.onmousemove = function(e){\n        mouseMoving = true;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        clearInterval(mouseMoveChecker);\n        mouseMoveChecker = setTimeout(function() {\n            mouseMoving = false;\n        }, 100);\n    }\n\n\n    function drawIfMouseMoving(){\n        if (!mouseMoving) return;\n\n        if (dots.length == 0) {\n            dots[0] = new Dot(0, mouseX, mouseY);\n            dots[0].draw();\n            return;\n        }\n\n        var previousDot = getPreviousDot(dots.length, 1);\n        var prevX = previousDot.x;\n        var prevY = previousDot.y;\n\n        var diffX = Math.abs(prevX - mouseX);\n        var diffY = Math.abs(prevY - mouseY);\n\n        if (diffX < dotsMinDist || diffY < dotsMinDist) return;\n\n        var xVariation = Math.random() > .5 ? -1 : 1;\n        xVariation = xVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        var yVariation = Math.random() > .5 ? -1 : 1;\n        yVariation = yVariation*Math.floor(Math.random()*maxDistFromCursor)+1;\n        dots[dots.length] = new Dot(dots.length, mouseX+xVariation, mouseY+yVariation);\n        dots[dots.length-1].draw();\n        dots[dots.length-1].link();\n    }\n    //setInterval(drawIfMouseMoving, 17);\n\n    function degToRad(deg) {\n        return deg * (Math.PI / 180);\n    }\n</script>\n</body>\n</html>\n","date":"2017-07-01T13:44:27.000Z","updated":"2017-07-01T13:44:27.000Z","path":"photo/index.html","title":"","comments":1,"_id":"cj4ldrqh4000kaaxilkk1xenx"}],"Post":[{"title":"自律才能自由","date":"2017-03-02T13:55:57.000Z","_content":"我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~\n因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”\n\n<!--more-->\n\n# 初识“自律才有自由”\n第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 [坚持跑步到底有什么改变](https://www.zhihu.com/question/28656794?utm_campaign=official_account&utm_source=weibo&utm_medium=zhihu&utm_content=question)\n\n看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。\n\n其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下\n\n# 什么是自律和自由\n其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！\n\n但其实不然\n\n**自律 -- 懂得约束自己的欲望、自己管理自己**\n\n**自由 -- 只听从本心意愿，不受他人摆布**\n\n# 为什么说自律才有自由\n\n其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由\n\n举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望\n\n# 为什么要自律 \n\n## 达到自由\n我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己\n\n## 成长\n人的懒惰本质 -- 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）\n\n只要做让自己感觉不舒服的事情才能成长（出自唐宁）\n\n# 自律需要怎么做\n\n**发自内心的想要到达哪一种自由**\n\n“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”\n-- 坚持数年长跑的runner\n\n只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语\n\n\n","source":"_posts/Freedom-of-self-discipline.md","raw":"---\ntitle: 自律才能自由\ndate: 2017-03-02 21:55:57\ntags: 脑子里的小想法\ncategories: 随笔\n---\n我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~\n因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”\n\n<!--more-->\n\n# 初识“自律才有自由”\n第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 [坚持跑步到底有什么改变](https://www.zhihu.com/question/28656794?utm_campaign=official_account&utm_source=weibo&utm_medium=zhihu&utm_content=question)\n\n看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。\n\n其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下\n\n# 什么是自律和自由\n其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！\n\n但其实不然\n\n**自律 -- 懂得约束自己的欲望、自己管理自己**\n\n**自由 -- 只听从本心意愿，不受他人摆布**\n\n# 为什么说自律才有自由\n\n其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由\n\n举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望\n\n# 为什么要自律 \n\n## 达到自由\n我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己\n\n## 成长\n人的懒惰本质 -- 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）\n\n只要做让自己感觉不舒服的事情才能成长（出自唐宁）\n\n# 自律需要怎么做\n\n**发自内心的想要到达哪一种自由**\n\n“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”\n-- 坚持数年长跑的runner\n\n只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语\n\n\n","slug":"Freedom-of-self-discipline","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqg10001aaxiamniy5cv"},{"title":"Git使用中的报错情况","date":"2017-03-11T15:54:11.000Z","description":["git","git实战","git报错"],"_content":"![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n<!--more-->\n\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n\n`git pull`时报错\n```\n$ git pull\nremote: Counting objects: 100, done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 60 (delta 36), reused 3 (delta 0)\nUnpacking objects: 100% (60/60), done.\nFrom 180.166.124.26:/var/git/fzc\n   d8ec768..7c13661  master     -> origin/master\nUpdating d8ec768..7c13661\nerror: Your local changes to the following files would be overwritten by merge:\n        protected/modules/m/views/detail/house.php\n        protected/modules/m/views/list/house.php\n        protected/modules/web/views/default/list.php\n        protected/modules/web/views/detail/house.php\n        protected/modules/web/views/list/house.php\n        static_src/web/js/houseList/nprogress.js\n        static_src/web/js/list/nprogress.js\nPlease commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n```\n大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突\n解决方法（出现这样的原因是你在commit之前进行了pull，正确的顺序应该是先进行`git add`、`git commit`、然后再进行拉去远端的代码`git pull`，解决完冲突之后再push）\n1. 如果本地修改的文件不需要提交了，直接放弃就可以了\n ```\n $ git checkout --filename\n ```\n 然后远端的文件就覆盖了你的本地文件,之后就可以`git add`、`git commit`、`git pull`、`git push`了\n \n 2. 还可以保存本地的状态\n```\n//暂存当前文件\n$ git stash [save message]\nsave可以对进度进行备注\n\n\n//查看当前工作区和版本库区别\n$ git diff HEAD\n\n//显示已暂存列表\n$ git stash list\n\n//恢复最近一次暂存区\n$ git stash pop [--index][<stash>]\n[]中为可选参数\n--index 不仅恢复工作区，还恢复暂存区\n<stash>指定恢复到具体的进度\n\n//删除进度（默认删除最新进度）\n$ git stash drop [<stash>]\n\n//删除所有进度\n$ git stash clear\n\n//基于进度创建分支 \n$ git stash branch <branchname> <stash>\n```\n\n在pull的时候经常会出现下面的情况\n![image](http://images2015.cnblogs.com/blog/630011/201603/630011-20160315120522896-1718649799.jpg)\n\n```\nPlease enter a commit message to explain why this merge is necessary.\n请输入提交消息来解释为什么这种合并是必要的\n```\n这种轻情况在pull或者合并分支的时候会出现，为什么会出现我也不清楚原因= =\n - 1按键盘字母 i 进入insert模式\n\n - 2修改最上面那行黄色合并信息,可以不修改\n\n - 3按键盘左上角\"Esc\"\n\n - 4输入\":wq\",注意是冒号+wq,按回车键即可\n\n可以直接进行3、4步，","source":"_posts/ErrorReportingInGitUse.md","raw":"---\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\ndescription: [git,git实战,git报错]\n---\n![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n<!--more-->\n\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n\n`git pull`时报错\n```\n$ git pull\nremote: Counting objects: 100, done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 60 (delta 36), reused 3 (delta 0)\nUnpacking objects: 100% (60/60), done.\nFrom 180.166.124.26:/var/git/fzc\n   d8ec768..7c13661  master     -> origin/master\nUpdating d8ec768..7c13661\nerror: Your local changes to the following files would be overwritten by merge:\n        protected/modules/m/views/detail/house.php\n        protected/modules/m/views/list/house.php\n        protected/modules/web/views/default/list.php\n        protected/modules/web/views/detail/house.php\n        protected/modules/web/views/list/house.php\n        static_src/web/js/houseList/nprogress.js\n        static_src/web/js/list/nprogress.js\nPlease commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n```\n大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突\n解决方法（出现这样的原因是你在commit之前进行了pull，正确的顺序应该是先进行`git add`、`git commit`、然后再进行拉去远端的代码`git pull`，解决完冲突之后再push）\n1. 如果本地修改的文件不需要提交了，直接放弃就可以了\n ```\n $ git checkout --filename\n ```\n 然后远端的文件就覆盖了你的本地文件,之后就可以`git add`、`git commit`、`git pull`、`git push`了\n \n 2. 还可以保存本地的状态\n```\n//暂存当前文件\n$ git stash [save message]\nsave可以对进度进行备注\n\n\n//查看当前工作区和版本库区别\n$ git diff HEAD\n\n//显示已暂存列表\n$ git stash list\n\n//恢复最近一次暂存区\n$ git stash pop [--index][<stash>]\n[]中为可选参数\n--index 不仅恢复工作区，还恢复暂存区\n<stash>指定恢复到具体的进度\n\n//删除进度（默认删除最新进度）\n$ git stash drop [<stash>]\n\n//删除所有进度\n$ git stash clear\n\n//基于进度创建分支 \n$ git stash branch <branchname> <stash>\n```\n\n在pull的时候经常会出现下面的情况\n![image](http://images2015.cnblogs.com/blog/630011/201603/630011-20160315120522896-1718649799.jpg)\n\n```\nPlease enter a commit message to explain why this merge is necessary.\n请输入提交消息来解释为什么这种合并是必要的\n```\n这种轻情况在pull或者合并分支的时候会出现，为什么会出现我也不清楚原因= =\n - 1按键盘字母 i 进入insert模式\n\n - 2修改最上面那行黄色合并信息,可以不修改\n\n - 3按键盘左上角\"Esc\"\n\n - 4输入\":wq\",注意是冒号+wq,按回车键即可\n\n可以直接进行3、4步，","slug":"ErrorReportingInGitUse","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqg80003aaximxfzy12c"},{"title":"前端面试","date":"2017-03-06T15:15:56.000Z","description":["前端面试","面试题库"],"_content":"最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下\n某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理\n\n<!--more-->\n# Q:rem布局的原理\n\nA：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。\nrem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px\n\n[移动端页面开发适配 rem布局原理](http://www.tuicool.com/articles/FjMfuyM)\n\n> 网易的做法：\n> \n> 1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。\n> \n> \n> ```\n> <meta name=\"viewport\"content=\"initial-scale=1,maximum-scale=1, minimum-scale=1”>\n> ```\n> \n> \n> 2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为`width:6.4rem（640/100）`，当我们将布局视口设置为320时，于是html的 `font-size=deviceWidth / 6.4`。\n> \n> 3) 通过`document.documentElement.clientWidth`获取 `deviceWidth`；\n> \n> 4) 当页面的`dom ready`后设置`html font-size`,\n> \n> \n> ```\n> document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’\n> ```\n> \n> 5) 通过 `mediaQuery` 设置字体大小，字体大小不可以使用rem,原因是误差太大。\n> \n> 以640的设计稿为例最终的设置html `font-size`代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊\n> \n> \n> ```\n> var deviceWidth = document.documentElement.clientWidth;\n> if(deviceWidth > 640) deviceWidth = 640;\n> document.documentElement.style.fontSize = deviceWidth / 6.4 + 'px';\n> 这里if(deviceWidth > 640) deviceWidth = 640;\n> ```\n>  是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；\n\n```\nvar documentElement = document.documentElement;\n\n    if (documentElement.clientWidth >= 750) {\n        documentElement.style.fontSize = '54px';\n    } else {\n        documentElement.style.fontSize = \"${documentElement.getBoundingClientRect().width / 10}px\";\n    }\n\n\n    (function () {\n        document.addEventListener('DOMContentLoaded', function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        }, false);\n        window.onresize = function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        };\n\n        console.log(document.width)\n    })();\n```\n\n# Q:常见的布局方式\n\nA：\n1. 静态布局（Static Layout）\n2. 弹性布局（Flex）\n3. 自适应布局（Adapive Layout）\n4. 流式布局（Liquid Layout）\n5. 响应式布局（Responsive Layout）\n[web前端开发之几种布局方式之响应式布局](http://blog.csdn.net/gertYY/article/details/52764527)\n\n# Q:怎么使用媒体查询\n\n```\n@media screen and (max-width:720px) and (min-width:320px){\n\n      body{\n\n       background-color:red;\n\n       }\n\n@media screen and (max-width:320px){\n\n      body{\n\n         background-color:blue;\n\n       }\n\n}\n```\n\n# Q:移动端优化方法\n# Q：js模块化\n# Q:怎么实现延迟加载\n# Q:你对闭包的理解\n# Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\n\n上交所初试之笔试题：\n# 什么是“use strait”有什么好处有什么坏处\n> ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n> \n> 设立\"严格模式\"的目的，主要有以下几个：\n> \n> 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n> \n> 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n> \n> 3. 提高编译器效率，增加运行速度；\n> \n> 4. 为未来新版本的Javascript做好铺垫。\n> \n> 注：经过测试 IE6,7,8,9 均不支持严格模式。\n> \n> 缺点：\n> \n> 现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。\n\n# 解释下javascript中this是怎么工作的\n> JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：\n> \n> function foo() {\n> \n>   // 在终端输出 this 对象\n>   console.log(this)\n> }\n> \n> foo() // 输出： global 对象 在浏览器中即 window 对象\n> \n> 但是也可以在函数被运行的时候动态指定（call,apply, bind）：\n> \n> var bar = { name: 'bar' }\n> \n> foo.call(bar) // 输出： { name: 'bar' }\n> \n> 存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。\n> \n> new foo() // 输出： {} 在构造函数内部创建一个对象\n> \n> 作者：管斌瑞\n> 链接：https://www.zhihu.com/question/19624483/answer/25745246\n> 来源：知乎\n> 著作权归作者所有，转载请联系作者获得授权。\n\n\n# 有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\n\n```\na.length === 0 ? a.push(1) : a.shift();\n```\n\n\n\n# 描述下`reset`css文件的作用和使用它的好处\n重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果\n\n# 说说前端怎么如何解决异步回调地狱\n\n# 请解释Function.prototype.bind的作用\n> bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。\n\n> 例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。\n\n# 描述以下变量的区别：null，undefined，该如何检测他们\n## null表示\"没有对象\"，即该处不应该有值。典型用法是：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n## undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n\n## 判断undefined: \n复制代码 代码如下:\n\n```\n<span style=\"font-size: small;\">var tmp = undefined; \nif (typeof(tmp) == \"undefined\"){ \nalert(\"undefined\"); \n}</span>\n```\n\n## 判断null: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = null; \nif (!tmp && typeof(tmp)!=\"undefined\" && tmp!=0){ \nalert(\"null\"); \n}　</span>\n```\n\n## 判断NaN: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = 0/0; \nif(isNaN(tmp)){ \nalert(\"NaN\"); \n}</span>\n```\n\n\n\n# 说说类的创建、继承和闭包\n\n# 有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\n\n```\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n sum = 0;\n sum = a.slice(0, 10).reduce(function(pre, current) {\n 　　return pre + current;\n });\n  \n console.log(sum); //55\n```\n\n\n# 下面的代码会输出什么：\n\n```\nvar test = (function(a) {\n    this.a = a;\n    return function(b) {\n        return this.a + b;\n    }\n} (function(a, b) {\n    return a;\n}(1, 2))); \n\nconsole.log(test(4)); //输出什么？？？？\n```\n\n最后发现这大部分都是阿里的面试题= =\n[阿里前端笔试题目](http://www.cnblogs.com/beidan/p/5285742.html)","source":"_posts/Front-interview.md","raw":"---\ntitle: 前端面试\ndate: 2017-03-06 23:15:56\ntags: [面试,js,知识点]\ncategories: 面试题库\ndescription: [前端面试,面试题库]\n---\n最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下\n某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理\n\n<!--more-->\n# Q:rem布局的原理\n\nA：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。\nrem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px\n\n[移动端页面开发适配 rem布局原理](http://www.tuicool.com/articles/FjMfuyM)\n\n> 网易的做法：\n> \n> 1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。\n> \n> \n> ```\n> <meta name=\"viewport\"content=\"initial-scale=1,maximum-scale=1, minimum-scale=1”>\n> ```\n> \n> \n> 2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为`width:6.4rem（640/100）`，当我们将布局视口设置为320时，于是html的 `font-size=deviceWidth / 6.4`。\n> \n> 3) 通过`document.documentElement.clientWidth`获取 `deviceWidth`；\n> \n> 4) 当页面的`dom ready`后设置`html font-size`,\n> \n> \n> ```\n> document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’\n> ```\n> \n> 5) 通过 `mediaQuery` 设置字体大小，字体大小不可以使用rem,原因是误差太大。\n> \n> 以640的设计稿为例最终的设置html `font-size`代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊\n> \n> \n> ```\n> var deviceWidth = document.documentElement.clientWidth;\n> if(deviceWidth > 640) deviceWidth = 640;\n> document.documentElement.style.fontSize = deviceWidth / 6.4 + 'px';\n> 这里if(deviceWidth > 640) deviceWidth = 640;\n> ```\n>  是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；\n\n```\nvar documentElement = document.documentElement;\n\n    if (documentElement.clientWidth >= 750) {\n        documentElement.style.fontSize = '54px';\n    } else {\n        documentElement.style.fontSize = \"${documentElement.getBoundingClientRect().width / 10}px\";\n    }\n\n\n    (function () {\n        document.addEventListener('DOMContentLoaded', function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        }, false);\n        window.onresize = function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        };\n\n        console.log(document.width)\n    })();\n```\n\n# Q:常见的布局方式\n\nA：\n1. 静态布局（Static Layout）\n2. 弹性布局（Flex）\n3. 自适应布局（Adapive Layout）\n4. 流式布局（Liquid Layout）\n5. 响应式布局（Responsive Layout）\n[web前端开发之几种布局方式之响应式布局](http://blog.csdn.net/gertYY/article/details/52764527)\n\n# Q:怎么使用媒体查询\n\n```\n@media screen and (max-width:720px) and (min-width:320px){\n\n      body{\n\n       background-color:red;\n\n       }\n\n@media screen and (max-width:320px){\n\n      body{\n\n         background-color:blue;\n\n       }\n\n}\n```\n\n# Q:移动端优化方法\n# Q：js模块化\n# Q:怎么实现延迟加载\n# Q:你对闭包的理解\n# Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\n\n上交所初试之笔试题：\n# 什么是“use strait”有什么好处有什么坏处\n> ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n> \n> 设立\"严格模式\"的目的，主要有以下几个：\n> \n> 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n> \n> 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n> \n> 3. 提高编译器效率，增加运行速度；\n> \n> 4. 为未来新版本的Javascript做好铺垫。\n> \n> 注：经过测试 IE6,7,8,9 均不支持严格模式。\n> \n> 缺点：\n> \n> 现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。\n\n# 解释下javascript中this是怎么工作的\n> JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：\n> \n> function foo() {\n> \n>   // 在终端输出 this 对象\n>   console.log(this)\n> }\n> \n> foo() // 输出： global 对象 在浏览器中即 window 对象\n> \n> 但是也可以在函数被运行的时候动态指定（call,apply, bind）：\n> \n> var bar = { name: 'bar' }\n> \n> foo.call(bar) // 输出： { name: 'bar' }\n> \n> 存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。\n> \n> new foo() // 输出： {} 在构造函数内部创建一个对象\n> \n> 作者：管斌瑞\n> 链接：https://www.zhihu.com/question/19624483/answer/25745246\n> 来源：知乎\n> 著作权归作者所有，转载请联系作者获得授权。\n\n\n# 有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\n\n```\na.length === 0 ? a.push(1) : a.shift();\n```\n\n\n\n# 描述下`reset`css文件的作用和使用它的好处\n重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果\n\n# 说说前端怎么如何解决异步回调地狱\n\n# 请解释Function.prototype.bind的作用\n> bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。\n\n> 例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。\n\n# 描述以下变量的区别：null，undefined，该如何检测他们\n## null表示\"没有对象\"，即该处不应该有值。典型用法是：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n## undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n\n## 判断undefined: \n复制代码 代码如下:\n\n```\n<span style=\"font-size: small;\">var tmp = undefined; \nif (typeof(tmp) == \"undefined\"){ \nalert(\"undefined\"); \n}</span>\n```\n\n## 判断null: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = null; \nif (!tmp && typeof(tmp)!=\"undefined\" && tmp!=0){ \nalert(\"null\"); \n}　</span>\n```\n\n## 判断NaN: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = 0/0; \nif(isNaN(tmp)){ \nalert(\"NaN\"); \n}</span>\n```\n\n\n\n# 说说类的创建、继承和闭包\n\n# 有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\n\n```\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n sum = 0;\n sum = a.slice(0, 10).reduce(function(pre, current) {\n 　　return pre + current;\n });\n  \n console.log(sum); //55\n```\n\n\n# 下面的代码会输出什么：\n\n```\nvar test = (function(a) {\n    this.a = a;\n    return function(b) {\n        return this.a + b;\n    }\n} (function(a, b) {\n    return a;\n}(1, 2))); \n\nconsole.log(test(4)); //输出什么？？？？\n```\n\n最后发现这大部分都是阿里的面试题= =\n[阿里前端笔试题目](http://www.cnblogs.com/beidan/p/5285742.html)","slug":"Front-interview","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqgk0007aaxi7357wpe6"},{"title":"Git常用命令and完成一个小工作流","date":"2017-03-15T14:32:30.000Z","description":["git常用命令","git使用技巧","git实战"],"_content":"![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n\n本篇长期更新，记录一些常用的git命令和使用git团队合作的命令\n\n<!--more-->\n# git的工作步骤\n1. 修改文件的工作目录\n2. 将这些文件添加到暂存区\n3. 执行commit操作，发布版本\n4. push将发布的版本推送到git仓库\n\n# git常见术语\n## commit\n提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。\n\n## branches\n分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交\n\n## tags\ngit中的tag指向一次commit的id。通常用来给开发做版本号。\n\n### 打标签\n```\ngit tag -a v1.01 -m \"Relase version 1.01\"\n```\n\n`git tags `是打标签的命令，`-a`是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释\n\n### 提交标签到远端仓库\n```\ngit push origin -tags\n```\n\n就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。\n\n### 删除标签\n```\ngit tag -d v1.01\n```\n`-d`表示删除，后面跟版本号\n\n### 删除远程标签\n\n```\ngit push origin :refs/tags/v1.01\n```\n### 查看标签\n`git tag`\n或者\n`git tag -l`\n\n# clone\n克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息\n\n# pull\npull操作是用于两个存储库实例之间的同步\n\n# push\n将本地仓库中的文件同步到远端库中\n\n# head\nHEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中\n\n# git常用命令\n\n```\n初始化新版本库：git init\n全局设置：git config   --global user.name \"xzavier\"  git config --global user.email \"xzavier.xxx.com\"\n克隆版本库：git clone \"url\"\n查看分支：git branch\n创建分支：git branch branch_nema\n切换分支：git checkout branch_name\n创建+切换分支：git checkout -b branch_name\n合并某分支到当前分支：git merge branch_name\n重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支\n重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支\n删除分支：git branch -d branch_name \n强制删除分支： git branch -D branch_name\n删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支\n拉取代码：git pull orgin branch_name\n查看更改：git status\n查看更改细节：git diff file_name\n查看谁修改过代码：git blame filename\n回到上次修改：git reset --hard\n添加单个文件：git add filename.js\n添加所有js文件：git add *.js\n添加所有文件：git add .\n提交添加的文件：git commit -m \"your description about this branch\"\n提交单个文件：git commit -m \"your description about this branch\" filename.js\npush分支：git push orgin your_branch_name\n备份当前分支内容：git stash\n查看历史记录：git log\n创建标签：git tag 1.0.0  //标签无法重命名\n显示标签列表：git tag\n切出标签：git checkout 1.0.0\n删除标签：git tag -d 1.0.0\n查看git远程地址：git remote -v\n更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git\n\n```\n\n# git+gulp小工作流\n早上上班的时候切换到master分支，拉一下代码\n```\ngit pull origin master\n\n```\n开始写代码，新建一个分支\n```\ngit checkout -b branch_name\n\n```\n正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：\n```\ngit stash\n```\n切换到别的分支修改代码：\n```\ngit checkout -b branch_name\n\n```\n修复bug后提交代码查看修改：\n```\ngit status\n```\n需要查看修改的细节：\n```\ngit diff file_name\n```\n没有问题就提交：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n解决完bug切换到原来的分支\n```\ngit checkout -b you_old_branch\n```\n恢复刚刚保存的内容：\n```\ngit stash   //备份当前的工作区的内容，保存到git栈\n\ngit stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复\ngit stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复\ngit stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了\n```\n\n恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）\n```\ngit pull orgin master\n\n```\n或者\n```\ngit pull orgin his/her_branch_name\n```\n\n\n用gulp构建工具\n在修改bug的时候将环境调成本地环境\n`protected`<`config`<`dev.php`下的`#当前环境  'env' => ''`\n`env`为空为上线环境，`env`为`dev`为本地环境\n\n先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交\n\n然后查看完线上环境没有问题了可以进行`gulp build`，可能会报错\n\n```\nError: ENOENT: no such file or directory, open 'C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json'\n    at Error (native)\n```\n这是要clean一下，`gulp clean:temp`\n然后在`gulp build`\n之后就可以git三件套了\n\n\n摘自：[前端资源系列（1）-Git常用命令&设置快捷命令&小工作流](https://segmentfault.com/a/1190000005945614)\n\n\n","source":"_posts/GitCommands.md","raw":"---\ntitle: Git常用命令and完成一个小工作流\ndate: 2017-03-15 22:32:30\ntags: git \ncategories: git\ndescription: [git常用命令,git使用技巧,git实战]\n---\n![git图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493224022490&di=4b9c36844b17e0c6116d1fd5aa883baf&imgtype=0&src=http%3A%2F%2Fimages.cnblogs.com%2Fcnblogs_com%2Fqyf404%2F612381%2Fo_git-logo.png)\n\n本篇长期更新，记录一些常用的git命令和使用git团队合作的命令\n\n<!--more-->\n# git的工作步骤\n1. 修改文件的工作目录\n2. 将这些文件添加到暂存区\n3. 执行commit操作，发布版本\n4. push将发布的版本推送到git仓库\n\n# git常见术语\n## commit\n提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。\n\n## branches\n分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交\n\n## tags\ngit中的tag指向一次commit的id。通常用来给开发做版本号。\n\n### 打标签\n```\ngit tag -a v1.01 -m \"Relase version 1.01\"\n```\n\n`git tags `是打标签的命令，`-a`是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释\n\n### 提交标签到远端仓库\n```\ngit push origin -tags\n```\n\n就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。\n\n### 删除标签\n```\ngit tag -d v1.01\n```\n`-d`表示删除，后面跟版本号\n\n### 删除远程标签\n\n```\ngit push origin :refs/tags/v1.01\n```\n### 查看标签\n`git tag`\n或者\n`git tag -l`\n\n# clone\n克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息\n\n# pull\npull操作是用于两个存储库实例之间的同步\n\n# push\n将本地仓库中的文件同步到远端库中\n\n# head\nHEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中\n\n# git常用命令\n\n```\n初始化新版本库：git init\n全局设置：git config   --global user.name \"xzavier\"  git config --global user.email \"xzavier.xxx.com\"\n克隆版本库：git clone \"url\"\n查看分支：git branch\n创建分支：git branch branch_nema\n切换分支：git checkout branch_name\n创建+切换分支：git checkout -b branch_name\n合并某分支到当前分支：git merge branch_name\n重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支\n重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支\n删除分支：git branch -d branch_name \n强制删除分支： git branch -D branch_name\n删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支\n拉取代码：git pull orgin branch_name\n查看更改：git status\n查看更改细节：git diff file_name\n查看谁修改过代码：git blame filename\n回到上次修改：git reset --hard\n添加单个文件：git add filename.js\n添加所有js文件：git add *.js\n添加所有文件：git add .\n提交添加的文件：git commit -m \"your description about this branch\"\n提交单个文件：git commit -m \"your description about this branch\" filename.js\npush分支：git push orgin your_branch_name\n备份当前分支内容：git stash\n查看历史记录：git log\n创建标签：git tag 1.0.0  //标签无法重命名\n显示标签列表：git tag\n切出标签：git checkout 1.0.0\n删除标签：git tag -d 1.0.0\n查看git远程地址：git remote -v\n更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git\n\n```\n\n# git+gulp小工作流\n早上上班的时候切换到master分支，拉一下代码\n```\ngit pull origin master\n\n```\n开始写代码，新建一个分支\n```\ngit checkout -b branch_name\n\n```\n正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：\n```\ngit stash\n```\n切换到别的分支修改代码：\n```\ngit checkout -b branch_name\n\n```\n修复bug后提交代码查看修改：\n```\ngit status\n```\n需要查看修改的细节：\n```\ngit diff file_name\n```\n没有问题就提交：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n解决完bug切换到原来的分支\n```\ngit checkout -b you_old_branch\n```\n恢复刚刚保存的内容：\n```\ngit stash   //备份当前的工作区的内容，保存到git栈\n\ngit stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复\ngit stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复\ngit stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了\n```\n\n恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）\n```\ngit pull orgin master\n\n```\n或者\n```\ngit pull orgin his/her_branch_name\n```\n\n\n用gulp构建工具\n在修改bug的时候将环境调成本地环境\n`protected`<`config`<`dev.php`下的`#当前环境  'env' => ''`\n`env`为空为上线环境，`env`为`dev`为本地环境\n\n先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交\n\n然后查看完线上环境没有问题了可以进行`gulp build`，可能会报错\n\n```\nError: ENOENT: no such file or directory, open 'C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json'\n    at Error (native)\n```\n这是要clean一下，`gulp clean:temp`\n然后在`gulp build`\n之后就可以git三件套了\n\n\n摘自：[前端资源系列（1）-Git常用命令&设置快捷命令&小工作流](https://segmentfault.com/a/1190000005945614)\n\n\n","slug":"GitCommands","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqgp0009aaxikv2pg9jn"},{"title":"了解githubPages+hexo搭建博客的原理","date":"2017-02-26T06:30:15.000Z","_content":"之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","source":"_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","raw":"---\ntitle: 了解githubPages+hexo搭建博客的原理\ndate: 2017-02-26 14:30:15\ntags: hexo \ncategories: git\n---\n之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","slug":"Hexo-Understand-the-principles-of-githubPages-hexoblog","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqgt000baaxi5n0bvqms"},{"title":"hexo高级进阶","date":"2016-09-16T17:14:19.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","source":"_posts/Hexo-advanced.md","raw":"---\ntitle: hexo高级进阶\ndate: 2016-09-17 01:14:19\ntags: hexo \ncategories: git\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","slug":"Hexo-advanced","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqgx000gaaxi1oipynku"},{"title":"hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能","date":"2017-04-09T14:32:30.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n> 2017.5.8更新，具体过程往下看**仿知乎动态背景**\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 仿知乎动态背景\n------------------------\n> 2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新\n，完整步骤如下\n\n1：首先在主题文件的layout中的_layout.swig`C:\\Hexo\\themes\\next\\layout\\_layout.swig`中加入\n```\n  <div class=\"bg_content\">\n       <canvas id=\"canvas\"></canvas>\n  </div>\n 'use strict';\n\n    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Circle = function () {\n       function Circle(x, y) {\n            _classCallCheck(this, Circle);\n\n            this.x = x;\n            this.y = y;\n            this.r = Math.random() * 10;\n            this._mx = Math.random();\n            this._my = Math.random();\n        }\n\n       _createClass(Circle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n                //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n                ctx.fill();\n            }\n        }, {\n            key: 'drawLine',\n            value: function drawLine(ctx, _circle) {\n                var dx = this.x - _circle.x;\n                var dy = this.y - _circle.y;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                if (d < 150) {\n                    ctx.beginPath();\n\n                    ctx.moveTo(this.x, this.y); //起始点\n                    ctx.lineTo(_circle.x, _circle.y); //终点\n                    ctx.closePath();\n                    ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n                    ctx.stroke();\n                }\n            }\n\n\n        }, {\n            key: 'move',\n            value: function move(w, h) {\n                this._mx = this.x < w && this.x > 0 ? this._mx : -this._mx;\n                this._my = this.y < h && this.y > 0 ? this._my : -this._my;\n                this.x += this._mx / 2;\n                this.y += this._my / 2;\n            }\n        }]);\n\n        return Circle;\n    }();\n\n\n\n    var currentCirle = function (_Circle) {\n        _inherits(currentCirle, _Circle);\n\n        function currentCirle(x, y) {\n            _classCallCheck(this, currentCirle);\n\n            return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));\n        }\n\n        _createClass(currentCirle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n\n                //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n                this.r = 8;\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n                ctx.fillStyle = 'rgba(255, 77, 54, 0.6)';\n                ctx.fill();\n            }\n        }]);\n\n        return currentCirle;\n    }(Circle);\n\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var w = canvas.width = canvas.offsetWidth;\n    var h = canvas.height = canvas.offsetHeight;\n    var circles = [];\n    var current_circle = new currentCirle(0, 0);\n\n    var draw = function draw() {\n        ctx.clearRect(0, 0, w, h);\n        for (var i = 0; i < circles.length; i++) {\n            circles[i].move(w, h);\n            circles[i].drawCircle(ctx);\n            for (j = i + 1; j < circles.length; j++) {\n                circles[i].drawLine(ctx, circles[j]);\n            }\n        }\n        if (current_circle.x) {\n            current_circle.drawCircle(ctx);\n            for (var k = 1; k < circles.length; k++) {\n                current_circle.drawLine(ctx, circles[k]);\n            }\n        }\n        requestAnimationFrame(draw);\n    };\n\n    var init = function init(num) {\n        for (var i = 0; i < num; i++) {\n            circles.push(new Circle(Math.random() * w, Math.random() * h));\n        }\n        draw();\n    };\n    window.addEventListener('load', init(60));\n    window.onmousemove = function (e) {\n        e = e || window.event;\n        current_circle.x = e.clientX;\n        current_circle.y = e.clientY;\n    };\n    window.onmouseout = function () {\n        current_circle.x = null;\n        current_circle.y = null;\n    };\n```\n2：在主题文件的`C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl`文件中加上css代码\n```\n/*设置背景*/\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","source":"_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","raw":"---\ntitle: hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能\ndate: 2017-04-09 22:32:30\ntags: [git,hexo教程] \ncategories: git\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n> 2017.5.8更新，具体过程往下看**仿知乎动态背景**\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 仿知乎动态背景\n------------------------\n> 2017.5.8更新，很多朋友都私信我说这个动态背景没有效果，发现上面的js代码是es6写的，兼容性不好，并且中间也漏了一步添加css样式的，导致好多显示的不完全，特此更新\n，完整步骤如下\n\n1：首先在主题文件的layout中的_layout.swig`C:\\Hexo\\themes\\next\\layout\\_layout.swig`中加入\n```\n  <div class=\"bg_content\">\n       <canvas id=\"canvas\"></canvas>\n  </div>\n 'use strict';\n\n    var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n    function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\n    function _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n    var Circle = function () {\n       function Circle(x, y) {\n            _classCallCheck(this, Circle);\n\n            this.x = x;\n            this.y = y;\n            this.r = Math.random() * 10;\n            this._mx = Math.random();\n            this._my = Math.random();\n        }\n\n       _createClass(Circle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n                //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n                ctx.fill();\n            }\n        }, {\n            key: 'drawLine',\n            value: function drawLine(ctx, _circle) {\n                var dx = this.x - _circle.x;\n                var dy = this.y - _circle.y;\n                var d = Math.sqrt(dx * dx + dy * dy);\n                if (d < 150) {\n                    ctx.beginPath();\n\n                    ctx.moveTo(this.x, this.y); //起始点\n                    ctx.lineTo(_circle.x, _circle.y); //终点\n                    ctx.closePath();\n                    ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n                    ctx.stroke();\n                }\n            }\n\n\n        }, {\n            key: 'move',\n            value: function move(w, h) {\n                this._mx = this.x < w && this.x > 0 ? this._mx : -this._mx;\n                this._my = this.y < h && this.y > 0 ? this._my : -this._my;\n                this.x += this._mx / 2;\n                this.y += this._my / 2;\n            }\n        }]);\n\n        return Circle;\n    }();\n\n\n\n    var currentCirle = function (_Circle) {\n        _inherits(currentCirle, _Circle);\n\n        function currentCirle(x, y) {\n            _classCallCheck(this, currentCirle);\n\n            return _possibleConstructorReturn(this, (currentCirle.__proto__ || Object.getPrototypeOf(currentCirle)).call(this, x, y));\n        }\n\n        _createClass(currentCirle, [{\n            key: 'drawCircle',\n            value: function drawCircle(ctx) {\n                ctx.beginPath();\n\n                //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n                this.r = 8;\n                ctx.arc(this.x, this.y, this.r, 0, 360);\n                ctx.closePath();\n                //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n                ctx.fillStyle = 'rgba(255, 77, 54, 0.6)';\n                ctx.fill();\n            }\n        }]);\n\n        return currentCirle;\n    }(Circle);\n\n\n    window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n    var canvas = document.getElementById('canvas');\n    var ctx = canvas.getContext('2d');\n    var w = canvas.width = canvas.offsetWidth;\n    var h = canvas.height = canvas.offsetHeight;\n    var circles = [];\n    var current_circle = new currentCirle(0, 0);\n\n    var draw = function draw() {\n        ctx.clearRect(0, 0, w, h);\n        for (var i = 0; i < circles.length; i++) {\n            circles[i].move(w, h);\n            circles[i].drawCircle(ctx);\n            for (j = i + 1; j < circles.length; j++) {\n                circles[i].drawLine(ctx, circles[j]);\n            }\n        }\n        if (current_circle.x) {\n            current_circle.drawCircle(ctx);\n            for (var k = 1; k < circles.length; k++) {\n                current_circle.drawLine(ctx, circles[k]);\n            }\n        }\n        requestAnimationFrame(draw);\n    };\n\n    var init = function init(num) {\n        for (var i = 0; i < num; i++) {\n            circles.push(new Circle(Math.random() * w, Math.random() * h));\n        }\n        draw();\n    };\n    window.addEventListener('load', init(60));\n    window.onmousemove = function (e) {\n        e = e || window.event;\n        current_circle.x = e.clientX;\n        current_circle.y = e.clientY;\n    };\n    window.onmouseout = function () {\n        current_circle.x = null;\n        current_circle.y = null;\n    };\n```\n2：在主题文件的`C:\\Hexo\\themes\\next\\source\\css\\_custom\\custom.styl`文件中加上css代码\n```\n/*设置背景*/\n.bg_content{\n  position: fixed;\n  top: 0;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n}\n#canvas{\n  width: 100%;\n  height:100%;\n}\n/*将头部背景变为透明*/\n.header{\n  background: transparent ;\n}\n\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","slug":"Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqh2000jaaxi9wnpx3sj"},{"title":"hexo附件插入音乐、分享、评论、标签页、搜索","date":"2016-09-16T17:01:48.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","source":"_posts/Hexo-insert-music-share-comment-tab-search.md","raw":"---\ntitle: hexo附件插入音乐、分享、评论、标签页、搜索\ndate: 2016-09-17 01:01:48\ntags: hexo \ncategories: git\n\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","slug":"Hexo-insert-music-share-comment-tab-search","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqh7000naaxil5jx3gk4"},{"title":"javascript设计模式（一）","date":"2017-03-11T15:54:11.000Z","_content":" \n\n在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的[学习javascript设计模式](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)，本文的所有demo地址见本人的github：https://github.com/sunshine940326/js-object-demo\n<!--more-->\n\njavascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）\n\n#定义函数\n# 构造器模式\njs不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。\n\n在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。\n\n对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。\n\n## 创建对象\n在js中创建对象有三种基本方式：\n下面的每一种方式都会创建一个新对象\n1. 对象直接量\n\n```\nvar empty = {};\n    console.log(empty);\n    var point = {\n        x:0,\n        y:1\n    }\n    console.log(point.x,+point.y)\n    var point2 = {\n        x:point.x,\n        y:point.y+1\n    }\n    console.log(\"point2.x\" + \":\"+ point2.x + \",\"+ \"point2.y\" +\":\"+ point2.y)\n\n    var book = {\n        \"main_title\":\"javascript\",\n        \"sub_title\" : \"The Definitive Guide\",\n        \"for\":\"all\",\n        \"author\":{\n            \"firstName\":\"cherry\",\n            \"lastName\":\"Li\"\n        }\n    }\n    console.log(book.author.firstName,book.author.lastName)\n    console.log(book.main_title)\n    console.log(book.sub_title)\n    console.log(book.for)\n```\n2. Object.create\n```\nvar newObject = Object.create(null)\n```\n`Object.create()` 方法创建一个拥有指定原型和若干个指定属性的对象。\n语法\n>Object.create(proto, [ propertiesObject ])\n参数\n\n- proto\n一个对象，作为新创建对象的原型。或者为 null。\n- propertiesObject\n可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。\n```\n\n    var myCar = {\n        name:\"Fort\",\n        drive:function () {\n            console.log(\"I'm driving!\")\n        },\n        panic:function () {\n            console.log(\"wait\")\n        }\n    }\n\n    // Use Object.create to instantiate a new car\n    var youCar = Object.create(myCar);\n    // Now we can see that one is a prototype of the other\n    console.log(youCar.name)\n\n    var vehicle = {\n        getModel:function () {\n            console.log(\"The model of this vehicle is..\" +this.model)\n        }\n    }\n\n    var car = Object.create(vehicle,{\n        \"id\":{\n            value:'car1',\n\n        },\n        \"model\":{\n            value:'Ford',\n\n        }\n    })\n\n```\n3. 构造函数方式（new）\n通过new创建对象，new后跟一个函数调用（构造函数）\n```\nvar newObject = new Object();\n```\n\n---\n其实这三种方式都可以相互转化\n\n通过字面量方式创建的空对象相当于`Object.create(Object.prototype)`\n```\no = {}\n\no = Object.create(Object.prototype) \n```\n下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n```\nfunction Constructor() {};\no = new Constructor();\no = Object.create(Constructor.prototype) \n```\n\n## 给对象设置属性和获取属性值\n### 使用.的方式\n```\nnewObject.sayHello = \"Hello\";\nconsole.log(newObject.sayHello)\n```\n### 使用[]方式\n```\nnewObject['sayHello'] = 'Hello';\nconsole.log(newObject['sayHello']);\n```\n这两种设置属性的区别\n- 使用保留字作为属性名的时候，必须用方括号\n- . 不能修改，因为属性名是标识符\n- []为字符串，可以修改和创建\n\n### Object.defineProperty方式\n>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n>Object.defineProperty(obj, prop, descriptor)\n\n>obj\n需要定义属性的对象。\nprop\n需定义或修改的属性的名字。\ndescriptor\n将被定义或修改的属性的描述符。\n\n\n#### 创建属性\n如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。\n\n通过`.` `[]`设置的属性，可以使用`delete`删除,通过`Object.defineProperty()`设置的属性不能被delete删除，使用  `Object.defineProperty()` 增加的属性值是不可改变的。\n```\n//删除对象的属性\n    //通过. []设置的属性，可以使用delete删除\n    function fun() {\n        this.name = 'name';\n        this['age'] = 12;\n    }\n\n    var obj = new fun();\n    console.log(obj.name);   //name\n    console.log(obj.age)\n    delete obj.name;\n    delete obj.age;\n    console.log(obj.name);    //undefined\n    console.log(obj.age);\n\n    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。\n    var o = {} //创建一个空对象\n    Object.defineProperty(o,'a',{    //给o设置一个属性a，值为37\n        value:37,\n        writable:true,\n        configurable:true\n    });\n\n    var bValue ;\n    Object.defineProperty(o,'b',{\n        get:function () {\n            return bValue\n        },\n        set:function (newValue) {\n            bValue = newValue;\n        },\n        enumerable:true,\n        configurable:true,\n    })\n    o.b = 38;\n\n    //数据描述符和存取描述符不能混合使用\n    Object.defineProperty(o,\"conflict\",{\n        value:11111,\n        get:function () {\n            return 11111\n        }\n    })// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n```\n\n#### 修改属性\n如果属性已经存在，`Object.defineProperty()`将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。\n\n##### Writable 属性\n\n当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。\n\n```\nvar o = {}; // 创建一个新对象\n\nObject.defineProperty(o, \"a\", { value : 37,\n                                writable : false });\n\nconsole.log(o.a); // 打印 37\no.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）\nconsole.log(o.a); // 打印 37， 赋值不起作用。\n```\n\n##### Enumerable 特性\n\n属性特性 enumerable 定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n\n\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { value : 1, enumerable:true });\nObject.defineProperty(o, \"b\", { value : 2, enumerable:false });\nObject.defineProperty(o, \"c\", { value : 3 }); // enumerable defaults to false\no.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true\n\nfor (var i in o) {    \n  console.log(i);  \n}\n// 打印 'a' 和 'd' (in undefined order)\n\nObject.keys(o); // [\"a\", \"d\"]\n\no.propertyIsEnumerable('a'); // true\no.propertyIsEnumerable('b'); // false\no.propertyIsEnumerable('c'); // false\n```\n\n##### Configurable 特性\n\nconfigurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { get : function(){return 1;}, \n                                configurable : false } );\n\n// throws a TypeError\nObject.defineProperty(o, \"a\", {configurable : true}); \n// throws a TypeError\nObject.defineProperty(o, \"a\", {enumerable : true}); \n// throws a TypeError (set was undefined previously) \nObject.defineProperty(o, \"a\", {set : function(){}}); \n// throws a TypeError (even though the new get does exactly the same thing) \nObject.defineProperty(o, \"a\", {get : function(){return 1;}});\n// throws a TypeError\nObject.defineProperty(o, \"a\", {value : 12});\n\nconsole.log(o.a); // logs 1\ndelete o.a; // Nothing happens\nconsole.log(o.a); // logs 1\n```\n#### 添加多个属性和默认值\n\n考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的\n```\nvar o = {};\n\no.a = 1;\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : true,\n  configurable : true,\n  enumerable : true\n});\n\n\n// 另一方面，\nObject.defineProperty(o, \"a\", { value : 1 });\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : false,\n  configurable : false,\n  enumerable : false\n});\n```\n### Object.defineProperties方式\n\n```\n// 设置属性\nObject.defineProperties( newObject, {\n\n  \"someKey\": { \n    value: \"Hello World\", \n    writable: true \n  },\n\n  \"anotherKey\": { \n    value: \"Foo bar\", \n    writable: false \n  } \n\n});\n\n```\n","source":"_posts/JavaScript-Design-Pattern.md","raw":"---\ntitle: javascript设计模式（一）\ndate: 2017-03-11 23:54:11\ntags: [js,js设计模式] \ncategories: js\n---\n \n\n在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的[学习javascript设计模式](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)，本文的所有demo地址见本人的github：https://github.com/sunshine940326/js-object-demo\n<!--more-->\n\njavascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）\n\n#定义函数\n# 构造器模式\njs不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。\n\n在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。\n\n对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。\n\n## 创建对象\n在js中创建对象有三种基本方式：\n下面的每一种方式都会创建一个新对象\n1. 对象直接量\n\n```\nvar empty = {};\n    console.log(empty);\n    var point = {\n        x:0,\n        y:1\n    }\n    console.log(point.x,+point.y)\n    var point2 = {\n        x:point.x,\n        y:point.y+1\n    }\n    console.log(\"point2.x\" + \":\"+ point2.x + \",\"+ \"point2.y\" +\":\"+ point2.y)\n\n    var book = {\n        \"main_title\":\"javascript\",\n        \"sub_title\" : \"The Definitive Guide\",\n        \"for\":\"all\",\n        \"author\":{\n            \"firstName\":\"cherry\",\n            \"lastName\":\"Li\"\n        }\n    }\n    console.log(book.author.firstName,book.author.lastName)\n    console.log(book.main_title)\n    console.log(book.sub_title)\n    console.log(book.for)\n```\n2. Object.create\n```\nvar newObject = Object.create(null)\n```\n`Object.create()` 方法创建一个拥有指定原型和若干个指定属性的对象。\n语法\n>Object.create(proto, [ propertiesObject ])\n参数\n\n- proto\n一个对象，作为新创建对象的原型。或者为 null。\n- propertiesObject\n可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。\n```\n\n    var myCar = {\n        name:\"Fort\",\n        drive:function () {\n            console.log(\"I'm driving!\")\n        },\n        panic:function () {\n            console.log(\"wait\")\n        }\n    }\n\n    // Use Object.create to instantiate a new car\n    var youCar = Object.create(myCar);\n    // Now we can see that one is a prototype of the other\n    console.log(youCar.name)\n\n    var vehicle = {\n        getModel:function () {\n            console.log(\"The model of this vehicle is..\" +this.model)\n        }\n    }\n\n    var car = Object.create(vehicle,{\n        \"id\":{\n            value:'car1',\n\n        },\n        \"model\":{\n            value:'Ford',\n\n        }\n    })\n\n```\n3. 构造函数方式（new）\n通过new创建对象，new后跟一个函数调用（构造函数）\n```\nvar newObject = new Object();\n```\n\n---\n其实这三种方式都可以相互转化\n\n通过字面量方式创建的空对象相当于`Object.create(Object.prototype)`\n```\no = {}\n\no = Object.create(Object.prototype) \n```\n下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n```\nfunction Constructor() {};\no = new Constructor();\no = Object.create(Constructor.prototype) \n```\n\n## 给对象设置属性和获取属性值\n### 使用.的方式\n```\nnewObject.sayHello = \"Hello\";\nconsole.log(newObject.sayHello)\n```\n### 使用[]方式\n```\nnewObject['sayHello'] = 'Hello';\nconsole.log(newObject['sayHello']);\n```\n这两种设置属性的区别\n- 使用保留字作为属性名的时候，必须用方括号\n- . 不能修改，因为属性名是标识符\n- []为字符串，可以修改和创建\n\n### Object.defineProperty方式\n>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n>Object.defineProperty(obj, prop, descriptor)\n\n>obj\n需要定义属性的对象。\nprop\n需定义或修改的属性的名字。\ndescriptor\n将被定义或修改的属性的描述符。\n\n\n#### 创建属性\n如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。\n\n通过`.` `[]`设置的属性，可以使用`delete`删除,通过`Object.defineProperty()`设置的属性不能被delete删除，使用  `Object.defineProperty()` 增加的属性值是不可改变的。\n```\n//删除对象的属性\n    //通过. []设置的属性，可以使用delete删除\n    function fun() {\n        this.name = 'name';\n        this['age'] = 12;\n    }\n\n    var obj = new fun();\n    console.log(obj.name);   //name\n    console.log(obj.age)\n    delete obj.name;\n    delete obj.age;\n    console.log(obj.name);    //undefined\n    console.log(obj.age);\n\n    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。\n    var o = {} //创建一个空对象\n    Object.defineProperty(o,'a',{    //给o设置一个属性a，值为37\n        value:37,\n        writable:true,\n        configurable:true\n    });\n\n    var bValue ;\n    Object.defineProperty(o,'b',{\n        get:function () {\n            return bValue\n        },\n        set:function (newValue) {\n            bValue = newValue;\n        },\n        enumerable:true,\n        configurable:true,\n    })\n    o.b = 38;\n\n    //数据描述符和存取描述符不能混合使用\n    Object.defineProperty(o,\"conflict\",{\n        value:11111,\n        get:function () {\n            return 11111\n        }\n    })// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n```\n\n#### 修改属性\n如果属性已经存在，`Object.defineProperty()`将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。\n\n##### Writable 属性\n\n当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。\n\n```\nvar o = {}; // 创建一个新对象\n\nObject.defineProperty(o, \"a\", { value : 37,\n                                writable : false });\n\nconsole.log(o.a); // 打印 37\no.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）\nconsole.log(o.a); // 打印 37， 赋值不起作用。\n```\n\n##### Enumerable 特性\n\n属性特性 enumerable 定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n\n\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { value : 1, enumerable:true });\nObject.defineProperty(o, \"b\", { value : 2, enumerable:false });\nObject.defineProperty(o, \"c\", { value : 3 }); // enumerable defaults to false\no.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true\n\nfor (var i in o) {    \n  console.log(i);  \n}\n// 打印 'a' 和 'd' (in undefined order)\n\nObject.keys(o); // [\"a\", \"d\"]\n\no.propertyIsEnumerable('a'); // true\no.propertyIsEnumerable('b'); // false\no.propertyIsEnumerable('c'); // false\n```\n\n##### Configurable 特性\n\nconfigurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { get : function(){return 1;}, \n                                configurable : false } );\n\n// throws a TypeError\nObject.defineProperty(o, \"a\", {configurable : true}); \n// throws a TypeError\nObject.defineProperty(o, \"a\", {enumerable : true}); \n// throws a TypeError (set was undefined previously) \nObject.defineProperty(o, \"a\", {set : function(){}}); \n// throws a TypeError (even though the new get does exactly the same thing) \nObject.defineProperty(o, \"a\", {get : function(){return 1;}});\n// throws a TypeError\nObject.defineProperty(o, \"a\", {value : 12});\n\nconsole.log(o.a); // logs 1\ndelete o.a; // Nothing happens\nconsole.log(o.a); // logs 1\n```\n#### 添加多个属性和默认值\n\n考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的\n```\nvar o = {};\n\no.a = 1;\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : true,\n  configurable : true,\n  enumerable : true\n});\n\n\n// 另一方面，\nObject.defineProperty(o, \"a\", { value : 1 });\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : false,\n  configurable : false,\n  enumerable : false\n});\n```\n### Object.defineProperties方式\n\n```\n// 设置属性\nObject.defineProperties( newObject, {\n\n  \"someKey\": { \n    value: \"Hello World\", \n    writable: true \n  },\n\n  \"anotherKey\": { \n    value: \"Foo bar\", \n    writable: false \n  } \n\n});\n\n```\n","slug":"JavaScript-Design-Pattern","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqha000paaxihq744tp7"},{"title":"javascript设计模式（二）：模块化模式","date":"2017-03-24T15:09:08.000Z","_content":"\n在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量\n<!--more-->\n# 模块化模式\n所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法\n\n通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量\n\n模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。\n\n这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数\n\n## 闭包实现模块模式基础版\n下面就是一个最简单的用闭包实现模块模式的栗子~\n```\nvar testModule = (function(){\n    var counter = 0;\n    \n    return{\n        incrementCounter:function(){\n            return counter++;\n        }\n        resetCounter:function(){\n            console.log(\"counter value prior to reset:\"+counter);\n            counter = 0;\n        }\n    }\n})();\n\n//use\n\ntestModule.incrementCounter();\n\ntestModule.resetCounter();\n```\n这个栗子中，在函数体内定义的变量`counter`就是一个“私有变量”，在函数外部是不能直接访问到的。在`return`中给我们提供了这个函数的两个`public`方法：`incrementCounter()`和`resetCounter()`。我们想要使用这个函数的功能就直接调用`testModule.incrementCounter();`就可以了\n\n## 包含命名空间、公有变量和私有变量\n下面是一个包含了命名空间、公有变量和私有变量的一个栗子~\n```\nvar myNamespace = (function(){\n    var myPrivateVar,myPrivateMethod\n\n    myPrivateVar = 0;\n    \n    myPrivateMethod = function(foo){\n        console.log(foo)\n    }\n    \n    return{\n        myPublicVar:\"foo\",\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            \n            myPrivateMethod(bar)\n        }\n    }\n})()\n```\n\n## 升级版使用模块模式实现购物车\n```\nvar basketModule = (function () {\n\n  // privates\n\n  var basket = [];\n\n  function doSomethingPrivate() {\n    //...\n  }\n\n  function doSomethingElsePrivate() {\n    //...\n  }\n\n  // Return an object exposed to the public\n  return {\n\n    // Add items to our basket\n    addItem: function( values ) {\n      basket.push(values);\n    },\n\n    // Get the count of items in the basket\n    getItemCount: function () {\n      return basket.length;\n    },\n\n    // Public alias to a  private function\n    doSomething: doSomethingPrivate,\n\n    // Get the total value of items in the basket\n    getTotal: function () {\n\n      var q = this.getItemCount(),\n          p = 0;\n\n      while (q--) {\n        p += basket[q].price;\n      }\n\n      return p;\n    }\n  };\n}());\n```\n在这个栗子中，这个模块完全自包含在`basketModule`这个模块中，其中的`basket`数组是私有的，在外部访问不到，我们需要访问`basketModule`中return的方法使用对应的功能，使用方法如下\n```\n// basketModule returns an object with a public API we can use\n\nbasketModule.addItem({\n  item: \"bread\",\n  price: 0.5\n});\n\nbasketModule.addItem({\n  item: \"butter\",\n  price: 0.3\n});\n\n// Outputs: 2\nconsole.log( basketModule.getItemCount() );\n\n// Outputs: 0.8\nconsole.log( basketModule.getTotal() );\n\n// However, the following will not work:\n\n// Outputs: undefined\n// This is because the basket itself is not exposed as a part of our\n// the public API\nconsole.log( basketModule.basket );\n\n// This also won't work as it only exists within the scope of our\n// basketModule closure, but not the returned public object\nconsole.log( basket );\n```\n\n","source":"_posts/JavaScript-Design-Pattern2modular-mode.md","raw":"---\ntitle: javascript设计模式（二）：模块化模式\ndate: 2017-03-24 23:09:08\ntags: [js,js设计模式] \ncategories: js\n---\n\n在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量\n<!--more-->\n# 模块化模式\n所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法\n\n通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量\n\n模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。\n\n这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数\n\n## 闭包实现模块模式基础版\n下面就是一个最简单的用闭包实现模块模式的栗子~\n```\nvar testModule = (function(){\n    var counter = 0;\n    \n    return{\n        incrementCounter:function(){\n            return counter++;\n        }\n        resetCounter:function(){\n            console.log(\"counter value prior to reset:\"+counter);\n            counter = 0;\n        }\n    }\n})();\n\n//use\n\ntestModule.incrementCounter();\n\ntestModule.resetCounter();\n```\n这个栗子中，在函数体内定义的变量`counter`就是一个“私有变量”，在函数外部是不能直接访问到的。在`return`中给我们提供了这个函数的两个`public`方法：`incrementCounter()`和`resetCounter()`。我们想要使用这个函数的功能就直接调用`testModule.incrementCounter();`就可以了\n\n## 包含命名空间、公有变量和私有变量\n下面是一个包含了命名空间、公有变量和私有变量的一个栗子~\n```\nvar myNamespace = (function(){\n    var myPrivateVar,myPrivateMethod\n\n    myPrivateVar = 0;\n    \n    myPrivateMethod = function(foo){\n        console.log(foo)\n    }\n    \n    return{\n        myPublicVar:\"foo\",\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            \n            myPrivateMethod(bar)\n        }\n    }\n})()\n```\n\n## 升级版使用模块模式实现购物车\n```\nvar basketModule = (function () {\n\n  // privates\n\n  var basket = [];\n\n  function doSomethingPrivate() {\n    //...\n  }\n\n  function doSomethingElsePrivate() {\n    //...\n  }\n\n  // Return an object exposed to the public\n  return {\n\n    // Add items to our basket\n    addItem: function( values ) {\n      basket.push(values);\n    },\n\n    // Get the count of items in the basket\n    getItemCount: function () {\n      return basket.length;\n    },\n\n    // Public alias to a  private function\n    doSomething: doSomethingPrivate,\n\n    // Get the total value of items in the basket\n    getTotal: function () {\n\n      var q = this.getItemCount(),\n          p = 0;\n\n      while (q--) {\n        p += basket[q].price;\n      }\n\n      return p;\n    }\n  };\n}());\n```\n在这个栗子中，这个模块完全自包含在`basketModule`这个模块中，其中的`basket`数组是私有的，在外部访问不到，我们需要访问`basketModule`中return的方法使用对应的功能，使用方法如下\n```\n// basketModule returns an object with a public API we can use\n\nbasketModule.addItem({\n  item: \"bread\",\n  price: 0.5\n});\n\nbasketModule.addItem({\n  item: \"butter\",\n  price: 0.3\n});\n\n// Outputs: 2\nconsole.log( basketModule.getItemCount() );\n\n// Outputs: 0.8\nconsole.log( basketModule.getTotal() );\n\n// However, the following will not work:\n\n// Outputs: undefined\n// This is because the basket itself is not exposed as a part of our\n// the public API\nconsole.log( basketModule.basket );\n\n// This also won't work as it only exists within the scope of our\n// basketModule closure, but not the returned public object\nconsole.log( basket );\n```\n\n","slug":"JavaScript-Design-Pattern2modular-mode","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqhd000taaxikjki54l4"},{"title":"javascript设计模式（三）：原型模式","date":"2017-03-25T15:05:28.000Z","_content":"原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用`Object.create(prototype)`方法或者是使用字面量的方式创建对象\n<!--more-->\n# 原型模式\n\n原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力--原型链，使用原型链来实现继承。\n\n我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性\n\n##　使用`Object.create(prototype)`方法\n举个栗子~\n```\nvar myCar = {\n\n  name: \"Ford Escort\",\n\n  drive: function () {\n    console.log( \"Weeee. I'm driving!\" );\n  },\n\n  panic: function () {\n    console.log( \"Wait. How do you stop this thing?\" );\n  }\n\n};\n\n// Use Object.create to instantiate a new car\nvar yourCar = Object.create( myCar );\n\n// Now we can see that one is a prototype of the other\nconsole.log( yourCar.name );\n```\n在这个例子中，我们定义了一个作为原型的对象`myCar`，这个对象中有两个属性`name`和`drive`，然后用`Object.create()`方法来创建了一个拥有`myCar`原型的对象`yourCar`，这样新创建的`yourCar`就继承了`myCar`中的属性和方法，我们可以直接调用\n\n当然，`Object.create()`方法也可以传入第二个参数(第一个参数是要继承的原型)`Object.create(prototype,optionalDescriptorObject))。`第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对\n\n## 使用面向字面量方法创建\n如果不希望在不直接使用`Object.create`的前提下实现原型链，我们可以模拟原型链实现继承\n```\nvar vehiclePrototype = {\n\n  init: function ( carModel ) {\n    this.model = carModel;\n  },\n\n  getModel: function () {\n    console.log( \"The model of this vehicle is..\" + this.model);\n  }\n};\n\nfunction vehicle( model ) {\n\n  function F() {};\n  \n  var f = new F();\n\n  f.init( model );\n  return f;\n\n}\n\nvar car = vehicle( \"Ford Escort\" );\ncar.getModel();\n```\n这个栗子中，对象`vehiclePrototype`中有两个方法`init`和`getModel`,然后`vehicle`继承了`vehiclePrototype`，继承的方法是先创建一个空函数`F`然后`F`的`prototype`属性指向`vehiclePrototype`，然后创建`F`类的一个实例`f`,`f`使用了`vehiclePrototype`的`init`方法，最后返回`f`,所以`vehicle`函数内部就完成了对`vehiclePrototype`的继承，最后将对象`f`返回.\n\n**其实`var f = new F();`就相当于`f = Object.create(F.prototype);`**\n\n```\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n```\n\n","source":"_posts/JavaScript-Design-Pattern3prototype-model.md","raw":"---\ntitle: javascript设计模式（三）：原型模式\ndate: 2017-03-25 23:05:28\ntags: [js,js设计模式] \ncategories: js\n---\n原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用`Object.create(prototype)`方法或者是使用字面量的方式创建对象\n<!--more-->\n# 原型模式\n\n原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力--原型链，使用原型链来实现继承。\n\n我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性\n\n##　使用`Object.create(prototype)`方法\n举个栗子~\n```\nvar myCar = {\n\n  name: \"Ford Escort\",\n\n  drive: function () {\n    console.log( \"Weeee. I'm driving!\" );\n  },\n\n  panic: function () {\n    console.log( \"Wait. How do you stop this thing?\" );\n  }\n\n};\n\n// Use Object.create to instantiate a new car\nvar yourCar = Object.create( myCar );\n\n// Now we can see that one is a prototype of the other\nconsole.log( yourCar.name );\n```\n在这个例子中，我们定义了一个作为原型的对象`myCar`，这个对象中有两个属性`name`和`drive`，然后用`Object.create()`方法来创建了一个拥有`myCar`原型的对象`yourCar`，这样新创建的`yourCar`就继承了`myCar`中的属性和方法，我们可以直接调用\n\n当然，`Object.create()`方法也可以传入第二个参数(第一个参数是要继承的原型)`Object.create(prototype,optionalDescriptorObject))。`第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对\n\n## 使用面向字面量方法创建\n如果不希望在不直接使用`Object.create`的前提下实现原型链，我们可以模拟原型链实现继承\n```\nvar vehiclePrototype = {\n\n  init: function ( carModel ) {\n    this.model = carModel;\n  },\n\n  getModel: function () {\n    console.log( \"The model of this vehicle is..\" + this.model);\n  }\n};\n\nfunction vehicle( model ) {\n\n  function F() {};\n  \n  var f = new F();\n\n  f.init( model );\n  return f;\n\n}\n\nvar car = vehicle( \"Ford Escort\" );\ncar.getModel();\n```\n这个栗子中，对象`vehiclePrototype`中有两个方法`init`和`getModel`,然后`vehicle`继承了`vehiclePrototype`，继承的方法是先创建一个空函数`F`然后`F`的`prototype`属性指向`vehiclePrototype`，然后创建`F`类的一个实例`f`,`f`使用了`vehiclePrototype`的`init`方法，最后返回`f`,所以`vehicle`函数内部就完成了对`vehiclePrototype`的继承，最后将对象`f`返回.\n\n**其实`var f = new F();`就相当于`f = Object.create(F.prototype);`**\n\n```\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n```\n\n","slug":"JavaScript-Design-Pattern3prototype-model","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqhp000waaxie00i7pvv"},{"layout":"w","title":"javascript设计模式（四）：工厂模式","date":"2017-03-26T14:01:41.000Z","_content":"\n我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。\n<!--more-->\n## 使用工厂模式\n下面通过使用构造器模式逻辑来定义一个汽车。\n```\n// Types.js - Constructors used behind the scenes\n\n// A constructor for defining new cars\nfunction Car( options ) {\n\n  // some defaults\n  this.doors = options.doors || 4;\n  this.state = options.state || \"brand new\";\n  this.color = options.color || \"silver\";\n\n}\n\n// A constructor for defining new trucks\nfunction Truck( options){\n\n  this.state = options.state || \"used\";\n  this.wheelSize = options.wheelSize || \"large\";\n  this.color = options.color || \"blue\";\n}\n\n// FactoryExample.js\n\n// Define a skeleton vehicle factory\nfunction VehicleFactory() {}\n\n// Define the prototypes and utilities for this factory\n\n// Our default vehicleClass is Car\nVehicleFactory.prototype.vehicleClass = Car;\n\n// Our Factory method for creating new Vehicle instances\nVehicleFactory.prototype.createVehicle = function ( options ) {\n\n  if( options.vehicleType === \"car\" ){\n    this.vehicleClass = Car;\n  }else{\n    this.vehicleClass = Truck;\n  }\n\n  return new this.vehicleClass( options );\n\n};\n\n// Create an instance of our factory that makes cars\nvar carFactory = new VehicleFactory();\nvar car = carFactory.createVehicle( {\n            vehicleType: \"car\",\n            color: \"yellow\",\n            doors: 6 } );\n\n// Test to confirm our car was created using the vehicleClass/prototype Car\n\n// Outputs: true\nconsole.log( car instanceof Car );\n\n// Outputs: Car object of color \"yellow\", doors: 6 in a \"brand new\" state\nconsole.log( car );\n```\n在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法\n\n然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，","source":"_posts/JavaScript-Design-Pattern4factory-mode.md","raw":"layout: w\ntitle: javascript设计模式（四）：工厂模式\ndate: 2017-03-26 22:01:41\ntags: [js,js设计模式] \ncategories: js\n---\n\n我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。\n<!--more-->\n## 使用工厂模式\n下面通过使用构造器模式逻辑来定义一个汽车。\n```\n// Types.js - Constructors used behind the scenes\n\n// A constructor for defining new cars\nfunction Car( options ) {\n\n  // some defaults\n  this.doors = options.doors || 4;\n  this.state = options.state || \"brand new\";\n  this.color = options.color || \"silver\";\n\n}\n\n// A constructor for defining new trucks\nfunction Truck( options){\n\n  this.state = options.state || \"used\";\n  this.wheelSize = options.wheelSize || \"large\";\n  this.color = options.color || \"blue\";\n}\n\n// FactoryExample.js\n\n// Define a skeleton vehicle factory\nfunction VehicleFactory() {}\n\n// Define the prototypes and utilities for this factory\n\n// Our default vehicleClass is Car\nVehicleFactory.prototype.vehicleClass = Car;\n\n// Our Factory method for creating new Vehicle instances\nVehicleFactory.prototype.createVehicle = function ( options ) {\n\n  if( options.vehicleType === \"car\" ){\n    this.vehicleClass = Car;\n  }else{\n    this.vehicleClass = Truck;\n  }\n\n  return new this.vehicleClass( options );\n\n};\n\n// Create an instance of our factory that makes cars\nvar carFactory = new VehicleFactory();\nvar car = carFactory.createVehicle( {\n            vehicleType: \"car\",\n            color: \"yellow\",\n            doors: 6 } );\n\n// Test to confirm our car was created using the vehicleClass/prototype Car\n\n// Outputs: true\nconsole.log( car instanceof Car );\n\n// Outputs: Car object of color \"yellow\", doors: 6 in a \"brand new\" state\nconsole.log( car );\n```\n在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法\n\n然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，","slug":"JavaScript-Design-Pattern4factory-mode","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"photos":[],"link":"","_id":"cj4ldrqhs0011aaxicb8lk7jn"},{"title":"javascript模块化编程（二）：js模块化发展史","date":"2017-03-07T15:04:40.000Z","_content":"在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）\n<!--more-->\n# js在发展过程\n有几个阶段：\n过程式的JavaScript→面向对象的javascript→面相模块的javascript\n1. 原始写法：\n模块就是实现特定功能的一组写法：\n\n```\nfunction m1(){\n    //do something\n}\n\nfunction m2(){\n    //do something\n}\n```\n上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。\n\n这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系\n2. 对象写法\n这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容\n\n```\nvar module1 = new Object({\n        _count:0,\n\n        m1 : function () {\n            console.log(module1._count)\n        },\n\n        m2 : function () {\n            for(var i=0;i<5;i++){\n                module1._count += i;\n                console.log(module1._count)\n            }\n        }\n    });\n\n    module1.m1();\n    module1.m2();\n    module1._count=5;\n    console.log(module1._count)\n```\n上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了`module1.m1()`,\n但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如\n\n```\nmodule1._count = 5;   //外部代码可以直接改变内部计数器的值\n```\n3. 立即执行函数写法\n这种写法可以达到不暴露私有成员的目的\n\n```\n   var module1 = (function () {\n        var _count = 0;\n        var m1 = function () {\n            console.log(_count)\n        };\n\n        var m2 = function () {\n            for(var i=0;i<5;i++){\n                _count += i;\n                console.log(_count)\n            }\n        };\n\n        return{\n            r1 : m1,\n            r2 : m2,\n        }\n    })();\n\n    module1.r1();   //0\n    module1.r2();\n    console.log(module1._count)  //undefined\n```\n这里只能通过return的函数名来调用函数，达到了包装函数的作用\n这里还运用了闭包的思想，在函数`module1`的外部调用了函数内的变量`_count`\n\n## 闭包\n闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量`_count`,然后在`module1`的`return`中又将m1作为返回值，这样就可以在`module1`的外部访问`module1`中的局部变量`_count`\n\n4. 放大模式\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)\n\n```\n    var module1 = function () {\n        console.log(\"原module1模块\")\n    }\n    var module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(module1);\n\n\n    module1.m3()\n\n```\n在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用**方法模式**来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数`module1`“放大”\n\n在执行完这段代码之后，我们的模块就可以拥有一个新的 `module1.m3`的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象\n\n5. 宽放大模式\n宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象\n\n```\nvar module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(window.module1 || {});\n\n\n    module1.m3()\n\n```\n在放大模式中，如果没有上面定义`module1`模块时，是会报错的，经过改进，就算在执行这段代码的时候，`module1`  即使没有定义也不会报错，也会创建`module1.m3()`这个公有方法\n\n\n在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript\n\n# 为什么使用模块化的js\n使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）\n1. 命名冲突，是不是有点同感了！！！\n闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题\n**通过export暴露接口，不需要命名空间，不需要全局变量**\n2. 文件依赖\n文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！\n**js模块化的解决方式是使用require引入依赖，使依赖内置**，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。\n\n# commonJS\n为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的\n## 什么是commonJS\ncommonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）\n\n## 使用commonJS编写node\n以下是node写模块化的一个示例：\n1. math.js\n\n```\nexports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n```\n2.  increment.js\n\n```\nvar add = require('math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n3. main.js，该文件为入口文件\n\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n从上述代码可以看到：\n-  node要求一个js文件对应一个模块。\n- 使用exports导出API\n- 使用require加载其它模块\n\n\n## commonJS的缺点\n因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的\n1. 服务器端的js模块就在本地，浏览器端则需要通过网络请求\n2. 服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多\n\n \n如下\n\n```\nvar event = require(\"event\");\n \nevent.bind(el, 'click', function() {\n    // todo\n});\n```\n\n`event.bind(el, 'click', function()`，在第一行require(\"event\")之后运行，因此必须等`event`加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n> 这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n# AMD\n基于上述两点的commcommonJS的缺点，AMD就孕育而生，\n\n\n## 什么是AMD\nAMD可以理解为异步模块定义，可以认为是浏览器中的模块规范\n> AMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\n为什么说AMD可以解决commonJS在浏览器上的不足呢？\n\n```\n　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。\n\nAMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！\n\n```\ndefine(id?, dependencies?, factory);\n```\n其中：\n- id: 模块标识，可以省略。\n- dependencies: 所依赖的模块，可以省略。\n- factory: 模块的实现，或者一个JavaScript对象。\n- id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。\n\n## 简单的AMD模式应用\n以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）\n`base.js`\n\n```\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n`ui.js`\n\n```\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\n```\n`page.js``\n```\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n`data.js`\n\n```\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n- 定义无依赖的模块（base.js）\n- 定义有依赖的模块（ui.js，page.js）\n- 定义数据对象模块（data.js）\n\n以上的id参数都为空，这是为什么呢？\n\n```\ndefine('index', ['data','base'], function(data, base) {\n    // todo\n});\n```\n这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。\n\n\n\n更多请阅读：\n- [浅谈模块化的JavaScript](http://www.tuicool.com/articles/rqEjEv)\n- [JavaScript模块化开发库之SeaJS](http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html)\n- [Node.js模块风格在浏览器中的尝试](http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html)\n- [JavaScript中模块写法](http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html)\n- [JavaScript中的AMD和CMD模块化](http://caibaojian.com/toutiao/6090)\n- [CMD 模块定义规范](https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com)\n- [JavaScript模块化开发（四）——RequireJS](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/)\n- [Javascript模块化编程](http://note.youdao.com/)\n","source":"_posts/JavaScript-modular-programming2JSmodulardevelopmenthistory.md","raw":"---\ntitle: javascript模块化编程（二）：js模块化发展史\ndate: 2017-03-07 23:04:40\ntags: [js模块化,js]\ncategories: js\n---\n在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）\n<!--more-->\n# js在发展过程\n有几个阶段：\n过程式的JavaScript→面向对象的javascript→面相模块的javascript\n1. 原始写法：\n模块就是实现特定功能的一组写法：\n\n```\nfunction m1(){\n    //do something\n}\n\nfunction m2(){\n    //do something\n}\n```\n上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。\n\n这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系\n2. 对象写法\n这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容\n\n```\nvar module1 = new Object({\n        _count:0,\n\n        m1 : function () {\n            console.log(module1._count)\n        },\n\n        m2 : function () {\n            for(var i=0;i<5;i++){\n                module1._count += i;\n                console.log(module1._count)\n            }\n        }\n    });\n\n    module1.m1();\n    module1.m2();\n    module1._count=5;\n    console.log(module1._count)\n```\n上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了`module1.m1()`,\n但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如\n\n```\nmodule1._count = 5;   //外部代码可以直接改变内部计数器的值\n```\n3. 立即执行函数写法\n这种写法可以达到不暴露私有成员的目的\n\n```\n   var module1 = (function () {\n        var _count = 0;\n        var m1 = function () {\n            console.log(_count)\n        };\n\n        var m2 = function () {\n            for(var i=0;i<5;i++){\n                _count += i;\n                console.log(_count)\n            }\n        };\n\n        return{\n            r1 : m1,\n            r2 : m2,\n        }\n    })();\n\n    module1.r1();   //0\n    module1.r2();\n    console.log(module1._count)  //undefined\n```\n这里只能通过return的函数名来调用函数，达到了包装函数的作用\n这里还运用了闭包的思想，在函数`module1`的外部调用了函数内的变量`_count`\n\n## 闭包\n闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量`_count`,然后在`module1`的`return`中又将m1作为返回值，这样就可以在`module1`的外部访问`module1`中的局部变量`_count`\n\n4. 放大模式\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)\n\n```\n    var module1 = function () {\n        console.log(\"原module1模块\")\n    }\n    var module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(module1);\n\n\n    module1.m3()\n\n```\n在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用**方法模式**来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数`module1`“放大”\n\n在执行完这段代码之后，我们的模块就可以拥有一个新的 `module1.m3`的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象\n\n5. 宽放大模式\n宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象\n\n```\nvar module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(window.module1 || {});\n\n\n    module1.m3()\n\n```\n在放大模式中，如果没有上面定义`module1`模块时，是会报错的，经过改进，就算在执行这段代码的时候，`module1`  即使没有定义也不会报错，也会创建`module1.m3()`这个公有方法\n\n\n在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript\n\n# 为什么使用模块化的js\n使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）\n1. 命名冲突，是不是有点同感了！！！\n闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题\n**通过export暴露接口，不需要命名空间，不需要全局变量**\n2. 文件依赖\n文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！\n**js模块化的解决方式是使用require引入依赖，使依赖内置**，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。\n\n# commonJS\n为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的\n## 什么是commonJS\ncommonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）\n\n## 使用commonJS编写node\n以下是node写模块化的一个示例：\n1. math.js\n\n```\nexports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n```\n2.  increment.js\n\n```\nvar add = require('math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n3. main.js，该文件为入口文件\n\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n从上述代码可以看到：\n-  node要求一个js文件对应一个模块。\n- 使用exports导出API\n- 使用require加载其它模块\n\n\n## commonJS的缺点\n因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的\n1. 服务器端的js模块就在本地，浏览器端则需要通过网络请求\n2. 服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多\n\n \n如下\n\n```\nvar event = require(\"event\");\n \nevent.bind(el, 'click', function() {\n    // todo\n});\n```\n\n`event.bind(el, 'click', function()`，在第一行require(\"event\")之后运行，因此必须等`event`加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n> 这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n# AMD\n基于上述两点的commcommonJS的缺点，AMD就孕育而生，\n\n\n## 什么是AMD\nAMD可以理解为异步模块定义，可以认为是浏览器中的模块规范\n> AMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\n为什么说AMD可以解决commonJS在浏览器上的不足呢？\n\n```\n　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。\n\nAMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！\n\n```\ndefine(id?, dependencies?, factory);\n```\n其中：\n- id: 模块标识，可以省略。\n- dependencies: 所依赖的模块，可以省略。\n- factory: 模块的实现，或者一个JavaScript对象。\n- id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。\n\n## 简单的AMD模式应用\n以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）\n`base.js`\n\n```\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n`ui.js`\n\n```\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\n```\n`page.js``\n```\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n`data.js`\n\n```\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n- 定义无依赖的模块（base.js）\n- 定义有依赖的模块（ui.js，page.js）\n- 定义数据对象模块（data.js）\n\n以上的id参数都为空，这是为什么呢？\n\n```\ndefine('index', ['data','base'], function(data, base) {\n    // todo\n});\n```\n这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。\n\n\n\n更多请阅读：\n- [浅谈模块化的JavaScript](http://www.tuicool.com/articles/rqEjEv)\n- [JavaScript模块化开发库之SeaJS](http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html)\n- [Node.js模块风格在浏览器中的尝试](http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html)\n- [JavaScript中模块写法](http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html)\n- [JavaScript中的AMD和CMD模块化](http://caibaojian.com/toutiao/6090)\n- [CMD 模块定义规范](https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com)\n- [JavaScript模块化开发（四）——RequireJS](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/)\n- [Javascript模块化编程](http://note.youdao.com/)\n","slug":"JavaScript-modular-programming2JSmodulardevelopmenthistory","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqhu0013aaxiuvtbpk4c"},{"layout":"ew","title":"Javascript模块化编程（一）：模块的写法","date":"2017-03-07T14:40:16.000Z","_content":"不得不说现在“前端”的知识点实在是太多了，(ಥ_ಥ)\n就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ_ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成\n\n<!--more-->\n\n# 了解基本概念：AMD/CMD/commonJS\n先来大体说一些这些都是什么东西：\nAMD/CMD/commonJS都是JavaScript模块化变的规范\n\n\n> 因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n\n\n\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\n- CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n- commonJS是nodejs在推广过程中对模块定义的规范化产出。\n\n因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。\n\n## AMD(Asynchronous Module Definition)\n全称是Asynchronous Module Definition，即异步模块加载机制。\n\n## commonJS\nCommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。\n\n通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。\n> CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。\n> \n> 由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来\n--[JavaScript模块化开发（二）——CommonJS规范](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com)\n\n\n# 那么AMD/CMD又有什么区别呢？\nAMD和CMD的区别 \n1. 对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. \n2. CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） \n3. AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。\n\n\n# 总结\n不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。\n\n先挖个坑，以后我胡汉三还会回来的~","source":"_posts/Javascript-modular-programming1module-writing.md","raw":"layout: ew\ntitle: Javascript模块化编程（一）：模块的写法\ndate: 2017-03-07 22:40:16\ntags: [js模块化,js]\ncategories: js\n\n---\n不得不说现在“前端”的知识点实在是太多了，(ಥ_ಥ)\n就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ_ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成\n\n<!--more-->\n\n# 了解基本概念：AMD/CMD/commonJS\n先来大体说一些这些都是什么东西：\nAMD/CMD/commonJS都是JavaScript模块化变的规范\n\n\n> 因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n\n\n\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\n- CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n- commonJS是nodejs在推广过程中对模块定义的规范化产出。\n\n因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。\n\n## AMD(Asynchronous Module Definition)\n全称是Asynchronous Module Definition，即异步模块加载机制。\n\n## commonJS\nCommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。\n\n通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。\n> CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。\n> \n> 由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来\n--[JavaScript模块化开发（二）——CommonJS规范](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com)\n\n\n# 那么AMD/CMD又有什么区别呢？\nAMD和CMD的区别 \n1. 对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. \n2. CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） \n3. AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。\n\n\n# 总结\n不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。\n\n先挖个坑，以后我胡汉三还会回来的~","slug":"Javascript-modular-programming1module-writing","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"photos":[],"link":"","_id":"cj4ldrqhv0016aaxinzz7pg2x"},{"title":"Javascript模块化编程（三）：require.js的用法","date":"2017-03-08T15:11:42.000Z","_content":"在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的\n本文的源码在个人的github上：https://github.com/sunshine940326/js-module-demo\n<!--more-->\n首先祭上[requireJS的官方api](http://www.requirejs.cn/docs/start.html)\n# 下载requireJS\n我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：http://www.requirejs.cn/docs/download.html\n\n你可以下载最新版本的`require.js`, `r.js`(node中使用)，以及requireJS的插件：\n1. text\n2. domReady\n3. cs(coffeeScript)\n4. i18n（国际化）\n\n# 在html中引入require.js\n使用requireJS的方法很简单，只需要在html中引入`<script src=\"js/require.js\"  data-main=\"js/main\"  async=\"true\"></script>`就可以，和引入普通的js一样。\n\nasync属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应\n\n`data-main=\"js/main`main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以`.js`文件后缀可以省略\n这个`main.js`就是我们程序的js主入口，会第一个被require加载。和c的`main()`一样\n\n\n我们原来的html的`<head>`中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。\n\n并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n所以requireJS解决了这两个问题：\n1. 实现js文件的异步加载，避免网页失去响应；\n2. 管理模块之间的依赖性，便于代码的编写和维护。\n\n# main.js的编写\n我们试着在`main.js`中加入如下代码：\n\n```\nalert(\"Hello world!\")\n```\n\n打开`index,html`看到弹出“Hello world！”就说明我们的require引用成功\n\n这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文\n\n# math.js模块编写\n现在我们来编写一个求和的模块，然后在`main.js`中依赖该模块\n\n```\n//math.js\ndefine(function(){\n   var add = function(x,y){\n       return x+y'\n       \n   }\n   return{\n       add:add\n   }\n})\n```\n# 加载方式\n```\n//main.js\nrequire(['math'],function(){\n    console.log(math.add(1,2))   //3\n})\n```\n\n如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。\n\nrequire()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。\n\n```\n　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　　　// some code here\n　　});\n```\n默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在`main.js`的头部写一个`require.config()`方法就可以了\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n```\nrequire.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n\n```\n如果某个模块在另一台主机上，也可以直接指定它的网址，比如：\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min\"\n　　　　}\n　　});\n\n```\n\n> require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。\n","source":"_posts/Javascript-modular-programming3requirejs-use.md","raw":"---\ntitle: Javascript模块化编程（三）：require.js的用法\ndate: 2017-03-08 23:11:42\ntags: [js模块化,js]\ncategories: js\n---\n在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的\n本文的源码在个人的github上：https://github.com/sunshine940326/js-module-demo\n<!--more-->\n首先祭上[requireJS的官方api](http://www.requirejs.cn/docs/start.html)\n# 下载requireJS\n我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：http://www.requirejs.cn/docs/download.html\n\n你可以下载最新版本的`require.js`, `r.js`(node中使用)，以及requireJS的插件：\n1. text\n2. domReady\n3. cs(coffeeScript)\n4. i18n（国际化）\n\n# 在html中引入require.js\n使用requireJS的方法很简单，只需要在html中引入`<script src=\"js/require.js\"  data-main=\"js/main\"  async=\"true\"></script>`就可以，和引入普通的js一样。\n\nasync属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应\n\n`data-main=\"js/main`main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以`.js`文件后缀可以省略\n这个`main.js`就是我们程序的js主入口，会第一个被require加载。和c的`main()`一样\n\n\n我们原来的html的`<head>`中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。\n\n并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n所以requireJS解决了这两个问题：\n1. 实现js文件的异步加载，避免网页失去响应；\n2. 管理模块之间的依赖性，便于代码的编写和维护。\n\n# main.js的编写\n我们试着在`main.js`中加入如下代码：\n\n```\nalert(\"Hello world!\")\n```\n\n打开`index,html`看到弹出“Hello world！”就说明我们的require引用成功\n\n这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文\n\n# math.js模块编写\n现在我们来编写一个求和的模块，然后在`main.js`中依赖该模块\n\n```\n//math.js\ndefine(function(){\n   var add = function(x,y){\n       return x+y'\n       \n   }\n   return{\n       add:add\n   }\n})\n```\n# 加载方式\n```\n//main.js\nrequire(['math'],function(){\n    console.log(math.add(1,2))   //3\n})\n```\n\n如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。\n\nrequire()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。\n\n```\n　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　　　// some code here\n　　});\n```\n默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在`main.js`的头部写一个`require.config()`方法就可以了\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n```\nrequire.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n\n```\n如果某个模块在另一台主机上，也可以直接指定它的网址，比如：\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min\"\n　　　　}\n　　});\n\n```\n\n> require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。\n","slug":"Javascript-modular-programming3requirejs-use","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqhx0018aaxiu8rc23ok"},{"title":"react（一）：初识react","date":"2017-03-01T14:01:40.000Z","_content":"这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world\n\n<!--more-->\n\n\n这里是看慕课网初学react做的一些总结[[课程]React入门](http://www.imooc.com/video/9819)，\n\n什么是react\n========\n\n\n在这一个小时内对react的认识中，我有了对react的初步印象\n\n 1. js库\n 2. facebook开发的\n 3. 高度的组件化\n 4. 使用jsx\n 5. 将html和js结合\n 6. 单项传输数据\n 7. 虚拟dom\n 8. 只负责view层\n\nreact并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI\n\nreact应用场景\n========\n\n 1. 复杂场景下的高性能\n 2. 重用组件库，组件组合\n 3. “懒”\n\n使用react\n=======\n最正确的打开方式还是直接看官方api：[react入门教程](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n或者阮一峰老师的教程：[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n\n我们先用React JSFiddle来创建一个最简单的hello world\n\nhtml：\n\n```\n//这里引入的js库只是方便学习和实验的，在正式项目不引入\n<script src=\"https://facebook.github.io/react/js/jsfiddle-integration-babel.js\"></script>\n\n<div id=\"container\">\n    <!-- This element's contents will be replaced with your component. -->\n</div>\n```\n\njs:\n\n```\n\n//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。\n\n//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置\n\n//自定义的componments通过React.createClass来进行创建\n//{}里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合\nvar Hello = React.createClass({\n  render: function() {\n  \n    \n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nReactDOM.render(\n  //生成自定义标签\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n\n为html添加css\n=========\n添加类\n-----\n因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className\n\n内联样式\n-----\n需要使用驼峰写法的键值对\n```\nreturn <div style={{color:'red'}}>Hello {this.props.name}</div>;\n```\n\n","source":"_posts/React-first.md","raw":"---\ntitle: react（一）：初识react\ndate: 2017-03-01 22:01:40\ntags: react\ncategories: react\n---\n这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world\n\n<!--more-->\n\n\n这里是看慕课网初学react做的一些总结[[课程]React入门](http://www.imooc.com/video/9819)，\n\n什么是react\n========\n\n\n在这一个小时内对react的认识中，我有了对react的初步印象\n\n 1. js库\n 2. facebook开发的\n 3. 高度的组件化\n 4. 使用jsx\n 5. 将html和js结合\n 6. 单项传输数据\n 7. 虚拟dom\n 8. 只负责view层\n\nreact并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI\n\nreact应用场景\n========\n\n 1. 复杂场景下的高性能\n 2. 重用组件库，组件组合\n 3. “懒”\n\n使用react\n=======\n最正确的打开方式还是直接看官方api：[react入门教程](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n或者阮一峰老师的教程：[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n\n我们先用React JSFiddle来创建一个最简单的hello world\n\nhtml：\n\n```\n//这里引入的js库只是方便学习和实验的，在正式项目不引入\n<script src=\"https://facebook.github.io/react/js/jsfiddle-integration-babel.js\"></script>\n\n<div id=\"container\">\n    <!-- This element's contents will be replaced with your component. -->\n</div>\n```\n\njs:\n\n```\n\n//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。\n\n//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置\n\n//自定义的componments通过React.createClass来进行创建\n//{}里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合\nvar Hello = React.createClass({\n  render: function() {\n  \n    \n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nReactDOM.render(\n  //生成自定义标签\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n\n为html添加css\n=========\n添加类\n-----\n因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className\n\n内联样式\n-----\n需要使用驼峰写法的键值对\n```\nreturn <div style={{color:'red'}}>Hello {this.props.name}</div>;\n```\n\n","slug":"React-first","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqhy001baaxiac5ntug9"},{"title":"将项目上传至github","date":"2017-02-25T09:35:35.000Z","_content":"概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题\n<!--more-->\n\n什么是git：\n-------\n\n之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统\n有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。\n\n关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程[Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n\n对github的初步认识\n---------\n因为现在使用github还不是特别熟练，只指出最基本的，\ngithub是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门[怎么使用Github](https://www.zhihu.com/question/20070065)\n\n我现在的使用有两个方面：\n 1. 使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）\n 但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~\n 2. 第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库\n 3. 当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~\n 4. 和海内外同胞共享资源，\n\n使用github遇到的问题，ssh秘钥变为灰色\n----------------\n先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：\n“Git”->“Git Bash”，输入\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email email@example.com\n$ ssh -T Git@github.com\n```\n\ngit config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n\n执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的\n\n但是在最后一步的时候报错了\n\n```\nssh: connect to host github.com port 22: Connection timed out\n```\n解决方法是\n在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：\n\n```\nHost github.com\nUser YourEmail@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\nYourEmail为您的邮箱\n再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。 \n![这里写图片描述](http://img.blog.csdn.net/20160113200605078)\n\n这时验证就可以通过。 \n\n\n将你的项目托管至github的方式\n---------------\n这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：\n 1. 网页版的github网页\n 2. 客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n 3. 我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度\n\n首先要新建一个项目，然后有三种上传项目的方式：\n\n 1. …or create a new repository on the command line  新建一个项目\n\n```\necho \"# 2017-02-23\" >> README.md     新建一个README.md文件并在里面写入 2017-02-23\ngit init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件\ngit add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)\ngit commit -m \"first commit\"         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m \"有意义的附加说明\"）\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系\ngit push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master\n```\n 2. …or push an existing repository from the command line  通过命令行提交一个已有的项目\n\n```\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git\ngit push -u origin master\n```\n 3. …or import code from another repository   从其他项目引入\n\n```\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n```\n\n这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时\n网上的解决方法没有看懂，先贴出来：[git遇到的诡异错误: Failed connect to github.com:443](http://blog.csdn.net/u011249920/article/details/55190409)\n\n总结一下用命令行提交项目的步骤（已经init过了）：\n 1. git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）\n 2. git commit -m \"first commit\"\n 3. push origin master\n \n 可以使用git status查看文件状态\n","source":"_posts/Upload-project-to-GitHub.md","raw":"---\ntitle: 将项目上传至github\ndate: 2017-02-25 17:35:35\ntags: git \ncategories: git\n---\n概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题\n<!--more-->\n\n什么是git：\n-------\n\n之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统\n有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。\n\n关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程[Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n\n对github的初步认识\n---------\n因为现在使用github还不是特别熟练，只指出最基本的，\ngithub是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门[怎么使用Github](https://www.zhihu.com/question/20070065)\n\n我现在的使用有两个方面：\n 1. 使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）\n 但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~\n 2. 第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库\n 3. 当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~\n 4. 和海内外同胞共享资源，\n\n使用github遇到的问题，ssh秘钥变为灰色\n----------------\n先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：\n“Git”->“Git Bash”，输入\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email email@example.com\n$ ssh -T Git@github.com\n```\n\ngit config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n\n执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的\n\n但是在最后一步的时候报错了\n\n```\nssh: connect to host github.com port 22: Connection timed out\n```\n解决方法是\n在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：\n\n```\nHost github.com\nUser YourEmail@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\nYourEmail为您的邮箱\n再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。 \n![这里写图片描述](http://img.blog.csdn.net/20160113200605078)\n\n这时验证就可以通过。 \n\n\n将你的项目托管至github的方式\n---------------\n这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：\n 1. 网页版的github网页\n 2. 客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n 3. 我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度\n\n首先要新建一个项目，然后有三种上传项目的方式：\n\n 1. …or create a new repository on the command line  新建一个项目\n\n```\necho \"# 2017-02-23\" >> README.md     新建一个README.md文件并在里面写入 2017-02-23\ngit init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件\ngit add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)\ngit commit -m \"first commit\"         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m \"有意义的附加说明\"）\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系\ngit push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master\n```\n 2. …or push an existing repository from the command line  通过命令行提交一个已有的项目\n\n```\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git\ngit push -u origin master\n```\n 3. …or import code from another repository   从其他项目引入\n\n```\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n```\n\n这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时\n网上的解决方法没有看懂，先贴出来：[git遇到的诡异错误: Failed connect to github.com:443](http://blog.csdn.net/u011249920/article/details/55190409)\n\n总结一下用命令行提交项目的步骤（已经init过了）：\n 1. git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）\n 2. git commit -m \"first commit\"\n 3. push origin master\n \n 可以使用git status查看文件状态\n","slug":"Upload-project-to-GitHub","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqi1001eaaxiotg2s6ur"},{"title":"移动端调试方法","date":"2017-03-28T15:21:55.000Z","_content":"在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。\n<!--more-->\n# iphone+safari\n之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合\n\n## iphone上设置\n设置 → Safari → 高级 → Web 检查器 → 开。\n![这里写图片描述](http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## pc端safari设置\nSafari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单\n![这里写图片描述](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg)\n\n设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了\n\n![](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg)\n\n# android手机+pc\n安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭\n\n1. 首先需要装chrom浏览器\n2. 打开手机的开发者模式，一般是：设置->关于手机->版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开![](http://img0.tuicool.com/JZjuMnM.png!web)\n3. 将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定![](http://img2.tuicool.com/AbE3E3.png!web)\n4. 在手机chrom上打开要调试的页面\n5. 在电脑上打开chrom，新开一地址栏为`chrome://inspect/`的页面,然后就可以调试了![](http://img0.tuicool.com/IzM7Bnv.png!web)\n6. 点击inspect弹出chrom调试工具\n\n# 微信开发者工具\n由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享\n\n## 前期准备\n这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。\n\n## 官方文档&下载地址\n[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)其中有下载地址\n\n## 模拟微信环境调试\n直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求\n\n## 真机调试\n在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥...\n\n---------------3.29更---------------------\n我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证\n在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png)\n然后根据提示一步一步安装就可以了。\n安装完证书就可以打开网页了\n\n# weinre\n跟着我念三遍weinre大法好，weinre大法好，weinre大法好~\n之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！\n缺点就是配置起来有削微的麻烦~\n## 什么是weinre\nweinre是web inspector remote（远程web检查器）的缩写\n\n## 安装weinre\n目前安装weinre我了解到有两种方式：node和java两种方式\n### node方式安装weinre\n首先确保你的电脑上有node环境，然后使用npm来安装\nwindows下\n`npm install weinre -g --registry=https://registry.npm.taobao.org`\nmac下\n`sudo npm install weinre -g --registry=https://registry.npm.taobao.org`\n### java环境下安装weinre\n首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: https://pan.baidu.com/s/1slRiOl3 密码: dsmp\n\n## 运行weinre\n### node环境下\n`weinre --httpPort 8081 --boundHost -all-`\n`8081`是调试服务器运行的端口号，\n`boundHost`是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具\n### java环境下\n在weinre所在文件夹的地址栏输入代码：`java -jar weinre.jar --httpPort 8081 --boundHost -all-`\n![](http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png)\n\n## 开始调试\n设置好端口之后我们在本地打开`http://192.168.0.126:8081`然后就可以看见weinre的基本信息\n![](http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif)\n\n之后我们需要在需要调试的页面上加上一段script标签\n`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n需要改为你自己的ip地址\n### ip的查询方式\n在cmd输入`ipconfig`，然后ipv4中后面跟的就是本机的ip地址\n\n## 手机打开需要调试的链接\n### 在staticWebDir目录下\n本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：`C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web`，然后手机访问:`http://192.168.0.126/contact_page/index.html`，然后在电脑上打开刚刚的页面`http://196.168.0.126:8081`![](http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png)点击`debug client user interface`之后出现\n![](http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png)，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的`elements`和其他的tag就可以进行调试\n\n### 在xampp下\n因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。\n项目存放的地址是`xampp\\htdocs\\app`\n修改配置：\n`C:\\Windows\\System32\\drivers\\etc\\hosts`文件下\n最后一行\n`127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com`\n然后在`C:\\xampp\\apache\\conf\\extra`文件里面修改\n```\n<VirtualHost *:80>\n    DocumentRoot \"C:\\xampp\\htdocs\\ltrip\"\n    ServerName ltrip.com \n    ServerAlias \n  <Directory \"C:\\xampp\\htdocs\\ltrip\">\n      Options FollowSymLinks ExecCGI\n      AllowOverride All\n      Order allow,deny\n      Allow from all\n      Require all granted\n  </Directory>\n</VirtualHost>\n```\n其中的`ServerName ltrip.com `中的`ltrip.com`就代替了` \"C:\\xampp\\htdocs\\ltrip\"`这个路径，\n所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:`http://192.168.0.168/ltrip.com`\n### 使用wenstorm\n在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如`file:///C:/Users/supfn/Desktop/contact_page/index.html`这样子的，在手机肯定访问不到我的电脑上的路径。\n这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。\nwebstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~\n简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器\n# 使用Fiddle抓包\n如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~\nfiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了\n## 下载fiddler\nFiddler 下载地址 ：https://www.telerik.com/download/fiddler\nFiddler 离线下载地址：http://pan.baidu.com/s/1i3NvE8P 密码：ozem\n## 使用fiddler抓取数据包\n在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888\n在fiddler上，点击菜单栏中的 [Tools] –> [Fiddler Options]\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png)\n 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK\n ![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png)\n## 使用weinre与fiddler组合\n我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签\n在完成配置之后打开要调试的链接，然后在fiddler中设置断点\n我们在fiddler中打下页面断点,bpafter + 想要打断点的网址![](http://img1.tuicool.com/Uvii2aN.png!web)\n再次访问该网站，发现本条请求被block住了\n![这里写图片描述](http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在右边加上weinre需要的script标签`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~\n\n参考文章\n- [Fiddler 抓包工具总结](http://blog.csdn.net/qq_21445563/article/details/51017605)\n- [移动端调试工具weinre安装教程（java版）](http://www.cnblogs.com/jhyxk2007/p/5089997.html)\n- [聊一聊移动调试那些事儿](http://www.tuicool.com/articles/MbYz6fA)","source":"_posts/Mobile-terminal-debugging-method.md","raw":"---\ntitle: 移动端调试方法\ndate: 2017-03-28 23:21:55\ntags: [调试] \ncategories: 日积月累\n---\n在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。\n<!--more-->\n# iphone+safari\n之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合\n\n## iphone上设置\n设置 → Safari → 高级 → Web 检查器 → 开。\n![这里写图片描述](http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## pc端safari设置\nSafari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单\n![这里写图片描述](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg)\n\n设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了\n\n![](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg)\n\n# android手机+pc\n安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭\n\n1. 首先需要装chrom浏览器\n2. 打开手机的开发者模式，一般是：设置->关于手机->版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开![](http://img0.tuicool.com/JZjuMnM.png!web)\n3. 将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定![](http://img2.tuicool.com/AbE3E3.png!web)\n4. 在手机chrom上打开要调试的页面\n5. 在电脑上打开chrom，新开一地址栏为`chrome://inspect/`的页面,然后就可以调试了![](http://img0.tuicool.com/IzM7Bnv.png!web)\n6. 点击inspect弹出chrom调试工具\n\n# 微信开发者工具\n由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享\n\n## 前期准备\n这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。\n\n## 官方文档&下载地址\n[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)其中有下载地址\n\n## 模拟微信环境调试\n直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求\n\n## 真机调试\n在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥...\n\n---------------3.29更---------------------\n我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证\n在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png)\n然后根据提示一步一步安装就可以了。\n安装完证书就可以打开网页了\n\n# weinre\n跟着我念三遍weinre大法好，weinre大法好，weinre大法好~\n之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！\n缺点就是配置起来有削微的麻烦~\n## 什么是weinre\nweinre是web inspector remote（远程web检查器）的缩写\n\n## 安装weinre\n目前安装weinre我了解到有两种方式：node和java两种方式\n### node方式安装weinre\n首先确保你的电脑上有node环境，然后使用npm来安装\nwindows下\n`npm install weinre -g --registry=https://registry.npm.taobao.org`\nmac下\n`sudo npm install weinre -g --registry=https://registry.npm.taobao.org`\n### java环境下安装weinre\n首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: https://pan.baidu.com/s/1slRiOl3 密码: dsmp\n\n## 运行weinre\n### node环境下\n`weinre --httpPort 8081 --boundHost -all-`\n`8081`是调试服务器运行的端口号，\n`boundHost`是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具\n### java环境下\n在weinre所在文件夹的地址栏输入代码：`java -jar weinre.jar --httpPort 8081 --boundHost -all-`\n![](http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png)\n\n## 开始调试\n设置好端口之后我们在本地打开`http://192.168.0.126:8081`然后就可以看见weinre的基本信息\n![](http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif)\n\n之后我们需要在需要调试的页面上加上一段script标签\n`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n需要改为你自己的ip地址\n### ip的查询方式\n在cmd输入`ipconfig`，然后ipv4中后面跟的就是本机的ip地址\n\n## 手机打开需要调试的链接\n### 在staticWebDir目录下\n本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：`C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web`，然后手机访问:`http://192.168.0.126/contact_page/index.html`，然后在电脑上打开刚刚的页面`http://196.168.0.126:8081`![](http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png)点击`debug client user interface`之后出现\n![](http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png)，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的`elements`和其他的tag就可以进行调试\n\n### 在xampp下\n因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。\n项目存放的地址是`xampp\\htdocs\\app`\n修改配置：\n`C:\\Windows\\System32\\drivers\\etc\\hosts`文件下\n最后一行\n`127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com`\n然后在`C:\\xampp\\apache\\conf\\extra`文件里面修改\n```\n<VirtualHost *:80>\n    DocumentRoot \"C:\\xampp\\htdocs\\ltrip\"\n    ServerName ltrip.com \n    ServerAlias \n  <Directory \"C:\\xampp\\htdocs\\ltrip\">\n      Options FollowSymLinks ExecCGI\n      AllowOverride All\n      Order allow,deny\n      Allow from all\n      Require all granted\n  </Directory>\n</VirtualHost>\n```\n其中的`ServerName ltrip.com `中的`ltrip.com`就代替了` \"C:\\xampp\\htdocs\\ltrip\"`这个路径，\n所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:`http://192.168.0.168/ltrip.com`\n### 使用wenstorm\n在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如`file:///C:/Users/supfn/Desktop/contact_page/index.html`这样子的，在手机肯定访问不到我的电脑上的路径。\n这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。\nwebstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~\n简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器\n# 使用Fiddle抓包\n如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~\nfiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了\n## 下载fiddler\nFiddler 下载地址 ：https://www.telerik.com/download/fiddler\nFiddler 离线下载地址：http://pan.baidu.com/s/1i3NvE8P 密码：ozem\n## 使用fiddler抓取数据包\n在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888\n在fiddler上，点击菜单栏中的 [Tools] –> [Fiddler Options]\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png)\n 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK\n ![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png)\n## 使用weinre与fiddler组合\n我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签\n在完成配置之后打开要调试的链接，然后在fiddler中设置断点\n我们在fiddler中打下页面断点,bpafter + 想要打断点的网址![](http://img1.tuicool.com/Uvii2aN.png!web)\n再次访问该网站，发现本条请求被block住了\n![这里写图片描述](http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在右边加上weinre需要的script标签`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~\n\n参考文章\n- [Fiddler 抓包工具总结](http://blog.csdn.net/qq_21445563/article/details/51017605)\n- [移动端调试工具weinre安装教程（java版）](http://www.cnblogs.com/jhyxk2007/p/5089997.html)\n- [聊一聊移动调试那些事儿](http://www.tuicool.com/articles/MbYz6fA)","slug":"Mobile-terminal-debugging-method","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqi2001iaaxib7zn40uo"},{"title":"react（二）：用实例认识react","date":"2017-03-02T13:34:44.000Z","_content":"昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！\n然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：[React 入门实例教程](http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html)，希望大家可以看一下老师写的demo\n[github地址](https://github.com/sunshine940326/reactDemo/tree/master)，求fork，求star，(～￣▽￣)～\n<!--more-->\n# HTML模板\n这是一个最简单的react模板\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    ReactDOM.render(\n            <div>\n                hello world\n            </div>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n## 不同版本的react之间的差异\n### jsx和babel\n在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：\n1. script标签由原来的\"text/jsx\"变为\"text/babel\"\n2. 所引入的js库有原来的react.js和jsxTransformer.js变为browser.js\n>   1. JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。\n>   2. 编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。\n>   3. 第二代编译器——babel\n> React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。\n### React.reader和ReactDOM.render\n另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM\n> 这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。\n> \n>  新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 \n> \n> 而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。\n> \n> 总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。\n---\n通过以上的介绍，你应该就清楚了这个demo个行代码的意思了\nscript加载的三个库：`react.js`：React的核心库， `react-dom.js`:react中和dom有关的库，`Browser.js`将将jsx转化为js\n`ReactDOM.render(componments,containerName)`函数是将`componments`插入到`containerName`中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。\nreact中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）\n# 虚拟DOM\n>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\n这里有几点需要注意的：\n1. `componments`只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签\n至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下![image](http://image.beekka.com/blog/2015/bg2015033109.png)\n# JXL语法\n>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n**利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。**\n### 使用 HTML 标签：\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nvar myDivElement = <div className=\"foo\" />;\nrender(myDivElement, document.getElementById('mountNode'));\n```\nHTML 里的 `class` 在 JSX 里要写成 `className`，因为 `class` 在 JS 里是保留关键字。同理某些属性比如 `for` 要写成 `htmlFor`。\n\n### 使用组件：\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport MyComponent from './MyComponet';\n\nvar myElement = <MyComponent someProperty={true} />;\nrender(myElement, document.body);\n\n```\n更多关于使用jsx的方法请见[使用 JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n# component组件\ncomponent在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块\n将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 [demo04](https://github.com/sunshine940326/reactDemo/tree/master/demo4)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div id=\"container\"></div>\n\n<script type=\"text/babel\">\nvar HellOMessage = React.createClass({\n    render:function () {\n        return <h1>Hello {this.props.name}</h1>\n    }\n});\n    \n    ReactDOM.render(\n            <HellOMessage name=\"John\" />\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n**因为这里是插入的组件，所以`HellOMessage`首字母需要大写\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 HelloMessage 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取。上面代码的运行结果如下。\n![image](http://image.beekka.com/blog/2015/bg2015033108.png)\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点（查看 [demo05](https://github.com/sunshine940326/reactDemo/tree/master/demo5)）\n\n\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n\n>这里需要注意， `this.props.children` 的值有三种可能：如果当前组件没有子节点，它就是 `undefined` ;如果有一个子节点，数据类型是 `object` ；如果有多个子节点，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\nReact 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法，[请参考官方文档](https://facebook.github.io/react/docs/react-api.html)。\n# PropTypes\n组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求（查看 [demo06](https://github.com/sunshine940326/reactDemo/tree/master/demo6)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar data = \"123\";\n\n    var TestPropsType = React.createClass({\n        propsType:{\n            title:React.propsType.string.isRequired,\n        },\n        render: function () {\n            return <h1>{this.props.title}</h1>\n        }\n    })\n\n    ReactDOM.render(\n            <TestPropsType title={data}/>\n\n\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这就是验证了在使用`TestPropsType`这个组件时`title`属性是必须的并且传入的参数是字符串，如果将`data` 改为`var data = 123`，`title`属性就通不过验证了,会报错\n# 获取真实的DOM节点\n从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 [demo07](https://github.com/sunshine940326/reactDemo/tree/master/demo7) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var MyComponent = React.createClass({\n        handleClick : function () {\n            this.refs.myTextInput.focus();\n        },\n        render:function () {\n            return(\n                    <div>\n                        <input type=\"text\" ref=\"myTextInput\"/>\n                        <input type=\"text\" value=\"Focus the text input\" onClick={this.handleClick}/>\n                    </div>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <MyComponent/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这个demo中，组件`MyConmponent`的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的`input`标签有一个ref属性，然后`this.refs.[redName]`就会返回这个真实的DOM节点。\n# state\n组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 [demo08](https://github.com/sunshine940326/reactDemo/tree/master/demo8) ）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var LikeBtn = React.createClass({\n        getInitialState: function () {\n            return {liked:false}\n        },\n\n        handleClick:function (event) {\n            this.setState({liked:!this.state.liked})\n        },\n\n        render:function () {\n            var text = this.state.liked ? 'like' : 'haven\\'t liked';\n            return(\n                    <p onClick={this.handleClick}>\n                        You {text} this. click to toggle\n                    </p>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <LikeBtn/>\n            ,document.getElementById('container')\n    )\n\n</script>\n</body>\n</html>\n\n```\n\n在这个demo中，在组件`LikeBtn`中，首先为其定义了`InitialState:liked:false`,就是`liked`初始时的状态为`false`,然后当用户点击时,导致状态的变化，`this.setState`方法就修改`state`,将`liked`修改，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n# React state与props区别\n`state`与`props`都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别\n`state`可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为`false`，然后当我们点击组件（发生了交互，触发事件），然后状态改变`liked`的状态变为`true`，因为状态的改变，所以`p`中的文字就会做出相应的改变\n`props`可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变\n## props属性的用法\n### 键值对：值可以有多种形式<HelloWorld name= ? /> \n- 字符串：\"XiaoWang\";\n- 求值表达式 {123}、{\"XiaoWang\"};\n- 数组{[1,2,3]};\n- 变量{variable};\n- 函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;\n### 展开语法{...props}：\nReact会自动把对象中的属性和值当做属性的赋值\n```\nvar HelloWorld =React.createClass({\n     rencer:function () {\n         return <p>Hello,{this.props.name1 + ' 'this.props.name2}</p>;\n     },\n });\n var HelloUniverse = React.createClass({\n     getInitialState:function () {\n         return {\n             name1:'Tim',\n             name2:'John',\n         };\n     },\n     handleChange: function (event) {\n         this.setState({name: event.target.value});\n     },\n     render: function () {\n         return <div>\n         <HelloWorld name={...this.state}></HelloWorld>\n         <br/>\n         <input type=\"text\" onChange={this.handleChange} />\n         </div>\n     },\n });\n ReactDom.render(<HelloUniverse />,document.body);\n```\n### getDefaultProps\ngetDefaultProps 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(<MyTitle />,document.body);\n\n```\n##  state状态的用法\n### getInitialState\n\n`object getInitialState()`\n\n`getInitialState `方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。在组件挂载之前调用一次。返回值将会作为 `this.state` 的初始值。\n\n### setState\n\n`setState(object nextState[, function callback])`\n合并 `nextState` 和当前 `state`。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 `setState` 执行完毕并且组件重新渲染完成之后调用。`this.setState` 方法用于修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n### replaceState\n\n`replaceState(object nextState[, function callback])`\n类似于 `setState()`，但是删除之前所有已存在的 `state` 键，这些键都不在 `nextState` 中。\n# 表单\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 `this.props` 读取（查看 [demo9](https://github.com/sunshine940326/reactDemo/tree/master/demo9) ）。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar InputTest = React.createClass({\n    getInitialState: function () {\n        return{\n            value : 'hello!'\n        };\n    },\n    handleChange: function (event) {\n        this.setState({\n            value:event.target.value\n        });\n    },\n    render: function () {\n        var value = this.state.value;\n        return(\n                <div>\n                    <input type=\"text\" value={value} onChange={this.handleChange}/>\n                    <p>{value}</p>\n                </div>\n        )\n    }\n});\n\n    ReactDOM.render(\n            <InputTest/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n上述代码的效果是有一个输入框，输入框下面是一个`p`标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。\n\n文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。`textarea` 元素、`select`元素、`radio`元素都属于这种情况\n# componments的生命周期\n组件的生命周期分为三个状态：\n- Mounting：已插入真实DOM\n- Updating： 正在被重新渲染\n- Unmounting：已移除真实的DOM\nReact 为每个状态都提供了两种处理函数，`will` 函数在进入状态之前调用，`did` 函数在进入状态之后调用，三种状态共计五种处理函数。\n- componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n此外，React 还提供两种特殊状态的处理函数。\n- componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n下面是一个例子（查看 [demo10](https://github.com/sunshine940326/reactDemo/tree/master/demo10) )。\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var Hello = React.createClass({\n        getInitialState:function () {\n            alert('init')\n            return{\n                opacity:1.0\n            }\n        },\n\n        componentWillMount:function () {\n          alert('Will')\n        },\n\n        componentDidMount:function () {\n            alert('Did')\n            this.timer = setInterval(function () {\n                var opacity = this.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                this.setState({\n                    opacity: opacity\n                });\n            }.bind(this),100)\n        },\n        render:function () {\n            return(\n                <div style={{opacity:this.state.opacity}}>\n                    Hello {this.props.name}\n                </div>\n            )\n        }\n    });\n\n    ReactDOM.render(\n        <Hello name=\"world!\"/>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。\n\n为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：\n\n```\ncomponentDidMount:function () {\n            alert('Did')\n            var _self  = this;\n            _self.timer = setInterval(function () {\n                var opacity = _self.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                _self.setState({\n                    opacity: opacity\n                });\n            },100)\n        },\n```\n这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)\n# AJAX\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI （查看 [demo11](https://github.com/sunshine940326/reactDemo/tree/master/demo11)) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/jquery.min.js\"></script>\n\n</head>\n<body>\n <div id=\"container\"></div>\n\n <script type=\"text/babel\">\n     var UserGist = React.createClass({\n         getInitialState:function () {\n             return{\n                 username: '',\n                 lastGistUrl: '',\n             }\n         },\n\n         componentDidMount:function () {\n             $.get(this.props.source,function (result) {\n                 var lastGist = result[0];\n                 if(this.isMounted()){\n                     this.setState({\n                         username: lastGist.owner.login,\n                         lastGistUrl: lastGist.html_url\n                     });\n                 }\n             }.bind(this));\n         },\n\n         render: function () {\n             return(\n                 <div>\n                     {this.state.username}'s last gist is <a href={this.lastGistUrl}>here</a>.\n                 </div>\n             )\n         }\n     })\n\n     ReactDOM.render(\n         <UserGist source=\"https://api.github.com/users/octocat/gists\"/>\n         ,document.getElementById('container')\n     )\n </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n","source":"_posts/React2understanding-react-with-examples.md","raw":"---\ntitle: react（二）：用实例认识react\ndate: 2017-03-02 21:34:44\ntags: react\ncategories: react\n---\n昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！\n然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：[React 入门实例教程](http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html)，希望大家可以看一下老师写的demo\n[github地址](https://github.com/sunshine940326/reactDemo/tree/master)，求fork，求star，(～￣▽￣)～\n<!--more-->\n# HTML模板\n这是一个最简单的react模板\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    ReactDOM.render(\n            <div>\n                hello world\n            </div>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n## 不同版本的react之间的差异\n### jsx和babel\n在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：\n1. script标签由原来的\"text/jsx\"变为\"text/babel\"\n2. 所引入的js库有原来的react.js和jsxTransformer.js变为browser.js\n>   1. JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。\n>   2. 编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。\n>   3. 第二代编译器——babel\n> React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。\n### React.reader和ReactDOM.render\n另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM\n> 这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。\n> \n>  新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 \n> \n> 而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。\n> \n> 总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。\n---\n通过以上的介绍，你应该就清楚了这个demo个行代码的意思了\nscript加载的三个库：`react.js`：React的核心库， `react-dom.js`:react中和dom有关的库，`Browser.js`将将jsx转化为js\n`ReactDOM.render(componments,containerName)`函数是将`componments`插入到`containerName`中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。\nreact中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）\n# 虚拟DOM\n>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\n这里有几点需要注意的：\n1. `componments`只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签\n至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下![image](http://image.beekka.com/blog/2015/bg2015033109.png)\n# JXL语法\n>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n**利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。**\n### 使用 HTML 标签：\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nvar myDivElement = <div className=\"foo\" />;\nrender(myDivElement, document.getElementById('mountNode'));\n```\nHTML 里的 `class` 在 JSX 里要写成 `className`，因为 `class` 在 JS 里是保留关键字。同理某些属性比如 `for` 要写成 `htmlFor`。\n\n### 使用组件：\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport MyComponent from './MyComponet';\n\nvar myElement = <MyComponent someProperty={true} />;\nrender(myElement, document.body);\n\n```\n更多关于使用jsx的方法请见[使用 JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n# component组件\ncomponent在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块\n将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 [demo04](https://github.com/sunshine940326/reactDemo/tree/master/demo4)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div id=\"container\"></div>\n\n<script type=\"text/babel\">\nvar HellOMessage = React.createClass({\n    render:function () {\n        return <h1>Hello {this.props.name}</h1>\n    }\n});\n    \n    ReactDOM.render(\n            <HellOMessage name=\"John\" />\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n**因为这里是插入的组件，所以`HellOMessage`首字母需要大写\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 HelloMessage 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取。上面代码的运行结果如下。\n![image](http://image.beekka.com/blog/2015/bg2015033108.png)\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点（查看 [demo05](https://github.com/sunshine940326/reactDemo/tree/master/demo5)）\n\n\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n\n>这里需要注意， `this.props.children` 的值有三种可能：如果当前组件没有子节点，它就是 `undefined` ;如果有一个子节点，数据类型是 `object` ；如果有多个子节点，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\nReact 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法，[请参考官方文档](https://facebook.github.io/react/docs/react-api.html)。\n# PropTypes\n组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求（查看 [demo06](https://github.com/sunshine940326/reactDemo/tree/master/demo6)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar data = \"123\";\n\n    var TestPropsType = React.createClass({\n        propsType:{\n            title:React.propsType.string.isRequired,\n        },\n        render: function () {\n            return <h1>{this.props.title}</h1>\n        }\n    })\n\n    ReactDOM.render(\n            <TestPropsType title={data}/>\n\n\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这就是验证了在使用`TestPropsType`这个组件时`title`属性是必须的并且传入的参数是字符串，如果将`data` 改为`var data = 123`，`title`属性就通不过验证了,会报错\n# 获取真实的DOM节点\n从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 [demo07](https://github.com/sunshine940326/reactDemo/tree/master/demo7) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var MyComponent = React.createClass({\n        handleClick : function () {\n            this.refs.myTextInput.focus();\n        },\n        render:function () {\n            return(\n                    <div>\n                        <input type=\"text\" ref=\"myTextInput\"/>\n                        <input type=\"text\" value=\"Focus the text input\" onClick={this.handleClick}/>\n                    </div>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <MyComponent/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这个demo中，组件`MyConmponent`的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的`input`标签有一个ref属性，然后`this.refs.[redName]`就会返回这个真实的DOM节点。\n# state\n组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 [demo08](https://github.com/sunshine940326/reactDemo/tree/master/demo8) ）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var LikeBtn = React.createClass({\n        getInitialState: function () {\n            return {liked:false}\n        },\n\n        handleClick:function (event) {\n            this.setState({liked:!this.state.liked})\n        },\n\n        render:function () {\n            var text = this.state.liked ? 'like' : 'haven\\'t liked';\n            return(\n                    <p onClick={this.handleClick}>\n                        You {text} this. click to toggle\n                    </p>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <LikeBtn/>\n            ,document.getElementById('container')\n    )\n\n</script>\n</body>\n</html>\n\n```\n\n在这个demo中，在组件`LikeBtn`中，首先为其定义了`InitialState:liked:false`,就是`liked`初始时的状态为`false`,然后当用户点击时,导致状态的变化，`this.setState`方法就修改`state`,将`liked`修改，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n# React state与props区别\n`state`与`props`都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别\n`state`可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为`false`，然后当我们点击组件（发生了交互，触发事件），然后状态改变`liked`的状态变为`true`，因为状态的改变，所以`p`中的文字就会做出相应的改变\n`props`可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变\n## props属性的用法\n### 键值对：值可以有多种形式<HelloWorld name= ? /> \n- 字符串：\"XiaoWang\";\n- 求值表达式 {123}、{\"XiaoWang\"};\n- 数组{[1,2,3]};\n- 变量{variable};\n- 函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;\n### 展开语法{...props}：\nReact会自动把对象中的属性和值当做属性的赋值\n```\nvar HelloWorld =React.createClass({\n     rencer:function () {\n         return <p>Hello,{this.props.name1 + ' 'this.props.name2}</p>;\n     },\n });\n var HelloUniverse = React.createClass({\n     getInitialState:function () {\n         return {\n             name1:'Tim',\n             name2:'John',\n         };\n     },\n     handleChange: function (event) {\n         this.setState({name: event.target.value});\n     },\n     render: function () {\n         return <div>\n         <HelloWorld name={...this.state}></HelloWorld>\n         <br/>\n         <input type=\"text\" onChange={this.handleChange} />\n         </div>\n     },\n });\n ReactDom.render(<HelloUniverse />,document.body);\n```\n### getDefaultProps\ngetDefaultProps 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(<MyTitle />,document.body);\n\n```\n##  state状态的用法\n### getInitialState\n\n`object getInitialState()`\n\n`getInitialState `方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。在组件挂载之前调用一次。返回值将会作为 `this.state` 的初始值。\n\n### setState\n\n`setState(object nextState[, function callback])`\n合并 `nextState` 和当前 `state`。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 `setState` 执行完毕并且组件重新渲染完成之后调用。`this.setState` 方法用于修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n### replaceState\n\n`replaceState(object nextState[, function callback])`\n类似于 `setState()`，但是删除之前所有已存在的 `state` 键，这些键都不在 `nextState` 中。\n# 表单\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 `this.props` 读取（查看 [demo9](https://github.com/sunshine940326/reactDemo/tree/master/demo9) ）。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar InputTest = React.createClass({\n    getInitialState: function () {\n        return{\n            value : 'hello!'\n        };\n    },\n    handleChange: function (event) {\n        this.setState({\n            value:event.target.value\n        });\n    },\n    render: function () {\n        var value = this.state.value;\n        return(\n                <div>\n                    <input type=\"text\" value={value} onChange={this.handleChange}/>\n                    <p>{value}</p>\n                </div>\n        )\n    }\n});\n\n    ReactDOM.render(\n            <InputTest/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n上述代码的效果是有一个输入框，输入框下面是一个`p`标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。\n\n文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。`textarea` 元素、`select`元素、`radio`元素都属于这种情况\n# componments的生命周期\n组件的生命周期分为三个状态：\n- Mounting：已插入真实DOM\n- Updating： 正在被重新渲染\n- Unmounting：已移除真实的DOM\nReact 为每个状态都提供了两种处理函数，`will` 函数在进入状态之前调用，`did` 函数在进入状态之后调用，三种状态共计五种处理函数。\n- componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n此外，React 还提供两种特殊状态的处理函数。\n- componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n下面是一个例子（查看 [demo10](https://github.com/sunshine940326/reactDemo/tree/master/demo10) )。\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var Hello = React.createClass({\n        getInitialState:function () {\n            alert('init')\n            return{\n                opacity:1.0\n            }\n        },\n\n        componentWillMount:function () {\n          alert('Will')\n        },\n\n        componentDidMount:function () {\n            alert('Did')\n            this.timer = setInterval(function () {\n                var opacity = this.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                this.setState({\n                    opacity: opacity\n                });\n            }.bind(this),100)\n        },\n        render:function () {\n            return(\n                <div style={{opacity:this.state.opacity}}>\n                    Hello {this.props.name}\n                </div>\n            )\n        }\n    });\n\n    ReactDOM.render(\n        <Hello name=\"world!\"/>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。\n\n为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：\n\n```\ncomponentDidMount:function () {\n            alert('Did')\n            var _self  = this;\n            _self.timer = setInterval(function () {\n                var opacity = _self.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                _self.setState({\n                    opacity: opacity\n                });\n            },100)\n        },\n```\n这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)\n# AJAX\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI （查看 [demo11](https://github.com/sunshine940326/reactDemo/tree/master/demo11)) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/jquery.min.js\"></script>\n\n</head>\n<body>\n <div id=\"container\"></div>\n\n <script type=\"text/babel\">\n     var UserGist = React.createClass({\n         getInitialState:function () {\n             return{\n                 username: '',\n                 lastGistUrl: '',\n             }\n         },\n\n         componentDidMount:function () {\n             $.get(this.props.source,function (result) {\n                 var lastGist = result[0];\n                 if(this.isMounted()){\n                     this.setState({\n                         username: lastGist.owner.login,\n                         lastGistUrl: lastGist.html_url\n                     });\n                 }\n             }.bind(this));\n         },\n\n         render: function () {\n             return(\n                 <div>\n                     {this.state.username}'s last gist is <a href={this.lastGistUrl}>here</a>.\n                 </div>\n             )\n         }\n     })\n\n     ReactDOM.render(\n         <UserGist source=\"https://api.github.com/users/octocat/gists\"/>\n         ,document.getElementById('container')\n     )\n </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n","slug":"React2understanding-react-with-examples","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqi4001maaxikpmahsue"},{"title":"使用webstorm连接github","date":"2017-02-24T02:40:20.000Z","_content":"本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！~\n<!--more-->\n昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容\n\n说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，[WebStorm 有哪些过人之处？](https://www.zhihu.com/question/20936155)，说一下我现在觉得有用的功能：\n \n\n - 连接ftp，可以直接上传文件，一键就可以更新\n - 就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦\n\n因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能\n\n今天记录一下怎么用webstorm连接github以及一些操作说明\n怎么连接用webstorm连接github这点自行百度。\n在连接到github上之后，想要把你的项目上传到github上，\n1、点击右上方的VCS然后import...→share....\n![这里写图片描述](http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库\n![这里写图片描述](http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。\n![这里写图片描述](http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png)\nadd之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上\n![这里写图片描述](http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之后再push，也可以点击上方的VSC-git-push\n\n附文件颜色代表的含义：\n红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；\n\n绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；\n\n蓝色：文件内容有修改；\n\n灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。\n\n总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；\n\n这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键\n\n在右下角还可以口管理分支\n\n附上查找的资料，他们写的比较详细，我就不再赘述\n - [利用WebStorm来管理你的Github](http://www.cnblogs.com/liulinjie/p/5708149.html)\n - [git checkout 命令详解](http://www.tuicool.com/articles/A3Mn6f)\n - [webstormGit上的使用](http://www.cnblogs.com/zhaoxiu/p/5772466.html)\n - [使用webstorm操作git](http://www.cnblogs.com/jinguangguo/p/4868152.html)\n - [使用webstorm上传代码到github](http://www.cnblogs.com/vanstrict/p/5677716.html)\n","source":"_posts/Use-webstorm-to-connect-GitHub.md","raw":"---\ntitle: 使用webstorm连接github\ndate: 2017-02-24 10:40:20\ntags: git\ncategories: git\n---\n本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！~\n<!--more-->\n昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容\n\n说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，[WebStorm 有哪些过人之处？](https://www.zhihu.com/question/20936155)，说一下我现在觉得有用的功能：\n \n\n - 连接ftp，可以直接上传文件，一键就可以更新\n - 就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦\n\n因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能\n\n今天记录一下怎么用webstorm连接github以及一些操作说明\n怎么连接用webstorm连接github这点自行百度。\n在连接到github上之后，想要把你的项目上传到github上，\n1、点击右上方的VCS然后import...→share....\n![这里写图片描述](http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库\n![这里写图片描述](http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。\n![这里写图片描述](http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png)\nadd之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上\n![这里写图片描述](http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之后再push，也可以点击上方的VSC-git-push\n\n附文件颜色代表的含义：\n红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；\n\n绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；\n\n蓝色：文件内容有修改；\n\n灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。\n\n总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；\n\n这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键\n\n在右下角还可以口管理分支\n\n附上查找的资料，他们写的比较详细，我就不再赘述\n - [利用WebStorm来管理你的Github](http://www.cnblogs.com/liulinjie/p/5708149.html)\n - [git checkout 命令详解](http://www.tuicool.com/articles/A3Mn6f)\n - [webstormGit上的使用](http://www.cnblogs.com/zhaoxiu/p/5772466.html)\n - [使用webstorm操作git](http://www.cnblogs.com/jinguangguo/p/4868152.html)\n - [使用webstorm上传代码到github](http://www.cnblogs.com/vanstrict/p/5677716.html)\n","slug":"Use-webstorm-to-connect-GitHub","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqi7001qaaxismbb4pg4"},{"title":"利用Gitpage+hexo开发自己的博客","date":"2016-09-15T17:07:17.000Z","_content":"![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。\n<!--more-->\n\nGitpage+hexo\n------------\n\n想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。\n\n环境准备\n====\n\n1 安装Node\n--------\n\n到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi\n\n2 安装Git\n-------\n安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n\n安装步骤\n====\n\n1 安装Hexo\n------\n\n使用git shell,依次输入以下代码命令：\n\n```\ncd /\nnpm install hexo-cli -g\n```\n\n\n命令解释：\n\n**cd和/之间要有空格**，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。\n\n2 安装博客所需文件\n----------\n\n```\ncd /\nhexo init Hexo\ncd /Hexo\nnpm instal\nhexo generate（可简写为hexo g）\nhexo sever（可简写为hexo s）\n```\n\n命令解释:\n\n- cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。\n\n- Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。\n\n- 指向Hexo目录\n\n- 安装依赖文件\n\n- 编译\n\n- 开启本地服务(第5、6步的操作可以合并成hexo s -g)\n\n此时打开浏览器，在地址栏输入http://localhost:4000/\n即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。\n\n那么如何翻墙呢？ 下面提供我所知道的两种方法：\n\n这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: http://pan.baidu.com/s/1c2x7eRu\n密码: z3kw\n\n这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：http://blog.my-eclipse.cn/host-google.html\n\n如果你不想翻墙，可以采用这种方法：\n进入你刚新建好的 blog根目录\n\n```\n themes/landscape/layout/_partial\n\n```\n1，找到 after-footer.ejs把\n\n```\n<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>\n```\n替换成\n\n> `<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>`\n\n2，找到 header.ejs\n注释掉或者删掉 下面这句css引用\n`<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=”stylesheet” type=”text/css”>`\nhexo server 之后。访问 http://localhost:4000 就会看到blog主页了。\n\n如果你成功在http://localhost:4000/\n下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！\n\n> 行百里者半九十\n\n不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：\n\n3 部署博客到服务器\n--------\n\n也就是把博客部署到github page提供的服务器上。\n\n步骤\n\n- 首先回到git shell按ctrl+c，之后输入y即可\n\n\n- 修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：`deploy:  type: github  repo: https://github.com/yourname/blog.git`\n\n\n继续回到git shell输入命令：\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n命令解释:\n\n- 清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n- 开启本地服务，\n- 部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n是的，现在你拥有了自己的博客！\n\n发表博文\n====\n\n千辛万苦建立了博客，那么我们来学习一下如何发表博文。\n\n新建博文\n----\n\n继续回到git shell输入：\n\nhexo new \"新博文的名字\"\n即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。\n\n**Markdown编辑器**\n\n推荐两款我所使用的markdown编辑器：\n\n**MIU**，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：\n链接: http://pan.baidu.com/s/1slMPeTR\n密码: 2pnk\n**正在使用的Atom:**更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。\n可能会遇到的问题\n\n> hexo new [layout] \"postName\" #新建文章\n\n其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md\n\n```\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行\n\n```\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n\npostName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。\n\n注意，所有文件：后面都必须有个空格，不然会报错。\n\n看一下刚才生成的文件hexo\\source\\_posts\\postName.md\n\n```\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n```\n\n始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。\n\n**fancybox**\n可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。\n很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：\n```\nlayout: photo\ntitle: 我的阅历\ndate: 2085-01-16 07:33:44\ntags: [hexo]\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n```\n\n经过测试，文件头上的layout: photo可以省略。\n\n不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md\n```\nlayout: { { layout } }\ntitle: { { title } }\ndate: { { date } }\ntags:\nphotos:\n-\n---\n```\n然后每次可以执行带layout的new命令生成照片文章：\n\n```\nhexo new photo \"photoPostName\" #新建照片文章\n```\ndescription\nmarkdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。\n```\ntitle: hexo你的博客\ndate: 2013-11-22 17:11:54\ncategories: default\ntags: [hexo]\ndescription: 你对本页的描述\n---\n```\nhexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。\n\n**文章摘要**\n在需要显示摘要的地方添加如下代码即可：\n\n```\n以上是摘要\n<!--more-->\n以下是余下全文\n```\nmore以上内容即是文章摘要，在主页显示，more以下内容点击『> Read More』链接打开全文才显示。\n\nhexo中所有文件的编码格式均是UTF-8。\n\n\n优雅的在博客上插入图片\n-----------\n\n看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：\n\n首先确认 _config.yml 中更改 post_asset_folder:true 。\n回到git shell，输入\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n继续执行\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹\n\n\n然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？\n提醒：\n\n写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！\n\n预览和发表\n-----\n\n继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！\n\n```\n1.  hexo clean\n2.  hexo g\n3.  hexo s\n4.  hexo d\n```\n\n更高大上的发表博文的方法\n\n使用Travis CI自动部署你的Hexo博客到Github,请参考[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客\n\n安装主题\n----\n\n如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：\n\n选择主题\n\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你喜欢的主题，我使用的Next主题\n\n安装Next主题\n---\n\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽！\n\n安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist\n```\n\n目录是否是modernist无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为modernist\n\n```\ntheme: modernist\n```\n打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n```\n更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n评论框\n---\n\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用[多说](https://hexo.io/plugins/)\n直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置->域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以[参考这里](http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017)，我是在HeroicYang的基础上修改的。\n\n如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout\\_partial\\comment.ejs里面，如下：\n\n```\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n构建新页面\n-----\n\n那些小图标都是一个新页面，需要手动创建，那么如何创建？\n\n回到git shell，\n\nhexo new page \"页面名称\"\n比如你要创建一个about页面，就输入hexo new page “about”\n\n正确显示各页面内容\n\n发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！\n\n解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：\n\n\n\ncomments: false即关闭此页面的评论功能\n\ntype: “tags”这里的值根据你想更改的页面决定\n\n更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！\n\n安装插件\n----\n\nhexo支持的插件：[Plugins | Hexo](https://hexo.io/plugins/)\n想安装什么插件，按照相关README.md中介绍操作即可。\n\n安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:[第三方服务集成](http://theme-next.iissnan.com/third-party-services.html#swfitype)，介绍非常全面！好好用来装饰你的博客吧！\n\n安装sitemap和feed插件时，如果遇到问题，可以参考:[博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)，安装sitemap后要到[百度站长](http://zhanzhang.baidu.com/?castk=LTE=)提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:[为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n安装swiftype插件，如果遇到问题，可以参考[利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n图床\n---\n\n考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。\n\n免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里[关于key-value存储系统](https://support.qiniu.com/hc/)。\n\n七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇[Linux中国采用七牛云存储支撑图片访问](https://linux.cn/article-2311-1.html)。\n\n如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。\n\n如果你对七牛web版的文件管理界面不满意，可以用官方的[七牛云存储工具](http://docs.qiniu.com/tools/v6/index.html)。\n\n您还可以使用如下图床服务 FarBox，Dropbox，又拍云\n主题优化\n----\n\nNext主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！\n\n[提升Hexo的NexT主题加载速度](http://www.gfwsb.com/2016/improveNexTspeed/)\n\n[使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n绑定域名\n---\n\n购买域名，我是在[万网](https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist)购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个[网站](http://www.xiaoerguo.com/),但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！\n\n如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：\n\n192.30.252.153\n\n192.30.252.154\n\n制作ICO图标\n---\n\nfavicon.ico一般用于作为缩略图的网站标志，[在线制作网站](http://www.bitbug.net/)\n关于是否绑定域名\n\n经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考[单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/),这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！\n\n#至此，基本操作介绍完毕，以下内容普通用户无需了解。\n默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n接下来是重头戏_config.yml，做个简单说明：\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site #整站的基本信息\ntitle: 不如 #网站标题\nsubtitle: 码农，程序猿，未来的昏析师 #网站副标题\ndescription: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head->meta中可看到\nauthor: bruce #网站作者，在下方显示\nemail: bu.ru@qq.com #联系邮箱\nlanguage: zh-CN #语言\n\n# URL #域名和文件结构\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://ibruce.info #你的域名\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing #写文章选项\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post #默认layout方式\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight: #代码高亮\n  enable: true #是否启用\n  line_number: false #是否显示行号\n  tab_replace:\n\n# Category & Tag #分类与标签\ndefault_category: uncategorized # default\ncategory_map:\ntag_map:\n\n# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server #本地服务参数\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: true\nlogger_format:\n\n# Date / Time format #日期显示格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination #分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页10篇文章\npagination_dir: page\n\n# Disqus #社会化评论disqus，我使用多说，在主题中配置\ndisqus_shortname:\n\n# Extensions #插件，暂时未安装插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\n## 主题\ntheme: modernist # raytaylorism # pacman # modernist # light\nexclude_generator:\n\n# Deployment #部署\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库\n```\n修改局部页面\n---\n\n页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：\n```\n.\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-CN.yml      #中文语言\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   └── _widget        #小挂件的布局，页面下方小挂件的控制\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _base      #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts      #字体\n|   |   ├── images     #图片\n|   |   └── style.styl #*.styl引入需要的css源码\n|   ├── fancybox       #fancybox效果源码\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout\\_partial\\header.ejs，比如头上加个搜索框：\n```\n<div>\n<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n <input type=\"search\" name=\"q\" id=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" maxlength=\"20\" placeholder=\"Search\" />\n <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n</form>\n</div>\n```\n将如上代码加入即可，您需要修改css以便这个搜索框比较美观。\n\n再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout\\_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。\n\n统计\n---\n\n页面上显示访问次数可以使用 [不蒜子](http://busuanzi.ibruce.info/)，两行代码即可搞定。\n\n因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。\n编辑文件hexo\\themes\\modernist\\_config.yml，增加配置选项：\n\n```\nbaidu_tongji: true\n```\n新建文件hexo\\themes\\modernist\\layout\\_partial\\baidu_tongji.ejs，内容如下：\n\n```\n<% if (theme.baidu_tongji){ %>\n<script type=\"text/javascript\">\n#你的百度统计代码\n</script>\n<% } %>\n```\n注册并登录百度统计获取你的统计代码。\n\n编辑文件hexo\\themes\\modernist\\layout\\_partial\\head.ejs，在『/head』之前增加：\n\n```\n<%- partial('baidu_tongji') %>\n```\n重新生成并部署你的站点。\n\n不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页->网站列表->获取代码->系统管理设置->统计图标设置->显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。\n\n分享\n---\n\n我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：\n\n- 在hexo\\themes\\modernist\\layout\\_partial\\post下新建jiathis.ejs文件。\n注册加网获得你的分享代码，写入jiathis.ejs。\n- 在hexo\\themes\\modernist\\layout\\_partial\\article.ejs中，添加<%-partial(‘post/jiathis’)%>。\n-分享服务还可以使用如下企业提供的技术[加网](http://www.jiathis.com/)，[bShare](http://www.bshare.cn/)，[百度分享](http://share.baidu.com/)。\n\n网站图标\n\n看一下hexo\\themes\\modernist\\layout\\_partial\\head.ejs，找到这句：\n\n```\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%- config.root %>favicon.ico\">\n```\n你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以[在Faviconer](http://www.faviconer.com/)制作你的ico图标，国内有[比特虫](http://www.bitbug.net/)。\n\n自定义挂件\n---\n\n除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout\\_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist\\_config.yml中配置。\n```\nwidgets:\n  - myWidget\n```\n用上述方法可以添加新浪微博小挂件。\n\n- 生成自己的微博组件。\n- 添加hexo\\themes\\modernist\\layout\\_widget\\weibo.ejs文件。\n- 配置hexo\\themes\\modernist\\_config.yml。\n插件\n--\n\n安装插件：\n```\nnpm install <plugin-name> --save\n```\n启用插件：在*hexo\\_config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\nRSS插件\n将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。\n\n你可以用rss作为迁移工具，用如下命令读取其他位置的rss：\n\n```\nhexo migrate rss <source>\n```\n『source』是本地或网络文件路径。\n\nSitemap插件\n将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。\n\n更多插件的安装方法，请参考[官方Wiki](https://github.com/hexojs/hexo/wiki/Plugins)。\n\n如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。\n\n迁移\n---\n\nhexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。\n\n搜索引擎\n---\n\n你可以到[屈站长](http://www.sousuoyinqingtijiao.com/)提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。\n\n更新\n---\n\n更新hexo：\n\n```\nnpm update -g hexo\n```\n更新主题：\n```\ncd themes/你的主题\ngit pull\n```\n更新插件：\n```\nnpm update\n```\n干掉IE\n\nKill IE6 提示的javascript代码，请自行搜索。\n\n换机器\n---\n\n你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。\n\n我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。\n\n统计功能\n---\n\n为hexo博客添加访问次数统计功能\n\n其它\n\n网站加速\n\n[Webluker-CDN 网站加速 免费CDN DNS解析](http://www.webluker.com/)\n\nWebluker-FAQ索引\n\n网站监控\n\n[监控宝-网站监控 网页监控 服务器监控](http://www.jiankongbao.com/)\n\n[监控宝-常见问题](http://www.jiankongbao.com/faq)\n\n参考文献\n====\n\n\n\n- [hexo + github + 多说 来搭建免费博客](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n\n- [利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n- [博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)\n\n- [在 hexo中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n\n- [手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n- [为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n\n- [使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n- [单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/)\n\n- [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","source":"_posts/Use-Gitpagehexo-to-develop-their-own-blog.md","raw":"---\ntitle: 利用Gitpage+hexo开发自己的博客\ndate: 2016-09-16 01:07:17\ntags: hexo \ncategories: git\n---\n![这里写图片描述](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1493223838128&di=c9a4b5d92b7ab41789dbde3069dbaf3a&imgtype=0&src=http%3A%2F%2Fpic4.zhimg.com%2Fd4c1239e75c02e8482c22017a6c8d407_r.jpg)\n\n进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。\n<!--more-->\n\nGitpage+hexo\n------------\n\n想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。\n\n环境准备\n====\n\n1 安装Node\n--------\n\n到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi\n\n2 安装Git\n-------\n安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n\n安装步骤\n====\n\n1 安装Hexo\n------\n\n使用git shell,依次输入以下代码命令：\n\n```\ncd /\nnpm install hexo-cli -g\n```\n\n\n命令解释：\n\n**cd和/之间要有空格**，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。\n\n2 安装博客所需文件\n----------\n\n```\ncd /\nhexo init Hexo\ncd /Hexo\nnpm instal\nhexo generate（可简写为hexo g）\nhexo sever（可简写为hexo s）\n```\n\n命令解释:\n\n- cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。\n\n- Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。\n\n- 指向Hexo目录\n\n- 安装依赖文件\n\n- 编译\n\n- 开启本地服务(第5、6步的操作可以合并成hexo s -g)\n\n此时打开浏览器，在地址栏输入http://localhost:4000/\n即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。\n\n那么如何翻墙呢？ 下面提供我所知道的两种方法：\n\n这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: http://pan.baidu.com/s/1c2x7eRu\n密码: z3kw\n\n这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：http://blog.my-eclipse.cn/host-google.html\n\n如果你不想翻墙，可以采用这种方法：\n进入你刚新建好的 blog根目录\n\n```\n themes/landscape/layout/_partial\n\n```\n1，找到 after-footer.ejs把\n\n```\n<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>\n```\n替换成\n\n> `<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>`\n\n2，找到 header.ejs\n注释掉或者删掉 下面这句css引用\n`<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=”stylesheet” type=”text/css”>`\nhexo server 之后。访问 http://localhost:4000 就会看到blog主页了。\n\n如果你成功在http://localhost:4000/\n下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！\n\n> 行百里者半九十\n\n不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：\n\n3 部署博客到服务器\n--------\n\n也就是把博客部署到github page提供的服务器上。\n\n步骤\n\n- 首先回到git shell按ctrl+c，之后输入y即可\n\n\n- 修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：`deploy:  type: github  repo: https://github.com/yourname/blog.git`\n\n\n继续回到git shell输入命令：\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n命令解释:\n\n- 清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n- 开启本地服务，\n- 部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n是的，现在你拥有了自己的博客！\n\n发表博文\n====\n\n千辛万苦建立了博客，那么我们来学习一下如何发表博文。\n\n新建博文\n----\n\n继续回到git shell输入：\n\nhexo new \"新博文的名字\"\n即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。\n\n**Markdown编辑器**\n\n推荐两款我所使用的markdown编辑器：\n\n**MIU**，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：\n链接: http://pan.baidu.com/s/1slMPeTR\n密码: 2pnk\n**正在使用的Atom:**更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。\n可能会遇到的问题\n\n> hexo new [layout] \"postName\" #新建文章\n\n其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md\n\n```\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行\n\n```\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n\npostName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。\n\n注意，所有文件：后面都必须有个空格，不然会报错。\n\n看一下刚才生成的文件hexo\\source\\_posts\\postName.md\n\n```\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n```\n\n始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。\n\n**fancybox**\n可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。\n很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：\n```\nlayout: photo\ntitle: 我的阅历\ndate: 2085-01-16 07:33:44\ntags: [hexo]\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n```\n\n经过测试，文件头上的layout: photo可以省略。\n\n不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md\n```\nlayout: { { layout } }\ntitle: { { title } }\ndate: { { date } }\ntags:\nphotos:\n-\n---\n```\n然后每次可以执行带layout的new命令生成照片文章：\n\n```\nhexo new photo \"photoPostName\" #新建照片文章\n```\ndescription\nmarkdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。\n```\ntitle: hexo你的博客\ndate: 2013-11-22 17:11:54\ncategories: default\ntags: [hexo]\ndescription: 你对本页的描述\n---\n```\nhexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。\n\n**文章摘要**\n在需要显示摘要的地方添加如下代码即可：\n\n```\n以上是摘要\n<!--more-->\n以下是余下全文\n```\nmore以上内容即是文章摘要，在主页显示，more以下内容点击『> Read More』链接打开全文才显示。\n\nhexo中所有文件的编码格式均是UTF-8。\n\n\n优雅的在博客上插入图片\n-----------\n\n看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：\n\n首先确认 _config.yml 中更改 post_asset_folder:true 。\n回到git shell，输入\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n继续执行\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹\n\n\n然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？\n提醒：\n\n写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！\n\n预览和发表\n-----\n\n继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！\n\n```\n1.  hexo clean\n2.  hexo g\n3.  hexo s\n4.  hexo d\n```\n\n更高大上的发表博文的方法\n\n使用Travis CI自动部署你的Hexo博客到Github,请参考[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客\n\n安装主题\n----\n\n如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：\n\n选择主题\n\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你喜欢的主题，我使用的Next主题\n\n安装Next主题\n---\n\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽！\n\n安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist\n```\n\n目录是否是modernist无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为modernist\n\n```\ntheme: modernist\n```\n打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n```\n更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n评论框\n---\n\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用[多说](https://hexo.io/plugins/)\n直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置->域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以[参考这里](http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017)，我是在HeroicYang的基础上修改的。\n\n如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout\\_partial\\comment.ejs里面，如下：\n\n```\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n构建新页面\n-----\n\n那些小图标都是一个新页面，需要手动创建，那么如何创建？\n\n回到git shell，\n\nhexo new page \"页面名称\"\n比如你要创建一个about页面，就输入hexo new page “about”\n\n正确显示各页面内容\n\n发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！\n\n解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：\n\n\n\ncomments: false即关闭此页面的评论功能\n\ntype: “tags”这里的值根据你想更改的页面决定\n\n更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！\n\n安装插件\n----\n\nhexo支持的插件：[Plugins | Hexo](https://hexo.io/plugins/)\n想安装什么插件，按照相关README.md中介绍操作即可。\n\n安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:[第三方服务集成](http://theme-next.iissnan.com/third-party-services.html#swfitype)，介绍非常全面！好好用来装饰你的博客吧！\n\n安装sitemap和feed插件时，如果遇到问题，可以参考:[博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)，安装sitemap后要到[百度站长](http://zhanzhang.baidu.com/?castk=LTE=)提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:[为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n安装swiftype插件，如果遇到问题，可以参考[利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n图床\n---\n\n考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。\n\n免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里[关于key-value存储系统](https://support.qiniu.com/hc/)。\n\n七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇[Linux中国采用七牛云存储支撑图片访问](https://linux.cn/article-2311-1.html)。\n\n如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。\n\n如果你对七牛web版的文件管理界面不满意，可以用官方的[七牛云存储工具](http://docs.qiniu.com/tools/v6/index.html)。\n\n您还可以使用如下图床服务 FarBox，Dropbox，又拍云\n主题优化\n----\n\nNext主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！\n\n[提升Hexo的NexT主题加载速度](http://www.gfwsb.com/2016/improveNexTspeed/)\n\n[使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n绑定域名\n---\n\n购买域名，我是在[万网](https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist)购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个[网站](http://www.xiaoerguo.com/),但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！\n\n如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：\n\n192.30.252.153\n\n192.30.252.154\n\n制作ICO图标\n---\n\nfavicon.ico一般用于作为缩略图的网站标志，[在线制作网站](http://www.bitbug.net/)\n关于是否绑定域名\n\n经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考[单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/),这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！\n\n#至此，基本操作介绍完毕，以下内容普通用户无需了解。\n默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n接下来是重头戏_config.yml，做个简单说明：\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site #整站的基本信息\ntitle: 不如 #网站标题\nsubtitle: 码农，程序猿，未来的昏析师 #网站副标题\ndescription: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head->meta中可看到\nauthor: bruce #网站作者，在下方显示\nemail: bu.ru@qq.com #联系邮箱\nlanguage: zh-CN #语言\n\n# URL #域名和文件结构\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://ibruce.info #你的域名\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing #写文章选项\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post #默认layout方式\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight: #代码高亮\n  enable: true #是否启用\n  line_number: false #是否显示行号\n  tab_replace:\n\n# Category & Tag #分类与标签\ndefault_category: uncategorized # default\ncategory_map:\ntag_map:\n\n# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server #本地服务参数\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: true\nlogger_format:\n\n# Date / Time format #日期显示格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination #分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页10篇文章\npagination_dir: page\n\n# Disqus #社会化评论disqus，我使用多说，在主题中配置\ndisqus_shortname:\n\n# Extensions #插件，暂时未安装插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\n## 主题\ntheme: modernist # raytaylorism # pacman # modernist # light\nexclude_generator:\n\n# Deployment #部署\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库\n```\n修改局部页面\n---\n\n页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：\n```\n.\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-CN.yml      #中文语言\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   └── _widget        #小挂件的布局，页面下方小挂件的控制\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _base      #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts      #字体\n|   |   ├── images     #图片\n|   |   └── style.styl #*.styl引入需要的css源码\n|   ├── fancybox       #fancybox效果源码\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout\\_partial\\header.ejs，比如头上加个搜索框：\n```\n<div>\n<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n <input type=\"search\" name=\"q\" id=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" maxlength=\"20\" placeholder=\"Search\" />\n <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n</form>\n</div>\n```\n将如上代码加入即可，您需要修改css以便这个搜索框比较美观。\n\n再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout\\_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。\n\n统计\n---\n\n页面上显示访问次数可以使用 [不蒜子](http://busuanzi.ibruce.info/)，两行代码即可搞定。\n\n因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。\n编辑文件hexo\\themes\\modernist\\_config.yml，增加配置选项：\n\n```\nbaidu_tongji: true\n```\n新建文件hexo\\themes\\modernist\\layout\\_partial\\baidu_tongji.ejs，内容如下：\n\n```\n<% if (theme.baidu_tongji){ %>\n<script type=\"text/javascript\">\n#你的百度统计代码\n</script>\n<% } %>\n```\n注册并登录百度统计获取你的统计代码。\n\n编辑文件hexo\\themes\\modernist\\layout\\_partial\\head.ejs，在『/head』之前增加：\n\n```\n<%- partial('baidu_tongji') %>\n```\n重新生成并部署你的站点。\n\n不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页->网站列表->获取代码->系统管理设置->统计图标设置->显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。\n\n分享\n---\n\n我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：\n\n- 在hexo\\themes\\modernist\\layout\\_partial\\post下新建jiathis.ejs文件。\n注册加网获得你的分享代码，写入jiathis.ejs。\n- 在hexo\\themes\\modernist\\layout\\_partial\\article.ejs中，添加<%-partial(‘post/jiathis’)%>。\n-分享服务还可以使用如下企业提供的技术[加网](http://www.jiathis.com/)，[bShare](http://www.bshare.cn/)，[百度分享](http://share.baidu.com/)。\n\n网站图标\n\n看一下hexo\\themes\\modernist\\layout\\_partial\\head.ejs，找到这句：\n\n```\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%- config.root %>favicon.ico\">\n```\n你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以[在Faviconer](http://www.faviconer.com/)制作你的ico图标，国内有[比特虫](http://www.bitbug.net/)。\n\n自定义挂件\n---\n\n除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout\\_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist\\_config.yml中配置。\n```\nwidgets:\n  - myWidget\n```\n用上述方法可以添加新浪微博小挂件。\n\n- 生成自己的微博组件。\n- 添加hexo\\themes\\modernist\\layout\\_widget\\weibo.ejs文件。\n- 配置hexo\\themes\\modernist\\_config.yml。\n插件\n--\n\n安装插件：\n```\nnpm install <plugin-name> --save\n```\n启用插件：在*hexo\\_config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\nRSS插件\n将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。\n\n你可以用rss作为迁移工具，用如下命令读取其他位置的rss：\n\n```\nhexo migrate rss <source>\n```\n『source』是本地或网络文件路径。\n\nSitemap插件\n将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。\n\n更多插件的安装方法，请参考[官方Wiki](https://github.com/hexojs/hexo/wiki/Plugins)。\n\n如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。\n\n迁移\n---\n\nhexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。\n\n搜索引擎\n---\n\n你可以到[屈站长](http://www.sousuoyinqingtijiao.com/)提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。\n\n更新\n---\n\n更新hexo：\n\n```\nnpm update -g hexo\n```\n更新主题：\n```\ncd themes/你的主题\ngit pull\n```\n更新插件：\n```\nnpm update\n```\n干掉IE\n\nKill IE6 提示的javascript代码，请自行搜索。\n\n换机器\n---\n\n你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。\n\n我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。\n\n统计功能\n---\n\n为hexo博客添加访问次数统计功能\n\n其它\n\n网站加速\n\n[Webluker-CDN 网站加速 免费CDN DNS解析](http://www.webluker.com/)\n\nWebluker-FAQ索引\n\n网站监控\n\n[监控宝-网站监控 网页监控 服务器监控](http://www.jiankongbao.com/)\n\n[监控宝-常见问题](http://www.jiankongbao.com/faq)\n\n参考文献\n====\n\n\n\n- [hexo + github + 多说 来搭建免费博客](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n\n- [利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n- [博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)\n\n- [在 hexo中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n\n- [手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n- [为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n\n- [使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n- [单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/)\n\n- [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","slug":"Use-Gitpagehexo-to-develop-their-own-blog","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqib001uaaxijrut57r4"},{"title":"css：默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式","date":"2017-05-10T12:54:11.000Z","_content":"![](http://img.blog.csdn.net/20170515213354489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 项目的github地址为： https://github.com/sunshine940326/css3formeledemo \n > 本文首发于我的个人博客，http://cherryblog.site/ ；欢迎大家查看我的其他博客\n最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：\n\n - 因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改\n - input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id\n - 只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。\n - 使用sass，只需要改变参数就可以反复多次使用\n <!--more-->\n\n# 思路\n大致的原理都是使用html原生的标签元素标签`checkbox`或者`input`，在后面加上`label`标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是\n```\ndiv.container\n    input type=\"checkbox\" id=\"checkbox\" \n    label for=\"checkbox\"\n    div.bottom-line\n```\n都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置`input[type=checkbox]:checked+label`的样式 \n# checkbox\n## checkbox demo1\n首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性\n    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。\n    先将after和before设置宽度为width*0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。\n    然后用css动画设置使其height达到width*0.7和width*0.35并控制动画使其连贯播放，\n###  html\n```\n<div class=\"cb-container\">\n    <input type=\"checkbox\" id=\"checkbox\">\n    <label for=\"checkbox\" class=\"cb-label\"></label>\n</div>\n```\n###  scss\n```\n\n$checked-color: #fff;\n$checked-bg:rgb(101,141,181);\n$unchecked-color: #cfcece;\n$unchecked-bg:rgb(249,249,249);\n$checkbox-height: 100px;\n$background-color:#fff;\n$font-color:#dcdcdc;\n$duration: .4s;\n.cb-container{\n  width: 1000px;\n  text-align: center;\n  margin-top: 50px;\n}\n\nhtml, body{\n  padding:0;\n  margin:0;\n  background-color: $background-color;\n  color:$font-color;\n  font-family:'Open Sans';\n}\n#checkbox{\n  display:none;\n}\n\n.cb-label{\n  height: $checkbox-height;\n  width: $checkbox-height;\n  background: $unchecked-bg;\n  border: $checkbox-height * .1 solid $unchecked-color;\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box;\n  transition: border-color ease $duration/2;\n  -moz-transition: border-color ease $duration/2;\n  -o-transition: border-color ease $duration/2;\n  -webkit-transition: border-color ease $duration/2;\n  cursor: pointer;\n  &::before,&::after{\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    position: absolute;\n    height: 0;\n    width: $checkbox-height * 0.2;\n    background: $checked-color;\n    display: inline-block;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -o-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n    content: '';\n    -webkit-transition: opacity ease 0.5s;\n    -moz-transition: opacity ease 0.5s;\n    transition: opacity ease 0.5s;\n  }\n  &::before{\n    top:$checkbox-height * 0.76;\n    left: $checkbox-height * 0.31;\n    -moz-transform: rotate(-135deg);\n    -ms-transform: rotate(-135deg);\n    -o-transform: rotate(-135deg);\n    -webkit-transform: rotate(-135deg);\n    transform: rotate(-135deg);\n  }\n  &::after {\n    top: $checkbox-height * .45;\n    left: $checkbox-height * 0;\n    -moz-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n    -o-transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n  }\n}\ninput[type=checkbox]:checked + .cb-label,\n.cb-label.checked{\n\n  background: $checked-bg;\n  border-color:$checked-bg;\n  &::after{\n    border-color:$checked-color;\n    height: $checkbox-height * .35;\n    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    animation: dothabottomcheck $duration/2 ease 0s forwards;\n  }\n\n  &::before{\n    border-color:$checked-color;\n    height: $checkbox-height * 1;\n    -moz-animation: dothatopcheck $duration ease 0s forwards;\n    -o-animation: dothatopcheck $duration ease 0s forwards;\n    -webkit-animation: dothatopcheck $duration ease 0s forwards;\n    animation: dothatopcheck $duration ease 0s forwards;\n  }\n\n}\n@-moz-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@-webkit-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35;  }\n}\n\n@keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-webkit-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-moz-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n\n```\n![经过改变后的checkbox](http://img.blog.csdn.net/20170514194453879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo2\n![checkboxdemo2](http://img.blog.csdn.net/20170514230458375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo3\n![checkboxdemo3](http://img.blog.csdn.net/20170514230233384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo4\n![checkboxdemo4](http://img.blog.csdn.net/20170514230324436?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# input\ninput的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。\n![input效果](http://img.blog.csdn.net/20170512115931755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n - 输入框清除默认样式\n - 当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100\n - 如果没有输入内容，还变为未输入的状态\n先贴上代码\n## html代码\nhtml结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的`placeholder`，而是使用的label，但是也设置有`placeholder`,只不过是把`placeholder`的透明度设置为0，因为我们需要根据`placeholder`是否显示来设置下方line的宽度和label的位置。\n \n```\ndiv.input-container\n    input type=\"input\" id=\"input\" placeholder=\"请输入内容\"\n    label for=\"input\"\n    div.bottom-line\n```\n完整html代码如下\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"scss/main.css\">\n</head>\n<body>\n<div class=\"input-container\">\n    <input type=\"input\" id=\"input\" placeholder=\"请输入内容\">\n    <label for=\"input\">请输入内容</label>\n    <div class=\"bottom-line\"></div>\n</div>\n</body>\n</html>\n```\n## css代码\n全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小\n代码如下:\n```\n$width: 500px;\n$label-font-color: #3f4f5b;\n$label-focus-font-color: rgb(82, 97, 108);\n$border-bottom-color: #d5d5d5;\n$focus-border-color: rgb(101, 141, 181);\n$transform-top: 10px;\n$transform-time: 0.3s;\n$scale: 0.9;\n\n.input-container {\n  width: $width;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-flow: column-reverse;\n  flex-flow: column-reverse;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  margin: 100px auto\n}\n\n.input-container input {\n  -webkit-box-ordinal-group: 11;\n  order: 10;\n  -ms-flex-order: 10;\n  outline: none;\n  border: none;\n  width: 100%;\n  padding: 10px 0;\n  font-size: 20px;\n  border-bottom: 1px solid $border-bottom-color;\n  text-indent: 10px;\n}\n\n.input-container input::-moz-placeholder {\n  opacity: 0;\n}\n\n.input-container input::-webkit-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input:-ms-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input, .input-container label {\n  transition: all $transform-time;\n}\n\n.input-container label {\n  -webkit-box-ordinal-group: 101;\n  -ms-flex-order: 100;\n  order: 100;\n  color: $label-font-color;\n  -webkit-transform-origin: left bottom;\n  transform-origin: left bottom;\n  -webkit-transform: translate(10px, 40px);\n  transform: translate(0px, 40px);\n}\n\n.input-container .bottom-line {\n  order: 2;\n  width: 0;\n  height: 2px;\n  background: $focus-border-color;\n  transition: all $transform-time;\n}\n\n.input-container input:focus {\n  border-bottom-color: #fff;\n}\n\n.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div {\n  width: 100%\n}\n\n.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label {\n  color: $label-focus-font-color;\n  -webkit-transform: translate(10px) scale($scale);\n  transform: translate(10px) scale($scale)\n}\n\n```\n \n","source":"_posts/css-checkbox-input-radio.md","raw":"---\ntitle: css：默认的checkbox、input、radio太丑了？我来教你改变使用纯css3改写的带动画的默认样式\ndate: 2017-05-10 20:54:11\ntags: [css,checkbox优化,input优化,radio优化] \ncategories: css\n---\n![](http://img.blog.csdn.net/20170515213354489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 项目的github地址为： https://github.com/sunshine940326/css3formeledemo \n > 本文首发于我的个人博客，http://cherryblog.site/ ；欢迎大家查看我的其他博客\n最近在做公司后台的优化项目，拿到设计稿一看，设计师觉得默认的input、checkbox、radio太丑了，要优化，在做了几个demo之后找到了要怎么优化这些样式的方法，我优化的原则有以下几点：\n\n - 因为是在已有的项目上做优化，所以尽量在不改变原有结构的基础上进行修改\n - input、checkbox这些大都是表单里面的元素，所以大部分跟后台有交互，保留原有属性，只增加新的class或者id\n - 只使用css3，并且其属性也都是input，当然也可以直接使用img代替，或者用div+span模拟，但是这就不叫做“优化”，而是模仿了。\n - 使用sass，只需要改变参数就可以反复多次使用\n <!--more-->\n\n# 思路\n大致的原理都是使用html原生的标签元素标签`checkbox`或者`input`，在后面加上`label`标签，将一些原有的元素隐藏，然后再用css设置你想要样式，行为方面都是根据原生属性来判断，不需要使用js。所有的html代码都是\n```\ndiv.container\n    input type=\"checkbox\" id=\"checkbox\" \n    label for=\"checkbox\"\n    div.bottom-line\n```\n都是利用css的原生属性来判断用户的操作,先将原本的checkbox隐藏，然后再设置label的样式，最后设置`input[type=checkbox]:checked+label`的样式 \n# checkbox\n## checkbox demo1\n首先来看一个checkbox，实现这个动画其实很简单，只运用css就可以实现。实现的原理是绑定checkout和label,用label控制是否checked。点击label的时候改变checkbox的属性\n    先将checkbox隐藏，然后label为一个只有border的框框，使用after和befor伪元素来实现对号的两部分。\n    先将after和before设置宽度为width*0.4，height为0，设置不同的旋转角度，让befor和after合起来刚好是一个对号。\n    然后用css动画设置使其height达到width*0.7和width*0.35并控制动画使其连贯播放，\n###  html\n```\n<div class=\"cb-container\">\n    <input type=\"checkbox\" id=\"checkbox\">\n    <label for=\"checkbox\" class=\"cb-label\"></label>\n</div>\n```\n###  scss\n```\n\n$checked-color: #fff;\n$checked-bg:rgb(101,141,181);\n$unchecked-color: #cfcece;\n$unchecked-bg:rgb(249,249,249);\n$checkbox-height: 100px;\n$background-color:#fff;\n$font-color:#dcdcdc;\n$duration: .4s;\n.cb-container{\n  width: 1000px;\n  text-align: center;\n  margin-top: 50px;\n}\n\nhtml, body{\n  padding:0;\n  margin:0;\n  background-color: $background-color;\n  color:$font-color;\n  font-family:'Open Sans';\n}\n#checkbox{\n  display:none;\n}\n\n.cb-label{\n  height: $checkbox-height;\n  width: $checkbox-height;\n  background: $unchecked-bg;\n  border: $checkbox-height * .1 solid $unchecked-color;\n  position: relative;\n  display: inline-block;\n  box-sizing: border-box;\n  transition: border-color ease $duration/2;\n  -moz-transition: border-color ease $duration/2;\n  -o-transition: border-color ease $duration/2;\n  -webkit-transition: border-color ease $duration/2;\n  cursor: pointer;\n  &::before,&::after{\n    -moz-box-sizing: border-box;\n    -webkit-box-sizing: border-box;\n    box-sizing: border-box;\n    position: absolute;\n    height: 0;\n    width: $checkbox-height * 0.2;\n    background: $checked-color;\n    display: inline-block;\n    -moz-transform-origin: left top;\n    -ms-transform-origin: left top;\n    -o-transform-origin: left top;\n    -webkit-transform-origin: left top;\n    transform-origin: left top;\n    content: '';\n    -webkit-transition: opacity ease 0.5s;\n    -moz-transition: opacity ease 0.5s;\n    transition: opacity ease 0.5s;\n  }\n  &::before{\n    top:$checkbox-height * 0.76;\n    left: $checkbox-height * 0.31;\n    -moz-transform: rotate(-135deg);\n    -ms-transform: rotate(-135deg);\n    -o-transform: rotate(-135deg);\n    -webkit-transform: rotate(-135deg);\n    transform: rotate(-135deg);\n  }\n  &::after {\n    top: $checkbox-height * .45;\n    left: $checkbox-height * 0;\n    -moz-transform: rotate(-45deg);\n    -ms-transform: rotate(-45deg);\n    -o-transform: rotate(-45deg);\n    -webkit-transform: rotate(-45deg);\n    transform: rotate(-45deg);\n  }\n}\ninput[type=checkbox]:checked + .cb-label,\n.cb-label.checked{\n\n  background: $checked-bg;\n  border-color:$checked-bg;\n  &::after{\n    border-color:$checked-color;\n    height: $checkbox-height * .35;\n    -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -o-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;\n    animation: dothabottomcheck $duration/2 ease 0s forwards;\n  }\n\n  &::before{\n    border-color:$checked-color;\n    height: $checkbox-height * 1;\n    -moz-animation: dothatopcheck $duration ease 0s forwards;\n    -o-animation: dothatopcheck $duration ease 0s forwards;\n    -webkit-animation: dothatopcheck $duration ease 0s forwards;\n    animation: dothatopcheck $duration ease 0s forwards;\n  }\n\n}\n@-moz-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@-webkit-keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35; }\n}\n\n@keyframes dothabottomcheck{\n  0% { height: 0; }\n  100% { height: $checkbox-height *0.35;  }\n}\n\n@keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-webkit-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n@-moz-keyframes dothatopcheck{\n  0% { height: 0; }\n  50% { height: 0; }\n  100% { height: $checkbox-height * 0.7; }\n}\n\n```\n![经过改变后的checkbox](http://img.blog.csdn.net/20170514194453879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo2\n![checkboxdemo2](http://img.blog.csdn.net/20170514230458375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo3\n![checkboxdemo3](http://img.blog.csdn.net/20170514230233384?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## checkboxdemo4\n![checkboxdemo4](http://img.blog.csdn.net/20170514230324436?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# input\ninput的优化源于在掘金上看到的一篇文章，效果着实小清新，于是就使用拿来主义，写了一个简易版的demo，效果如下，运用的是flex布局还有伪元素placeholder来实现的。\n![input效果](http://img.blog.csdn.net/20170512115931755?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n \n - 输入框清除默认样式\n - 当输入框获得焦点时，输入框原本的文字向上移，并且下方蓝色的线宽度由0变为100\n - 如果没有输入内容，还变为未输入的状态\n先贴上代码\n## html代码\nhtml结构很简单，使用的是HTML原生的form元素input和label；在效果中的“请输入内容”这几个字不是使用的`placeholder`，而是使用的label，但是也设置有`placeholder`,只不过是把`placeholder`的透明度设置为0，因为我们需要根据`placeholder`是否显示来设置下方line的宽度和label的位置。\n \n```\ndiv.input-container\n    input type=\"input\" id=\"input\" placeholder=\"请输入内容\"\n    label for=\"input\"\n    div.bottom-line\n```\n完整html代码如下\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <link rel=\"stylesheet\" href=\"scss/main.css\">\n</head>\n<body>\n<div class=\"input-container\">\n    <input type=\"input\" id=\"input\" placeholder=\"请输入内容\">\n    <label for=\"input\">请输入内容</label>\n    <div class=\"bottom-line\"></div>\n</div>\n</body>\n</html>\n```\n## css代码\n全部的动画效果都只使用了css，但是使用的一些新特性浏览器兼容性还没有那么好，兼容到ie10.布局使用的是flex，动画效果用的是用的transform。运用伪类placeholder判断是否输入了文字，如果输入了文字下方的line宽度变为100%；label中的文字上移并且变小\n代码如下:\n```\n$width: 500px;\n$label-font-color: #3f4f5b;\n$label-focus-font-color: rgb(82, 97, 108);\n$border-bottom-color: #d5d5d5;\n$focus-border-color: rgb(101, 141, 181);\n$transform-top: 10px;\n$transform-time: 0.3s;\n$scale: 0.9;\n\n.input-container {\n  width: $width;\n  position: relative;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-flow: column-reverse;\n  flex-flow: column-reverse;\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n  margin: 100px auto\n}\n\n.input-container input {\n  -webkit-box-ordinal-group: 11;\n  order: 10;\n  -ms-flex-order: 10;\n  outline: none;\n  border: none;\n  width: 100%;\n  padding: 10px 0;\n  font-size: 20px;\n  border-bottom: 1px solid $border-bottom-color;\n  text-indent: 10px;\n}\n\n.input-container input::-moz-placeholder {\n  opacity: 0;\n}\n\n.input-container input::-webkit-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input:-ms-input-placeholder {\n  opacity: 0;\n}\n\n.input-container input, .input-container label {\n  transition: all $transform-time;\n}\n\n.input-container label {\n  -webkit-box-ordinal-group: 101;\n  -ms-flex-order: 100;\n  order: 100;\n  color: $label-font-color;\n  -webkit-transform-origin: left bottom;\n  transform-origin: left bottom;\n  -webkit-transform: translate(10px, 40px);\n  transform: translate(0px, 40px);\n}\n\n.input-container .bottom-line {\n  order: 2;\n  width: 0;\n  height: 2px;\n  background: $focus-border-color;\n  transition: all $transform-time;\n}\n\n.input-container input:focus {\n  border-bottom-color: #fff;\n}\n\n.input-container input:focus ~ div, .input-container input:not(:placeholder-shown) ~ div {\n  width: 100%\n}\n\n.input-container input:focus + label, .input-container input:not(:placeholder-shown) + label {\n  color: $label-focus-font-color;\n  -webkit-transform: translate(10px) scale($scale);\n  transform: translate(10px) scale($scale)\n}\n\n```\n \n","slug":"css-checkbox-input-radio","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqie001yaaxi7r5yhtcn"},{"title":"gulp（一）","date":"2017-03-18T12:00:06.000Z","_content":"因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：http://www.cnblogs.com/2050/p/4198792.html.   以及gulp的官网\n<!--more-->\n# gulp的工作原理简述\n## 下Grunt.js和Gulp.js工作方式的区别\n>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务...但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的`pipe()`方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因\n\n## gulp传入的路径参数与最终生成文件的关系\n> 理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用`gulp.dest() `这个方法。gulp的流程是这样的：首先通过`gulp.src()`方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到`gulp.dest()`中，`gulp.dest()`方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给`gulp.dest()`传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，**所以生成的文件名是由导入到它的文件流决定的**即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名\n\n# gulp安装\ngulp是基于node环境的，所以首先需要安装node环境\n然后以全局方式安装gulp\n```\nnpm install -g gulp\n```\n全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行\n```\nnpm install gulp\n```\n如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 --save-dev\n```\nnpm install --save-dev gulp\n```\n\n# 开始使用gulp\n## 建立gulpfile.js文件\n建立一个`gulpfile.js`文件，这个文件就是gulp的主文件，之后要做的事情就是在`gulpfile.js`文件中定义我们的任务就好，下面是一个最简单的`gulpfile.js`\n```\nvar gulp = require('gulp');\ngulp.task('default',function(){\n  console.log('Hello world')  \n})\n\n```\n此时我们的目录结构是这样的\n├── gulpfile.js\n├── node_modules\n│ └── gulp\n└── package.json\n\n## 运行gulp任务\n要运行gulp任务，只需切换到存放`gulpfile.js `文件的目录，然后在命令行执行`gulp`命令就可以，`gulp`后面加上要执行的任务名，例如`gulp task1`，如果没有指定任务名。则是按照默认的`defaule`任务\n\n# gulp的api\ngulp只要四个api，`gulp.task()`、`gulp.src()`,`gulp.dest()`,`gulp.watch()`\n\n## gulp.src\n这个方法用来读取你需要操作的文件\n\n`gulp.src()`方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，\n\n```\ngulp.src(globs[,options])\n```\nglobs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组\n\noption是可选参数，通常情况下我们不需要用到\n\n\n# gulp.dest()\n`gulp.dest()`是用来写文件的，其语法为：\n```\ngulp.dest(path[,option])\n\n```\n`path`为写入文件的路径\noption为一个可选的参数，通常我们不需要用到\n","source":"_posts/gulp（一）.md","raw":"---\ntitle: gulp（一）\ndate: 2017-03-18 20:00:06\ntags: gulp\ncategories: gulp\n---\n因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：http://www.cnblogs.com/2050/p/4198792.html.   以及gulp的官网\n<!--more-->\n# gulp的工作原理简述\n## 下Grunt.js和Gulp.js工作方式的区别\n>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务...但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的`pipe()`方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因\n\n## gulp传入的路径参数与最终生成文件的关系\n> 理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用`gulp.dest() `这个方法。gulp的流程是这样的：首先通过`gulp.src()`方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到`gulp.dest()`中，`gulp.dest()`方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给`gulp.dest()`传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，**所以生成的文件名是由导入到它的文件流决定的**即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名\n\n# gulp安装\ngulp是基于node环境的，所以首先需要安装node环境\n然后以全局方式安装gulp\n```\nnpm install -g gulp\n```\n全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行\n```\nnpm install gulp\n```\n如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 --save-dev\n```\nnpm install --save-dev gulp\n```\n\n# 开始使用gulp\n## 建立gulpfile.js文件\n建立一个`gulpfile.js`文件，这个文件就是gulp的主文件，之后要做的事情就是在`gulpfile.js`文件中定义我们的任务就好，下面是一个最简单的`gulpfile.js`\n```\nvar gulp = require('gulp');\ngulp.task('default',function(){\n  console.log('Hello world')  \n})\n\n```\n此时我们的目录结构是这样的\n├── gulpfile.js\n├── node_modules\n│ └── gulp\n└── package.json\n\n## 运行gulp任务\n要运行gulp任务，只需切换到存放`gulpfile.js `文件的目录，然后在命令行执行`gulp`命令就可以，`gulp`后面加上要执行的任务名，例如`gulp task1`，如果没有指定任务名。则是按照默认的`defaule`任务\n\n# gulp的api\ngulp只要四个api，`gulp.task()`、`gulp.src()`,`gulp.dest()`,`gulp.watch()`\n\n## gulp.src\n这个方法用来读取你需要操作的文件\n\n`gulp.src()`方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，\n\n```\ngulp.src(globs[,options])\n```\nglobs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组\n\noption是可选参数，通常情况下我们不需要用到\n\n\n# gulp.dest()\n`gulp.dest()`是用来写文件的，其语法为：\n```\ngulp.dest(path[,option])\n\n```\n`path`为写入文件的路径\noption为一个可选的参数，通常我们不需要用到\n","slug":"gulp（一）","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqih0022aaxik00wryg0"},{"title":"前端开发规范：命名规范、html规范、css规范、js规范","date":"2017-05-30T06:54:11.000Z","_content":"![这里写图片描述](http://img.blog.csdn.net/20170530152035209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。\n我是有一点强迫症的人，上周我们后端给我了一个CanUsename的接口（该接口的目的是判断输入的目的地是否是4级目的地），我真的是崩溃的。\n我只是觉得这个名字不够语义化，但是让我自己想一个名字我又想不出来，于是我就在想，如果有一套命名规范的话，那么以后起名字就不用发愁了，直接按照规范来就好了~\n于是端午在家就百度了一下~\n<!--more-->\n# 命名\n## 驼峰式命名法介绍\n- Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo\n- Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo\n\n## 文件资源命名\n- 文件名不得含有空格\n- 文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )\n- 文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。\n- 引入资源使用相对路径，不要指定资源所带的具体协议 ( `http:`,` https:` ) ，除非这两者协议都不可用。\n\n不推荐：\n```\n<script src=\"http://cdn.com/foundation.min.js\"></script>\n\n```\n推荐\n```\n<script src=\"//cdn.com/foundation.min.js\"></script>\n```\n## 变量命名\n**命名方式** : 小驼峰式命名方法\n**命名规范** : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词\n\n类型 | 小写字母\n---|---\narray| a\nboolean | b\nfunction | fn\nint | i\nobject | o\nregular | r\nstring | s\n推荐\n```\nvar tableTitle = \"LoginTable\"\n```\n不推荐\n```\nvar getTitle = \"LoginTable\"\n```\n## 函数\n**命名方式** : 小驼峰方式 ( 构造函数使用大驼峰命名法 )\n**命名规则** : 前缀为动词\n\n\n动词 | 含义 | 返回值\n---|---|--\ncan | 判断是否可执行某个动作 ( 权限 ) | \t函数返回一个布尔值。true：可执行；false：不可执行\nhas | \t判断是否含有某个值 |  \t函数返回一个布尔值。true：含有此值；false：不含有此值\nis | \t判断是否为某个值 | 函数返回一个布尔值。true：为某个值；false：不为某个值\nget | 获取某个值 | 函数返回一个非布尔值\nset | 设置某个值 | 无返回值、返回是否设置成功或者返回链式对象\n推荐：\n```\n//是否可阅读\nfunction canRead(){\n    return true;\n}\n\n//获取姓名\nfunction getName{\n    return this.name\n}\n```\n## 常量\n**命名方法** : 全部大写\n**命名规范** : 使用大写字母和下划线来组合命名，下划线用以分割单词。\n推荐：\n```\n var MAX_COUNT = 10;\n var URL = 'http://www.baidu.com';\n```\n## 类的成员\n- 公共属性和方法 : 同变量命名方式\n- 私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式\n\n推荐(将`name`换成`this`是不是更熟悉了呢)\n```\nfunction Student(name) {\n    var _name = name; // 私有成员\n \n    // 公共方法\n    this.getName = function () {\n        return _name;\n    }\n \n    // 公共方式\n    this.setName = function (value) {\n        _name = value;\n    }\n}\nvar st = new Student('tom');\nst.setName('jerry');\nconsole.log(st.getName()); // => jerry：输出_name私有变量的值\n```\n## 注释规范\n### 单行注释 ( // )\n- 单独一行：//(双斜线)与注释文字之间保留一个空格\n- 在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。\n- 注释代码：//(双斜线)与代码之间保留一个空格。\n推荐 : \n```\n// 调用了一个函数；1)单独在一行\nsetTitle();\n \nvar maxCount = 10; // 设置最大量；2)在代码后面注释\n \n// setName(); // 3)注释代码\n```\n## 多行注释 ( /* 注释说明 */ )\n - 若开始(/`*`和结束(`*`/)都在一行，推荐采用单行注释\n - 若至少三行注释时，第一行为/`*`，最后行为`*`/，其他行以`*`开始，并且注释文字与`*`保留一个空格。\n 推荐 : \n```\n/*\n* 代码执行到这里后会调用setTitle()函数\n* setTitle()：设置title的值\n*/\nsetTitle();\n```\n## 函数 ( 方法 ) 注释\n函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 [javadoc(百度百科)](http://baike.baidu.com/item/javadoc)\n语法：\n```\n/** \n* 函数说明 \n* @关键字 \n*/\n```\n常用注释关键字\n\n注释名 | 语法 | 含义 | 示例\n---|---|---|---|\n@param | @param 参数名 {参数类型}  描述信息 | 描述参数的信息 | @param name {String} 传入名称\n@return | @return {返回类型} 描述信息 | 描述返回值的信息 | @return {Boolean} true:可执行;false:不可执行\n@author | @author 作者信息 [附属信息：如邮箱、日期] | 描述此函数作者的信息 | @author 张三 2015/07/21 \n@version | \t@version XX.XX.XX | 描述此函数的版本号 |@version 1.0.3\n@example | @example 示例代码 |\t@example setTitle('测试') | 如下\n推荐 :\n```\n/**\n - 合并Grid的行\n - @param grid {Ext.Grid.Panel} 需要合并的Grid\n - @param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n - @param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n - @return void\n - @author polk6 2015/07/21 \n - @example\n - _________________                             _________________\n - |  年龄 |  姓名 |                             |  年龄 |  姓名 |\n - -----------------      mergeCells(grid,[0])   -----------------\n - |  18   |  张三 |              =>             |       |  张三 |\n - -----------------                             -  18   ---------\n - |  18   |  王五 |                             |       |  王五 |\n - -----------------                             -----------------\n*/\nfunction mergeCells(grid, cols, isAllSome) {\n    // Do Something\n}\n```\n# HTML规范\n## 文档规范\n使用 HTML5 的文档声明类型 : `<!DOCTYPE html>`\n\n- DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\n- 使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 \n- 没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。\n- 如果你的页面添加了<!DOCTYP>那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。\n\n## 脚本加载\n说到js和css的位置，大家应该都知道js放在下面，css放在上面。\n但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性`async`，将脚本文件放在`<head>`内\n**兼容老旧浏览器(IE9-)时**：\n脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。\n**而在现代浏览器中**：\n脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。\n综上所述，\n所有浏览器中推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n  </head>\n  <body>\n    <!-- body goes here -->\n \n    <script src=\"main.js\" async></script>\n  </body>\n</html>\n```\n只兼容现代浏览器推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"main.js\" async></script>\n  </head>\n  <body>\n    <!-- body goes here -->\n  </body>\n</html>\n```\n## 语义化\n我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。\n>语义化是指：根据元素其被创造出来时的初始意义来使用它。\n意思就是用正确的标签干正确的事，而不是只有`div`和`span`。\n\n不推荐：\n```\n<b>My page title</b>\n<div class=\"top-navigation\">\n  <div class=\"nav-item\"><a href=\"#home\">Home</a></div>\n  <div class=\"nav-item\"><a href=\"#news\">News</a></div>\n  <div class=\"nav-item\"><a href=\"#about\">About</a></div>\n</div>\n \n<div class=\"news-page\">\n  <div class=\"page-section news\">\n    <div class=\"title\">All news articles</div>\n    <div class=\"news-article\">\n      <h2>Bad article</h2>\n      <div class=\"intro\">Introduction sub-title</div>\n      <div class=\"content\">This is a very bad example for HTML semantics</div>\n      <div class=\"article-side-notes\">I think I'm more on the side and should not receive the main credits</div>\n      <div class=\"article-foot-notes\">\n        This article was created by David <div class=\"time\">2014-01-01 00:00</div>\n      </div>\n    </div>\n \n    <div class=\"section-footer\">\n      Related sections: Events, Public holidays\n    </div>\n  </div>\n</div>\n \n<div class=\"page-footer\">\n  Copyright 2014\n</div>\n```\n推荐\n\n```\nhtml 代码:\n<!-- The page header should go into a header element -->\n<header>\n  <!-- As this title belongs to the page structure it's a heading and h1 should be used -->\n  <h1>My page title</h1>\n</header>\n \n<!-- All navigation should go into a nav element -->\n<nav class=\"top-navigation\">\n  <!-- A listing of elements should always go to UL (OL for ordered listings) -->\n  <ul>\n    <li class=\"nav-item\"><a href=\"#home\">Home</a></li>\n    <li class=\"nav-item\"><a href=\"#news\">News</a></li>\n    <li class=\"nav-item\"><a href=\"#about\">About</a></li>\n  </ul>\n</nav>\n \n<!-- The main part of the page should go into a main element (also use role=\"main\" for accessibility) -->\n<main class=\"news-page\" role=\"main\">\n  <!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. -->\n  <section class=\"page-section news\">\n    <!-- A section header should go into a section element -->\n    <header>\n      <!-- As a page section belongs to the page structure heading elements should be used (in this case h2) -->\n      <h2 class=\"title\">All news articles</h2>\n    </header>\n \n    <!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other\n     re-usable module / section that can occur multiple times on a page) a article element should be used -->\n    <article class=\"news-article\">\n      <!-- An article can contain a header that contains the summary / introduction information of the article -->\n      <header>\n        <!-- As a article title does not belong to the overall page structure there should not be any heading tag! -->\n        <div class=\"article-title\">Good article</div>\n        <!-- Small can optionally be used to reduce importance -->\n        <small class=\"intro\">Introduction sub-title</small>\n      </header>\n \n      <!-- For the main content in a section or article there is no semantic element -->\n      <div class=\"content\">\n        <p>This is a good example for HTML semantics</p>\n      </div>\n      <!-- For content that is represented as side note or less important information in a given context use aside -->\n      <aside class=\"article-side-notes\">\n        <p>I think I'm more on the side and should not receive the main credits</p>\n      </aside>\n      <!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element -->\n      <footer class=\"article-foot-notes\">\n        <!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time\n         while the actual text in the time element can also be more human readable / relative -->\n        <p>This article was created by David <time datetime=\"2014-01-01 00:00\" class=\"time\">1 month ago</time></p>\n      </footer>\n    </article>\n \n    <!-- In a section, footnotes or similar information can also go into a footer element -->\n    <footer class=\"section-footer\">\n      <p>Related sections: Events, Public holidays</p>\n    </footer>\n  </section>\n</main>\n \n<!-- Your page footer should go into a global footer element -->\n<footer class=\"page-footer\">\n  Copyright 2014\n</footer>\n```\n## alt标签不为空\n`<img> `标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。\n假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：\n\n - 网速太慢\n - src 属性中的错误\n - 浏览器禁用图像\n - 用户使用的是屏幕阅读器\n\n从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容\n\n## 结构、表现、行为三者分离\n尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。\n在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。\n建议：\n\n - 不使用超过一到两张样式表\n - 不使用超过一到两个脚本（学会用合并脚本）\n - 不使用行内样式（`<style>.no-good {}</style>`）\n - 不在元素上使用 style 属性（`<hr style=\"border-top: 5px solid black\">`）\n - 不使用行内脚本（`<script>alert('no good')</script>`）\n - 不使用表象元素（`i.e. <b>, <u>, <center>, <font>, <b>`）\n - 不使用表象 class 名（`i.e. red, left, center`）\n\n## HTML只关注内容\n - HTML只显示展示内容信息\n - 不要引入一些特定的 HTML 结构来解决一些视觉设计问题\n - 不要将` img `元素当做专门用来做视觉设计的元素\n - 样式上的问题应该使用css解决\n\n不推荐：\n```\n<!-- We should not introduce an additional element just to solve a design problem  -->\n<span class=\"text-box\">\n  <span class=\"square\"></span>\n  See the square next to me?\n</span>\ncss 代码:\n.text-box > .square {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n**图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。**\n\n不推荐\n```\nhtml 代码:\n<!-- Content images should never be used for design elements!  -->\n<span class=\"text-box\">\n  <img src=\"square.svg\" alt=\"Square\" />\n  See the square next to me?\n</span>\n```\n推荐\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element with a background image to solve the problem */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background: url(square.svg) no-repeat;\n  background-size: 100%;\n}\n```\n# js规范\n## 避免全局命名空间污染\n防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。\n\nIIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。\n不推荐:\n```\nvar x = 10,\n    y = 100;\n \n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n```\n推荐\n```\n// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n \n  var x = 10,\n      y = 100;\n \n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n \n}(window.console.log, window));\n```\n推荐的IIFE写法:\n```\n(function(){\n  'use strict';\n \n  // Code goes here\n \n}());\n```\n如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：\n```\n(function($, w, d){\n  'use strict';\n \n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n```\n## 严格模式\nECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。\n\n严格模式会阻止使用在未来很可能被引入的预留关键字。\n\n你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。\n## 变量声明\n总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如\n```\nvar a = b = 0; //b会被隐式的创建为全局变量\n```\n所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：\n```\n(function (){\n  'use strict'\n  var a = 0,\n      b = 0,\n      c = 0,\n      i,\n      j,\n      myObject();\n}())\n```\n \n采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。\n## js声明提前\njavascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）\n例如：\n```\n(function(log){\n  'use strict';\n \n  var a = 10;\n \n  for(var i = 0; i < a; i++) {\n    var b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    var f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  function x() {\n    log('Mr. X!');\n  }\n  x();\n \n}(window.console.log));\n```\n提升后的js\n```\n(function(log){\n  'use strict';\n  // All variables used in the closure will be hoisted to the top of the function\n  var a,\n      i,\n      b,\n      f;\n  // All functions in the closure will be hoisted to the top\n  function x() {\n    log('Mr. X!');\n  }\n \n  a = 10;\n \n  for(i = 0; i < a; i++) {\n    b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    // Function assignments will only result in hoisted variables but the function body will not be hoisted\n    // Only by using a real function declaration the whole function will be hoisted with its body\n    f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  x();\n \n}(window.console.log));\n```\n## 使用严格等\n总是使用 `===` 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：\n```\n(function(log){\n  'use strict';\n \n  log('0' == 0); // true\n  log('' == false); // true\n  log('1' == true); // true\n  log(null == undefined); // true\n \n  var x = {\n    valueOf: function() {\n      return 'X';\n    }\n  };\n \n  log(x == 'X');\n \n}(window.console.log));\n```\n### 等同== 和严格等===的区别\n\n - ==， 两边值类型不同的时候，要先进行类型转换，再比较。\n - ===，不做类型转换，类型不同的一定不等。\n\n==等同操作符\n - 如果两个值具有相同类型，会进行===比较，返回===的比较值 \n - 如果两个值不具有相同类型，也有可能返回true \n - 如果一个值是null另一个值是undefined，返回true \n - 如果一个值是string另个是number，会把string转换成number再进行比较 \n - 如果一个值是true，会把它转成1再比较，false会转成0 \n\n\n```\nconsole.log( false == null )      // false\nconsole.log( false == undefined ) // false\nconsole.log( false == 0 )         // true\nconsole.log( false == '' )        // true\nconsole.log( false == NaN )       // false\n \nconsole.log( null == undefined ) // true\nconsole.log( null == 0 )         // false\nconsole.log( null == '' )        // false\nconsole.log( null == NaN )       // false\n \nconsole.log( undefined == 0)   // false\nconsole.log( undefined == '')  // false\nconsole.log( undefined == NaN) // false\n \nconsole.log( 0 == '' )  // true\nconsole.log( 0 == NaN ) // false\n```\n总结一下==\n \n\n - false 除了和自身比较为 true 外，和 0，\"\" 比较也为 true\n - null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个\n - 0 除了和 false 比较为 true，还有空字符串 ''\" 和空数组 []\n - 空字符串 '' 除了和 false 比较为 true，还有一个数字 0\n\n> ==, >, <, +, -, ... 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 `valueOf/toString\n> `的话，==就会产生副作用.\n\n例如：\n```\nArray.prototype.valueOf = function() {\n  this[0]++;\n  return this;\n}\nvar x = [1, 2, 3];\nx == 0;\nconsole.log(x);   // [2, 2, 3]\n```\n===操作符：\n \n - 要是两个值类型不同，返回false \n - 要是两个值都是number类型，并且数值相同，返回true \n - 要是两个值都是stirng，并且两个值的String内容相同，返回true \n - 要是两个值都是true或者都是false，返回true \n - 要是两个值都是指向相同的Object，Arraya或者function，返回true \n - 要是两个值都是null或者都是undefined，返回true\n\n## 真假判断\n - js中以下内容为假：\n - false\n - null\n - undefined\n - 0\n - '' (空字符串)\n - NaN\n\n## 设置默认参数\n辑操作符 || 和 && 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y\n```\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n```\n 等同于：\n ```\n x = x || y || 1;\n ```\n这一小技巧经常用来给方法设定默认的参数。\n```\n(function(log){\n  'use strict';\n \n  function multiply(a, b) {\n    a = a || 1;\n    b = b || 1;\n \n    log('Result ' + a * b);\n  }\n \n  multiply(); // Result 1\n  multiply(10); // Result 10\n  multiply(3, NaN); // Result 3\n  multiply(9, 5); // Result 45\n \n}(window.console.log));\n```\n## 不使用eval()函数\n就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。\neval()函数的作用是返回任意字符串，当作js代码来处理。\n## this关键字\n只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。\n\n正因为它是如此容易地被搞错，请限制它的使用场景：\n\n - 在构造函数中\n - 在对象的方法中（包括由此创建出的闭包内）\n\n## 首选函数式风格\n函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。\n\n接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。 \n不推荐\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20],\n      sum = 0,\n      i;\n \n \n  for(i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n \n  log('The sum of array ' + arr + ' is: ' + sum)\n \n}(window.console.log));\n```\n推荐(函数式编程)：\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20];\n \n  var sum = arr.reduce(function(prevValue, currentValue) {\n    return prevValue + currentValue;\n  }, 0);\n \n  log('The sum of array ' + arr + ' is: ' + sum);\n \n}(window.console.log));\n```\n## 修改内建对象的原型链\n修改内建的诸如 `Object.prototype` 和 `Array.prototype` 是被严厉禁止的。修改其它的内建对象比如 `Function.prototype`，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。\n\n## 三元条件判断（if 的快捷方法）\n用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。\n不推荐：\n```\nif(x === 10) {\n  return 'valid';\n} else {\n  return 'invalid';\n}\n```\n推荐：\n```\nreturn x === 10 ? 'valid' : 'invalid'\n```\n# JSHint\n在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用`===`而不是`==`，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例\n## webstorm内置JSHint\n对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。\n在Settings => language & frameworks => JavaScript => Code Quality Tolls => JSHint\n![webstorm中的jshint](http://img.blog.csdn.net/20170530124720963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考[官方文档](http://jshint.com/docs/)\n\n名称 | 含义\n---|---\ncurly| 循环或者条件语句必须使用花括号包住\neqeqeq | 使用强制等===\nnewcap | 对于首字母大写的函数（声明的类），强制使用new\nnoarg | 禁用arguments.caller和arguments.callee\nsub | 对于属性使用aaa.bbb而不是aaa['bbb']\nundef | 查找所有未定义的变量\nboss | 查找类似与if(a = 0)这样的代码\nnode | 指定运行环境为node\nstrict | 必须使用严格模式\nasi | 允许省略分号\nbitwise | 禁止使用位运算符，比如经常把&&写错& 规避此错误\njquery | 定义全局暴露的jQuery库\nevil | 禁止使用eval \nmaxdepth | 嵌套的最大深度\nmaxparams | 参数的最大个数\n# css规范\n## id和class的命名\nID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称\n不推荐 :\n```\n.fw-800 {\n  font-weight: 800;\n}\n \n.red {\n  color: red;\n}\n```\n推荐 :\n```\n.heavy {\n  font-weight: 800;\n}\n \n.important {\n  color: red;\n}\n```\n## 合理的使用ID\n一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class\n不推荐：\n```\n#content .title {\n  font-size: 2em;\n}\n```\n推荐：\n```\n.content .title {\n  font-size: 2em;\n}\n```\n## css选择器中避免使用标签名\n从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。\n## 使用子选择器\n很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。\n有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。\n然而，在任何情况下，这是一个非常不好的做法。\n如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。\n不推荐:\n```\n.content .title {\n  font-size: 2rem;\n}\n```\n推荐\n```\n.content > .title {\n  font-size: 2rem;\n}\n```\n## 尽量使用缩写属性\n尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。\n不推荐：\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n推荐：\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n## 0后面不带单位\n省略0后面的单位，\n不推荐：\n\n```\npadding-bottom: 0px;\nmargin: 0em;\n```\n推荐：\n```\npadding-bottom: 0;\nmargin: 0;\n```\n## 属性格式\n\n - 为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。\n - 属性名的冒号后使用一个空格。出于一致性的原因，\n属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。\n - 每个选择器和属性声明总是使用新的一行。\n - 属性选择器或属性值用双引号（””），而不是单引号（”）括起来。\n - URI值（url()）不要使用引号。\n\n作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：\n\n结构性属性：\n\n 1. display\n 2. position, left, top, right etc.\n 3. overflow, float, clear etc.\n 4. margin, padding\n\n表现性属性：\n\n - background, border etc.\n - font, text\n\n不推荐：\n```\n .box {\n  font-family: 'Arial', sans-serif;\n  border: 3px solid #ddd;\n  left: 30%;\n  position: absolute;\n  text-transform: uppercase;\n  background-color: #eee;\n  right: 30%;\n  isplay: block;\n  font-size: 1.5rem;\n  overflow: hidden;\n  padding: 1em;\n  margin: 1em;\n}\n```\n推荐：\n```\n.box {\n  display: block;\n  position: absolute;\n  left: 30%;\n  right: 30%;\n  overflow: hidden;\n  margin: 1em;\n  padding: 1em;\n  background-color: #eee;\n  border: 3px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n```\n 相关文章：\n \n - [前端编码规范](http://www.css88.com/archives/5505)\n - [JavsScript开发规范](http://www.cnblogs.com/polk6/p/4660195.html)、\n - [开发规范（四）JS规范](https://segmentfault.com/a/1190000006131512)\n\n \n ","source":"_posts/developing-guideline.md","raw":"---\ntitle: 前端开发规范：命名规范、html规范、css规范、js规范\ndate: 2017-05-30 14:54:11\ntags: [css,开发规范,js规范,jshint] \ncategories: [html,开发规范]\n---\n![这里写图片描述](http://img.blog.csdn.net/20170530152035209?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n一个好的程序员肯定是要能书写可维护的代码，而不是一次性的代码，怎么能让团队当中其他人甚至一段时间时候你再看你某个时候写的代码也能看懂呢，这就需要规范你的代码了。\n我是有一点强迫症的人，上周我们后端给我了一个CanUsename的接口（该接口的目的是判断输入的目的地是否是4级目的地），我真的是崩溃的。\n我只是觉得这个名字不够语义化，但是让我自己想一个名字我又想不出来，于是我就在想，如果有一套命名规范的话，那么以后起名字就不用发愁了，直接按照规范来就好了~\n于是端午在家就百度了一下~\n<!--more-->\n# 命名\n## 驼峰式命名法介绍\n- Pascal Case 大驼峰式命名法：首字母大写。eg：StudentInfo、UserInfo、ProductInfo\n- Camel Case 小驼峰式命名法：首字母小写。eg：studentInfo、userInfo、productInfo\n\n## 文件资源命名\n- 文件名不得含有空格\n- 文件名建议只使用小写字母，不使用大写字母。( 为了醒目，某些说明文件的文件名，可以使用大写字母，比如README、LICENSE。 )\n- 文件名包含多个单词时，单词之间建议使用半角的连词线 ( - ) 分隔。\n- 引入资源使用相对路径，不要指定资源所带的具体协议 ( `http:`,` https:` ) ，除非这两者协议都不可用。\n\n不推荐：\n```\n<script src=\"http://cdn.com/foundation.min.js\"></script>\n\n```\n推荐\n```\n<script src=\"//cdn.com/foundation.min.js\"></script>\n```\n## 变量命名\n**命名方式** : 小驼峰式命名方法\n**命名规范** : 类型+对象描述的方式，如果没有明确的类型，就可以使前缀为名词\n\n类型 | 小写字母\n---|---\narray| a\nboolean | b\nfunction | fn\nint | i\nobject | o\nregular | r\nstring | s\n推荐\n```\nvar tableTitle = \"LoginTable\"\n```\n不推荐\n```\nvar getTitle = \"LoginTable\"\n```\n## 函数\n**命名方式** : 小驼峰方式 ( 构造函数使用大驼峰命名法 )\n**命名规则** : 前缀为动词\n\n\n动词 | 含义 | 返回值\n---|---|--\ncan | 判断是否可执行某个动作 ( 权限 ) | \t函数返回一个布尔值。true：可执行；false：不可执行\nhas | \t判断是否含有某个值 |  \t函数返回一个布尔值。true：含有此值；false：不含有此值\nis | \t判断是否为某个值 | 函数返回一个布尔值。true：为某个值；false：不为某个值\nget | 获取某个值 | 函数返回一个非布尔值\nset | 设置某个值 | 无返回值、返回是否设置成功或者返回链式对象\n推荐：\n```\n//是否可阅读\nfunction canRead(){\n    return true;\n}\n\n//获取姓名\nfunction getName{\n    return this.name\n}\n```\n## 常量\n**命名方法** : 全部大写\n**命名规范** : 使用大写字母和下划线来组合命名，下划线用以分割单词。\n推荐：\n```\n var MAX_COUNT = 10;\n var URL = 'http://www.baidu.com';\n```\n## 类的成员\n- 公共属性和方法 : 同变量命名方式\n- 私有属性和方法 : 前缀为下划线(_)后面跟公共属性和方法一样的命名方式\n\n推荐(将`name`换成`this`是不是更熟悉了呢)\n```\nfunction Student(name) {\n    var _name = name; // 私有成员\n \n    // 公共方法\n    this.getName = function () {\n        return _name;\n    }\n \n    // 公共方式\n    this.setName = function (value) {\n        _name = value;\n    }\n}\nvar st = new Student('tom');\nst.setName('jerry');\nconsole.log(st.getName()); // => jerry：输出_name私有变量的值\n```\n## 注释规范\n### 单行注释 ( // )\n- 单独一行：//(双斜线)与注释文字之间保留一个空格\n- 在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格。\n- 注释代码：//(双斜线)与代码之间保留一个空格。\n推荐 : \n```\n// 调用了一个函数；1)单独在一行\nsetTitle();\n \nvar maxCount = 10; // 设置最大量；2)在代码后面注释\n \n// setName(); // 3)注释代码\n```\n## 多行注释 ( /* 注释说明 */ )\n - 若开始(/`*`和结束(`*`/)都在一行，推荐采用单行注释\n - 若至少三行注释时，第一行为/`*`，最后行为`*`/，其他行以`*`开始，并且注释文字与`*`保留一个空格。\n 推荐 : \n```\n/*\n* 代码执行到这里后会调用setTitle()函数\n* setTitle()：设置title的值\n*/\nsetTitle();\n```\n## 函数 ( 方法 ) 注释\n函数(方法)注释也是多行注释的一种，但是包含了特殊的注释要求，参照 [javadoc(百度百科)](http://baike.baidu.com/item/javadoc)\n语法：\n```\n/** \n* 函数说明 \n* @关键字 \n*/\n```\n常用注释关键字\n\n注释名 | 语法 | 含义 | 示例\n---|---|---|---|\n@param | @param 参数名 {参数类型}  描述信息 | 描述参数的信息 | @param name {String} 传入名称\n@return | @return {返回类型} 描述信息 | 描述返回值的信息 | @return {Boolean} true:可执行;false:不可执行\n@author | @author 作者信息 [附属信息：如邮箱、日期] | 描述此函数作者的信息 | @author 张三 2015/07/21 \n@version | \t@version XX.XX.XX | 描述此函数的版本号 |@version 1.0.3\n@example | @example 示例代码 |\t@example setTitle('测试') | 如下\n推荐 :\n```\n/**\n - 合并Grid的行\n - @param grid {Ext.Grid.Panel} 需要合并的Grid\n - @param cols {Array} 需要合并列的Index(序号)数组；从0开始计数，序号也包含。\n - @param isAllSome {Boolean} ：是否2个tr的cols必须完成一样才能进行合并。true：完成一样；false(默认)：不完全一样\n - @return void\n - @author polk6 2015/07/21 \n - @example\n - _________________                             _________________\n - |  年龄 |  姓名 |                             |  年龄 |  姓名 |\n - -----------------      mergeCells(grid,[0])   -----------------\n - |  18   |  张三 |              =>             |       |  张三 |\n - -----------------                             -  18   ---------\n - |  18   |  王五 |                             |       |  王五 |\n - -----------------                             -----------------\n*/\nfunction mergeCells(grid, cols, isAllSome) {\n    // Do Something\n}\n```\n# HTML规范\n## 文档规范\n使用 HTML5 的文档声明类型 : `<!DOCTYPE html>`\n\n- DOCTYPE标签是一种标准通用标记语言的文档类型声明，它的目的是要告诉标准通用标记语言解析器，它应该使用什么样的文档类型定义（DTD）来解析文档。\n- 使用文档声明类型的作用是为了防止开启浏览器的怪异模式。 \n- 没有DOCTYPE文档类型声明会开启浏览器的怪异模式，浏览器会按照自己的解析方式渲染页面，在不同的浏览器下面会有不同的样式。\n- 如果你的页面添加了<!DOCTYP>那么，那么就等同于开启了标准模式。浏览器会按照W3C标准解析渲染页面。\n\n## 脚本加载\n说到js和css的位置，大家应该都知道js放在下面，css放在上面。\n但是，如果你的项目只需要兼容ie10+或者只是在移动端访问，那么可以使用HTML5的新属性`async`，将脚本文件放在`<head>`内\n**兼容老旧浏览器(IE9-)时**：\n脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。\n**而在现代浏览器中**：\n脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。\n综上所述，\n所有浏览器中推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n  </head>\n  <body>\n    <!-- body goes here -->\n \n    <script src=\"main.js\" async></script>\n  </body>\n</html>\n```\n只兼容现代浏览器推荐:\n```\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"main.css\">\n    <script src=\"main.js\" async></script>\n  </head>\n  <body>\n    <!-- body goes here -->\n  </body>\n</html>\n```\n## 语义化\n我们一直都在说语义化编程，语义化编程，但是在代码中很少有人完全使用正确的元素。使用语义化标签也是有理由SEO的。\n>语义化是指：根据元素其被创造出来时的初始意义来使用它。\n意思就是用正确的标签干正确的事，而不是只有`div`和`span`。\n\n不推荐：\n```\n<b>My page title</b>\n<div class=\"top-navigation\">\n  <div class=\"nav-item\"><a href=\"#home\">Home</a></div>\n  <div class=\"nav-item\"><a href=\"#news\">News</a></div>\n  <div class=\"nav-item\"><a href=\"#about\">About</a></div>\n</div>\n \n<div class=\"news-page\">\n  <div class=\"page-section news\">\n    <div class=\"title\">All news articles</div>\n    <div class=\"news-article\">\n      <h2>Bad article</h2>\n      <div class=\"intro\">Introduction sub-title</div>\n      <div class=\"content\">This is a very bad example for HTML semantics</div>\n      <div class=\"article-side-notes\">I think I'm more on the side and should not receive the main credits</div>\n      <div class=\"article-foot-notes\">\n        This article was created by David <div class=\"time\">2014-01-01 00:00</div>\n      </div>\n    </div>\n \n    <div class=\"section-footer\">\n      Related sections: Events, Public holidays\n    </div>\n  </div>\n</div>\n \n<div class=\"page-footer\">\n  Copyright 2014\n</div>\n```\n推荐\n\n```\nhtml 代码:\n<!-- The page header should go into a header element -->\n<header>\n  <!-- As this title belongs to the page structure it's a heading and h1 should be used -->\n  <h1>My page title</h1>\n</header>\n \n<!-- All navigation should go into a nav element -->\n<nav class=\"top-navigation\">\n  <!-- A listing of elements should always go to UL (OL for ordered listings) -->\n  <ul>\n    <li class=\"nav-item\"><a href=\"#home\">Home</a></li>\n    <li class=\"nav-item\"><a href=\"#news\">News</a></li>\n    <li class=\"nav-item\"><a href=\"#about\">About</a></li>\n  </ul>\n</nav>\n \n<!-- The main part of the page should go into a main element (also use role=\"main\" for accessibility) -->\n<main class=\"news-page\" role=\"main\">\n  <!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. -->\n  <section class=\"page-section news\">\n    <!-- A section header should go into a section element -->\n    <header>\n      <!-- As a page section belongs to the page structure heading elements should be used (in this case h2) -->\n      <h2 class=\"title\">All news articles</h2>\n    </header>\n \n    <!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other\n     re-usable module / section that can occur multiple times on a page) a article element should be used -->\n    <article class=\"news-article\">\n      <!-- An article can contain a header that contains the summary / introduction information of the article -->\n      <header>\n        <!-- As a article title does not belong to the overall page structure there should not be any heading tag! -->\n        <div class=\"article-title\">Good article</div>\n        <!-- Small can optionally be used to reduce importance -->\n        <small class=\"intro\">Introduction sub-title</small>\n      </header>\n \n      <!-- For the main content in a section or article there is no semantic element -->\n      <div class=\"content\">\n        <p>This is a good example for HTML semantics</p>\n      </div>\n      <!-- For content that is represented as side note or less important information in a given context use aside -->\n      <aside class=\"article-side-notes\">\n        <p>I think I'm more on the side and should not receive the main credits</p>\n      </aside>\n      <!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element -->\n      <footer class=\"article-foot-notes\">\n        <!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time\n         while the actual text in the time element can also be more human readable / relative -->\n        <p>This article was created by David <time datetime=\"2014-01-01 00:00\" class=\"time\">1 month ago</time></p>\n      </footer>\n    </article>\n \n    <!-- In a section, footnotes or similar information can also go into a footer element -->\n    <footer class=\"section-footer\">\n      <p>Related sections: Events, Public holidays</p>\n    </footer>\n  </section>\n</main>\n \n<!-- Your page footer should go into a global footer element -->\n<footer class=\"page-footer\">\n  Copyright 2014\n</footer>\n```\n## alt标签不为空\n`<img> `标签的 alt 属性指定了替代文本，用于在图像无法显示或者用户禁用图像显示时，代替图像显示在浏览器中的内容。\n假设由于下列原因用户无法查看图像，alt 属性可以为图像提供替代的信息：\n\n - 网速太慢\n - src 属性中的错误\n - 浏览器禁用图像\n - 用户使用的是屏幕阅读器\n\n从SEO角度考虑，浏览器的爬虫爬不到图片的内容，所以我们要有文字告诉爬虫图片的内容\n\n## 结构、表现、行为三者分离\n尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。\n在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。\n建议：\n\n - 不使用超过一到两张样式表\n - 不使用超过一到两个脚本（学会用合并脚本）\n - 不使用行内样式（`<style>.no-good {}</style>`）\n - 不在元素上使用 style 属性（`<hr style=\"border-top: 5px solid black\">`）\n - 不使用行内脚本（`<script>alert('no good')</script>`）\n - 不使用表象元素（`i.e. <b>, <u>, <center>, <font>, <b>`）\n - 不使用表象 class 名（`i.e. red, left, center`）\n\n## HTML只关注内容\n - HTML只显示展示内容信息\n - 不要引入一些特定的 HTML 结构来解决一些视觉设计问题\n - 不要将` img `元素当做专门用来做视觉设计的元素\n - 样式上的问题应该使用css解决\n\n不推荐：\n```\n<!-- We should not introduce an additional element just to solve a design problem  -->\n<span class=\"text-box\">\n  <span class=\"square\"></span>\n  See the square next to me?\n</span>\ncss 代码:\n.text-box > .square {\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n推荐\n\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background-color: red;\n}\n```\n**图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。**\n\n不推荐\n```\nhtml 代码:\n<!-- Content images should never be used for design elements!  -->\n<span class=\"text-box\">\n  <img src=\"square.svg\" alt=\"Square\" />\n  See the square next to me?\n</span>\n```\n推荐\n```\nhtml 代码:\n<!-- That's clean markup! -->\n<span class=\"text-box\">\n  See the square next to me?\n</span>\ncss 代码:\n/* We use a :before pseudo element with a background image to solve the problem */\n.text-box:before {\n  content: \"\";\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  background: url(square.svg) no-repeat;\n  background-size: 100%;\n}\n```\n# js规范\n## 避免全局命名空间污染\n防止全局命名空间被污染，我们通常的做法是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，创建独立隔绝的定义域。也使得内存在执行完后立即释放。\n\nIIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。\n不推荐:\n```\nvar x = 10,\n    y = 100;\n \n// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this\n// will be stored in the window object. This is very unclean and needs to be avoided.\nconsole.log(window.x + ' ' + window.y);\n```\n推荐\n```\n// We declare a IIFE and pass parameters into the function that we will use from the global space\n(function(log, w, undefined){\n  'use strict';\n \n  var x = 10,\n      y = 100;\n \n  // Will output 'true true'\n  log((w.x === undefined) + ' ' + (w.y === undefined));\n \n}(window.console.log, window));\n```\n推荐的IIFE写法:\n```\n(function(){\n  'use strict';\n \n  // Code goes here\n \n}());\n```\n如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：\n```\n(function($, w, d){\n  'use strict';\n \n  $(function() {\n    w.alert(d.querySelectorAll('div').length);\n  });\n}(jQuery, window, document));\n```\n## 严格模式\nECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。\n\n严格模式会阻止使用在未来很可能被引入的预留关键字。\n\n你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。\n## 变量声明\n总是使用 var 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，例如\n```\nvar a = b = 0; //b会被隐式的创建为全局变量\n```\n所以，请总是使用 var 来声明变量，并且使用单var模式（将所有的变量在函数最前面只使用一个var定义）。例如：\n```\n(function (){\n  'use strict'\n  var a = 0,\n      b = 0,\n      c = 0,\n      i,\n      j,\n      myObject();\n}())\n```\n \n采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。\n## js声明提前\njavascript会自动将函数作用域内的变量和方法的定义提前（只是提前声明，赋值还是在原处）\n例如：\n```\n(function(log){\n  'use strict';\n \n  var a = 10;\n \n  for(var i = 0; i < a; i++) {\n    var b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    var f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  function x() {\n    log('Mr. X!');\n  }\n  x();\n \n}(window.console.log));\n```\n提升后的js\n```\n(function(log){\n  'use strict';\n  // All variables used in the closure will be hoisted to the top of the function\n  var a,\n      i,\n      b,\n      f;\n  // All functions in the closure will be hoisted to the top\n  function x() {\n    log('Mr. X!');\n  }\n \n  a = 10;\n \n  for(i = 0; i < a; i++) {\n    b = i * i;\n    log(b);\n  }\n \n  if(a === 10) {\n    // Function assignments will only result in hoisted variables but the function body will not be hoisted\n    // Only by using a real function declaration the whole function will be hoisted with its body\n    f = function() {\n      log(a);\n    };\n    f();\n  }\n \n  x();\n \n}(window.console.log));\n```\n## 使用严格等\n总是使用 `===` 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。例如：\n```\n(function(log){\n  'use strict';\n \n  log('0' == 0); // true\n  log('' == false); // true\n  log('1' == true); // true\n  log(null == undefined); // true\n \n  var x = {\n    valueOf: function() {\n      return 'X';\n    }\n  };\n \n  log(x == 'X');\n \n}(window.console.log));\n```\n### 等同== 和严格等===的区别\n\n - ==， 两边值类型不同的时候，要先进行类型转换，再比较。\n - ===，不做类型转换，类型不同的一定不等。\n\n==等同操作符\n - 如果两个值具有相同类型，会进行===比较，返回===的比较值 \n - 如果两个值不具有相同类型，也有可能返回true \n - 如果一个值是null另一个值是undefined，返回true \n - 如果一个值是string另个是number，会把string转换成number再进行比较 \n - 如果一个值是true，会把它转成1再比较，false会转成0 \n\n\n```\nconsole.log( false == null )      // false\nconsole.log( false == undefined ) // false\nconsole.log( false == 0 )         // true\nconsole.log( false == '' )        // true\nconsole.log( false == NaN )       // false\n \nconsole.log( null == undefined ) // true\nconsole.log( null == 0 )         // false\nconsole.log( null == '' )        // false\nconsole.log( null == NaN )       // false\n \nconsole.log( undefined == 0)   // false\nconsole.log( undefined == '')  // false\nconsole.log( undefined == NaN) // false\n \nconsole.log( 0 == '' )  // true\nconsole.log( 0 == NaN ) // false\n```\n总结一下==\n \n\n - false 除了和自身比较为 true 外，和 0，\"\" 比较也为 true\n - null 只和 undefined 比较时为 true， 反过来 undefined 也仅和 null 比较为 true，没有第二个\n - 0 除了和 false 比较为 true，还有空字符串 ''\" 和空数组 []\n - 空字符串 '' 除了和 false 比较为 true，还有一个数字 0\n\n> ==, >, <, +, -, ... 这些操作符所造成的隐式类型转换都是无副作用的，它不会改变变量本身保存的值。，但是，如果你覆写某个对象的 `valueOf/toString\n> `的话，==就会产生副作用.\n\n例如：\n```\nArray.prototype.valueOf = function() {\n  this[0]++;\n  return this;\n}\nvar x = [1, 2, 3];\nx == 0;\nconsole.log(x);   // [2, 2, 3]\n```\n===操作符：\n \n - 要是两个值类型不同，返回false \n - 要是两个值都是number类型，并且数值相同，返回true \n - 要是两个值都是stirng，并且两个值的String内容相同，返回true \n - 要是两个值都是true或者都是false，返回true \n - 要是两个值都是指向相同的Object，Arraya或者function，返回true \n - 要是两个值都是null或者都是undefined，返回true\n\n## 真假判断\n - js中以下内容为假：\n - false\n - null\n - undefined\n - 0\n - '' (空字符串)\n - NaN\n\n## 设置默认参数\n辑操作符 || 和 && 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。例如:如果x不存在且y不存在，x=1；如果x存在y存在，x = y\n```\nif(!x) {\n  if(!y) {\n    x = 1;\n  } else {\n    x = y;\n  }\n}\n```\n 等同于：\n ```\n x = x || y || 1;\n ```\n这一小技巧经常用来给方法设定默认的参数。\n```\n(function(log){\n  'use strict';\n \n  function multiply(a, b) {\n    a = a || 1;\n    b = b || 1;\n \n    log('Result ' + a * b);\n  }\n \n  multiply(); // Result 1\n  multiply(10); // Result 10\n  multiply(3, NaN); // Result 3\n  multiply(9, 5); // Result 45\n \n}(window.console.log));\n```\n## 不使用eval()函数\n就如eval的字面意思来说，恶魔，使用eval()函数会带来安全隐患。\neval()函数的作用是返回任意字符串，当作js代码来处理。\n## this关键字\n只在对象构造器、方法和在设定的闭包中使用 this 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 call() 和 apply() 执行和调用时）。\n\n正因为它是如此容易地被搞错，请限制它的使用场景：\n\n - 在构造函数中\n - 在对象的方法中（包括由此创建出的闭包内）\n\n## 首选函数式风格\n函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。\n\n接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。 \n不推荐\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20],\n      sum = 0,\n      i;\n \n \n  for(i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n \n  log('The sum of array ' + arr + ' is: ' + sum)\n \n}(window.console.log));\n```\n推荐(函数式编程)：\n```\n(function(log){\n  'use strict';\n \n  var arr = [10, 3, 7, 9, 100, 20];\n \n  var sum = arr.reduce(function(prevValue, currentValue) {\n    return prevValue + currentValue;\n  }, 0);\n \n  log('The sum of array ' + arr + ' is: ' + sum);\n \n}(window.console.log));\n```\n## 修改内建对象的原型链\n修改内建的诸如 `Object.prototype` 和 `Array.prototype` 是被严厉禁止的。修改其它的内建对象比如 `Function.prototype`，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。\n\n## 三元条件判断（if 的快捷方法）\n用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。\n不推荐：\n```\nif(x === 10) {\n  return 'valid';\n} else {\n  return 'invalid';\n}\n```\n推荐：\n```\nreturn x === 10 ? 'valid' : 'invalid'\n```\n# JSHint\n在js规范中，有很多规范都是样式上的规范而不是逻辑上的规范，比如尽量使用`===`而不是`==`，我们可以使用JSHint或者JSLint，Javascript代码验证工具，这种工具可以检查你的代码并提供相关的代码改进意见。我个人使用的是JSHint，所以就以这个为例\n## webstorm内置JSHint\n对于ws爱好者来说，我没有用过其他的编译器，ws基本上能满足你的所有需求（最新的ws集成了vue）。\n在Settings => language & frameworks => JavaScript => Code Quality Tolls => JSHint\n![webstorm中的jshint](http://img.blog.csdn.net/20170530124720963?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)这些规范都是什么意思呢，这里列出一些常用的，剩下的大家可以参考[官方文档](http://jshint.com/docs/)\n\n名称 | 含义\n---|---\ncurly| 循环或者条件语句必须使用花括号包住\neqeqeq | 使用强制等===\nnewcap | 对于首字母大写的函数（声明的类），强制使用new\nnoarg | 禁用arguments.caller和arguments.callee\nsub | 对于属性使用aaa.bbb而不是aaa['bbb']\nundef | 查找所有未定义的变量\nboss | 查找类似与if(a = 0)这样的代码\nnode | 指定运行环境为node\nstrict | 必须使用严格模式\nasi | 允许省略分号\nbitwise | 禁止使用位运算符，比如经常把&&写错& 规避此错误\njquery | 定义全局暴露的jQuery库\nevil | 禁止使用eval \nmaxdepth | 嵌套的最大深度\nmaxparams | 参数的最大个数\n# css规范\n## id和class的命名\nID和class的名称总是使用可以反应元素目的和用途的名称，或其他通用的名称，代替表象和晦涩难懂的名称\n不推荐 :\n```\n.fw-800 {\n  font-weight: 800;\n}\n \n.red {\n  color: red;\n}\n```\n推荐 :\n```\n.heavy {\n  font-weight: 800;\n}\n \n.important {\n  color: red;\n}\n```\n## 合理的使用ID\n一般情况下ID不应该被用于样式，并且ID的权重很高，所以不使用ID解决样式的问题，而是使用class\n不推荐：\n```\n#content .title {\n  font-size: 2em;\n}\n```\n推荐：\n```\n.content .title {\n  font-size: 2em;\n}\n```\n## css选择器中避免使用标签名\n从结构、表现、行为分离的原则来看，应该尽量避免css中出现HTML标签，并且在css选择器中出现标签名会存在潜在的问题。\n## 使用子选择器\n很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。\n有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。\n然而，在任何情况下，这是一个非常不好的做法。\n如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。\n不推荐:\n```\n.content .title {\n  font-size: 2rem;\n}\n```\n推荐\n```\n.content > .title {\n  font-size: 2rem;\n}\n```\n## 尽量使用缩写属性\n尽量使用缩写属性对于代码效率和可读性是很有用的，比如font属性。\n不推荐：\n```\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n```\n推荐：\n```\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n## 0后面不带单位\n省略0后面的单位，\n不推荐：\n\n```\npadding-bottom: 0px;\nmargin: 0em;\n```\n推荐：\n```\npadding-bottom: 0;\nmargin: 0;\n```\n## 属性格式\n\n - 为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。\n - 属性名的冒号后使用一个空格。出于一致性的原因，\n属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。\n - 每个选择器和属性声明总是使用新的一行。\n - 属性选择器或属性值用双引号（””），而不是单引号（”）括起来。\n - URI值（url()）不要使用引号。\n\n作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：\n\n结构性属性：\n\n 1. display\n 2. position, left, top, right etc.\n 3. overflow, float, clear etc.\n 4. margin, padding\n\n表现性属性：\n\n - background, border etc.\n - font, text\n\n不推荐：\n```\n .box {\n  font-family: 'Arial', sans-serif;\n  border: 3px solid #ddd;\n  left: 30%;\n  position: absolute;\n  text-transform: uppercase;\n  background-color: #eee;\n  right: 30%;\n  isplay: block;\n  font-size: 1.5rem;\n  overflow: hidden;\n  padding: 1em;\n  margin: 1em;\n}\n```\n推荐：\n```\n.box {\n  display: block;\n  position: absolute;\n  left: 30%;\n  right: 30%;\n  overflow: hidden;\n  margin: 1em;\n  padding: 1em;\n  background-color: #eee;\n  border: 3px solid #ddd;\n  font-family: 'Arial', sans-serif;\n  font-size: 1.5rem;\n  text-transform: uppercase;\n}\n```\n 相关文章：\n \n - [前端编码规范](http://www.css88.com/archives/5505)\n - [JavsScript开发规范](http://www.cnblogs.com/polk6/p/4660195.html)、\n - [开发规范（四）JS规范](https://segmentfault.com/a/1190000006131512)\n\n \n ","slug":"developing-guideline","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqii0026aaxiukcop41o"},{"title":"html5拖放--15行js代码实现两个div内容互换","date":"2017-05-24T05:24:51.000Z","_content":"![html5拖放](http://img.blog.csdn.net/20170523231217677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客:http://cherryblog.site/ ，欢迎大家前去参观\n> 本文项目地址，sortable插件地址：https://github.com/sunshine940326/sortable\n> demo地址：https://github.com/sunshine940326/drag\n\n 在写我们后台的管理程序中需要有一个拖放的功能，然后我们有一个这样的功能，实现11个固定且大小不一的div互换，效果如下\n![最终效果图](https://user-gold-cdn.xitu.io/2017/5/24/c9919143af8ac22486c3fb9fcfd5b981)\n\n作为一个小菜鸟，听到这样的消息我是蒙逼的= =，在网上找到一个插件，功能挺强大的\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/0c1b872fd140ad1053ec1a7f0b03fa75)\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/3b43ace9a1ed0d25d21a9e694604c71f)\n> 插件地址：https://github.com/sunshine940326/sortable\n\n但是这个插件只能拖动和放置，不能交换，也就是只能将div插入在其他div前面，其余的向后推移，并且不能做到交换div中的内容，而div容器不变的条件，然后我就和其他同事商量了一下交换两个div中的数据要怎么处理，然后同事说这个就比较麻烦了= =。需要写死div，然后先记录鼠标拖动前的div中的内容，然后判断鼠标放下的位置，在哪一个div的范围内，再交换两个的数据= =，真正做起来还不知道有什么坑。听着都怕，于是就暂且搁置了这个功能，直到有一天非做不可了，我百度了一下“怎么交换两个div”，然后找到了一个demo，天啦噜~整个实现过程全部代码50行不到，js代码之后十几行，整个过程不到半个小时就解决了，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！效果如下：\n![demo效果](https://user-gold-cdn.xitu.io/2017/5/24/e214bb0885534cf1b13f15cb563563e3)\n> demo地址：https://github.com/sunshine940326/drag\n查看代码，发现思路如下:\n\n 1. ondragstart（ 用户开始拖动元素时触发）的时候使用该对象的dataTransfer.setData方法，并且用中间量记录点击的div\n 2. ondragover (当某被拖动的对象在另一对象容器范围内拖动时触发此事件),拖动div的时候阻止拖动的默认事件（drop 事件的默认行为是以链接形式打开）\n 3. ondrop (在一个拖动过程中，释放鼠标键时触发此事件)时候交换两个div的html\n 百度了一下发现这是html的新特性drag，研究了一下有如下特点\n# 拖放\n本例的代码如下\n```\n<!DOCTYPE html>\n<!DOCTYPE HTML>\n<html>\n<head>\n    <style type=\"text/css\">\n        #div1\n        {float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n        #div2\n        {float:left; width:200px; height:135px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n\n    </style>\n    <script type=\"text/javascript\">\n        function allowDrop(ev)\n        {\n            ev.preventDefault();\n        }\n\n        var srcdiv = null;\n        function drag(ev,divdom)\n        {\n            srcdiv=divdom;\n            ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n        }\n\n        function drop(ev,divdom)\n        {\n            ev.preventDefault();\n            if(srcdiv != divdom){\n                srcdiv.innerHTML = divdom.innerHTML;\n                divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n            }\n        }\n    </script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>ni hao!</p>\n</div>\n<div id=\"div2\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>Hello world!</p>\n</div>\n\n</body>\n</html>\n```\n拖放是一种常见的特性，即抓取对象以后拖到另一个位置。\n在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。\n## 设置元素为可拖放\n首先，为了使元素可拖动，把 draggable 属性设置为 true ：\n`<div draggable=\"true\"></div>`\n## 设置ondragstart 和并保存数据\nondragstart 属性调用了一个函数，drag(event,this)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值,在这个例子中，数据类型是 \"text/html\"，值是可拖动元素的innerHTML\n```\nfunction drag(ev,divdom){\n   srcdiv=divdom;\n   ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n}\n```\n## 放到何处 - ondragover\nondragover 事件规定在何处放置被拖动的数据。\n默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。\n这要通过调用 ondragover 事件的 event.preventDefault() 方法：\nevent.preventDefault()\n```\nfunction allowDrop(ev){\n   ev.preventDefault();\n}\n``` \n##进行放置 - ondrop\n当放置被拖数据时，会发生 drop 事件。\n在上面的例子中，ondrop 属性调用了一个函数，drop(event)：\n```\n function drop(ev,divdom){\n    ev.preventDefault();\n    if(srcdiv != divdom){\n         srcdiv.innerHTML = divdom.innerHTML;\n      divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n    }\n}\n``` \n \n\n \n ","source":"_posts/html5drag.md","raw":"---\ntitle: html5拖放--15行js代码实现两个div内容互换\ndate: 2017-05-24 13:24:51\ntags: [html5,前端] \ncategories: html5\n---\n![html5拖放](http://img.blog.csdn.net/20170523231217677?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客:http://cherryblog.site/ ，欢迎大家前去参观\n> 本文项目地址，sortable插件地址：https://github.com/sunshine940326/sortable\n> demo地址：https://github.com/sunshine940326/drag\n\n 在写我们后台的管理程序中需要有一个拖放的功能，然后我们有一个这样的功能，实现11个固定且大小不一的div互换，效果如下\n![最终效果图](https://user-gold-cdn.xitu.io/2017/5/24/c9919143af8ac22486c3fb9fcfd5b981)\n\n作为一个小菜鸟，听到这样的消息我是蒙逼的= =，在网上找到一个插件，功能挺强大的\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/0c1b872fd140ad1053ec1a7f0b03fa75)\n![sortable插件](https://user-gold-cdn.xitu.io/2017/5/24/3b43ace9a1ed0d25d21a9e694604c71f)\n> 插件地址：https://github.com/sunshine940326/sortable\n\n但是这个插件只能拖动和放置，不能交换，也就是只能将div插入在其他div前面，其余的向后推移，并且不能做到交换div中的内容，而div容器不变的条件，然后我就和其他同事商量了一下交换两个div中的数据要怎么处理，然后同事说这个就比较麻烦了= =。需要写死div，然后先记录鼠标拖动前的div中的内容，然后判断鼠标放下的位置，在哪一个div的范围内，再交换两个的数据= =，真正做起来还不知道有什么坑。听着都怕，于是就暂且搁置了这个功能，直到有一天非做不可了，我百度了一下“怎么交换两个div”，然后找到了一个demo，天啦噜~整个实现过程全部代码50行不到，js代码之后十几行，整个过程不到半个小时就解决了，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！效果如下：\n![demo效果](https://user-gold-cdn.xitu.io/2017/5/24/e214bb0885534cf1b13f15cb563563e3)\n> demo地址：https://github.com/sunshine940326/drag\n查看代码，发现思路如下:\n\n 1. ondragstart（ 用户开始拖动元素时触发）的时候使用该对象的dataTransfer.setData方法，并且用中间量记录点击的div\n 2. ondragover (当某被拖动的对象在另一对象容器范围内拖动时触发此事件),拖动div的时候阻止拖动的默认事件（drop 事件的默认行为是以链接形式打开）\n 3. ondrop (在一个拖动过程中，释放鼠标键时触发此事件)时候交换两个div的html\n 百度了一下发现这是html的新特性drag，研究了一下有如下特点\n# 拖放\n本例的代码如下\n```\n<!DOCTYPE html>\n<!DOCTYPE HTML>\n<html>\n<head>\n    <style type=\"text/css\">\n        #div1\n        {float:left; width:100px; height:35px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n        #div2\n        {float:left; width:200px; height:135px; margin:10px;padding:10px;border:1px solid #aaaaaa;}\n\n    </style>\n    <script type=\"text/javascript\">\n        function allowDrop(ev)\n        {\n            ev.preventDefault();\n        }\n\n        var srcdiv = null;\n        function drag(ev,divdom)\n        {\n            srcdiv=divdom;\n            ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n        }\n\n        function drop(ev,divdom)\n        {\n            ev.preventDefault();\n            if(srcdiv != divdom){\n                srcdiv.innerHTML = divdom.innerHTML;\n                divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n            }\n        }\n    </script>\n</head>\n<body>\n\n<div id=\"div1\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>ni hao!</p>\n</div>\n<div id=\"div2\" ondrop=\"drop(event,this)\" ondragover=\"allowDrop(event)\" draggable=\"true\" ondragstart=\"drag(event, this)\">\n    <p>Hello world!</p>\n</div>\n\n</body>\n</html>\n```\n拖放是一种常见的特性，即抓取对象以后拖到另一个位置。\n在 HTML5 中，拖放是标准的一部分，任何元素都能够拖放。\n## 设置元素为可拖放\n首先，为了使元素可拖动，把 draggable 属性设置为 true ：\n`<div draggable=\"true\"></div>`\n## 设置ondragstart 和并保存数据\nondragstart 属性调用了一个函数，drag(event,this)，它规定了被拖动的数据。dataTransfer.setData() 方法设置被拖数据的数据类型和值,在这个例子中，数据类型是 \"text/html\"，值是可拖动元素的innerHTML\n```\nfunction drag(ev,divdom){\n   srcdiv=divdom;\n   ev.dataTransfer.setData(\"text/html\",divdom.innerHTML);\n}\n```\n## 放到何处 - ondragover\nondragover 事件规定在何处放置被拖动的数据。\n默认地，无法将数据/元素放置到其他元素中。如果需要设置允许放置，我们必须阻止对元素的默认处理方式。\n这要通过调用 ondragover 事件的 event.preventDefault() 方法：\nevent.preventDefault()\n```\nfunction allowDrop(ev){\n   ev.preventDefault();\n}\n``` \n##进行放置 - ondrop\n当放置被拖数据时，会发生 drop 事件。\n在上面的例子中，ondrop 属性调用了一个函数，drop(event)：\n```\n function drop(ev,divdom){\n    ev.preventDefault();\n    if(srcdiv != divdom){\n         srcdiv.innerHTML = divdom.innerHTML;\n      divdom.innerHTML=ev.dataTransfer.getData(\"text/html\");\n    }\n}\n``` \n \n\n \n ","slug":"html5drag","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqim002aaaxizydlufmw"},{"title":"hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？","date":"2017-04-16T05:24:51.000Z","_content":"![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 本文首发在我的个人博客：http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~\n\n上一次在掘金上发表的`hexo`高阶教程：[hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能](http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html)，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  \n \n - seo优化\n - 多终端修改项目\n - 同时托管到github和coding上\n - 设置google和百度sitemap，让搜索引擎更好的抓取你的网站\n - 使用gulp对css、js进行优化\n - 接入七牛图床\n - 加入打赏功能\n - 加入照片模块\n \n开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  \n> 酒香不敌巷子深\n> 我们要做对搜索引擎友好的站点\n<!--more-->\n所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~\n\n作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩\n\n在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。\n# seo优化\n推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好\n> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。\n## 让百度收录你的站点\n我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入`site:<域名>`,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站\n![查看站点是否被百度收录](http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 验证网站所有权\n登录百度站长平台：http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\n![百度站长添加网站](http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，**但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的`layout:false`，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）**，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~\n![验证网站所有权](http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 生成网站地图\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎\n#### 安装sitemap插件\n```\nnpm install hexo-generator-sitemap --save     \nnpm install hexo-generator-baidu-sitemap --save\n```\n#### 修改博客配置文件\n在根目录配置文件中修改url为你的站点地址\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n**执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件**，可以通过http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\n### 向百度提交链接\n然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap\n> 如何选择链接提交方式\n> 1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n> 2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n> 3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n> 4、手动提交：一次性提交链接给百度，可以使用此种方式。\n\n一般主动提交比手动提交效果好，这里介绍主动提交的三种方法\n从效率上来说：\n> **主动推送>自动推送>sitemap**\n\n![连接提交](http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 主动推送\n安装插件`npm install hexo-baidu-url-submit --save`\n然后再根目录的配置文件中新增字段\n```\nbaidu_url_submit:\n  count: 100 # 提交最新的一个链接\n  host: www.cherryblog.site # 在百度站长平台中注册的域名\n  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n```\n在加入新的deploye\n```\ndeploy:\n - type:baidu_url_submitter\n```\n 这样执行`hexo deploy`的时候，新的链接就会被推送了\n#### 设置自动推送\n在主题配置文件下设置,将baidu_push设置为true：\n```\n# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO\nbaidu_push: true\n```\n然后就会将一下代码自动推送到百度，位置是themes\\next\\layout\\_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap\n```\n{% if theme.baidu_push %}\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n{% endif %}\n```\n#### sitemap\n将我们上一步生成的sitemap文件提交到百度就可以了~\n![将sitemap提交到百度](http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果\n在百度搜索`site:cherryblog.site`已经可以搜索到结果\n![站点已被百度收录](http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在搜索框输入域名也可以找到站点\n![站点已被百度收录](http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n输入关键字的名字也可以在第二页就找到呢，好开森~\n![站点已被百度收录](http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让google收录你的站点\n相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap\ngoogle站点平台：https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\n![站点已被google收录](http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让其他搜索引擎收录你的站点\n除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的\n ，大家就自行选择添加哈，这里就不再赘述了~\n## 优化你的url\nseo搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：\n```\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n## 其他seo优化\nseo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述\n在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so....\n - 网站**外链**的推广度、数量和质量\n - 网站的**内链**足够强大\n - 网站的**原创**质量\n - 网站的**年龄**时间\n - 网站的**更新频率**（更新次数越多越好）\n - 网站的**服务器**\n - 网站的**流量**：流量越高网站的权重越高\n - 网站的**关键词排名**：关键词排名越靠前，网站的权重越高\n - 网站的**收录**数量：网站百度收录数量越多，网站百度权重越高\n - 网站的浏览量及深度：**用户体验**越好，网站的百度权重越高\n# 同时托管到github和coding上\n前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding\n## 将你的项目托管在coding上\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。\n> 2016年3月CODING宣布收购代码托管平台GitCafe。\n\n之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。\n### 在coding上创建仓库\n首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起\n![创建coding项目](http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 将hexo博客同步到新创建的仓库中\n第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上\n![自己的ssh公钥](http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![coding中贴入ssh](http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch] \n```\n所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    #github: git@github.com:sunshine940326/sunshine940326.github.io.git\n    github: https://github.com/sunshine940326/sunshine940326.github.io.git\n    coding: git@git.coding.net:cherry940326/cherry940326.git\n    #coding: https://git.coding.net/cherry940326/cherry940326.git\n```\n完成之后在git bash 中输入\n```\nssh -T git@git.coding.net\n```\n如果得到如图提示就说明配置成功了\n![配置成功ssh](http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后重新部署hexo就将代码上传至coding上了\n### 设置coding的pages服务\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n![找到pages](http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![配置pages](http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 设置域名解析\n然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：\n![域名解析](http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n----------\n至此就完成了将你的hexo编译的博客同时部署在github和coding上\n# 多终端编辑hexo博客\n之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。\n> 更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\n## 创建Hexo分支\n创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n## 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。**.git文件夹被删除后整个文件对应的git仓库状态也会被清空**)\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n```\n/.deploy_git\n/public  \n/_config.yml\n\n```\n> .deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 \n## 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n```\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n## 将博客源文件上传至Hexo分支\n依次执行\n```\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n提交网站相关的文件； \n## 对B电脑进行的操作\n假设B电脑现在没有我们的源文件\n```\ngit init\ngit remote add origin <server> #将本地文件和云端仓库映射起来。\ngit fetch --all\ngit reset --hard origin/master\n```\n## 日常改动\n平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~\n1. 依次执行git add .、git commit -m \"...\"、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；\n2. 然后才执行hexo g -d发布网站到master分支上。\n# 使用gulp压缩你的代码\n当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~\n## 什么是gulp\n在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。\ngulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。\n> 能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~\n\n### npm小知识\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）\n####使用npm安装插件：`npm install <name> [g] [--save -dev]`\n\n - `<name>`:node 插件名称\n - `-g`:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：`C:\\Users\\Administrator\\AppData\\Roaming\\npm`;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的`node_modules`文件夹\n - `--save`：将配置信息保存在node项目配置文件`package.json`中\n - `-dev`：保存至`package.json` 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~\n -  为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是`npm install`，就可以下载`package.json` 下所有需要的包。`npm install --production`则只下载dependencies下的包\n####  使用npm卸载插件：`npm unstall <name> [-g] [--save-dev]`\n -  在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用`npm unstall <name> [-g] [--save-dev]` 命令\n -  删除全部插件:`rimraf node_modules `（首先你需要先安装rimraf 插件）\n#### 更新npm插件：`npm update <name> [g] [--save-dev]`\n### 使用cnpm\n什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~\n> 这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\ncnpm 官网地址：http://npm.taobao.org；\n安装命令为`npm install cnpm -g --registry=https://registry.npm.taobao.org`\n> 注意：安装完后最好查看其版本号`cnpm -v`或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；\n## 全局安装gulp\n言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码\n`npm install gulp -g`,然后`npm -v` 查看版本号就可以知道我们是不是安装成功了~*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！\n## 新建package.json\n使用`npm init`就可以创建package.json文件\n![创建package.json文件](http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~\n```\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n    \"hexo\": \"^3.2.0\",\n    \"hexo-baidu-url-submit\": \"0.0.5\",\n    \"hexo-deployer-git\": \"^0.2.0\",\n    \"hexo-generator-archive\": \"^0.1.4\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.0\",\n    \"hexo-generator-sitemap\": \"^1.1.2\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.10\",\n    \"hexo-renderer-stylus\": \"^0.3.1\",\n    \"hexo-server\": \"^0.2.0\",\n    \"hexo-util\": \"^0.6.0\",\n    \"hexo-wordcount\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\"\n  }\n}\n```\n## 本地安装gulp插件\n在你的Hexo目录下右键`git bash here`然后执行`npm install <name> --save`,和gulp有关的包名称有以下几个，只需将`<name>`替换一下就好~\n```\n\"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n```\n聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中`dependencies`下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~\n## 建立gulp.js\ngulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）\n我的gulp.js文件如下\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,  //清除HTML注释\n            collapseWhitespace: true,  //压缩HTML\n            collapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n            removeEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n            removeScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n            removeStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n            minifyJS: true,  //压缩页面JS\n            minifyCSS: true  //压缩页面CSS\n        }))\n        .on('error', function(err) {\n            console.log('html Error!', err.message);\n            this.end();\n        })\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n        // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 执行 gulp 命令时执行的任务\ngulp.task('build', [\n    'minify-html','minify-css','minify-js','images',\n]);\n```\n## 执行gulp：`gulp build`\n![gulpbuild执行结果](http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 在git bash中执行\n在git bash中直接输入命令`gulp build`就可以，这个`gulp build`是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字\n### 在webstorm中执行\nwebstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp\n![在webstorm中执行gulp](http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 增加七牛图床\n增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~\n## 注册七牛\n万年不变的第一步，注册。官网：[七牛云](https://portal.qiniu.com/signup?code=3lnd6wvc103f6)\n## 上传资源\n在登录成功之后，点击对象存储\n![上传资源至七牛](http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~\n![上传资源至七牛](http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 添加水印\n使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。\n七牛可以对上传的图片添加图片样式\n![增加图片样式](http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。\n![增加图片样式](http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\n![这里写图片描述](http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在该地址后加上我设置的连接符,\"-\"和我的样式名称：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\n![这里写图片描述](http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ","source":"_posts/hexo-3.md","raw":"---\ntitle: hexo高阶教程：想让你的博客被更多的人在搜索引擎中搜到吗？\ndate: 2017-04-16 13:24:51\ntags: [hexo高阶教程,hexo+gulp,hexo+七牛,hexo百度收录,hexo百度统计,hexo seo] \ncategories: git\n---\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 本文首发在我的个人博客：http://cherryblog.site/,欢迎大家前去参观，顺便求fork，么么哒~\n\n上一次在掘金上发表的`hexo`高阶教程：[hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能](http://cherryblog.site/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html)，收到了不少朋友的喜欢，手动比心♪(＾∀＾●)ﾉ，也有不少朋友私信我给我提改进的意见，本着生命就是要折腾的原则，我又做了如下的优化：  \n \n - seo优化\n - 多终端修改项目\n - 同时托管到github和coding上\n - 设置google和百度sitemap，让搜索引擎更好的抓取你的网站\n - 使用gulp对css、js进行优化\n - 接入七牛图床\n - 加入打赏功能\n - 加入照片模块\n \n开始做这个博客的时候是想着记录自己学习的过程，并没有指望别人发现（自己比较菜，写的都是一些基础的东西，也没有什么特别nb的技巧值得炫耀〒▽〒），但是自从给博客增加了统计的功能之后，并且在掘金社区发布之后，看着每天还有那么百十号人来看看，内心还有点小激动呢~[]~(￣▽￣)~*  \n> 酒香不敌巷子深\n> 我们要做对搜索引擎友好的站点\n<!--more-->\n所以我就在想，怎么才能让其他小伙伴搜索到我写的文章呢？于是就想到了对网站进行seo优化，这段时间也一直在做网站的seo优化，对于hexo生成的博客来说，代码其实修改的并不多，主要是要多用心去给各个搜索引擎提交你的sitemap，让搜索引擎的小蜘蛛多来你的站点，这样别人在搜索东西的时候才有更多的可能搜出你的文章，给你的网站带来人气~\n\n作为一个前端工作者，对网站的优化肯定还是需要有很多的，奈何时间基本都被工作占用，所以就先把优化功能先放了放，只进行了代码压缩\n\n在这半个月的时间，对于hexo搭建搭建的个人博客，虽然没有让我对某一门语言的深度增加，但是却让我对整个建站流程的宽度增加了不少，优化是一件比写出代码的技术难度还要高的事情。\n# seo优化\n推广是一个烦人的事情啊喂，特别是对于我们搞技术的来说，可能就不擅长推广，那么怎么才能让别人知道我们呢，我们就要想办法让别人通过搜索就可以搜索到你博客的内容，给我们带来自然流量，这就需要seo优化,让我们的站点变得对搜索引擎友好\n> SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。\n## 让百度收录你的站点\n我们首先要做的就是让各大搜索引擎收录你的站点，我们在刚建站的时候各个搜索引擎是没有收录我们网站的，在搜索引擎中输入`site:<域名>`,如果如下图所示就是说明我们的网站并没有被百度收录。我们可以直接点击下面的“网址提交”来提交我们的网站\n![查看站点是否被百度收录](http://img.blog.csdn.net/20170504171112514?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 验证网站所有权\n登录百度站长平台：http://zhanzhang.baidu.com,只要有百度旗下的账号就可以登录，登录成功之后在站点管理中点击[添加网站](http://zhanzhang.baidu.com/site/siteadd)然后输入你的站点地址，建议输入的网站为www开头的，不要输入github.io的，因为github是不允许百度的spider爬取github上的内容的，所以如果想让你的站点被百度收录，只能使用自己购买的域名\n![百度站长添加网站](http://img.blog.csdn.net/20170504172333359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在选择完网站的类型之后需要验证网站的所有权，验证网站所有权的方式有三种：文件验证。html标签验证和cname解析验证，使用哪一种方式都可以，都是比较简单的，**但是一定要注意，使用文件验证文件存放的位置需要放在source文件夹下，如果是html文件那么hexo就会将其编译，所以必须要加上的`layout:false`，这样就不会被hexo编译。（如果验证文件是txt格式的就不需要）**，其他两种方式也是很简单的，我个人推荐文件验证和cname验证，cname验证最为简单，只需加一条解析就好~\n![验证网站所有权](http://img.blog.csdn.net/20170504175857203?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 生成网站地图\n我们需要使用npm自动生成网站的sitemap，然后将生成的sitemap提交到百度和其他搜索引擎\n#### 安装sitemap插件\n```\nnpm install hexo-generator-sitemap --save     \nnpm install hexo-generator-baidu-sitemap --save\n```\n#### 修改博客配置文件\n在根目录配置文件中修改url为你的站点地址\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n**执行完之后就会在网站根目录生成sitemap.xml文件和baidusitemap.xml文件**，可以通过http://www.cherryblog.site/baidusitemap.xml,查看该文件是否生成，其中sitemap.xml文件是搜索引擎通用的文件，baidusitemap.xml是百度专用的sitemap文件。\n### 向百度提交链接\n然后我们就可以将我们生成的sitemap文件提交给百度，还是在百度站长平台，找到链接提交，这里我们可以看到有两种提交方式，自动提交和手动提交，自动提交又分为主动推送、自动推送和sitemap\n> 如何选择链接提交方式\n> 1、主动推送：最为快速的提交方式，推荐您将站点当天新产出链接立即通过此方式推送给百度，以保证新链接可以及时被百度收录。\n> 2、自动推送：最为便捷的提交方式，请将自动推送的JS代码部署在站点的每一个页面源代码中，部署代码的页面在每次被浏览时，链接会被自动推送给百度。可以与主动推送配合使用。\n> 3、sitemap：您可以定期将网站链接放到sitemap中，然后将sitemap提交给百度。百度会周期性的抓取检查您提交的sitemap，对其中的链接进行处理，但收录速度慢于主动推送。\n> 4、手动提交：一次性提交链接给百度，可以使用此种方式。\n\n一般主动提交比手动提交效果好，这里介绍主动提交的三种方法\n从效率上来说：\n> **主动推送>自动推送>sitemap**\n\n![连接提交](http://img.blog.csdn.net/20170504205614072?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 主动推送\n安装插件`npm install hexo-baidu-url-submit --save`\n然后再根目录的配置文件中新增字段\n```\nbaidu_url_submit:\n  count: 100 # 提交最新的一个链接\n  host: www.cherryblog.site # 在百度站长平台中注册的域名\n  token: 8OGYpxowYnhgVsUM # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!\n  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里\n```\n在加入新的deploye\n```\ndeploy:\n - type:baidu_url_submitter\n```\n 这样执行`hexo deploy`的时候，新的链接就会被推送了\n#### 设置自动推送\n在主题配置文件下设置,将baidu_push设置为true：\n```\n# Enable baidu push so that the blog will push the url to baidu automatically which is very helpful for SEO\nbaidu_push: true\n```\n然后就会将一下代码自动推送到百度，位置是themes\\next\\layout\\_scripts\\baidu_push.swig,这样每次访问博客中的页面就会自动向百度提交sitemap\n```\n{% if theme.baidu_push %}\n<script>\n(function(){\n    var bp = document.createElement('script');\n    var curProtocol = window.location.protocol.split(':')[0];\n    if (curProtocol === 'https') {\n        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';        \n    }\n    else {\n        bp.src = 'http://push.zhanzhang.baidu.com/push.js';\n    }\n    var s = document.getElementsByTagName(\"script\")[0];\n    s.parentNode.insertBefore(bp, s);\n})();\n</script>\n{% endif %}\n```\n#### sitemap\n将我们上一步生成的sitemap文件提交到百度就可以了~\n![将sitemap提交到百度](http://img.blog.csdn.net/20170504211420159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我记得被百度收录过程还是蛮久的，一度让我以为我的方法有问题，提交链接在站长工具中有显示大概是有两天的时候，站点被百度收录大概花了半个月= =，让大家看一下现在的成果\n在百度搜索`site:cherryblog.site`已经可以搜索到结果\n![站点已被百度收录](http://img.blog.csdn.net/20170504212208725?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在搜索框输入域名也可以找到站点\n![站点已被百度收录](http://img.blog.csdn.net/20170504212800850?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n输入关键字的名字也可以在第二页就找到呢，好开森~\n![站点已被百度收录](http://img.blog.csdn.net/20170504213218169?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让google收录你的站点\n相比于百度，google的效率实在不能更快，貌似十分钟左右站点就被收录了，其实方法是和百度是一样的，都是先验证你的站点所有权，然后提交sitemap\ngoogle站点平台：https://www.google.com/webmasters/，然后就是注册账号、验证站点、提交sitemap，一步一步来就好，过不了过久就可以被google收录了\n![站点已被google收录](http://img.blog.csdn.net/20170504221124520?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221145864?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![站点已被google收录](http://img.blog.csdn.net/20170504221202442?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 让其他搜索引擎收录你的站点\n除了百度和google两大搜索引擎，还有搜狗、360等其他的搜索引擎，流程都是一样的\n ，大家就自行选择添加哈，这里就不再赘述了~\n## 优化你的url\nseo搜索引擎优化认为，网站的最佳结构是**用户从首页点击三次就可以到达任何一个页面**，但是我们使用hexo编译的站点打开文章的url是：sitename/year/mounth/day/title四层的结构，这样的url结构很不利于seo，爬虫就会经常爬不到我们的文章，于是，我们可以将url直接改成sitename/title的形式，并且title最好是用英文，在根目录的配置文件下修改permalink如下：\n```\nurl: http://cherryblog.site\nroot: /\npermalink: :title.html\npermalink_defaults:\n```\n## 其他seo优化\nseo优化应该说是一个收益延迟的行为，可能你做的优化短期内看不到什么效果，但是一定要坚持，seo优化也是有很深的可以研究的东西，从我们最初的网站设计，和最基础的标签的选择都有很大的关系，网站设计就如我们刚刚说的，要让用户点击三次可以到达网站的任何一个页面，要增加高质量的外链，增加相关推荐（比如说我们经常见到右侧本站的最高阅读的排名列表），然后就是给每一个页面加上keyword和描述\n在代码中，我们应该写出能让浏览器识别的语义化HTML，这样有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重；并且对外链设置nofollow标签，避免spider爬着爬着就爬出去了（减少网站的跳出率），并且我们要尽量在一些比较大的网站增加我们站点的曝光率，因为spider会经常访问大站，比如我们在掘金等技术社区发表文章中带有我们的站点，这样spider是很有可能爬到我们中的站点的，so....\n - 网站**外链**的推广度、数量和质量\n - 网站的**内链**足够强大\n - 网站的**原创**质量\n - 网站的**年龄**时间\n - 网站的**更新频率**（更新次数越多越好）\n - 网站的**服务器**\n - 网站的**流量**：流量越高网站的权重越高\n - 网站的**关键词排名**：关键词排名越靠前，网站的权重越高\n - 网站的**收录**数量：网站百度收录数量越多，网站百度权重越高\n - 网站的浏览量及深度：**用户体验**越好，网站的百度权重越高\n# 同时托管到github和coding上\n前面已经提到过一个惨绝人寰的消息，那就是github是不允许百度的爬虫爬取内容的，所以我们的项目如果是托管在github上的话基本是不会被百度收录的，所以我又同时托管到了coding上，然后在做解析的时候海外的ip 指向到github，国内的或者说百度的直接指向coding\n## 将你的项目托管在coding上\n![coding](http://img.blog.csdn.net/20170506111627464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> Coding 是一个面向开发者的云端开发平台[1]  ，目前提供代码托管，运行空间，质量控制，项目管理等功能。此外，还提供社会化协作功能，包含了社交元素，方便开发者进行技术讨论和协作。\n> 2016年3月CODING宣布收购代码托管平台GitCafe。\n\n之前好多小伙伴都是将项目托管在gitcafe上，但是现在gitcafe被coding收购了，于是就转到coding上了，之前好多人说github的服务器在国外，于是就转战国内的coding了，我将代码迁移至coding还有另外一个原因，github不让百度的爬虫爬取啊，让我哭一会，不然也不会这样折腾。coding就是中国版的github（只是打一个比喻），有提供pages服务。\n### 在coding上创建仓库\n首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，私有项目是没有page服务的，项目名称可以随意起\n![创建coding项目](http://img.blog.csdn.net/20170506114106649?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 将hexo博客同步到新创建的仓库中\n第一次使用coding需要使用ssh，方法和之前github是一样一样的，将ssh公钥复制到coding上\n![自己的ssh公钥](http://img.blog.csdn.net/20170506114846918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![coding中贴入ssh](http://img.blog.csdn.net/20170506114917277?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n在coding中添加过ssh公钥之后我们需要修改hexo根目录下的配置文件,官方要求配置格式如下\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n    gitcafe: <repository url>,[branch] \n```\n所以我的配置就是这样的(我这个配置github和coding都有ssh和https两种方式)：\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repo:\n    #github: git@github.com:sunshine940326/sunshine940326.github.io.git\n    github: https://github.com/sunshine940326/sunshine940326.github.io.git\n    coding: git@git.coding.net:cherry940326/cherry940326.git\n    #coding: https://git.coding.net/cherry940326/cherry940326.git\n```\n完成之后在git bash 中输入\n```\nssh -T git@git.coding.net\n```\n如果得到如图提示就说明配置成功了\n![配置成功ssh](http://img.blog.csdn.net/20170506120449863?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后重新部署hexo就将代码上传至coding上了\n### 设置coding的pages服务\n将代码上传至coding之后我们就要开启pages服务了，在pages页面我们只需要将部署来源选择为master分支，然后将自定义域名填写我们自己购买的域名就可以了\n![找到pages](http://img.blog.csdn.net/20170506121132351?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n![配置pages](http://img.blog.csdn.net/20170506120956994?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 设置域名解析\n然后我们到万网下面设置我们的域名解析，将默认ip解析到coding上（这里要注意，解析到coding时记录值是pages.coding.me，并没有具体的账号名或者仓库名，并且只有设置完成域名解析才可以在coding上设置自定义域名），将海外的ip解析到github上，设置如下：\n![域名解析](http://img.blog.csdn.net/20170506122622186?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n----------\n至此就完成了将你的hexo编译的博客同时部署在github和coding上\n# 多终端编辑hexo博客\n之前就想到了一个问题，如果我想要在公司写博客怎么办，或者说如果我换电脑了怎么办，因为在github中的我们github.io项目是只有编译后的文件的，没有源文件的，也就是说，如果我们的电脑坏了，打不开了，我们的博客就不能进行更新了，所以我们要把我们的源文件也上传到github上，这道题的解题思路（哈哈，突然想到这个词了）是，将我们的源文件上传至username.github.io的Hexo分支，并且设置为默认分支（分支需要自己创建），然后对我们的源文件进行版本管理，这样我们就可以在另一台电脑上pull我们的源码，然后编译完之后push上去。\n> 更为优雅的方式是使用travis-ci，然后用webhook自动部署。你只需要写markdown，push到github就行了。根本不用关心deploy，只要维护你的markdown就行。详情请参考：http://blog.bigruan.com/2015-03-09-Continuous-Integration-Your-Hexo-Blog-With-TravisCI/\n## 创建Hexo分支\n创建两个分支：master 与 Hexo,并将Hexo设置为默认分支（这个Hexo分支就是存放我们源文件的分支，我们只需要更新Hexo分支上的内容据就好，master上的分支hexo编译的时候会更新的）\n## 删除文件夹内原有的.git缓存文件夹并编辑.gitignore文件\n因为有些主题是从git上clone过来的，所以我们要先删除.git缓存文件，否则会和blog仓库冲突（.git默认是隐藏文件夹，需要先开启显示隐藏文件夹。**.git文件夹被删除后整个文件对应的git仓库状态也会被清空**)\n.gitignore文件作用是声明不被git记录的文件，blog根目录下的.gitignore是hexo初始化带来的，可以先删除或者直接编辑，对hexo不会有影响。建议.gitignore内添加以下内容：\n```\n/.deploy_git\n/public  \n/_config.yml\n\n```\n> .deploy_git是hexo默认的.git配置文件夹，不需要同步\npublic内文件是根据source文件夹内容自动生成，不需要备份，不然每次改动内容太多\n即使是私有仓库，除去在线服务商员工可以看到的风险外，还有云服务商被攻击造成泄漏等可能，所以不建议将配置文件传上去 \n## 初始化仓库\n然后我们再初始化仓库，重新对我们的代码进行版本控制\n```\ngit init\ngit remote add origin <server>\n```\n`<server>`是指在线仓库的地址。origin是本地分支,remote add操作会将本地仓库映射到云端\n## 将博客源文件上传至Hexo分支\n依次执行\n```\ngit add .\ngit commit -m \"...\"\ngit push origin hexo\n```\n提交网站相关的文件； \n## 对B电脑进行的操作\n假设B电脑现在没有我们的源文件\n```\ngit init\ngit remote add origin <server> #将本地文件和云端仓库映射起来。\ngit fetch --all\ngit reset --hard origin/master\n```\n## 日常改动\n平时我们对源文件有修改的时候记得先pull一遍代码，再将代码push到Hexo分支，就和日常的使用git一样~\n1. 依次执行git add .、git commit -m \"...\"、git push origin Hexo指令将改动推送到GitHub（此时当前分支应为Hexo）；\n2. 然后才执行hexo g -d发布网站到master分支上。\n# 使用gulp压缩你的代码\n当你在你的博客页面右键查看源代码的时候，你会发现你的html页面中会有大段大段的空白，这个时候我们就要使用压缩工具对我们的代码进行压缩，在前一段时间参见的前端开发者大会（FDCon2017）中，携程的框架式就有讲到，在携程，线上的资源是需要申请的（单位具体到k），所以说我们的代码不压缩实在是太奢侈~\n## 什么是gulp\n在2017年的前端中，gulp似乎不是最流行的自动化工具，但是谁让我们公司用的是gulp呢。为了能和公司用一样的构建工具，所以我自己的博客也是使用的gulp。\ngulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器。不仅能对网站的资源进行优化，并且能在开发过程中能够对很多重复的任务使其自动完成。\n> 能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。\n\n既然gulp是基于node，所以我们就要先有node环境，不过我们本身就是使用hexo构建我们的博客，就已经是基于node环境了~\n\n### npm小知识\nnpm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）\n####使用npm安装插件：`npm install <name> [g] [--save -dev]`\n\n - `<name>`:node 插件名称\n - `-g`:全局安装，会在node安装的根目录下载对应的包，在计算机的任何文件都可以使用该插件，默认的node安装目录是：`C:\\Users\\Administrator\\AppData\\Roaming\\npm`;如果不带该属性，将会安装在当前目录，下载安装包的位置是当前目录的`node_modules`文件夹\n - `--save`：将配置信息保存在node项目配置文件`package.json`中\n - `-dev`：保存至`package.json` 的devDependencies节点，如果没有该属性，该插件将会被保存至dependencies节点，devDependencies和dependencies有什么区别呢？其实从名字就应该可以看出来两者的区别，devDependencies中dev是development（开发）的缩写，dependencies是依赖的意思。所以 dependencies 是程序正常运行所需要安装的依赖，而devDependencies是开发所需要的依赖，比如一些单元测试的包~\n -  为什么要保存至package.json？因为我们使用node的时候需要很多的包，所以我们将我们的配置信息，也就是我们需要包的名称等其他信息保存至一个文件中，如果说其他开发者就可以直接使用一个命令就可以安装和我们相同的配置，这个命令就是`npm install`，就可以下载`package.json` 下所有需要的包。`npm install --production`则只下载dependencies下的包\n####  使用npm卸载插件：`npm unstall <name> [-g] [--save-dev]`\n -  在npm中要卸载插件不是将文件夹删除就可以了，因为你的配置信息还在package中，所以要使用`npm unstall <name> [-g] [--save-dev]` 命令\n -  删除全部插件:`rimraf node_modules `（首先你需要先安装rimraf 插件）\n#### 更新npm插件：`npm update <name> [g] [--save-dev]`\n### 使用cnpm\n什么是cnpm呢，大家都知道，由于不可描述原因，我们访问国外的资源有时候的速度，大家懂的，所以淘宝除了一个npm镜像，服务器就在中国。c可以理解为China（应该可以这样理解吧）,cnpm使用方法和npm完全相同，只需将npm全部换成cnpm就可以。本文都是使用的npm，如果想要尝试cnpmde的麻烦自行替换~\n> 这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。\n\ncnpm 官网地址：http://npm.taobao.org；\n安装命令为`npm install cnpm -g --registry=https://registry.npm.taobao.org`\n> 注意：安装完后最好查看其版本号`cnpm -v`或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；\n## 全局安装gulp\n言归正传，简单介绍了gulp和npm，我们需要的是使用gulp压缩我们的代码\n`npm install gulp -g`,然后`npm -v` 查看版本号就可以知道我们是不是安装成功了~*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！\n## 新建package.json\n使用`npm init`就可以创建package.json文件\n![创建package.json文件](http://img.blog.csdn.net/20170502214954885?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)，然后输入yes之后你就会在文件夹中找到创建好的package.json文件。来贴一下我现在的package.json文件，已经是安装了不少包的了~\n```\n{\n  \"name\": \"hexo-site\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"hexo\": {\n    \"version\": \"3.2.2\"\n  },\n  \"dependencies\": {\n    \"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n    \"hexo\": \"^3.2.0\",\n    \"hexo-baidu-url-submit\": \"0.0.5\",\n    \"hexo-deployer-git\": \"^0.2.0\",\n    \"hexo-generator-archive\": \"^0.1.4\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\",\n    \"hexo-generator-category\": \"^0.1.3\",\n    \"hexo-generator-index\": \"^0.2.0\",\n    \"hexo-generator-sitemap\": \"^1.1.2\",\n    \"hexo-generator-tag\": \"^0.2.0\",\n    \"hexo-renderer-ejs\": \"^0.2.0\",\n    \"hexo-renderer-marked\": \"^0.2.10\",\n    \"hexo-renderer-stylus\": \"^0.3.1\",\n    \"hexo-server\": \"^0.2.0\",\n    \"hexo-util\": \"^0.6.0\",\n    \"hexo-wordcount\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"gulp-babel\": \"^6.1.2\",\n    \"gulp-clean\": \"^0.3.2\",\n    \"hexo-generator-baidu-sitemap\": \"^0.1.2\"\n  }\n}\n```\n## 本地安装gulp插件\n在你的Hexo目录下右键`git bash here`然后执行`npm install <name> --save`,和gulp有关的包名称有以下几个，只需将`<name>`替换一下就好~\n```\n\"gulp\": \"^3.9.1\",\n    \"gulp-htmlclean\": \"^2.7.14\",\n    \"gulp-htmlmin\": \"^3.0.0\",\n    \"gulp-imagemin\": \"^3.2.0\",\n    \"gulp-minify-css\": \"^1.2.4\",\n    \"gulp-uglify\": \"^2.1.2\",\n```\n聪明的你是不是觉得有些眼熟，对的，就是我po出来的package.json中`dependencies`下面对应的包名称和版本号~是不是和刚刚所讲的npm的知识联系到了一块呢~\n## 建立gulp.js\ngulp.js是gulp的配置文件，需要我们手动创建（应该还会有更高级的方法T T ）\n我的gulp.js文件如下\n```\nvar gulp = require('gulp');\nvar minifycss = require('gulp-minify-css');\nvar uglify = require('gulp-uglify');\nvar htmlmin = require('gulp-htmlmin');\nvar htmlclean = require('gulp-htmlclean');\n\n// 获取 gulp-imagemin 模块\nvar imagemin = require('gulp-imagemin')\n\n// 压缩 public 目录 css\ngulp.task('minify-css', function() {\n    return gulp.src('./public/**/*.css')\n        .pipe(minifycss())\n        .pipe(gulp.dest('./public'));\n});\n// 压缩 public 目录 html\ngulp.task('minify-html', function() {\n    return gulp.src('./public/**/*.html')\n        .pipe(htmlclean())\n        .pipe(htmlmin({\n            removeComments: true,  //清除HTML注释\n            collapseWhitespace: true,  //压缩HTML\n            collapseBooleanAttributes: true,  //省略布尔属性的值 <input checked=\"true\"/> ==> <input checked />\n            removeEmptyAttributes: true,  //删除所有空格作属性值 <input id=\"\" /> ==> <input />\n            removeScriptTypeAttributes: true,  //删除<script>的type=\"text/javascript\"\n            removeStyleLinkTypeAttributes: true,  //删除<style>和<link>的type=\"text/css\"\n            minifyJS: true,  //压缩页面JS\n            minifyCSS: true  //压缩页面CSS\n        }))\n        .on('error', function(err) {\n            console.log('html Error!', err.message);\n            this.end();\n        })\n        .pipe(gulp.dest('./public'))\n});\n// 压缩 public/js 目录 js\ngulp.task('minify-js', function() {\n    return gulp.src('./public/**/*.js')\n        .pipe(uglify())\n        .pipe(gulp.dest('./public'));\n});\n\n\n// 压缩图片任务\n// 在命令行输入 gulp images 启动此任务\ngulp.task('images', function () {\n    // 1. 找到图片\n    gulp.src('./photos/*.*')\n    // 2. 压缩图片\n        .pipe(imagemin({\n            progressive: true\n        }))\n        // 3. 另存图片\n        .pipe(gulp.dest('dist/images'))\n});\n\n// 执行 gulp 命令时执行的任务\ngulp.task('build', [\n    'minify-html','minify-css','minify-js','images',\n]);\n```\n## 执行gulp：`gulp build`\n![gulpbuild执行结果](http://img.blog.csdn.net/20170503180052628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 在git bash中执行\n在git bash中直接输入命令`gulp build`就可以，这个`gulp build`是你自己创建的任务，你创建的任务是什么名的就在gulp后面跟什么名字\n### 在webstorm中执行\nwebstorm真的太强大，已经帮我们继承了gulp，我们只需要动动鼠标就可以执行gulp\n![在webstorm中执行gulp](http://img.blog.csdn.net/20170502222748614?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 增加七牛图床\n增加七牛图床就是要将我们电脑上的图片上传至七牛，然后获得外链，在我们使用md写博客的时候直接插入外链，更方便的是可以直接获取带水印、压缩、剪裁过后的图片~\n## 注册七牛\n万年不变的第一步，注册。官网：[七牛云](https://portal.qiniu.com/signup?code=3lnd6wvc103f6)\n## 上传资源\n在登录成功之后，点击对象存储\n![上传资源至七牛](http://img.blog.csdn.net/20170503180639396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n上传完图片之后，关闭上传页面，可以在图片列表的最后面有一个眼睛的icon，点击之后就会在右下角找到该图片的外链，在用md写博客的时候就可以直接加入外链就好~也可以对上传的源文件进行重命名，因为大部分我上传到七牛上的图片都是相册中使用的，所以我将源文件的名字都改成统一的形式，在引用的时候只需要修改最后的数字就可以~\n![上传资源至七牛](http://img.blog.csdn.net/20170504121228530?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### 添加水印\n使用七牛图床最棒的地方在于可以对图片进行处理，我就只拿添加水印来举例。\n七牛可以对上传的图片添加图片样式\n![增加图片样式](http://img.blog.csdn.net/20170504164007175?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n增加图片样式就是对图片进行处理，这里的处理方式有很多，比如缩放方式、裁剪、增加图片水印、设置输出格式。\n![增加图片样式](http://img.blog.csdn.net/20170504164411602?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在设置了图片样式之后我们要怎么使用呢，开始我也是一脸懵逼的，不知道怎么使用，百度之后才知道，你直接访问获取的外链就是你上传的原图，在外链的后面加上连接符和你的样式名称访问的就是经过处理后的图片，有没有很赞~既可以访问到你的原图片，也可以访问到经过处理后的图片，只不过是连接不同，还可以给一个图片增加多个样式访问，就不需要我们一张一张对图片进行处理了~简直不能太赞~(～￣▽￣)～比如:我的原图地址是：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg，可以看到是一张很大的不带水印的图片\n![这里写图片描述](http://img.blog.csdn.net/20170504165826626?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在该地址后加上我设置的连接符,\"-\"和我的样式名称：http://oova2i5xh.bkt.clouddn.com/IMG49.jpg-cherryblogImg，就可以看到是一张带水印的小图，我进行了缩放和加水印\n![这里写图片描述](http://img.blog.csdn.net/20170504170056689?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n  ","slug":"hexo-3","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqin002daaxi8flbp2bm"},{"title":"html5canvas教你实现知乎登录动态粒子背景","date":"2017-05-24T05:24:51.000Z","_content":"![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客：http://cherryblog.site/\n> github项目地址：https://github.com/sunshine940326/canvas-nest\n\n\n首先上效果图：\n![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n实现起来也是很简单的， 按照我的步骤一步一步来就可以了~\n# html代码\n首先要制作我们的页面，用到的是html5的新标签canvas；其实canvas就是我们需要用javascript脚本语言来绘图的“画布”，只是相当于一个容器呈现我们画图的结果，所以我们在页面中需要创建一个充满屏幕的canvas\n```\n<body>\n   <canvas id=\"canvas\"></canvas>\n   <div class=\"text\">仿知乎动态粒子效果背景</div>\n</body>\n```\n是的，`body`中只有这两行代码就可以了，甚至可以只有一行代码\n# css样式\ncss样式也没有什么好说的，只是要让canvas充满屏幕就可以了\n```\nhtml{height: 100%}\n        body{margin: 0;height: 100%;\n            background: #fff;}\n        canvas{display: block;width: 100%;height: 100%;}\n        .text{\n            width: 100%;\n            background: transparent;\n            display: flex;\n            justify-content: center;\n            height: 100%;\n            line-height: 100%;\n            top: 0;\n            position: absolute;\n            top: 50%;\n            font-size: 50px;\n        }\n```\n写法不唯一，只要要你的canvas是充满整个屏幕的就好，当然，你要是不需要充满屏幕也可以~\n# js代码\n说完了html和css，那么就剩js了，主要是通过js脚本来创建每个线段和粒子的~github上的例子中使用的是es6编写的，不过在demo中也使用了gulp安装babel可以将es6代码转化为es5（所以索demo中同时有es6的代码也有es5的代码，大家按需下载~）主要的思路如下\n\n 1. 设置单个粒子的随机x，y坐标和圆圈的半径\n 2. 使用canvas的api进行绘制粒子（圆圈）和粒子之前连线，设置一个范围，在此范围内的粒子圆心到圆心通过直线连接\n 3. 让粒子在屏幕范围内移动\n 4. 设置鼠标的交互事件，相当于以鼠标位置的x,y坐标为圆心，固定或随机值为半径重新创建了一个粒子，并且也在一定范围内也设置和其他粒子的连线（同第二步）\n 其实思路就以上五点，只不过我们需要了解canvas的api才能绘出我们想要的结果\n \n##  设置单个粒子的随机x，y坐标和圆圈的半径\n```\n//创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n```\n\n## canvas 画圆和画直线\n\n```\n{  //canvas 画圆和画直线\n   //画圆就是正常的用canvas画一个圆\n   //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n   drawCircle(ctx) {\n      // beginPath() 方法开始一条路径，或重置当前的路径\n     ctx.beginPath();   \n     //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n     ctx.arc(this.x, this.y, this.r, 0, 360)\n     //closePath() 方法创建从当前点到开始点的路径。\n     ctx.closePath();\n     //fillStyle()方法设置或返回用于填充绘画的颜色、渐变或模式。\n     ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n     //fill()方法\t填充当前绘图（路径）\n     ctx.fill();\n   }\n\n   drawLine(ctx, _circle) {\n      let dx = this.x - _circle.x;\n      let dy = this.y - _circle.y;\n      let d = Math.sqrt(dx * dx + dy * dy)\n      //设置粒子圆心之间连线的范围为150\n      if (d < 150) {\n         ctx.beginPath();\n         //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n         ctx.moveTo(this.x, this.y);   //起始点\n         ctx.lineTo(_circle.x, _circle.y);   //终点\n         ctx.closePath();\n         ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n          ctx.stroke();\n   }\n}\n``` \n\n## 粒子移动\n\n```\n{\n    // 粒子移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n    \n   \n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n```\n\n## 完整js\n\n```\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n }\n //鼠标点画圆闪烁变动\n class currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.6)'\n        ctx.fill();\n\n    }\n }\n //更新页面用requestAnimationFrame替代setTimeout\n window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n let canvas = document.getElementById('canvas');\n let ctx = canvas.getContext('2d');\n let w = canvas.width = canvas.offsetWidth;\n let h = canvas.height = canvas.offsetHeight;\n let circles = [];\n let current_circle = new currentCirle(0, 0)\n\n let draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n }\n\n let init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n }\n window.addEventListener('load', init(60));\n window.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n }\n window.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n};\n```\n\n\n# 更多canvas的api\ncanvas现在可以写出很多酷炫的效果，详细的api请见：http://www.runoob.com/jsref/dom-obj-canvas.html\n \n \n  \n","source":"_posts/html5zhihubg.md","raw":"---\ntitle: html5canvas教你实现知乎登录动态粒子背景\ndate: 2017-05-24 13:24:51\ntags: [html5,前端,canvas] \ncategories: [html5,canvas]\n---\n![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n<!--more-->\n> 本文首发于我的个人博客：http://cherryblog.site/\n> github项目地址：https://github.com/sunshine940326/canvas-nest\n\n\n首先上效果图：\n![最终效果图](http://img.blog.csdn.net/20170525212539678?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n实现起来也是很简单的， 按照我的步骤一步一步来就可以了~\n# html代码\n首先要制作我们的页面，用到的是html5的新标签canvas；其实canvas就是我们需要用javascript脚本语言来绘图的“画布”，只是相当于一个容器呈现我们画图的结果，所以我们在页面中需要创建一个充满屏幕的canvas\n```\n<body>\n   <canvas id=\"canvas\"></canvas>\n   <div class=\"text\">仿知乎动态粒子效果背景</div>\n</body>\n```\n是的，`body`中只有这两行代码就可以了，甚至可以只有一行代码\n# css样式\ncss样式也没有什么好说的，只是要让canvas充满屏幕就可以了\n```\nhtml{height: 100%}\n        body{margin: 0;height: 100%;\n            background: #fff;}\n        canvas{display: block;width: 100%;height: 100%;}\n        .text{\n            width: 100%;\n            background: transparent;\n            display: flex;\n            justify-content: center;\n            height: 100%;\n            line-height: 100%;\n            top: 0;\n            position: absolute;\n            top: 50%;\n            font-size: 50px;\n        }\n```\n写法不唯一，只要要你的canvas是充满整个屏幕的就好，当然，你要是不需要充满屏幕也可以~\n# js代码\n说完了html和css，那么就剩js了，主要是通过js脚本来创建每个线段和粒子的~github上的例子中使用的是es6编写的，不过在demo中也使用了gulp安装babel可以将es6代码转化为es5（所以索demo中同时有es6的代码也有es5的代码，大家按需下载~）主要的思路如下\n\n 1. 设置单个粒子的随机x，y坐标和圆圈的半径\n 2. 使用canvas的api进行绘制粒子（圆圈）和粒子之前连线，设置一个范围，在此范围内的粒子圆心到圆心通过直线连接\n 3. 让粒子在屏幕范围内移动\n 4. 设置鼠标的交互事件，相当于以鼠标位置的x,y坐标为圆心，固定或随机值为半径重新创建了一个粒子，并且也在一定范围内也设置和其他粒子的连线（同第二步）\n 其实思路就以上五点，只不过我们需要了解canvas的api才能绘出我们想要的结果\n \n##  设置单个粒子的随机x，y坐标和圆圈的半径\n```\n//创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n```\n\n## canvas 画圆和画直线\n\n```\n{  //canvas 画圆和画直线\n   //画圆就是正常的用canvas画一个圆\n   //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n   drawCircle(ctx) {\n      // beginPath() 方法开始一条路径，或重置当前的路径\n     ctx.beginPath();   \n     //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n     ctx.arc(this.x, this.y, this.r, 0, 360)\n     //closePath() 方法创建从当前点到开始点的路径。\n     ctx.closePath();\n     //fillStyle()方法设置或返回用于填充绘画的颜色、渐变或模式。\n     ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n     //fill()方法\t填充当前绘图（路径）\n     ctx.fill();\n   }\n\n   drawLine(ctx, _circle) {\n      let dx = this.x - _circle.x;\n      let dy = this.y - _circle.y;\n      let d = Math.sqrt(dx * dx + dy * dy)\n      //设置粒子圆心之间连线的范围为150\n      if (d < 150) {\n         ctx.beginPath();\n         //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n         ctx.moveTo(this.x, this.y);   //起始点\n         ctx.lineTo(_circle.x, _circle.y);   //终点\n         ctx.closePath();\n         ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n          ctx.stroke();\n   }\n}\n``` \n\n## 粒子移动\n\n```\n{\n    // 粒子移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n    \n   \n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n```\n\n## 完整js\n\n```\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n }\n //鼠标点画圆闪烁变动\n class currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.6)'\n        ctx.fill();\n\n    }\n }\n //更新页面用requestAnimationFrame替代setTimeout\n window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\n let canvas = document.getElementById('canvas');\n let ctx = canvas.getContext('2d');\n let w = canvas.width = canvas.offsetWidth;\n let h = canvas.height = canvas.offsetHeight;\n let circles = [];\n let current_circle = new currentCirle(0, 0)\n\n let draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n }\n\n let init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n }\n window.addEventListener('load', init(60));\n window.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n }\n window.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n};\n```\n\n\n# 更多canvas的api\ncanvas现在可以写出很多酷炫的效果，详细的api请见：http://www.runoob.com/jsref/dom-obj-canvas.html\n \n \n  \n","slug":"html5zhihubg","published":1,"updated":"2017-07-01T13:44:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj4ldrqio002haaxiq8cjh2ig"}],"PostAsset":[],"PostCategory":[{"post_id":"cj4ldrqg10001aaxiamniy5cv","category_id":"cj4ldrqgg0005aaxi1plp7pke","_id":"cj4ldrqh1000iaaxiut9ah65t"},{"post_id":"cj4ldrqgx000gaaxi1oipynku","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqh9000oaaxi7gq39ei0"},{"post_id":"cj4ldrqg80003aaximxfzy12c","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqhc000saaxixyuqhv47"},{"post_id":"cj4ldrqh2000jaaxi9wnpx3sj","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqhg000vaaxiyi7ku140"},{"post_id":"cj4ldrqh7000naaxil5jx3gk4","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqhr000zaaxitpbnutim"},{"post_id":"cj4ldrqgk0007aaxi7357wpe6","category_id":"cj4ldrqh5000laaxinuvfabek","_id":"cj4ldrqhu0012aaxikkc6raid"},{"post_id":"cj4ldrqgp0009aaxikv2pg9jn","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqhv0015aaximqd3h5ek"},{"post_id":"cj4ldrqgt000baaxi5n0bvqms","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqhy0019aaxiwop0bnpt"},{"post_id":"cj4ldrqhv0016aaxinzz7pg2x","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqi1001daaxiwgc6ibgh"},{"post_id":"cj4ldrqha000paaxihq744tp7","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqi2001gaaxiklvda0er"},{"post_id":"cj4ldrqhx0018aaxiu8rc23ok","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqi4001laaxi8a75c6fw"},{"post_id":"cj4ldrqhd000taaxikjki54l4","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqi7001oaaxi5qs3a8i3"},{"post_id":"cj4ldrqi1001eaaxiotg2s6ur","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqia001taaxiog2l5cre"},{"post_id":"cj4ldrqhp000waaxie00i7pvv","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqic001waaxi1xweac63"},{"post_id":"cj4ldrqi7001qaaxismbb4pg4","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqig0021aaxisnwqpy6w"},{"post_id":"cj4ldrqhs0011aaxicb8lk7jn","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqii0024aaxizbdql246"},{"post_id":"cj4ldrqib001uaaxijrut57r4","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqil0028aaxixhvk706l"},{"post_id":"cj4ldrqhu0013aaxiuvtbpk4c","category_id":"cj4ldrqhv0014aaxinqgmv21s","_id":"cj4ldrqin002caaxiz5tmrzzh"},{"post_id":"cj4ldrqhy001baaxiac5ntug9","category_id":"cj4ldrqii0025aaxiztt84gnj","_id":"cj4ldrqiq002jaaxi8wh4n4ho"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","category_id":"cj4ldrqgv000caaxihxeuiozb","_id":"cj4ldrqir002maaxie2mpzahj"},{"post_id":"cj4ldrqi2001iaaxib7zn40uo","category_id":"cj4ldrqio002eaaxibcffbak4","_id":"cj4ldrqir002oaaxiq3eunc5v"},{"post_id":"cj4ldrqi4001maaxikpmahsue","category_id":"cj4ldrqii0025aaxiztt84gnj","_id":"cj4ldrqit002saaxixvjwg23d"},{"post_id":"cj4ldrqie001yaaxi7r5yhtcn","category_id":"cj4ldrqir002paaxi00kbepuy","_id":"cj4ldrqiu002waaxiku1xc3z4"},{"post_id":"cj4ldrqih0022aaxik00wryg0","category_id":"cj4ldrqit002taaxic80au7ch","_id":"cj4ldrqiw0030aaxijh22ws4m"},{"post_id":"cj4ldrqim002aaaxizydlufmw","category_id":"cj4ldrqiw0032aaxippccz8zd","_id":"cj4ldrqiy0038aaxiuy8lwzxc"},{"post_id":"cj4ldrqii0026aaxiukcop41o","category_id":"cj4ldrqiv002xaaxi66izw14e","_id":"cj4ldrqj0003faaxilhdpsbol"},{"post_id":"cj4ldrqii0026aaxiukcop41o","category_id":"cj4ldrqiy003aaaxi7mvc4yhx","_id":"cj4ldrqj1003iaaxi23dvtoao"},{"post_id":"cj4ldrqio002haaxiq8cjh2ig","category_id":"cj4ldrqiw0032aaxippccz8zd","_id":"cj4ldrqj2003laaxihf0cx58m"},{"post_id":"cj4ldrqio002haaxiq8cjh2ig","category_id":"cj4ldrqiz003caaxin6doskdu","_id":"cj4ldrqj3003naaxi3zxrxzwo"}],"PostTag":[{"post_id":"cj4ldrqg10001aaxiamniy5cv","tag_id":"cj4ldrqgj0006aaxi24w33tuo","_id":"cj4ldrqgx000faaxi4qq4wauy"},{"post_id":"cj4ldrqg80003aaximxfzy12c","tag_id":"cj4ldrqgv000daaxiwjqs5tap","_id":"cj4ldrqhg000uaaxihzg8ygma"},{"post_id":"cj4ldrqg80003aaximxfzy12c","tag_id":"cj4ldrqh6000maaxi490tpuxz","_id":"cj4ldrqhq000xaaxismhups57"},{"post_id":"cj4ldrqgk0007aaxi7357wpe6","tag_id":"cj4ldrqhc000raaxi4rknbpls","_id":"cj4ldrqi2001faaxig9k0ejto"},{"post_id":"cj4ldrqgk0007aaxi7357wpe6","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqi3001jaaxii8rdgymr"},{"post_id":"cj4ldrqgk0007aaxi7357wpe6","tag_id":"cj4ldrqhw0017aaxi4a8bc6oe","_id":"cj4ldrqi6001naaxibut71yht"},{"post_id":"cj4ldrqi1001eaaxiotg2s6ur","tag_id":"cj4ldrqgv000daaxiwjqs5tap","_id":"cj4ldrqi9001raaxierrtk3vc"},{"post_id":"cj4ldrqgp0009aaxikv2pg9jn","tag_id":"cj4ldrqgv000daaxiwjqs5tap","_id":"cj4ldrqic001vaaxiyurj0mdu"},{"post_id":"cj4ldrqgt000baaxi5n0bvqms","tag_id":"cj4ldrqi3001kaaxie6b6nspf","_id":"cj4ldrqif001zaaxio8ki9aad"},{"post_id":"cj4ldrqi7001qaaxismbb4pg4","tag_id":"cj4ldrqgv000daaxiwjqs5tap","_id":"cj4ldrqii0023aaxigs2acq25"},{"post_id":"cj4ldrqib001uaaxijrut57r4","tag_id":"cj4ldrqi3001kaaxie6b6nspf","_id":"cj4ldrqil0027aaxir0jsm335"},{"post_id":"cj4ldrqgx000gaaxi1oipynku","tag_id":"cj4ldrqi3001kaaxie6b6nspf","_id":"cj4ldrqim002baaxivcpalfs4"},{"post_id":"cj4ldrqh2000jaaxi9wnpx3sj","tag_id":"cj4ldrqgv000daaxiwjqs5tap","_id":"cj4ldrqio002faaxixablrw22"},{"post_id":"cj4ldrqh2000jaaxi9wnpx3sj","tag_id":"cj4ldrqig0020aaxiaae6x59p","_id":"cj4ldrqiq002iaaxis0g8teyu"},{"post_id":"cj4ldrqh7000naaxil5jx3gk4","tag_id":"cj4ldrqi3001kaaxie6b6nspf","_id":"cj4ldrqiq002kaaxi2ftrne88"},{"post_id":"cj4ldrqha000paaxihq744tp7","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqit002raaxii3eispw2"},{"post_id":"cj4ldrqha000paaxihq744tp7","tag_id":"cj4ldrqir002naaxi6fd9vao5","_id":"cj4ldrqiu002uaaxix3yunphl"},{"post_id":"cj4ldrqhd000taaxikjki54l4","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqiv002zaaxiti61uabo"},{"post_id":"cj4ldrqhd000taaxikjki54l4","tag_id":"cj4ldrqir002naaxi6fd9vao5","_id":"cj4ldrqiw0031aaxiii9vdfvj"},{"post_id":"cj4ldrqhp000waaxie00i7pvv","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqix0036aaxing37cdaj"},{"post_id":"cj4ldrqhp000waaxie00i7pvv","tag_id":"cj4ldrqir002naaxi6fd9vao5","_id":"cj4ldrqiy0037aaxidkq4irfw"},{"post_id":"cj4ldrqhs0011aaxicb8lk7jn","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqiz003daaxin1eqmamf"},{"post_id":"cj4ldrqhs0011aaxicb8lk7jn","tag_id":"cj4ldrqir002naaxi6fd9vao5","_id":"cj4ldrqj0003eaaxircti7x7u"},{"post_id":"cj4ldrqhu0013aaxiuvtbpk4c","tag_id":"cj4ldrqiz003baaxio58aifue","_id":"cj4ldrqj1003haaxid15j44a2"},{"post_id":"cj4ldrqhu0013aaxiuvtbpk4c","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqj1003jaaxihdvpsr4b"},{"post_id":"cj4ldrqhv0016aaxinzz7pg2x","tag_id":"cj4ldrqiz003baaxio58aifue","_id":"cj4ldrqj2003maaxihibkw0l1"},{"post_id":"cj4ldrqhv0016aaxinzz7pg2x","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqj3003oaaxigeus6p5n"},{"post_id":"cj4ldrqhx0018aaxiu8rc23ok","tag_id":"cj4ldrqiz003baaxio58aifue","_id":"cj4ldrqj3003qaaxi1zo93r15"},{"post_id":"cj4ldrqhx0018aaxiu8rc23ok","tag_id":"cj4ldrqhs0010aaxinn0umh0r","_id":"cj4ldrqj4003raaxipxf4ygrj"},{"post_id":"cj4ldrqhy001baaxiac5ntug9","tag_id":"cj4ldrqj3003paaxixu0d254z","_id":"cj4ldrqj4003taaxi5l9t97oq"},{"post_id":"cj4ldrqi2001iaaxib7zn40uo","tag_id":"cj4ldrqj4003saaxi83yb2t0i","_id":"cj4ldrqj5003vaaxiybnj9zdu"},{"post_id":"cj4ldrqi4001maaxikpmahsue","tag_id":"cj4ldrqj3003paaxixu0d254z","_id":"cj4ldrqj7003xaaxizndiatp6"},{"post_id":"cj4ldrqie001yaaxi7r5yhtcn","tag_id":"cj4ldrqj6003waaxix551j83e","_id":"cj4ldrqja0042aaxi4zj0h9bc"},{"post_id":"cj4ldrqie001yaaxi7r5yhtcn","tag_id":"cj4ldrqj8003yaaxie2uhubf3","_id":"cj4ldrqja0043aaxicsii09f6"},{"post_id":"cj4ldrqie001yaaxi7r5yhtcn","tag_id":"cj4ldrqj8003zaaxix7i2zpju","_id":"cj4ldrqja0045aaxi91lbvzvi"},{"post_id":"cj4ldrqie001yaaxi7r5yhtcn","tag_id":"cj4ldrqj90040aaxi3yq37u9i","_id":"cj4ldrqjb0046aaxib7rjxlmd"},{"post_id":"cj4ldrqih0022aaxik00wryg0","tag_id":"cj4ldrqj90041aaximvf8sr9m","_id":"cj4ldrqjc0048aaxiepj6ohj7"},{"post_id":"cj4ldrqii0026aaxiukcop41o","tag_id":"cj4ldrqj6003waaxix551j83e","_id":"cj4ldrqjd004caaxizo7i7i1z"},{"post_id":"cj4ldrqii0026aaxiukcop41o","tag_id":"cj4ldrqjb0047aaxilct41240","_id":"cj4ldrqjd004daaxi898frkiz"},{"post_id":"cj4ldrqii0026aaxiukcop41o","tag_id":"cj4ldrqjc0049aaxiu4yskwqt","_id":"cj4ldrqje004faaxi0m5cl2fa"},{"post_id":"cj4ldrqii0026aaxiukcop41o","tag_id":"cj4ldrqjd004aaaxi6rmqzlqx","_id":"cj4ldrqje004gaaxi8u5ypwtf"},{"post_id":"cj4ldrqim002aaaxizydlufmw","tag_id":"cj4ldrqjd004baaxirvqcnzf4","_id":"cj4ldrqje004iaaxij7ki5avq"},{"post_id":"cj4ldrqim002aaaxizydlufmw","tag_id":"cj4ldrqje004eaaxiusfjqz06","_id":"cj4ldrqje004jaaxisas1ym2g"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","tag_id":"cj4ldrqje004haaxitwpdhlfu","_id":"cj4ldrqjj004qaaxihovrtqon"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","tag_id":"cj4ldrqje004kaaxi9a2ms4g7","_id":"cj4ldrqjj004raaxikmodpde8"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","tag_id":"cj4ldrqje004laaxignzt3oah","_id":"cj4ldrqjj004taaxiqf1mpqc2"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","tag_id":"cj4ldrqje004maaxiuksght91","_id":"cj4ldrqjj004uaaxibx2fz44u"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","tag_id":"cj4ldrqje004naaxirp9flg5l","_id":"cj4ldrqjj004waaxiz7vnn8dy"},{"post_id":"cj4ldrqin002daaxi8flbp2bm","tag_id":"cj4ldrqjf004oaaxiz0sxfxvf","_id":"cj4ldrqjj004xaaxi2b8dtne7"},{"post_id":"cj4ldrqio002haaxiq8cjh2ig","tag_id":"cj4ldrqjd004baaxirvqcnzf4","_id":"cj4ldrqjj004yaaxi1w6ns51e"},{"post_id":"cj4ldrqio002haaxiq8cjh2ig","tag_id":"cj4ldrqje004eaaxiusfjqz06","_id":"cj4ldrqjj004zaaxicdzmdqc9"},{"post_id":"cj4ldrqio002haaxiq8cjh2ig","tag_id":"cj4ldrqjj004vaaxi4yvyzb33","_id":"cj4ldrqjj0050aaxils1k0q9l"}],"Tag":[{"name":"脑子里的小想法","_id":"cj4ldrqgj0006aaxi24w33tuo"},{"name":"git","_id":"cj4ldrqgv000daaxiwjqs5tap"},{"name":"实战经验","_id":"cj4ldrqh6000maaxi490tpuxz"},{"name":"面试","_id":"cj4ldrqhc000raaxi4rknbpls"},{"name":"js","_id":"cj4ldrqhs0010aaxinn0umh0r"},{"name":"知识点","_id":"cj4ldrqhw0017aaxi4a8bc6oe"},{"name":"hexo","_id":"cj4ldrqi3001kaaxie6b6nspf"},{"name":"hexo教程","_id":"cj4ldrqig0020aaxiaae6x59p"},{"name":"js设计模式","_id":"cj4ldrqir002naaxi6fd9vao5"},{"name":"js模块化","_id":"cj4ldrqiz003baaxio58aifue"},{"name":"react","_id":"cj4ldrqj3003paaxixu0d254z"},{"name":"调试","_id":"cj4ldrqj4003saaxi83yb2t0i"},{"name":"css","_id":"cj4ldrqj6003waaxix551j83e"},{"name":"checkbox优化","_id":"cj4ldrqj8003yaaxie2uhubf3"},{"name":"input优化","_id":"cj4ldrqj8003zaaxix7i2zpju"},{"name":"radio优化","_id":"cj4ldrqj90040aaxi3yq37u9i"},{"name":"gulp","_id":"cj4ldrqj90041aaximvf8sr9m"},{"name":"开发规范","_id":"cj4ldrqjb0047aaxilct41240"},{"name":"js规范","_id":"cj4ldrqjc0049aaxiu4yskwqt"},{"name":"jshint","_id":"cj4ldrqjd004aaaxi6rmqzlqx"},{"name":"html5","_id":"cj4ldrqjd004baaxirvqcnzf4"},{"name":"前端","_id":"cj4ldrqje004eaaxiusfjqz06"},{"name":"hexo高阶教程","_id":"cj4ldrqje004haaxitwpdhlfu"},{"name":"hexo+gulp","_id":"cj4ldrqje004kaaxi9a2ms4g7"},{"name":"hexo+七牛","_id":"cj4ldrqje004laaxignzt3oah"},{"name":"hexo百度收录","_id":"cj4ldrqje004maaxiuksght91"},{"name":"hexo百度统计","_id":"cj4ldrqje004naaxirp9flg5l"},{"name":"hexo seo","_id":"cj4ldrqjf004oaaxiz0sxfxvf"},{"name":"canvas","_id":"cj4ldrqjj004vaaxi4yvyzb33"}]}}