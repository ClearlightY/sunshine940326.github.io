{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/uploads/avatar.png","path":"uploads/avatar.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"a30c042bd030112ab9dfedc56324efb2cf410963","modified":1491660723903},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1491710426969},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1491710426969},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1491710426969},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1491710426969},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1491710426969},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1491710426969},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1491710426969},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1491710426969},{"_id":"themes/next/.travis.yml","hash":"360f38044910e74bf628b0799e19db90718b2cbe","modified":1491710426969},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1491710426969},{"_id":"themes/next/README.en.md","hash":"953873fe2ee79bfc567b16dcdf8f91c1410444f8","modified":1491710426969},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1491710426969},{"_id":"themes/next/_config.yml","hash":"051a2adf00a2250db8809b83ef979b5c0cfc9164","modified":1492228197104},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1491710426969},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1491710426969},{"_id":"themes/next/package.json","hash":"a5c189d4c4e946e936d3b5e29e2d81ddaf03ff96","modified":1491710427039},{"_id":"source/_posts/ErrorReportingInGitUse.md","hash":"3aa9a22b6df0089129a54eb4fabab5d0e5218865","modified":1492011445742},{"_id":"source/_posts/Front-interview.md","hash":"2ad18cf60315e940894155f315b822471e2069f1","modified":1492011445711},{"_id":"source/_posts/Freedom-of-self-discipline.md","hash":"13088affd9aef2e7d09fc48548a2f4a954d39cf9","modified":1488464266271},{"_id":"source/_posts/GitCommands.md","hash":"df1c75a2c81e142cc5ef0a2f1b9a6d898cb460f0","modified":1492011445602},{"_id":"source/_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","hash":"9ecd5f901545c6cfc3e3fef5d5c712fa321ed2f8","modified":1488108833978},{"_id":"source/_posts/Hexo-advanced.md","hash":"106a12ab8d714900befff2e4ec77885d587c7889","modified":1488110919812},{"_id":"source/_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","hash":"5a1685a744d9d5c84fa75ebaac3bb897824b505a","modified":1491753276836},{"_id":"source/_posts/Hexo-insert-music-share-comment-tab-search.md","hash":"b03af38fcbd1cc4370c8e381ea2867531edbafa4","modified":1488110919823},{"_id":"source/_posts/JavaScript-Design-Pattern.md","hash":"353402effdc4eae807b989d19b91a90603004f42","modified":1489673557663},{"_id":"source/_posts/JavaScript-Design-Pattern2modular-mode.md","hash":"54d300ab7470e813f3c147434bab0235d0c43bb7","modified":1490368341530},{"_id":"source/_posts/JavaScript-Design-Pattern3prototype-model.md","hash":"7f193b207d150b1d84a3ebbd7bfce64a12d61a19","modified":1490454392737},{"_id":"source/_posts/JavaScript-Design-Pattern4factory-mode.md","hash":"4f1d1146f4b592b25deb8a4ac4e806273b1cde52","modified":1490536969912},{"_id":"source/_posts/JavaScript-modular-programming2JSmodulardevelopmenthistory.md","hash":"a84b5f3248fad2b75bb6450f815dbe69c8ad13e9","modified":1488986064191},{"_id":"source/_posts/Javascript-modular-programming1module-writing.md","hash":"f6238a0c77bb95aae4d8a9b3ced72f6b25d1c0b0","modified":1488897758175},{"_id":"source/_posts/Javascript-modular-programming3requirejs-use.md","hash":"0c22c075420f6972c10888bcaa61ff8a7cf735a2","modified":1488986125679},{"_id":"source/_posts/Mobile-terminal-debugging-method.md","hash":"2170c55673fc82b807ecb573ada5048216146081","modified":1490799755872},{"_id":"source/_posts/React-first.md","hash":"8bd22082972f38e83286b87b4b92c4650ac93ec0","modified":1488379148188},{"_id":"source/_posts/React2understanding-react-with-examples.md","hash":"52b581265d12b0e10c39fe01ac0bd482c8e1ad26","modified":1488697398027},{"_id":"source/_posts/Upload-project-to-GitHub.md","hash":"904ce2833e7124fae6bfc2231d46fbc2974a377c","modified":1489286805975},{"_id":"source/_posts/Use-Gitpagehexo-to-develop-their-own-blog.md","hash":"afcc31c51ea51eebfefde7b5e82325ac93d5df1b","modified":1491748145901},{"_id":"source/_posts/Use-webstorm-to-connect-GitHub.md","hash":"10eed2d5c35acce9eb2471a9053ec50321a7e349","modified":1489286705477},{"_id":"source/_posts/gulp（一）.md","hash":"2ae07a1c987e9d1edd725ae9cf322ed45c3fb6b3","modified":1490536278406},{"_id":"source/about/index.md","hash":"3d493d8da175bf0e77d1459e2bfef235af7cc001","modified":1474008421917},{"_id":"source/categories/index.md","hash":"df81899864df49910b367b62b02b040e3a8e7a02","modified":1488102819434},{"_id":"source/photo/index.md","hash":"856c1b4599c63b1e7e185d8ea34db32ee7d51772","modified":1491317318181},{"_id":"source/life/index.md","hash":"74154f7c43511056af1198c3c6a3361be0f73f90","modified":1491317448938},{"_id":"source/photos/index.md","hash":"c139863967572b5d5de09249047b8163b859f3eb","modified":1491727633515},{"_id":"source/tags/index.md","hash":"3b6fea7543cb4c08bf5fdcc3ee3fd4ef08ff695c","modified":1488111294159},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1491710426954},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1491710426954},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1491710415679},{"_id":"themes/next/.git/index","hash":"69f164b1c9ffd0bc728080dbc9d3c802cf47b539","modified":1491712805989},{"_id":"themes/next/.git/packed-refs","hash":"537484e655ffd502d04aa6013807b50aaa65cfb3","modified":1491710426923},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1491710426969},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"4de856de657a27f340f245eb491a1f52ceba1735","modified":1491710426969},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1491710426969},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1491710426969},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1491710426985},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1491710426985},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1491710426985},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1491710426985},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1491710426985},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1491710426985},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1491710426985},{"_id":"themes/next/languages/ru.yml","hash":"7e19ee6f8c764a68b0b25a139ca3dc17b68d382e","modified":1491710426985},{"_id":"themes/next/languages/zh-Hans.yml","hash":"99aca65f42244beaafaf78c23073ce9cbef0716f","modified":1491712597700},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1491710426985},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1491710426985},{"_id":"themes/next/layout/_layout.swig","hash":"b7540b893a95d8ac09e53b1c44192a042d543e4a","modified":1492265192036},{"_id":"themes/next/layout/archive.swig","hash":"a1338223ebd1d9a2e1ddff8a961a0da9c3af8e43","modified":1491921662562},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1491710427035},{"_id":"themes/next/layout/index.swig","hash":"bf095df5da3816a361e709cbaac9dd1fdc0637e3","modified":1491920616321},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1491710427037},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1491710427037},{"_id":"themes/next/layout/schedule.swig","hash":"459cd6d9887b7a2ebda9ba3a5585a718904adb02","modified":1491710427038},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1491710427039},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1491710427040},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1491710427041},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1491710427223},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1491710427223},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1491710427223},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427139},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1491710415725},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1491710415741},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1491710415741},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1491710415741},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1491710415741},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1491710415741},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1491710415828},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1491710415828},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1491710415828},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1491710415828},{"_id":"themes/next/.git/logs/HEAD","hash":"cfcb8c60aeaed64370c5d5242cc4a83683fb9f54","modified":1491710426954},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1491710426985},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1491710426985},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"6d40652784585d263c37b8a3723e43e04b926ca7","modified":1491710426985},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"506feb56e9b1091187d2014742f63a17758df933","modified":1491710426985},{"_id":"themes/next/layout/_macro/post.swig","hash":"03cb2a1facb054b8b8c425dffbda5d64b7c1e54b","modified":1492094507458},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1491710426985},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"23793a4ad960ad003791376c2e89f7d419398080","modified":1491732773696},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1491710426985},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5258c03149aa18e9abfeb8de10e435a406d9c924","modified":1491710426985},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7172c6053118b7c291a56a7860128a652ae66b83","modified":1491830669777},{"_id":"themes/next/layout/_partials/head.swig","hash":"376adb0c482242ef8bcad31b93b99cc5c35e92fa","modified":1491710426985},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1491710427001},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1491710427001},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1491710427001},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1491710427001},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1491710427001},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1491710427001},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9de352a32865869e7ed6863db271c46db5853e5a","modified":1492263876351},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1491710427016},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1491710427016},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1491710427016},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1491710427016},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1491710427042},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1491710427043},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1491710427043},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1491710427044},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1491710427045},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1491710427045},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1491710427123},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1491710427139},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1491710427139},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1491710427139},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1491710427139},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1491710427139},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1491710427139},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1491710427139},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1491710427139},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1491710427139},{"_id":"themes/next/source/images/favicon.ico","hash":"a7700b5e6dd284b3eb00168b701b0e4c560fe108","modified":1491831739976},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491710427139},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1491710427139},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1491710427139},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1491710427139},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1491710427139},{"_id":"themes/next/source/uploads/avatar.png","hash":"586b6e0b74ab8e3f13e242cf04398b660427c8fd","modified":1488696976951},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427001},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427001},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427107},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427107},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427107},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427123},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1491710427123},{"_id":"themes/next/.git/objects/ef/e3d25d732e0947e042cd31b2e88a582694eb05","hash":"f91d4cd51403348f8c8920989e7c570b4eb311b7","modified":1491712726608},{"_id":"themes/next/.git/objects/f7/ac168ebb9156a965c38a4518c7b9e70148bf0f","hash":"b0521bdf6ec2d51b1b301ff6d7853fab474d69b3","modified":1491712805973},{"_id":"themes/next/.git/refs/heads/master","hash":"929f0a39f61901b4b7ead241fc06f16e4584928a","modified":1491710426954},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1491710427001},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1491710427001},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b6e4754498b5eeb470e11fd596227552d9070605","modified":1491710427001},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1491710427001},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1491710427001},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1491710427001},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1491710427001},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1491710427001},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1491710427001},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1491710427001},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1491710427001},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1491710427001},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"441f1a1b4e2f652d3b975995bd9d44ff4866f057","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"e9a0590dafde1046356620dd2b81e83b6b3b0936","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1491710427016},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/gentie.swig","hash":"0f38f053841ef77cdce56a84cfbb4dd4c3329486","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"0399bbdc524ba50930cb6f8e2d5628ff682fc612","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5830a52c2a555d3a1f19b67d7bf3d072376cdea9","modified":1491710427016},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"de95ec8920d1660680078451008f8bd69f14d082","modified":1491710427016},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1491710427016},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"4a10634dba16ddf2a3cbd4908dfbc97e9aa45469","modified":1491710427032},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1491710427033},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1491710427034},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"e7895fde466844dc384b11b248d24fe58e6c3b23","modified":1491742760670},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1491710427107},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1491710427107},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1491710427123},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"09534b68bd1a708729b3cfffe17737e3af457757","modified":1491710427123},{"_id":"themes/next/source/css/_variables/base.styl","hash":"5b336489316d5efea069fe8bcea4479b53ec7545","modified":1491710427123},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1491710427139},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1491710427139},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0ec035e20d1f26bf553a79877180ba312bea885c","modified":1491710427139},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1491710427139},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1491710427139},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1491710427139},{"_id":"themes/next/source/js/src/post-details.js","hash":"bfaf52b69aad96566aa21b785973441a2555b4ba","modified":1491710427139},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1491710427139},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1492231812576},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1491710427154},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1491710427154},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1491710427175},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1491710427176},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1491710427177},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1491710427178},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1491710427181},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1491710427182},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1491710427182},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1491710427183},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1491710427183},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1491710427191},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"b070490e0588c4625e84bcd4f847dc6275a97a81","modified":1491710427207},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1491710427191},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1491710427191},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1491710427191},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1491710427207},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1491710427207},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1491710427207},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1491710427207},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1491710427207},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1491710427207},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1491710427207},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1491710427223},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1491710427191},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"cfcb8c60aeaed64370c5d5242cc4a83683fb9f54","modified":1491710426954},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1491710426954},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1491710427016},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1491710427016},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4ba6f2a615693b9b5afc266d9c833697016085fd","modified":1491710427047},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"1dc2ed435e41ca041f43bd9633d5d95139afbb42","modified":1491710427048},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1491710427058},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1491710427059},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1491710427059},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1491710427092},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1491710427107},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"4998bedff9c84a09a294b8ef36ede2e3644d3528","modified":1491710427107},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1491710427107},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1491710427107},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1491710427107},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1491710427107},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1491710427107},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1491710427107},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1491710427107},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1491710427107},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c48d4a561d047b3705924949b3ab7b57bee94ecd","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1491710427123},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1491710427139},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1491710427173},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1491710427174},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1491710427174},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1491710427180},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1491710427180},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1491710427185},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1491710427185},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1491710427187},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1491710427207},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1491710427207},{"_id":"themes/next/.git/objects/pack/pack-d2e689db66e027ccdba615b3076c463c3c28705d.idx","hash":"0c2e04ed21f69df5f0b65a1a241d861428690a3e","modified":1491710425457},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1491710427191},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1491710427191},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1491710427207},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"cfcb8c60aeaed64370c5d5242cc4a83683fb9f54","modified":1491710426954},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1491710427060},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"fcd89ba4f6f48269e5caa73307e8689f41019896","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"61ec8a8481e8b76f2943235256c6d4f89c751c1c","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a497ea244df7dd97d1b961412b56f94cc4031e23","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1491710427076},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c9f76d4f6806ef70fa2160c97afa0a0e0ae5373e","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"e3ad37f2da35e330616a044621ffa50565a20c88","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"cd526e814f9323a79fe835085d64867d34b3715d","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1491710427092},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"6516b70ee9e44f1cf9443412cc31bcccb6cdb684","modified":1491710427107},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"dc944a01dd59f5ed2d44bb22fdb21fc3f455948f","modified":1491710427107},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1491710427123},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1491710427123},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1491710427154},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1491710427170},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1491710427171},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1491710427171},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1491710427172},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1491710427189},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1491710427191},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1491710427191},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1491710427154},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1491710427207},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1491710427191},{"_id":"themes/next/.git/objects/pack/pack-d2e689db66e027ccdba615b3076c463c3c28705d.pack","hash":"63d22546f15f2e1ce9315fc721105f47853da8c3","modified":1491710426232},{"_id":"public/sitemap.xml","hash":"2c4e23ebe8b11aa8e594bdfab1ebf0e3fcbd5f3c","modified":1492265599305},{"_id":"public/about/index.html","hash":"34472a52ad470231ff8ec68b138f8f7659251421","modified":1492265599399},{"_id":"public/categories/index.html","hash":"3217c3a7e2c151f75ccc3ee65d9e761be3bb653d","modified":1492265599399},{"_id":"public/photo/index.html","hash":"9af9c63dce54dc9dfa93efb87e1b3ac9eb1a3a2d","modified":1492265599399},{"_id":"public/life/index.html","hash":"fe6e9cda6bf40b1f63ae6d3260eafcb0d20ef6ef","modified":1492265599399},{"_id":"public/photos/index.html","hash":"40439fa6d60adb97f4c0de9f6b78754d14d3cd7c","modified":1492265599399},{"_id":"public/tags/index.html","hash":"748556fa392ff5710ae727691b7cc11d7c525877","modified":1492265599399},{"_id":"public/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.html","hash":"4f2134bf8218a86c77debcf88bd180dc86eb1af2","modified":1492265599399},{"_id":"public/Mobile-terminal-debugging-method.html","hash":"7268b68743e0f82d8b2209e247b9e4d2d540de0a","modified":1492265599399},{"_id":"public/JavaScript-Design-Pattern4factory-mode.html","hash":"f122f932d3c5210e30bda2d4324e29988884ad31","modified":1492265599399},{"_id":"public/JavaScript-Design-Pattern3prototype-model.html","hash":"dcaa74a3e80e9eea9a5e21052e7095d0ad1b8dde","modified":1492265599399},{"_id":"public/JavaScript-Design-Pattern2modular-mode.html","hash":"b2dcbe4469c1624b1ad04fe34c14008adcef2d86","modified":1492265599414},{"_id":"public/gulp（一）.html","hash":"76ef9c1c3ef79d69cef96c9f05eb41866072c9fc","modified":1492265599414},{"_id":"public/GitCommands.html","hash":"2c6d45a6f31544762cf40372f84981803ab58294","modified":1492265599414},{"_id":"public/JavaScript-Design-Pattern.html","hash":"3f6fed228566fd80435a51665759b8cca532b7c0","modified":1492265599414},{"_id":"public/ErrorReportingInGitUse.html","hash":"96b0c9e6eedc07c7d315909c48d4d222ee203e39","modified":1492265599414},{"_id":"public/Javascript-modular-programming3requirejs-use.html","hash":"0800d908b465ca61407a70a9e1065e42aec42050","modified":1492265599414},{"_id":"public/JavaScript-modular-programming2JSmodulardevelopmenthistory.html","hash":"b61419d1c4015e74ec5520d4e5584e0dc4a62e84","modified":1492265599414},{"_id":"public/Javascript-modular-programming1module-writing.html","hash":"ca5191e6870e18f26a296aae70fe572901bfaa0d","modified":1492265599414},{"_id":"public/Front-interview.html","hash":"c50aacf08e1052dd3e2b3401080c52959a7ec36e","modified":1492265599414},{"_id":"public/Freedom-of-self-discipline.html","hash":"0b641167ee93bacdafc99a8ea33eb17ebadf29ab","modified":1492265599414},{"_id":"public/React2understanding-react-with-examples.html","hash":"5e8a7425cfd084c386a1d52adf59fcddc2d67801","modified":1492265599414},{"_id":"public/React-first.html","hash":"56909946b2f2086642bdf0a0ae9acd7ed57ab32b","modified":1492265599414},{"_id":"public/Hexo-Understand-the-principles-of-githubPages-hexoblog.html","hash":"860c23de23ecc603e89ff4e34c1a3d5f0d53a7b0","modified":1492265599414},{"_id":"public/Upload-project-to-GitHub.html","hash":"c4547c3078fa078a0b9296fa4c1ac1b7b951d59c","modified":1492265599414},{"_id":"public/Use-webstorm-to-connect-GitHub.html","hash":"ccbf282e20de529bc105c7187d55af6313595608","modified":1492265599414},{"_id":"public/Hexo-advanced.html","hash":"aee48f1f00a9c1b46806f37782c1bd8e01f43762","modified":1492265599414},{"_id":"public/Hexo-insert-music-share-comment-tab-search.html","hash":"1d05354f78be99c1c3cc300c8711ba1ccc2e09bd","modified":1492265599414},{"_id":"public/Use-Gitpagehexo-to-develop-their-own-blog.html","hash":"19f06db7efb8c0d31d2c2a814b7cbee61fa7e6bc","modified":1492265599414},{"_id":"public/categories/git/index.html","hash":"6c25cf43e7ecd68b77e14658ec5399ce86c5500c","modified":1492265599414},{"_id":"public/categories/面试题库/index.html","hash":"b3978032a5941d93b050051e27ab42ae49054d3f","modified":1492265599414},{"_id":"public/categories/随笔/index.html","hash":"a16658933673d7416647b94139d217bf4c390bf2","modified":1492265599414},{"_id":"public/categories/js/index.html","hash":"e0c7b3bb61fbf93a397db61d6bb95a2b4469b53a","modified":1492265599414},{"_id":"public/categories/日积月累/index.html","hash":"1e104db1dfc6739ba9e9d791e69fff48eac04feb","modified":1492265599414},{"_id":"public/categories/react/index.html","hash":"b37c7f2acf2eea625f313310f02c8a4083631e98","modified":1492265599414},{"_id":"public/categories/gulp/index.html","hash":"5df5c89e20432ea168ee6414a5bbd9d5e0071118","modified":1492265599414},{"_id":"public/archives/index.html","hash":"65b9021162a007c210f09362d0d51c40ebce56c2","modified":1492265599414},{"_id":"public/archives/page/2/index.html","hash":"9bd08c25294a87b474599da63bb15fbfabce62e8","modified":1492265599414},{"_id":"public/archives/page/3/index.html","hash":"690f737f7c768925c0e6a6a96f1cfdd6ebbce04b","modified":1492265599414},{"_id":"public/archives/2016/index.html","hash":"2f9cb7cde123d4de719793fecab3590d015c07eb","modified":1492265599414},{"_id":"public/archives/2016/09/index.html","hash":"31571ab1a5ab70ec34750c1f451f222f346b84ab","modified":1492265599414},{"_id":"public/archives/2017/index.html","hash":"92610342b1ea297f8aca910910e65539b5b8a4bf","modified":1492265599414},{"_id":"public/archives/2017/page/2/index.html","hash":"547344e0f228b553e7b8910527751171e3863c6c","modified":1492265599414},{"_id":"public/archives/2017/02/index.html","hash":"8e1b3ca1231530c48595fa5cb407bbe3dd9aab3d","modified":1492265599414},{"_id":"public/archives/2017/03/index.html","hash":"96bb358ea05c7f77b7654aeb33a29576acfc8a89","modified":1492265599414},{"_id":"public/archives/2017/03/page/2/index.html","hash":"447013c62e945ae79349c445548db920efd62be4","modified":1492265599414},{"_id":"public/archives/2017/04/index.html","hash":"470d24ca959c61376572746368d58eba02d284d8","modified":1492265599414},{"_id":"public/index.html","hash":"af4ba61328d3cc6e81103999c9da416c5e997fb1","modified":1492265599414},{"_id":"public/page/2/index.html","hash":"305a2ae4b2290db8cb74c5b04ba0043434729c6c","modified":1492265599414},{"_id":"public/page/3/index.html","hash":"86e305f1dc4bad9b954d9e1f2fcd11f03c0f3a96","modified":1492265599414},{"_id":"public/tags/git/index.html","hash":"554b7db94e5cf46d7830518dca124086b54c04d2","modified":1492265599414},{"_id":"public/tags/实战经验/index.html","hash":"04181cc2921f0804210a22653b582e7523a2b614","modified":1492265599414},{"_id":"public/tags/面试/index.html","hash":"8a95ba5922b871392643a890d11640dd5026ca8b","modified":1492265599414},{"_id":"public/tags/js/index.html","hash":"af72fa315bcb1d1403adfae7a810eec0376d382b","modified":1492265599414},{"_id":"public/tags/知识点/index.html","hash":"2ad4a93739fbc57c378d5ec8635dc4be5c755ac7","modified":1492265599414},{"_id":"public/tags/脑子里的小想法/index.html","hash":"4df69980c37522106d3a9788609411f737d70fde","modified":1492265599414},{"_id":"public/tags/hexo/index.html","hash":"3891f4e983036528d91245dc2d43054f37de6790","modified":1492265599414},{"_id":"public/tags/hexo教程/index.html","hash":"989d48d9030f83b6d6dc903bd766c4ee8cb564f8","modified":1492265599414},{"_id":"public/tags/js设计模式/index.html","hash":"f007c40142f98d7d7bc1e6f51e2d913b6c6c6baf","modified":1492265599414},{"_id":"public/tags/js模块化/index.html","hash":"7a85387cd27b8e5db1049315f9f0143e41f3f8ee","modified":1492265599414},{"_id":"public/tags/调试/index.html","hash":"36fa4cdfbd28c1cc23e1647154a474ab86c6bd9c","modified":1492265599414},{"_id":"public/tags/react/index.html","hash":"a5dff10c3a325a90e7abdeb7223e68e6c1fbd234","modified":1492265599414},{"_id":"public/tags/gulp/index.html","hash":"9c241e7375878877d6295b8faaeab368e403a1e1","modified":1492265599414},{"_id":"public/CNAME","hash":"a30c042bd030112ab9dfedc56324efb2cf410963","modified":1492265599461},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1492265599461},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1492265599461},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1492265599461},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1492265599461},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1492265599461},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1492265599461},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1492265599461},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1492265599461},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1492265599461},{"_id":"public/images/favicon.ico","hash":"a7700b5e6dd284b3eb00168b701b0e4c560fe108","modified":1492265599461},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492265599461},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1492265599461},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1492265599461},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1492265599461},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1492265599461},{"_id":"public/uploads/avatar.png","hash":"586b6e0b74ab8e3f13e242cf04398b660427c8fd","modified":1492265599461},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1492265599461},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1492265599461},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492265599461},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492265599461},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492265599461},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492265599461},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492265599461},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492265599461},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1492265599461},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1492265599461},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1492265600490},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1492265600506},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1492265600521},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1492265600521},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1492265600521},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1492265600521},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1492265600521},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1492265600521},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1492265600521},{"_id":"public/js/src/post-details.js","hash":"af7a417dd1cb02465a7b98211653e7c6192e6d55","modified":1492265600521},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1492265600521},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1492265600521},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1492265600521},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1492265600521},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1492265600521},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1492265600521},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1492265600521},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1492265600521},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1492265600521},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1492265600537},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1492265600537},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1492265600537},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1492265600537},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1492265600537},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1492265600537},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1492265600537},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1492265600537},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1492265600537},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1492265600537},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1492265600537},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1492265600537},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1492265600537},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1492265600537},{"_id":"public/css/main.css","hash":"e2a27d20ba831039fd1c00b9a9e11ae66c86b22b","modified":1492265600537},{"_id":"public/lib/three/three-waves.min.js","hash":"5b38ae00297ffc07f433c632c3dbf7bde4cdf39a","modified":1492265600537},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1492265600537},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1492265600537},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1492265600537},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1492265600537},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1492265600537},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1492265600537},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1492265600537},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1492265600537},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1492265600537},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1492265600537},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1492265600537},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1492265600537},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1492265600537},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1492265600537},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1492265600584}],"Category":[{"name":"git","_id":"cj1jcel100004qkyfycmnyzi3"},{"name":"面试题库","_id":"cj1jcel1w000bqkyf5bvgfqsg"},{"name":"随笔","_id":"cj1jcel1w000jqkyfztspvdkd"},{"name":"js","_id":"cj1jcel2b000sqkyf0khfugfc"},{"name":"日积月累","_id":"cj1jcel37001gqkyfhw45ye3s"},{"name":"react","_id":"cj1jcel3m001qqkyf99o95jn7"},{"name":"gulp","_id":"cj1jcel420024qkyffgborubk"}],"Data":[],"Page":[{"title":"about","date":"2016-09-04T09:59:49.000Z","type":"about","comments":0,"_content":"我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-09-04 17:59:49\ntype: \"about\"\ncomments: false\n---\n我，一个在上海慢慢前行的程序员，坚信越努力，越幸运\n","updated":"2016-09-16T06:47:01.917Z","path":"about/index.html","layout":"page","_id":"cj1jcel100001qkyfv8xycxqp","content":"<p>我，一个在上海慢慢前行的程序员，坚信越努力，越幸运</p>\n","excerpt":"","more":"<p>我，一个在上海慢慢前行的程序员，坚信越努力，越幸运</p>\n"},{"title":"categories","date":"2017-02-26T09:51:32.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-02-26 17:51:32\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-02-26T09:53:39.434Z","path":"categories/index.html","layout":"page","_id":"cj1jcel100003qkyffu4dizhy","content":"","excerpt":"","more":""},{"title":"photo","date":"2017-04-04T14:14:07.000Z","type":"photo","comments":0,"_content":"啦啦啦~","source":"photo/index.md","raw":"---\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~","updated":"2017-04-04T14:48:38.181Z","path":"photo/index.html","layout":"page","_id":"cj1jcel1g0007qkyf7orke5rz","content":"<p>啦啦啦~</p>\n","excerpt":"","more":"<p>啦啦啦~</p>\n"},{"title":"life","date":"2017-04-04T14:50:10.000Z","type":"photo","comments":0,"_content":"","source":"life/index.md","raw":"---\ntitle: life\ndate: 2017-04-04 22:50:10\ntype: \"photo\"\ncomments: false\n---\n","updated":"2017-04-04T14:50:48.938Z","path":"life/index.html","layout":"page","_id":"cj1jcel1g0009qkyfj8kz9ec5","content":"","excerpt":"","more":""},{"title":"photos","date":"2017-04-09T08:47:13.000Z","_content":"","source":"photos/index.md","raw":"---\ntitle: photos\ndate: 2017-04-09 16:47:13\n---\n","updated":"2017-04-09T08:47:13.515Z","path":"photos/index.html","comments":1,"layout":"page","_id":"cj1jcel1w000dqkyfn4jvhrrz","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-09-16T16:29:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-09-17 00:29:00\ntype: \"tags\"\n---\n","updated":"2017-02-26T12:14:54.159Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj1jcel1w000gqkyfaco9pfpr","content":"","excerpt":"","more":""}],"Post":[{"title":"Git使用中的报错情况","date":"2017-03-11T15:54:11.000Z","description":["git","git实战","git报错"],"_content":"在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n<!--more-->\n\n#　`git pull`时报错\n```\n$ git pull\nremote: Counting objects: 100, done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 60 (delta 36), reused 3 (delta 0)\nUnpacking objects: 100% (60/60), done.\nFrom 180.166.124.26:/var/git/fzc\n   d8ec768..7c13661  master     -> origin/master\nUpdating d8ec768..7c13661\nerror: Your local changes to the following files would be overwritten by merge:\n        protected/modules/m/views/detail/house.php\n        protected/modules/m/views/list/house.php\n        protected/modules/web/views/default/list.php\n        protected/modules/web/views/detail/house.php\n        protected/modules/web/views/list/house.php\n        static_src/web/js/houseList/nprogress.js\n        static_src/web/js/list/nprogress.js\nPlease commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n```\n大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突\n解决方法\n1. 昨天遇到这个问题的时候是本地修改的文件不需要提交了，直接放弃就可以了，\n ```\n $ git checkout --filename\n ```\n 然后远端的文件就覆盖了你的本地文件，然后在`git pull`,之后就可以`git add`、`git commit`、`git push`三部曲了\n \n 2. 还可以保存本地的状态\n `git stash`\n然后再\n`git pull  origin master`\n但是提示我`No local changes to save`\n\n然后我再pull的时候提示我\n```\n$ git pull\nUpdating d8ec768..7c13661\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n\n```\n然后我想放弃这两个文件就报错了\n```\n$ git checkout  static_dist/web/js/houseList/houseList-min-50ae65dad4.js\nerror: pathspec 'static_dist/web/js/houseList/houseList-min-50ae65dad4.js' did not match any fi         le(s) known to git.\n\n```\n3. 所以我请来了我们的phper，他说可以直接提交 = =\n先是查看一下现在的状态\n```\n$ git status\nOn branch master\nYour branch is behind 'origin/master' by 3 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        static_dist/m/css/about/about-min-e5159328af.css\n        static_dist/m/css/authentication/authentication-min-2315b81179.css\n        static_dist/m/css/defaultIndex/defaultIndex-min-ecc8a57574.css\n        static_dist/m/css/defaultList/defaultList-min-df3ee5323b.css\n        static_dist/m/css/detailHouse/detailHouse-min-8f6835d719.css\n        static_dist/m/css/detailIndex/detailIndex-min-24e3587ee2.css\n        static_dist/m/css/detailOrder/detailOrder-min-ffa8b47793.css\n        static_dist/m/css/listHouse/listHouse-min-53c056c915.css\n        static_dist/m/css/payIndex/payIndex-min-78a3d6e471.css\n        static_dist/m/css/publicMain/publicMain-min-243df56309.css\n        static_dist/m/css/userDetail/userDetail-min-bf3f5d072e.css\n        static_dist/m/css/userIndex/userIndex-min-7898459c71.css\n        static_dist/m/css/userLogin_reg/userLogin_reg-min-718b2d35d8.css\n        static_dist/m/css/userOrder/userOrder-min-5f18d80c90.css\n        static_dist/m/css/userProject/userProject-min-fcc2e92ff7.css\n        static_dist/web/css/bankguide/bankguide-min-eb72d15494.css\n        static_dist/web/css/defaultIndex/defaultIndex-min-ccc49d9d39.css\n        static_dist/web/css/detail/detail-min-714ac29c22.css\n        static_dist/web/css/houseDetail/houseDetail-min-ea5da2d35e.css\n        static_dist/web/css/houseList/houseList-min-5ad0e311df.css\n        static_dist/web/css/list/list-min-7b339899d6.css\n        static_dist/web/css/publicMain/publicMain-min-51e7cfd8d2.css\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n```\n然后确认这些文件都不需要了，在checkout一遍\n```\n$ git checkout .\n\n```\n然后在发布三部曲\n","source":"_posts/ErrorReportingInGitUse.md","raw":"---\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\ndescription: [git,git实战,git报错]\n---\n在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的\n<!--more-->\n\n#　`git pull`时报错\n```\n$ git pull\nremote: Counting objects: 100, done.\nremote: Compressing objects: 100% (57/57), done.\nremote: Total 60 (delta 36), reused 3 (delta 0)\nUnpacking objects: 100% (60/60), done.\nFrom 180.166.124.26:/var/git/fzc\n   d8ec768..7c13661  master     -> origin/master\nUpdating d8ec768..7c13661\nerror: Your local changes to the following files would be overwritten by merge:\n        protected/modules/m/views/detail/house.php\n        protected/modules/m/views/list/house.php\n        protected/modules/web/views/default/list.php\n        protected/modules/web/views/detail/house.php\n        protected/modules/web/views/list/house.php\n        static_src/web/js/houseList/nprogress.js\n        static_src/web/js/list/nprogress.js\nPlease commit your changes or stash them before you can merge.\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n```\n大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突\n解决方法\n1. 昨天遇到这个问题的时候是本地修改的文件不需要提交了，直接放弃就可以了，\n ```\n $ git checkout --filename\n ```\n 然后远端的文件就覆盖了你的本地文件，然后在`git pull`,之后就可以`git add`、`git commit`、`git push`三部曲了\n \n 2. 还可以保存本地的状态\n `git stash`\n然后再\n`git pull  origin master`\n但是提示我`No local changes to save`\n\n然后我再pull的时候提示我\n```\n$ git pull\nUpdating d8ec768..7c13661\nerror: The following untracked working tree files would be overwritten by merge:\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\nPlease move or remove them before you can merge.\nAborting\n\n\n```\n然后我想放弃这两个文件就报错了\n```\n$ git checkout  static_dist/web/js/houseList/houseList-min-50ae65dad4.js\nerror: pathspec 'static_dist/web/js/houseList/houseList-min-50ae65dad4.js' did not match any fi         le(s) known to git.\n\n```\n3. 所以我请来了我们的phper，他说可以直接提交 = =\n先是查看一下现在的状态\n```\n$ git status\nOn branch master\nYour branch is behind 'origin/master' by 3 commits, and can be fast-forwarded.\n  (use \"git pull\" to update your local branch)\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        static_dist/m/css/about/about-min-e5159328af.css\n        static_dist/m/css/authentication/authentication-min-2315b81179.css\n        static_dist/m/css/defaultIndex/defaultIndex-min-ecc8a57574.css\n        static_dist/m/css/defaultList/defaultList-min-df3ee5323b.css\n        static_dist/m/css/detailHouse/detailHouse-min-8f6835d719.css\n        static_dist/m/css/detailIndex/detailIndex-min-24e3587ee2.css\n        static_dist/m/css/detailOrder/detailOrder-min-ffa8b47793.css\n        static_dist/m/css/listHouse/listHouse-min-53c056c915.css\n        static_dist/m/css/payIndex/payIndex-min-78a3d6e471.css\n        static_dist/m/css/publicMain/publicMain-min-243df56309.css\n        static_dist/m/css/userDetail/userDetail-min-bf3f5d072e.css\n        static_dist/m/css/userIndex/userIndex-min-7898459c71.css\n        static_dist/m/css/userLogin_reg/userLogin_reg-min-718b2d35d8.css\n        static_dist/m/css/userOrder/userOrder-min-5f18d80c90.css\n        static_dist/m/css/userProject/userProject-min-fcc2e92ff7.css\n        static_dist/web/css/bankguide/bankguide-min-eb72d15494.css\n        static_dist/web/css/defaultIndex/defaultIndex-min-ccc49d9d39.css\n        static_dist/web/css/detail/detail-min-714ac29c22.css\n        static_dist/web/css/houseDetail/houseDetail-min-ea5da2d35e.css\n        static_dist/web/css/houseList/houseList-min-5ad0e311df.css\n        static_dist/web/css/list/list-min-7b339899d6.css\n        static_dist/web/css/publicMain/publicMain-min-51e7cfd8d2.css\n        static_dist/web/js/houseList/houseList-min-50ae65dad4.js\n        static_dist/web/js/list/list-min-dd27ec4ef4.js\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n\n```\n然后确认这些文件都不需要了，在checkout一遍\n```\n$ git checkout .\n\n```\n然后在发布三部曲\n","slug":"ErrorReportingInGitUse","published":1,"updated":"2017-04-12T15:37:25.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel0l0000qkyfhr6repw9","content":"<p>在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的<br><a id=\"more\"></a></p>\n<p>#　<code>git pull</code>时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">remote: Counting objects: 100, done.</div><div class=\"line\">remote: Compressing objects: 100% (57/57), done.</div><div class=\"line\">remote: Total 60 (delta 36), reused 3 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (60/60), done.</div><div class=\"line\">From 180.166.124.26:/var/git/fzc</div><div class=\"line\">   d8ec768..7c13661  master     -&gt; origin/master</div><div class=\"line\">Updating d8ec768..7c13661</div><div class=\"line\">error: Your local changes to the following files would be overwritten by merge:</div><div class=\"line\">        protected/modules/m/views/detail/house.php</div><div class=\"line\">        protected/modules/m/views/list/house.php</div><div class=\"line\">        protected/modules/web/views/default/list.php</div><div class=\"line\">        protected/modules/web/views/detail/house.php</div><div class=\"line\">        protected/modules/web/views/list/house.php</div><div class=\"line\">        static_src/web/js/houseList/nprogress.js</div><div class=\"line\">        static_src/web/js/list/nprogress.js</div><div class=\"line\">Please commit your changes or stash them before you can merge.</div><div class=\"line\">error: The following untracked working tree files would be overwritten by merge:</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\">Please move or remove them before you can merge.</div><div class=\"line\">Aborting</div></pre></td></tr></table></figure></p>\n<p>大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突<br>解决方法</p>\n<ol>\n<li><p>昨天遇到这个问题的时候是本地修改的文件不需要提交了，直接放弃就可以了，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout --filename</div></pre></td></tr></table></figure>\n<p>然后远端的文件就覆盖了你的本地文件，然后在<code>git pull</code>,之后就可以<code>git add</code>、<code>git commit</code>、<code>git push</code>三部曲了</p>\n<ol>\n<li>还可以保存本地的状态<br><code>git stash</code><br>然后再<br><code>git pull  origin master</code><br>但是提示我<code>No local changes to save</code></li>\n</ol>\n</li>\n</ol>\n<p>然后我再pull的时候提示我<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">Updating d8ec768..7c13661</div><div class=\"line\">error: The following untracked working tree files would be overwritten by merge:</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\">Please move or remove them before you can merge.</div><div class=\"line\">Aborting</div></pre></td></tr></table></figure></p>\n<p>然后我想放弃这两个文件就报错了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout  static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">error: pathspec &apos;static_dist/web/js/houseList/houseList-min-50ae65dad4.js&apos; did not match any fi         le(s) known to git.</div></pre></td></tr></table></figure></p>\n<ol>\n<li>所以我请来了我们的phper，他说可以直接提交 = =<br>先是查看一下现在的状态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Your branch is behind &apos;origin/master&apos; by 3 commits, and can be fast-forwarded.</div><div class=\"line\">  (use &quot;git pull&quot; to update your local branch)</div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class=\"line\"></div><div class=\"line\">        static_dist/m/css/about/about-min-e5159328af.css</div><div class=\"line\">        static_dist/m/css/authentication/authentication-min-2315b81179.css</div><div class=\"line\">        static_dist/m/css/defaultIndex/defaultIndex-min-ecc8a57574.css</div><div class=\"line\">        static_dist/m/css/defaultList/defaultList-min-df3ee5323b.css</div><div class=\"line\">        static_dist/m/css/detailHouse/detailHouse-min-8f6835d719.css</div><div class=\"line\">        static_dist/m/css/detailIndex/detailIndex-min-24e3587ee2.css</div><div class=\"line\">        static_dist/m/css/detailOrder/detailOrder-min-ffa8b47793.css</div><div class=\"line\">        static_dist/m/css/listHouse/listHouse-min-53c056c915.css</div><div class=\"line\">        static_dist/m/css/payIndex/payIndex-min-78a3d6e471.css</div><div class=\"line\">        static_dist/m/css/publicMain/publicMain-min-243df56309.css</div><div class=\"line\">        static_dist/m/css/userDetail/userDetail-min-bf3f5d072e.css</div><div class=\"line\">        static_dist/m/css/userIndex/userIndex-min-7898459c71.css</div><div class=\"line\">        static_dist/m/css/userLogin_reg/userLogin_reg-min-718b2d35d8.css</div><div class=\"line\">        static_dist/m/css/userOrder/userOrder-min-5f18d80c90.css</div><div class=\"line\">        static_dist/m/css/userProject/userProject-min-fcc2e92ff7.css</div><div class=\"line\">        static_dist/web/css/bankguide/bankguide-min-eb72d15494.css</div><div class=\"line\">        static_dist/web/css/defaultIndex/defaultIndex-min-ccc49d9d39.css</div><div class=\"line\">        static_dist/web/css/detail/detail-min-714ac29c22.css</div><div class=\"line\">        static_dist/web/css/houseDetail/houseDetail-min-ea5da2d35e.css</div><div class=\"line\">        static_dist/web/css/houseList/houseList-min-5ad0e311df.css</div><div class=\"line\">        static_dist/web/css/list/list-min-7b339899d6.css</div><div class=\"line\">        static_dist/web/css/publicMain/publicMain-min-51e7cfd8d2.css</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\"></div><div class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后确认这些文件都不需要了，在checkout一遍<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout .</div></pre></td></tr></table></figure></p>\n<p>然后在发布三部曲</p>\n","excerpt":"<p>在Git的使用过程中，难免会有这样那样的错误，对于刚开始使用git的小白来说，来记录一下使用过程中报错情况以及怎么处理的<br>","more":"</p>\n<p>#　<code>git pull</code>时报错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">remote: Counting objects: 100, done.</div><div class=\"line\">remote: Compressing objects: 100% (57/57), done.</div><div class=\"line\">remote: Total 60 (delta 36), reused 3 (delta 0)</div><div class=\"line\">Unpacking objects: 100% (60/60), done.</div><div class=\"line\">From 180.166.124.26:/var/git/fzc</div><div class=\"line\">   d8ec768..7c13661  master     -&gt; origin/master</div><div class=\"line\">Updating d8ec768..7c13661</div><div class=\"line\">error: Your local changes to the following files would be overwritten by merge:</div><div class=\"line\">        protected/modules/m/views/detail/house.php</div><div class=\"line\">        protected/modules/m/views/list/house.php</div><div class=\"line\">        protected/modules/web/views/default/list.php</div><div class=\"line\">        protected/modules/web/views/detail/house.php</div><div class=\"line\">        protected/modules/web/views/list/house.php</div><div class=\"line\">        static_src/web/js/houseList/nprogress.js</div><div class=\"line\">        static_src/web/js/list/nprogress.js</div><div class=\"line\">Please commit your changes or stash them before you can merge.</div><div class=\"line\">error: The following untracked working tree files would be overwritten by merge:</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\">Please move or remove them before you can merge.</div><div class=\"line\">Aborting</div></pre></td></tr></table></figure></p>\n<p>大意就是说你修改的文件在之前的commit中没有提交，远端的文件和本地的文件冲突<br>解决方法</p>\n<ol>\n<li><p>昨天遇到这个问题的时候是本地修改的文件不需要提交了，直接放弃就可以了，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout --filename</div></pre></td></tr></table></figure>\n<p>然后远端的文件就覆盖了你的本地文件，然后在<code>git pull</code>,之后就可以<code>git add</code>、<code>git commit</code>、<code>git push</code>三部曲了</p>\n<ol>\n<li>还可以保存本地的状态<br><code>git stash</code><br>然后再<br><code>git pull  origin master</code><br>但是提示我<code>No local changes to save</code></li>\n</ol>\n</li>\n</ol>\n<p>然后我再pull的时候提示我<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git pull</div><div class=\"line\">Updating d8ec768..7c13661</div><div class=\"line\">error: The following untracked working tree files would be overwritten by merge:</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\">Please move or remove them before you can merge.</div><div class=\"line\">Aborting</div></pre></td></tr></table></figure></p>\n<p>然后我想放弃这两个文件就报错了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout  static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">error: pathspec &apos;static_dist/web/js/houseList/houseList-min-50ae65dad4.js&apos; did not match any fi         le(s) known to git.</div></pre></td></tr></table></figure></p>\n<ol>\n<li>所以我请来了我们的phper，他说可以直接提交 = =<br>先是查看一下现在的状态<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git status</div><div class=\"line\">On branch master</div><div class=\"line\">Your branch is behind &apos;origin/master&apos; by 3 commits, and can be fast-forwarded.</div><div class=\"line\">  (use &quot;git pull&quot; to update your local branch)</div><div class=\"line\">Untracked files:</div><div class=\"line\">  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</div><div class=\"line\"></div><div class=\"line\">        static_dist/m/css/about/about-min-e5159328af.css</div><div class=\"line\">        static_dist/m/css/authentication/authentication-min-2315b81179.css</div><div class=\"line\">        static_dist/m/css/defaultIndex/defaultIndex-min-ecc8a57574.css</div><div class=\"line\">        static_dist/m/css/defaultList/defaultList-min-df3ee5323b.css</div><div class=\"line\">        static_dist/m/css/detailHouse/detailHouse-min-8f6835d719.css</div><div class=\"line\">        static_dist/m/css/detailIndex/detailIndex-min-24e3587ee2.css</div><div class=\"line\">        static_dist/m/css/detailOrder/detailOrder-min-ffa8b47793.css</div><div class=\"line\">        static_dist/m/css/listHouse/listHouse-min-53c056c915.css</div><div class=\"line\">        static_dist/m/css/payIndex/payIndex-min-78a3d6e471.css</div><div class=\"line\">        static_dist/m/css/publicMain/publicMain-min-243df56309.css</div><div class=\"line\">        static_dist/m/css/userDetail/userDetail-min-bf3f5d072e.css</div><div class=\"line\">        static_dist/m/css/userIndex/userIndex-min-7898459c71.css</div><div class=\"line\">        static_dist/m/css/userLogin_reg/userLogin_reg-min-718b2d35d8.css</div><div class=\"line\">        static_dist/m/css/userOrder/userOrder-min-5f18d80c90.css</div><div class=\"line\">        static_dist/m/css/userProject/userProject-min-fcc2e92ff7.css</div><div class=\"line\">        static_dist/web/css/bankguide/bankguide-min-eb72d15494.css</div><div class=\"line\">        static_dist/web/css/defaultIndex/defaultIndex-min-ccc49d9d39.css</div><div class=\"line\">        static_dist/web/css/detail/detail-min-714ac29c22.css</div><div class=\"line\">        static_dist/web/css/houseDetail/houseDetail-min-ea5da2d35e.css</div><div class=\"line\">        static_dist/web/css/houseList/houseList-min-5ad0e311df.css</div><div class=\"line\">        static_dist/web/css/list/list-min-7b339899d6.css</div><div class=\"line\">        static_dist/web/css/publicMain/publicMain-min-51e7cfd8d2.css</div><div class=\"line\">        static_dist/web/js/houseList/houseList-min-50ae65dad4.js</div><div class=\"line\">        static_dist/web/js/list/list-min-dd27ec4ef4.js</div><div class=\"line\"></div><div class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>然后确认这些文件都不需要了，在checkout一遍<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git checkout .</div></pre></td></tr></table></figure></p>\n<p>然后在发布三部曲</p>"},{"title":"前端面试","date":"2017-03-06T15:15:56.000Z","description":["前端面试","面试题库"],"_content":"最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下\n某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理\n\n<!--more-->\n# Q:rem布局的原理\n\nA：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。\nrem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px\n\n[移动端页面开发适配 rem布局原理](http://www.tuicool.com/articles/FjMfuyM)\n\n> 网易的做法：\n> \n> 1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。\n> \n> \n> ```\n> <meta name=\"viewport\"content=\"initial-scale=1,maximum-scale=1, minimum-scale=1”>\n> ```\n> \n> \n> 2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为`width:6.4rem（640/100）`，当我们将布局视口设置为320时，于是html的 `font-size=deviceWidth / 6.4`。\n> \n> 3) 通过`document.documentElement.clientWidth`获取 `deviceWidth`；\n> \n> 4) 当页面的`dom ready`后设置`html font-size`,\n> \n> \n> ```\n> document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’\n> ```\n> \n> 5) 通过 `mediaQuery` 设置字体大小，字体大小不可以使用rem,原因是误差太大。\n> \n> 以640的设计稿为例最终的设置html `font-size`代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊\n> \n> \n> ```\n> var deviceWidth = document.documentElement.clientWidth;\n> if(deviceWidth > 640) deviceWidth = 640;\n> document.documentElement.style.fontSize = deviceWidth / 6.4 + 'px';\n> 这里if(deviceWidth > 640) deviceWidth = 640;\n> ```\n>  是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；\n\n```\nvar documentElement = document.documentElement;\n\n    if (documentElement.clientWidth >= 750) {\n        documentElement.style.fontSize = '54px';\n    } else {\n        documentElement.style.fontSize = \"${documentElement.getBoundingClientRect().width / 10}px\";\n    }\n\n\n    (function () {\n        document.addEventListener('DOMContentLoaded', function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        }, false);\n        window.onresize = function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        };\n\n        console.log(document.width)\n    })();\n```\n\n# Q:常见的布局方式\n\nA：\n1. 静态布局（Static Layout）\n2. 弹性布局（Flex）\n3. 自适应布局（Adapive Layout）\n4. 流式布局（Liquid Layout）\n5. 响应式布局（Responsive Layout）\n[web前端开发之几种布局方式之响应式布局](http://blog.csdn.net/gertYY/article/details/52764527)\n\n# Q:怎么使用媒体查询\n\n```\n@media screen and (max-width:720px) and (min-width:320px){\n\n      body{\n\n       background-color:red;\n\n       }\n\n@media screen and (max-width:320px){\n\n      body{\n\n         background-color:blue;\n\n       }\n\n}\n```\n\n# Q:移动端优化方法\n# Q：js模块化\n# Q:怎么实现延迟加载\n# Q:你对闭包的理解\n# Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\n\n上交所初试之笔试题：\n# 什么是“use strait”有什么好处有什么坏处\n> ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n> \n> 设立\"严格模式\"的目的，主要有以下几个：\n> \n> 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n> \n> 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n> \n> 3. 提高编译器效率，增加运行速度；\n> \n> 4. 为未来新版本的Javascript做好铺垫。\n> \n> 注：经过测试 IE6,7,8,9 均不支持严格模式。\n> \n> 缺点：\n> \n> 现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。\n\n# 解释下javascript中this是怎么工作的\n> JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：\n> \n> function foo() {\n> \n>   // 在终端输出 this 对象\n>   console.log(this)\n> }\n> \n> foo() // 输出： global 对象 在浏览器中即 window 对象\n> \n> 但是也可以在函数被运行的时候动态指定（call,apply, bind）：\n> \n> var bar = { name: 'bar' }\n> \n> foo.call(bar) // 输出： { name: 'bar' }\n> \n> 存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。\n> \n> new foo() // 输出： {} 在构造函数内部创建一个对象\n> \n> 作者：管斌瑞\n> 链接：https://www.zhihu.com/question/19624483/answer/25745246\n> 来源：知乎\n> 著作权归作者所有，转载请联系作者获得授权。\n\n\n# 有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\n\n```\na.length === 0 ? a.push(1) : a.shift();\n```\n\n\n\n# 描述下`reset`css文件的作用和使用它的好处\n重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果\n\n# 说说前端怎么如何解决异步回调地狱\n\n# 请解释Function.prototype.bind的作用\n> bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。\n\n> 例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。\n\n# 描述以下变量的区别：null，undefined，该如何检测他们\n## null表示\"没有对象\"，即该处不应该有值。典型用法是：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n## undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n\n## 判断undefined: \n复制代码 代码如下:\n\n```\n<span style=\"font-size: small;\">var tmp = undefined; \nif (typeof(tmp) == \"undefined\"){ \nalert(\"undefined\"); \n}</span>\n```\n\n## 判断null: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = null; \nif (!tmp && typeof(tmp)!=\"undefined\" && tmp!=0){ \nalert(\"null\"); \n}　</span>\n```\n\n## 判断NaN: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = 0/0; \nif(isNaN(tmp)){ \nalert(\"NaN\"); \n}</span>\n```\n\n\n\n# 说说类的创建、继承和闭包\n\n# 有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\n\n```\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n sum = 0;\n sum = a.slice(0, 10).reduce(function(pre, current) {\n 　　return pre + current;\n });\n  \n console.log(sum); //55\n```\n\n\n# 下面的代码会输出什么：\n\n```\nvar test = (function(a) {\n    this.a = a;\n    return function(b) {\n        return this.a + b;\n    }\n} (function(a, b) {\n    return a;\n}(1, 2))); \n\nconsole.log(test(4)); //输出什么？？？？\n```\n\n最后发现这大部分都是阿里的面试题= =\n[阿里前端笔试题目](http://www.cnblogs.com/beidan/p/5285742.html)","source":"_posts/Front-interview.md","raw":"---\ntitle: 前端面试\ndate: 2017-03-06 23:15:56\ntags: [面试,js,知识点]\ncategories: 面试题库\ndescription: [前端面试,面试题库]\n---\n最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下\n某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理\n\n<!--more-->\n# Q:rem布局的原理\n\nA：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。\nrem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px\n\n[移动端页面开发适配 rem布局原理](http://www.tuicool.com/articles/FjMfuyM)\n\n> 网易的做法：\n> \n> 1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。\n> \n> \n> ```\n> <meta name=\"viewport\"content=\"initial-scale=1,maximum-scale=1, minimum-scale=1”>\n> ```\n> \n> \n> 2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为`width:6.4rem（640/100）`，当我们将布局视口设置为320时，于是html的 `font-size=deviceWidth / 6.4`。\n> \n> 3) 通过`document.documentElement.clientWidth`获取 `deviceWidth`；\n> \n> 4) 当页面的`dom ready`后设置`html font-size`,\n> \n> \n> ```\n> document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’\n> ```\n> \n> 5) 通过 `mediaQuery` 设置字体大小，字体大小不可以使用rem,原因是误差太大。\n> \n> 以640的设计稿为例最终的设置html `font-size`代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊\n> \n> \n> ```\n> var deviceWidth = document.documentElement.clientWidth;\n> if(deviceWidth > 640) deviceWidth = 640;\n> document.documentElement.style.fontSize = deviceWidth / 6.4 + 'px';\n> 这里if(deviceWidth > 640) deviceWidth = 640;\n> ```\n>  是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；\n\n```\nvar documentElement = document.documentElement;\n\n    if (documentElement.clientWidth >= 750) {\n        documentElement.style.fontSize = '54px';\n    } else {\n        documentElement.style.fontSize = \"${documentElement.getBoundingClientRect().width / 10}px\";\n    }\n\n\n    (function () {\n        document.addEventListener('DOMContentLoaded', function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        }, false);\n        window.onresize = function () {\n            var deviceWidth = document.documentElement.clientWidth;\n            document.documentElement.style.fontSize = deviceWidth / 10 + 'px';\n        };\n\n        console.log(document.width)\n    })();\n```\n\n# Q:常见的布局方式\n\nA：\n1. 静态布局（Static Layout）\n2. 弹性布局（Flex）\n3. 自适应布局（Adapive Layout）\n4. 流式布局（Liquid Layout）\n5. 响应式布局（Responsive Layout）\n[web前端开发之几种布局方式之响应式布局](http://blog.csdn.net/gertYY/article/details/52764527)\n\n# Q:怎么使用媒体查询\n\n```\n@media screen and (max-width:720px) and (min-width:320px){\n\n      body{\n\n       background-color:red;\n\n       }\n\n@media screen and (max-width:320px){\n\n      body{\n\n         background-color:blue;\n\n       }\n\n}\n```\n\n# Q:移动端优化方法\n# Q：js模块化\n# Q:怎么实现延迟加载\n# Q:你对闭包的理解\n# Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\n\n上交所初试之笔试题：\n# 什么是“use strait”有什么好处有什么坏处\n> ECMAscript 5添加了第二种运行模式：\"严格模式\"（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。\n> \n> 设立\"严格模式\"的目的，主要有以下几个：\n> \n> 1. 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;\n> \n> 2. 消除代码运行的一些不安全之处，保证代码运行的安全；\n> \n> 3. 提高编译器效率，增加运行速度；\n> \n> 4. 为未来新版本的Javascript做好铺垫。\n> \n> 注：经过测试 IE6,7,8,9 均不支持严格模式。\n> \n> 缺点：\n> \n> 现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。\n\n# 解释下javascript中this是怎么工作的\n> JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：\n> \n> function foo() {\n> \n>   // 在终端输出 this 对象\n>   console.log(this)\n> }\n> \n> foo() // 输出： global 对象 在浏览器中即 window 对象\n> \n> 但是也可以在函数被运行的时候动态指定（call,apply, bind）：\n> \n> var bar = { name: 'bar' }\n> \n> foo.call(bar) // 输出： { name: 'bar' }\n> \n> 存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。\n> \n> new foo() // 输出： {} 在构造函数内部创建一个对象\n> \n> 作者：管斌瑞\n> 链接：https://www.zhihu.com/question/19624483/answer/25745246\n> 来源：知乎\n> 著作权归作者所有，转载请联系作者获得授权。\n\n\n# 有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\n\n```\na.length === 0 ? a.push(1) : a.shift();\n```\n\n\n\n# 描述下`reset`css文件的作用和使用它的好处\n重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果\n\n# 说说前端怎么如何解决异步回调地狱\n\n# 请解释Function.prototype.bind的作用\n> bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。\n\n> 例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。\n\n# 描述以下变量的区别：null，undefined，该如何检测他们\n## null表示\"没有对象\"，即该处不应该有值。典型用法是：\n（1） 作为函数的参数，表示该函数的参数不是对象。\n（2） 作为对象原型链的终点。\n\n## undefined表示\"缺少值\"，就是此处应该有一个值，但是还没有定义。典型用法是：\n（1）变量被声明了，但没有赋值时，就等于undefined。\n（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。\n（3）对象没有赋值的属性，该属性的值为undefined。\n（4）函数没有返回值时，默认返回undefined。\n\n## 判断undefined: \n复制代码 代码如下:\n\n```\n<span style=\"font-size: small;\">var tmp = undefined; \nif (typeof(tmp) == \"undefined\"){ \nalert(\"undefined\"); \n}</span>\n```\n\n## 判断null: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = null; \nif (!tmp && typeof(tmp)!=\"undefined\" && tmp!=0){ \nalert(\"null\"); \n}　</span>\n```\n\n## 判断NaN: \n复制代码 代码如下:\n\n\n```\n<span style=\"font-size: small;\">var tmp = 0/0; \nif(isNaN(tmp)){ \nalert(\"NaN\"); \n}</span>\n```\n\n\n\n# 说说类的创建、继承和闭包\n\n# 有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\n\n```\nvar a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],\n sum = 0;\n sum = a.slice(0, 10).reduce(function(pre, current) {\n 　　return pre + current;\n });\n  \n console.log(sum); //55\n```\n\n\n# 下面的代码会输出什么：\n\n```\nvar test = (function(a) {\n    this.a = a;\n    return function(b) {\n        return this.a + b;\n    }\n} (function(a, b) {\n    return a;\n}(1, 2))); \n\nconsole.log(test(4)); //输出什么？？？？\n```\n\n最后发现这大部分都是阿里的面试题= =\n[阿里前端笔试题目](http://www.cnblogs.com/beidan/p/5285742.html)","slug":"Front-interview","published":1,"updated":"2017-04-12T15:37:25.711Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel100002qkyfhtgardfj","content":"<p>最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下<br>某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理</p>\n<a id=\"more\"></a>\n<h1 id=\"Q-rem布局的原理\"><a href=\"#Q-rem布局的原理\" class=\"headerlink\" title=\"Q:rem布局的原理\"></a>Q:rem布局的原理</h1><p>A：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。<br>rem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px</p>\n<p><a href=\"http://www.tuicool.com/articles/FjMfuyM\" target=\"_blank\" rel=\"external\">移动端页面开发适配 rem布局原理</a></p>\n<blockquote>\n<p>网易的做法：</p>\n<p>1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; &lt;meta name=&quot;viewport&quot;content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1”&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为<code>width:6.4rem（640/100）</code>，当我们将布局视口设置为320时，于是html的 <code>font-size=deviceWidth / 6.4</code>。</p>\n<p>3) 通过<code>document.documentElement.clientWidth</code>获取 <code>deviceWidth</code>；</p>\n<p>4) 当页面的<code>dom ready</code>后设置<code>html font-size</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>5) 通过 <code>mediaQuery</code> 设置字体大小，字体大小不可以使用rem,原因是误差太大。</p>\n<p>以640的设计稿为例最终的设置html <code>font-size</code>代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">&gt; if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt; document.documentElement.style.fontSize = deviceWidth / 6.4 + &apos;px&apos;;</div><div class=\"line\">&gt; 这里if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p> 是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var documentElement = document.documentElement;</div><div class=\"line\"></div><div class=\"line\">    if (documentElement.clientWidth &gt;= 750) &#123;</div><div class=\"line\">        documentElement.style.fontSize = &apos;54px&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        documentElement.style.fontSize = &quot;$&#123;documentElement.getBoundingClientRect().width / 10&#125;px&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    (function () &#123;</div><div class=\"line\">        document.addEventListener(&apos;DOMContentLoaded&apos;, function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;, false);</div><div class=\"line\">        window.onresize = function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        console.log(document.width)</div><div class=\"line\">    &#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"Q-常见的布局方式\"><a href=\"#Q-常见的布局方式\" class=\"headerlink\" title=\"Q:常见的布局方式\"></a>Q:常见的布局方式</h1><p>A：</p>\n<ol>\n<li>静态布局（Static Layout）</li>\n<li>弹性布局（Flex）</li>\n<li>自适应布局（Adapive Layout）</li>\n<li>流式布局（Liquid Layout）</li>\n<li>响应式布局（Responsive Layout）<br><a href=\"http://blog.csdn.net/gertYY/article/details/52764527\" target=\"_blank\" rel=\"external\">web前端开发之几种布局方式之响应式布局</a></li>\n</ol>\n<h1 id=\"Q-怎么使用媒体查询\"><a href=\"#Q-怎么使用媒体查询\" class=\"headerlink\" title=\"Q:怎么使用媒体查询\"></a>Q:怎么使用媒体查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (max-width:720px) and (min-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">       background-color:red;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">@media screen and (max-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">         background-color:blue;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Q-移动端优化方法\"><a href=\"#Q-移动端优化方法\" class=\"headerlink\" title=\"Q:移动端优化方法\"></a>Q:移动端优化方法</h1><h1 id=\"Q：js模块化\"><a href=\"#Q：js模块化\" class=\"headerlink\" title=\"Q：js模块化\"></a>Q：js模块化</h1><h1 id=\"Q-怎么实现延迟加载\"><a href=\"#Q-怎么实现延迟加载\" class=\"headerlink\" title=\"Q:怎么实现延迟加载\"></a>Q:怎么实现延迟加载</h1><h1 id=\"Q-你对闭包的理解\"><a href=\"#Q-你对闭包的理解\" class=\"headerlink\" title=\"Q:你对闭包的理解\"></a>Q:你对闭包的理解</h1><h1 id=\"Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"><a href=\"#Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\" class=\"headerlink\" title=\"Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"></a>Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制</h1><p>上交所初试之笔试题：</p>\n<h1 id=\"什么是“use-strait”有什么好处有什么坏处\"><a href=\"#什么是“use-strait”有什么好处有什么坏处\" class=\"headerlink\" title=\"什么是“use strait”有什么好处有什么坏处\"></a>什么是“use strait”有什么好处有什么坏处</h1><blockquote>\n<p>ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p>\n<p>设立”严格模式”的目的，主要有以下几个：</p>\n<ol>\n<li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n</li>\n<li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>\n</li>\n<li><p>提高编译器效率，增加运行速度；</p>\n</li>\n<li><p>为未来新版本的Javascript做好铺垫。</p>\n</li>\n</ol>\n<p>注：经过测试 IE6,7,8,9 均不支持严格模式。</p>\n<p>缺点：</p>\n<p>现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p>\n</blockquote>\n<h1 id=\"解释下javascript中this是怎么工作的\"><a href=\"#解释下javascript中this是怎么工作的\" class=\"headerlink\" title=\"解释下javascript中this是怎么工作的\"></a>解释下javascript中this是怎么工作的</h1><blockquote>\n<p>JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：</p>\n<p>function foo() {</p>\n<p>  // 在终端输出 this 对象<br>  console.log(this)<br>}</p>\n<p>foo() // 输出： global 对象 在浏览器中即 window 对象</p>\n<p>但是也可以在函数被运行的时候动态指定（call,apply, bind）：</p>\n<p>var bar = { name: ‘bar’ }</p>\n<p>foo.call(bar) // 输出： { name: ‘bar’ }</p>\n<p>存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。</p>\n<p>new foo() // 输出： {} 在构造函数内部创建一个对象</p>\n<p>作者：管斌瑞<br>链接：<a href=\"https://www.zhihu.com/question/19624483/answer/25745246\" target=\"_blank\" rel=\"external\">https://www.zhihu.com/question/19624483/answer/25745246</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>\n</blockquote>\n<h1 id=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"><a href=\"#有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\" class=\"headerlink\" title=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"></a>有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.length === 0 ? a.push(1) : a.shift();</div></pre></td></tr></table></figure>\n<h1 id=\"描述下resetcss文件的作用和使用它的好处\"><a href=\"#描述下resetcss文件的作用和使用它的好处\" class=\"headerlink\" title=\"描述下resetcss文件的作用和使用它的好处\"></a>描述下<code>reset</code>css文件的作用和使用它的好处</h1><p>重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果</p>\n<h1 id=\"说说前端怎么如何解决异步回调地狱\"><a href=\"#说说前端怎么如何解决异步回调地狱\" class=\"headerlink\" title=\"说说前端怎么如何解决异步回调地狱\"></a>说说前端怎么如何解决异步回调地狱</h1><h1 id=\"请解释Function-prototype-bind的作用\"><a href=\"#请解释Function-prototype-bind的作用\" class=\"headerlink\" title=\"请解释Function.prototype.bind的作用\"></a>请解释Function.prototype.bind的作用</h1><blockquote>\n<p>bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。</p>\n<p>例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。</p>\n</blockquote>\n<h1 id=\"描述以下变量的区别：null，undefined，该如何检测他们\"><a href=\"#描述以下变量的区别：null，undefined，该如何检测他们\" class=\"headerlink\" title=\"描述以下变量的区别：null，undefined，该如何检测他们\"></a>描述以下变量的区别：null，undefined，该如何检测他们</h1><h2 id=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"><a href=\"#null表示”没有对象”，即该处不应该有值。典型用法是：\" class=\"headerlink\" title=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"></a>null表示”没有对象”，即该处不应该有值。典型用法是：</h2><p>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h2 id=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"><a href=\"#undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\" class=\"headerlink\" title=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"></a>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</h2><p>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。</p>\n<h2 id=\"判断undefined\"><a href=\"#判断undefined\" class=\"headerlink\" title=\"判断undefined:\"></a>判断undefined:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = undefined; </div><div class=\"line\">if (typeof(tmp) == &quot;undefined&quot;)&#123; </div><div class=\"line\">alert(&quot;undefined&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null:\"></a>判断null:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = null; </div><div class=\"line\">if (!tmp &amp;&amp; typeof(tmp)!=&quot;undefined&quot; &amp;&amp; tmp!=0)&#123; </div><div class=\"line\">alert(&quot;null&quot;); </div><div class=\"line\">&#125;　&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断NaN\"><a href=\"#判断NaN\" class=\"headerlink\" title=\"判断NaN:\"></a>判断NaN:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = 0/0; </div><div class=\"line\">if(isNaN(tmp))&#123; </div><div class=\"line\">alert(&quot;NaN&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"说说类的创建、继承和闭包\"><a href=\"#说说类的创建、继承和闭包\" class=\"headerlink\" title=\"说说类的创建、继承和闭包\"></a>说说类的创建、继承和闭包</h1><h1 id=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"><a href=\"#有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\" class=\"headerlink\" title=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"></a>有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],</div><div class=\"line\"> sum = 0;</div><div class=\"line\"> sum = a.slice(0, 10).reduce(function(pre, current) &#123;</div><div class=\"line\"> 　　return pre + current;</div><div class=\"line\"> &#125;);</div><div class=\"line\">  </div><div class=\"line\"> console.log(sum); //55</div></pre></td></tr></table></figure>\n<h1 id=\"下面的代码会输出什么：\"><a href=\"#下面的代码会输出什么：\" class=\"headerlink\" title=\"下面的代码会输出什么：\"></a>下面的代码会输出什么：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var test = (function(a) &#123;</div><div class=\"line\">    this.a = a;</div><div class=\"line\">    return function(b) &#123;</div><div class=\"line\">        return this.a + b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; (function(a, b) &#123;</div><div class=\"line\">    return a;</div><div class=\"line\">&#125;(1, 2))); </div><div class=\"line\"></div><div class=\"line\">console.log(test(4)); //输出什么？？？？</div></pre></td></tr></table></figure>\n<p>最后发现这大部分都是阿里的面试题= =<br><a href=\"http://www.cnblogs.com/beidan/p/5285742.html\" target=\"_blank\" rel=\"external\">阿里前端笔试题目</a></p>\n","excerpt":"<p>最近准备找工作受受刺激好好学习= =，趁着现在有些问题还能想起来记录一下<br>某在线教育网站前端岗位面试和某金融公司面试题，总得来说前者理论性的东西问的更多一点，可以很清楚的了解你的实力，后者问的开放性的问题比较多一点，大部分都是问什么什么你用过吗，而不是去问是咸的原理</p>","more":"<h1 id=\"Q-rem布局的原理\"><a href=\"#Q-rem布局的原理\" class=\"headerlink\" title=\"Q:rem布局的原理\"></a>Q:rem布局的原理</h1><p>A：使用rem布局实质上都是通过改写html的font-size基准值，来实现不同设备之间的适配。<br>rem是CSS3的长度单位，相对文档跟元素html，比如设置font-size=100px,那么1rem=100px</p>\n<p><a href=\"http://www.tuicool.com/articles/FjMfuyM\">移动端页面开发适配 rem布局原理</a></p>\n<blockquote>\n<p>网易的做法：</p>\n<p>1) 将布局适口设置为视觉适口，不进行缩放，即理想适口。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; &lt;meta name=&quot;viewport&quot;content=&quot;initial-scale=1,maximum-scale=1, minimum-scale=1”&gt;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>2) 以设计稿分辨率为基准，取100px为font-size的参照，那么body元素的宽度就可以设置为<code>width:6.4rem（640/100）</code>，当我们将布局视口设置为320时，于是html的 <code>font-size=deviceWidth / 6.4</code>。</p>\n<p>3) 通过<code>document.documentElement.clientWidth</code>获取 <code>deviceWidth</code>；</p>\n<p>4) 当页面的<code>dom ready</code>后设置<code>html font-size</code>,</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; document.documentElement.style.fontSize =document.documentElement.clientWidth / 6.4 + ‘px’</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p>5) 通过 <code>mediaQuery</code> 设置字体大小，字体大小不可以使用rem,原因是误差太大。</p>\n<p>以640的设计稿为例最终的设置html <code>font-size</code>代码如下，布局时拿设计稿标注的尺寸除以100，就是rem的值，相当简单啊</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&gt; var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">&gt; if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt; document.documentElement.style.fontSize = deviceWidth / 6.4 + &apos;px&apos;;</div><div class=\"line\">&gt; 这里if(deviceWidth &gt; 640) deviceWidth = 640;</div><div class=\"line\">&gt;</div></pre></td></tr></table></figure>\n<p> 是因为当deviceWidth大于640时物理分辨率已经大于1280（取决于 dpr ），应该去访问pc的网站；</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var documentElement = document.documentElement;</div><div class=\"line\"></div><div class=\"line\">    if (documentElement.clientWidth &gt;= 750) &#123;</div><div class=\"line\">        documentElement.style.fontSize = &apos;54px&apos;;</div><div class=\"line\">    &#125; else &#123;</div><div class=\"line\">        documentElement.style.fontSize = &quot;$&#123;documentElement.getBoundingClientRect().width / 10&#125;px&quot;;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    (function () &#123;</div><div class=\"line\">        document.addEventListener(&apos;DOMContentLoaded&apos;, function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;, false);</div><div class=\"line\">        window.onresize = function () &#123;</div><div class=\"line\">            var deviceWidth = document.documentElement.clientWidth;</div><div class=\"line\">            document.documentElement.style.fontSize = deviceWidth / 10 + &apos;px&apos;;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        console.log(document.width)</div><div class=\"line\">    &#125;)();</div></pre></td></tr></table></figure>\n<h1 id=\"Q-常见的布局方式\"><a href=\"#Q-常见的布局方式\" class=\"headerlink\" title=\"Q:常见的布局方式\"></a>Q:常见的布局方式</h1><p>A：</p>\n<ol>\n<li>静态布局（Static Layout）</li>\n<li>弹性布局（Flex）</li>\n<li>自适应布局（Adapive Layout）</li>\n<li>流式布局（Liquid Layout）</li>\n<li>响应式布局（Responsive Layout）<br><a href=\"http://blog.csdn.net/gertYY/article/details/52764527\">web前端开发之几种布局方式之响应式布局</a></li>\n</ol>\n<h1 id=\"Q-怎么使用媒体查询\"><a href=\"#Q-怎么使用媒体查询\" class=\"headerlink\" title=\"Q:怎么使用媒体查询\"></a>Q:怎么使用媒体查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">@media screen and (max-width:720px) and (min-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">       background-color:red;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">@media screen and (max-width:320px)&#123;</div><div class=\"line\"></div><div class=\"line\">      body&#123;</div><div class=\"line\"></div><div class=\"line\">         background-color:blue;</div><div class=\"line\"></div><div class=\"line\">       &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Q-移动端优化方法\"><a href=\"#Q-移动端优化方法\" class=\"headerlink\" title=\"Q:移动端优化方法\"></a>Q:移动端优化方法</h1><h1 id=\"Q：js模块化\"><a href=\"#Q：js模块化\" class=\"headerlink\" title=\"Q：js模块化\"></a>Q：js模块化</h1><h1 id=\"Q-怎么实现延迟加载\"><a href=\"#Q-怎么实现延迟加载\" class=\"headerlink\" title=\"Q:怎么实现延迟加载\"></a>Q:怎么实现延迟加载</h1><h1 id=\"Q-你对闭包的理解\"><a href=\"#Q-你对闭包的理解\" class=\"headerlink\" title=\"Q:你对闭包的理解\"></a>Q:你对闭包的理解</h1><h1 id=\"Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"><a href=\"#Q-localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\" class=\"headerlink\" title=\"Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制\"></a>Q:localStorage、sessionStorage、cookie之间的区别，各自的储存容量、怎么选择相应的存储机制</h1><p>上交所初试之笔试题：</p>\n<h1 id=\"什么是“use-strait”有什么好处有什么坏处\"><a href=\"#什么是“use-strait”有什么好处有什么坏处\" class=\"headerlink\" title=\"什么是“use strait”有什么好处有什么坏处\"></a>什么是“use strait”有什么好处有什么坏处</h1><blockquote>\n<p>ECMAscript 5添加了第二种运行模式：”严格模式”（strict mode）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p>\n<p>设立”严格模式”的目的，主要有以下几个：</p>\n<ol>\n<li><p>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</p>\n</li>\n<li><p>消除代码运行的一些不安全之处，保证代码运行的安全；</p>\n</li>\n<li><p>提高编译器效率，增加运行速度；</p>\n</li>\n<li><p>为未来新版本的Javascript做好铺垫。</p>\n</li>\n</ol>\n<p>注：经过测试 IE6,7,8,9 均不支持严格模式。</p>\n<p>缺点：</p>\n<p>现在网站的 JS 都会进行压缩，一些文件用了严格模式，而另一些没有。这时这些本来是严格模式的文件，被 merge 后，这个串就到了文件的中间，不仅没有指示严格模式，反而在压缩后浪费了字节。</p>\n</blockquote>\n<h1 id=\"解释下javascript中this是怎么工作的\"><a href=\"#解释下javascript中this是怎么工作的\" class=\"headerlink\" title=\"解释下javascript中this是怎么工作的\"></a>解释下javascript中this是怎么工作的</h1><blockquote>\n<p>JavaScript 只有函数能提供作用域，this 表达了这个作用域的上下文。这个上下文是一个对象，默认是 global 对象：</p>\n<p>function foo() {</p>\n<p>  // 在终端输出 this 对象<br>  console.log(this)<br>}</p>\n<p>foo() // 输出： global 对象 在浏览器中即 window 对象</p>\n<p>但是也可以在函数被运行的时候动态指定（call,apply, bind）：</p>\n<p>var bar = { name: ‘bar’ }</p>\n<p>foo.call(bar) // 输出： { name: ‘bar’ }</p>\n<p>存在一个特殊的情形，就是使用 new 关键字调用一个构造函数的时候。这会为这个函数自动创建一个设置在原型末端的上下文对象。</p>\n<p>new foo() // 输出： {} 在构造函数内部创建一个对象</p>\n<p>作者：管斌瑞<br>链接：<a href=\"https://www.zhihu.com/question/19624483/answer/25745246\">https://www.zhihu.com/question/19624483/answer/25745246</a><br>来源：知乎<br>著作权归作者所有，转载请联系作者获得授权。</p>\n</blockquote>\n<h1 id=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"><a href=\"#有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\" class=\"headerlink\" title=\"有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对\"></a>有一个未知长度的数组a，如果它的长度为0就把数字1添加到数组里，否则按照先进先出的队列规则让第一个元素出对</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.length === 0 ? a.push(1) : a.shift();</div></pre></td></tr></table></figure>\n<h1 id=\"描述下resetcss文件的作用和使用它的好处\"><a href=\"#描述下resetcss文件的作用和使用它的好处\" class=\"headerlink\" title=\"描述下resetcss文件的作用和使用它的好处\"></a>描述下<code>reset</code>css文件的作用和使用它的好处</h1><p>重置浏览器的css默认属性；浏览器的品种不一样，那么对默认样式的解释不一样，通过reset可以达到显示一致的效果</p>\n<h1 id=\"说说前端怎么如何解决异步回调地狱\"><a href=\"#说说前端怎么如何解决异步回调地狱\" class=\"headerlink\" title=\"说说前端怎么如何解决异步回调地狱\"></a>说说前端怎么如何解决异步回调地狱</h1><h1 id=\"请解释Function-prototype-bind的作用\"><a href=\"#请解释Function-prototype-bind的作用\" class=\"headerlink\" title=\"请解释Function.prototype.bind的作用\"></a>请解释Function.prototype.bind的作用</h1><blockquote>\n<p>bind() 方法的主要作用就是将函数绑定至某个对象，bind() 方法会创建一个函数，函数体内this对象的值会被绑定到传入bind() 函数的值。</p>\n<p>例如，在 f() 函数上调用 bind() 方法并传入参数 obj ，即 f.bind(obj) ，这将返回一个新函数, 新函数会把原始的函数 f() 当做 obj 的方法来调用,就像 obj.f() 似的，当然这时 f() 函数中的 this 对象指向的是 obj 。</p>\n</blockquote>\n<h1 id=\"描述以下变量的区别：null，undefined，该如何检测他们\"><a href=\"#描述以下变量的区别：null，undefined，该如何检测他们\" class=\"headerlink\" title=\"描述以下变量的区别：null，undefined，该如何检测他们\"></a>描述以下变量的区别：null，undefined，该如何检测他们</h1><h2 id=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"><a href=\"#null表示”没有对象”，即该处不应该有值。典型用法是：\" class=\"headerlink\" title=\"null表示”没有对象”，即该处不应该有值。典型用法是：\"></a>null表示”没有对象”，即该处不应该有值。典型用法是：</h2><p>（1） 作为函数的参数，表示该函数的参数不是对象。<br>（2） 作为对象原型链的终点。</p>\n<h2 id=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"><a href=\"#undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\" class=\"headerlink\" title=\"undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：\"></a>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</h2><p>（1）变量被声明了，但没有赋值时，就等于undefined。<br>（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。<br>（3）对象没有赋值的属性，该属性的值为undefined。<br>（4）函数没有返回值时，默认返回undefined。</p>\n<h2 id=\"判断undefined\"><a href=\"#判断undefined\" class=\"headerlink\" title=\"判断undefined:\"></a>判断undefined:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = undefined; </div><div class=\"line\">if (typeof(tmp) == &quot;undefined&quot;)&#123; </div><div class=\"line\">alert(&quot;undefined&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断null\"><a href=\"#判断null\" class=\"headerlink\" title=\"判断null:\"></a>判断null:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = null; </div><div class=\"line\">if (!tmp &amp;&amp; typeof(tmp)!=&quot;undefined&quot; &amp;&amp; tmp!=0)&#123; </div><div class=\"line\">alert(&quot;null&quot;); </div><div class=\"line\">&#125;　&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"判断NaN\"><a href=\"#判断NaN\" class=\"headerlink\" title=\"判断NaN:\"></a>判断NaN:</h2><p>复制代码 代码如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;span style=&quot;font-size: small;&quot;&gt;var tmp = 0/0; </div><div class=\"line\">if(isNaN(tmp))&#123; </div><div class=\"line\">alert(&quot;NaN&quot;); </div><div class=\"line\">&#125;&lt;/span&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"说说类的创建、继承和闭包\"><a href=\"#说说类的创建、继承和闭包\" class=\"headerlink\" title=\"说说类的创建、继承和闭包\"></a>说说类的创建、继承和闭包</h1><h1 id=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"><a href=\"#有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\" class=\"headerlink\" title=\"有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和\"></a>有一个长度为100的数组，请以优雅的方式求出该数组的前10个元素之和</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],</div><div class=\"line\"> sum = 0;</div><div class=\"line\"> sum = a.slice(0, 10).reduce(function(pre, current) &#123;</div><div class=\"line\"> 　　return pre + current;</div><div class=\"line\"> &#125;);</div><div class=\"line\">  </div><div class=\"line\"> console.log(sum); //55</div></pre></td></tr></table></figure>\n<h1 id=\"下面的代码会输出什么：\"><a href=\"#下面的代码会输出什么：\" class=\"headerlink\" title=\"下面的代码会输出什么：\"></a>下面的代码会输出什么：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">var test = (function(a) &#123;</div><div class=\"line\">    this.a = a;</div><div class=\"line\">    return function(b) &#123;</div><div class=\"line\">        return this.a + b;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125; (function(a, b) &#123;</div><div class=\"line\">    return a;</div><div class=\"line\">&#125;(1, 2))); </div><div class=\"line\"></div><div class=\"line\">console.log(test(4)); //输出什么？？？？</div></pre></td></tr></table></figure>\n<p>最后发现这大部分都是阿里的面试题= =<br><a href=\"http://www.cnblogs.com/beidan/p/5285742.html\">阿里前端笔试题目</a></p>"},{"title":"自律才能自由","date":"2017-03-02T13:55:57.000Z","_content":"我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~\n因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”\n\n<!--more-->\n\n# 初识“自律才有自由”\n第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 [坚持跑步到底有什么改变](https://www.zhihu.com/question/28656794?utm_campaign=official_account&utm_source=weibo&utm_medium=zhihu&utm_content=question)\n\n看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。\n\n其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下\n\n# 什么是自律和自由\n其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！\n\n但其实不然\n\n**自律 -- 懂得约束自己的欲望、自己管理自己**\n\n**自由 -- 只听从本心意愿，不受他人摆布**\n\n# 为什么说自律才有自由\n\n其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由\n\n举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望\n\n# 为什么要自律 \n\n## 达到自由\n我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己\n\n## 成长\n人的懒惰本质 -- 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）\n\n只要做让自己感觉不舒服的事情才能成长（出自唐宁）\n\n# 自律需要怎么做\n\n**发自内心的想要到达哪一种自由**\n\n“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”\n-- 坚持数年长跑的runner\n\n只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语\n\n\n","source":"_posts/Freedom-of-self-discipline.md","raw":"---\ntitle: 自律才能自由\ndate: 2017-03-02 21:55:57\ntags: 脑子里的小想法\ncategories: 随笔\n---\n我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~\n因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”\n\n<!--more-->\n\n# 初识“自律才有自由”\n第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 [坚持跑步到底有什么改变](https://www.zhihu.com/question/28656794?utm_campaign=official_account&utm_source=weibo&utm_medium=zhihu&utm_content=question)\n\n看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。\n\n其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下\n\n# 什么是自律和自由\n其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！\n\n但其实不然\n\n**自律 -- 懂得约束自己的欲望、自己管理自己**\n\n**自由 -- 只听从本心意愿，不受他人摆布**\n\n# 为什么说自律才有自由\n\n其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由\n\n举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望\n\n# 为什么要自律 \n\n## 达到自由\n我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己\n\n## 成长\n人的懒惰本质 -- 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）\n\n只要做让自己感觉不舒服的事情才能成长（出自唐宁）\n\n# 自律需要怎么做\n\n**发自内心的想要到达哪一种自由**\n\n“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”\n-- 坚持数年长跑的runner\n\n只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语\n\n\n","slug":"Freedom-of-self-discipline","published":1,"updated":"2017-03-02T14:17:46.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel1g0006qkyfg008j0w0","content":"<p>我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~<br>因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”</p>\n<a id=\"more\"></a>\n<h1 id=\"初识“自律才有自由”\"><a href=\"#初识“自律才有自由”\" class=\"headerlink\" title=\"初识“自律才有自由”\"></a>初识“自律才有自由”</h1><p>第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 <a href=\"https://www.zhihu.com/question/28656794?utm_campaign=official_account&amp;utm_source=weibo&amp;utm_medium=zhihu&amp;utm_content=question\" target=\"_blank\" rel=\"external\">坚持跑步到底有什么改变</a></p>\n<p>看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。</p>\n<p>其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下</p>\n<h1 id=\"什么是自律和自由\"><a href=\"#什么是自律和自由\" class=\"headerlink\" title=\"什么是自律和自由\"></a>什么是自律和自由</h1><p>其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！</p>\n<p>但其实不然</p>\n<p><strong>自律 – 懂得约束自己的欲望、自己管理自己</strong></p>\n<p><strong>自由 – 只听从本心意愿，不受他人摆布</strong></p>\n<h1 id=\"为什么说自律才有自由\"><a href=\"#为什么说自律才有自由\" class=\"headerlink\" title=\"为什么说自律才有自由\"></a>为什么说自律才有自由</h1><p>其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由</p>\n<p>举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望</p>\n<h1 id=\"为什么要自律\"><a href=\"#为什么要自律\" class=\"headerlink\" title=\"为什么要自律\"></a>为什么要自律</h1><h2 id=\"达到自由\"><a href=\"#达到自由\" class=\"headerlink\" title=\"达到自由\"></a>达到自由</h2><p>我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己</p>\n<h2 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h2><p>人的懒惰本质 – 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）</p>\n<p>只要做让自己感觉不舒服的事情才能成长（出自唐宁）</p>\n<h1 id=\"自律需要怎么做\"><a href=\"#自律需要怎么做\" class=\"headerlink\" title=\"自律需要怎么做\"></a>自律需要怎么做</h1><p><strong>发自内心的想要到达哪一种自由</strong></p>\n<p>“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”<br>– 坚持数年长跑的runner</p>\n<p>只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语</p>\n","excerpt":"<p>我们公司每个周五都要做一个分享会，这个周五轮到我了，/(ㄒoㄒ)/~~<br>因为要演讲20分钟左右的时间，考虑了下最终决定主题是“自律才有自由”</p>","more":"<h1 id=\"初识“自律才有自由”\"><a href=\"#初识“自律才有自由”\" class=\"headerlink\" title=\"初识“自律才有自由”\"></a>初识“自律才有自由”</h1><p>第一次听到“自律才有自由”这句话大概是在一个难眠的页面，因为励志要减肥已经说了有好久了，但是一直都没有减掉多少，捂脸ing，然后我惯用的方式就是去知乎上找话题，受受刺激。然后发现了一个话题是 <a href=\"https://www.zhihu.com/question/28656794?utm_campaign=official_account&amp;utm_source=weibo&amp;utm_medium=zhihu&amp;utm_content=question\">坚持跑步到底有什么改变</a></p>\n<p>看了回答后久久不能入睡，原来很多人坚持跑步并不是为了减肥，并且有那么多人坚持数年的长跑。然后就感觉很羞愧，觉得自己并没有为了什么事情全身心100%的投入过，从来没有。</p>\n<p>其中有一个answer回答中有一话给我的印象最深“自律才有自由”，忘记他当时是怎么说的了，然后为了分享会，我自己又找了一些资料，在这里与大家分享一下</p>\n<h1 id=\"什么是自律和自由\"><a href=\"#什么是自律和自由\" class=\"headerlink\" title=\"什么是自律和自由\"></a>什么是自律和自由</h1><p>其实看起来自律和自由是相反的概念，自律是自我约束，而自由又是随心所欲，这两个怎么会有因果关系？！</p>\n<p>但其实不然</p>\n<p><strong>自律 – 懂得约束自己的欲望、自己管理自己</strong></p>\n<p><strong>自由 – 只听从本心意愿，不受他人摆布</strong></p>\n<h1 id=\"为什么说自律才有自由\"><a href=\"#为什么说自律才有自由\" class=\"headerlink\" title=\"为什么说自律才有自由\"></a>为什么说自律才有自由</h1><p>其实有很多人都对自由有不同的看法，这里所说的自由并不是随心所欲的肤浅任性，不是单纯的想做什么就做什么，而是不想做什么就可以不做什么，是自己可以有选择的权利，能够自主，在一定程度上掌握自己的命运，这才是我们讨论的自由，然而真正实现这种自由，靠的是自律。所以说自律才有自由</p>\n<p>举个例子，就比如你既想随心所欲的吃东西，又想保持苗条的身材，甚至还有一点小腹肌。那么通常情况下这两个事不可兼得的，所以就需要自律来满足我们的欲望</p>\n<h1 id=\"为什么要自律\"><a href=\"#为什么要自律\" class=\"headerlink\" title=\"为什么要自律\"></a>为什么要自律</h1><h2 id=\"达到自由\"><a href=\"#达到自由\" class=\"headerlink\" title=\"达到自由\"></a>达到自由</h2><p>我们有太多的欲望（随心所欲的吃和苗条的身材），我们要想达到我们想要的自由，就必须约束自己</p>\n<h2 id=\"成长\"><a href=\"#成长\" class=\"headerlink\" title=\"成长\"></a>成长</h2><p>人的懒惰本质 – 人们总是愿意在把握程度高的事情上反复花时间，而在真正重要的事情上不用力，慢慢的，他们自己停止了成长，然后找几个借口把重要的事情敷衍过去（带入到自己的工作当中）</p>\n<p>只要做让自己感觉不舒服的事情才能成长（出自唐宁）</p>\n<h1 id=\"自律需要怎么做\"><a href=\"#自律需要怎么做\" class=\"headerlink\" title=\"自律需要怎么做\"></a>自律需要怎么做</h1><p><strong>发自内心的想要到达哪一种自由</strong></p>\n<p>“突然有一天被自己肚子上的肥肉恶心到了，对于肌肉的痴迷。一旦有了这些动机，迈开步子好像也不再是什么难事，难的是能迈开多大的步子，能坚持多久”<br>– 坚持数年长跑的runner</p>\n<p>只有自己发布内心想要一种什么样的自由才是最有效的语言，胜过旁人的千言万语</p>"},{"title":"Git常用命令&完成一个小工作流","date":"2017-03-15T14:32:30.000Z","description":["git常用命令","git使用技巧","git实战"],"_content":"本篇长期更新，记录一些常用的git命令和使用git团队合作的命令\n\n<!--more-->\n# git的工作步骤\n1. 修改文件的工作目录\n2. 将这些文件添加到暂存区\n3. 执行commit操作，发布版本\n4. push将发布的版本推送到git仓库\n\n# git常见术语\n## commit\n提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。\n\n## branches\n分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交\n\n## tags\ngit中的tag指向一次commit的id。通常用来给开发做版本号。\n\n### 打标签\n```\ngit tag -a v1.01 -m \"Relase version 1.01\"\n```\n\n`git tags `是打标签的命令，`-a`是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释\n\n### 提交标签到远端仓库\n```\ngit push origin -tags\n```\n\n就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。\n\n### 删除标签\n```\ngit tag -d v1.01\n```\n`-d`表示删除，后面跟版本号\n\n### 删除远程标签\n\n```\ngit push origin :refs/tags/v1.01\n```\n### 查看标签\n`git tag`\n或者\n`git tag -l`\n\n# clone\n克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息\n\n# pull\npull操作是用于两个存储库实例之间的同步\n\n# push\n将本地仓库中的文件同步到远端库中\n\n# head\nHEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中\n\n# git常用命令\n\n```\n初始化新版本库：git init\n全局设置：git config   --global user.name \"xzavier\"  git config --global user.email \"xzavier.xxx.com\"\n克隆版本库：git clone \"url\"\n查看分支：git branch\n创建分支：git branch branch_nema\n切换分支：git checkout branch_name\n创建+切换分支：git checkout -b branch_name\n合并某分支到当前分支：git merge branch_name\n重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支\n重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支\n删除分支：git branch -d branch_name \n强制删除分支： git branch -D branch_name\n删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支\n拉取代码：git pull orgin branch_name\n查看更改：git status\n查看更改细节：git diff file_name\n查看谁修改过代码：git blame filename\n回到上次修改：git reset --hard\n添加单个文件：git add filename.js\n添加所有js文件：git add *.js\n添加所有文件：git add .\n提交添加的文件：git commit -m \"your description about this branch\"\n提交单个文件：git commit -m \"your description about this branch\" filename.js\npush分支：git push orgin your_branch_name\n备份当前分支内容：git stash\n查看历史记录：git log\n创建标签：git tag 1.0.0  //标签无法重命名\n显示标签列表：git tag\n切出标签：git checkout 1.0.0\n删除标签：git tag -d 1.0.0\n查看git远程地址：git remote -v\n更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git\n\n```\n\n# git+gulp小工作流\n早上上班的时候切换到master分支，拉一下代码\n```\ngit pull origin master\n\n```\n开始写代码，新建一个分支\n```\ngit checkout -b branch_name\n\n```\n正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：\n```\ngit stash\n```\n切换到别的分支修改代码：\n```\ngit checkout -b branch_name\n\n```\n修复bug后提交代码查看修改：\n```\ngit status\n```\n需要查看修改的细节：\n```\ngit diff file_name\n```\n没有问题就提交：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n解决完bug切换到原来的分支\n```\ngit checkout -b you_old_branch\n```\n恢复刚刚保存的内容：\n```\ngit stash   //备份当前的工作区的内容，保存到git栈\n\ngit stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复\ngit stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复\ngit stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了\n```\n\n恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）\n```\ngit pull orgin master\n\n```\n或者\n```\ngit pull orgin his/her_branch_name\n```\n\n\n用gulp构建工具\n在修改bug的时候将环境调成本地环境\n`protected`<`config`<`dev.php`下的`#当前环境  'env' => ''`\n`env`为空为上线环境，`env`为`dev`为本地环境\n\n先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交\n\n然后查看完线上环境没有问题了可以进行`gulp build`，可能会报错\n\n```\nError: ENOENT: no such file or directory, open 'C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json'\n    at Error (native)\n```\n这是要clean一下，`gulp clean:temp`\n然后在`gulp build`\n之后就可以git三件套了\n\n\n摘自：[前端资源系列（1）-Git常用命令&设置快捷命令&小工作流](https://segmentfault.com/a/1190000005945614)\n\n\n","source":"_posts/GitCommands.md","raw":"---\ntitle: Git常用命令&完成一个小工作流\ndate: 2017-03-15 22:32:30\ntags: git \ncategories: git\ndescription: [git常用命令,git使用技巧,git实战]\n---\n本篇长期更新，记录一些常用的git命令和使用git团队合作的命令\n\n<!--more-->\n# git的工作步骤\n1. 修改文件的工作目录\n2. 将这些文件添加到暂存区\n3. 执行commit操作，发布版本\n4. push将发布的版本推送到git仓库\n\n# git常见术语\n## commit\n提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。\n\n## branches\n分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交\n\n## tags\ngit中的tag指向一次commit的id。通常用来给开发做版本号。\n\n### 打标签\n```\ngit tag -a v1.01 -m \"Relase version 1.01\"\n```\n\n`git tags `是打标签的命令，`-a`是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释\n\n### 提交标签到远端仓库\n```\ngit push origin -tags\n```\n\n就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。\n\n### 删除标签\n```\ngit tag -d v1.01\n```\n`-d`表示删除，后面跟版本号\n\n### 删除远程标签\n\n```\ngit push origin :refs/tags/v1.01\n```\n### 查看标签\n`git tag`\n或者\n`git tag -l`\n\n# clone\n克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息\n\n# pull\npull操作是用于两个存储库实例之间的同步\n\n# push\n将本地仓库中的文件同步到远端库中\n\n# head\nHEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中\n\n# git常用命令\n\n```\n初始化新版本库：git init\n全局设置：git config   --global user.name \"xzavier\"  git config --global user.email \"xzavier.xxx.com\"\n克隆版本库：git clone \"url\"\n查看分支：git branch\n创建分支：git branch branch_nema\n切换分支：git checkout branch_name\n创建+切换分支：git checkout -b branch_name\n合并某分支到当前分支：git merge branch_name\n重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支\n重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支\n删除分支：git branch -d branch_name \n强制删除分支： git branch -D branch_name\n删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支\n拉取代码：git pull orgin branch_name\n查看更改：git status\n查看更改细节：git diff file_name\n查看谁修改过代码：git blame filename\n回到上次修改：git reset --hard\n添加单个文件：git add filename.js\n添加所有js文件：git add *.js\n添加所有文件：git add .\n提交添加的文件：git commit -m \"your description about this branch\"\n提交单个文件：git commit -m \"your description about this branch\" filename.js\npush分支：git push orgin your_branch_name\n备份当前分支内容：git stash\n查看历史记录：git log\n创建标签：git tag 1.0.0  //标签无法重命名\n显示标签列表：git tag\n切出标签：git checkout 1.0.0\n删除标签：git tag -d 1.0.0\n查看git远程地址：git remote -v\n更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git\n\n```\n\n# git+gulp小工作流\n早上上班的时候切换到master分支，拉一下代码\n```\ngit pull origin master\n\n```\n开始写代码，新建一个分支\n```\ngit checkout -b branch_name\n\n```\n正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：\n```\ngit stash\n```\n切换到别的分支修改代码：\n```\ngit checkout -b branch_name\n\n```\n修复bug后提交代码查看修改：\n```\ngit status\n```\n需要查看修改的细节：\n```\ngit diff file_name\n```\n没有问题就提交：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n解决完bug切换到原来的分支\n```\ngit checkout -b you_old_branch\n```\n恢复刚刚保存的内容：\n```\ngit stash   //备份当前的工作区的内容，保存到git栈\n\ngit stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复\ngit stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复\ngit stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了\n```\n\n恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：\n```\ngit add .\ngit commit \"your description\"\ngit push orgin your_branch_name\n```\n\n最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）\n```\ngit pull orgin master\n\n```\n或者\n```\ngit pull orgin his/her_branch_name\n```\n\n\n用gulp构建工具\n在修改bug的时候将环境调成本地环境\n`protected`<`config`<`dev.php`下的`#当前环境  'env' => ''`\n`env`为空为上线环境，`env`为`dev`为本地环境\n\n先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交\n\n然后查看完线上环境没有问题了可以进行`gulp build`，可能会报错\n\n```\nError: ENOENT: no such file or directory, open 'C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json'\n    at Error (native)\n```\n这是要clean一下，`gulp clean:temp`\n然后在`gulp build`\n之后就可以git三件套了\n\n\n摘自：[前端资源系列（1）-Git常用命令&设置快捷命令&小工作流](https://segmentfault.com/a/1190000005945614)\n\n\n","slug":"GitCommands","published":1,"updated":"2017-04-12T15:37:25.602Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel1g0008qkyfzxlgjl3l","content":"<p>本篇长期更新，记录一些常用的git命令和使用git团队合作的命令</p>\n<a id=\"more\"></a>\n<h1 id=\"git的工作步骤\"><a href=\"#git的工作步骤\" class=\"headerlink\" title=\"git的工作步骤\"></a>git的工作步骤</h1><ol>\n<li>修改文件的工作目录</li>\n<li>将这些文件添加到暂存区</li>\n<li>执行commit操作，发布版本</li>\n<li>push将发布的版本推送到git仓库</li>\n</ol>\n<h1 id=\"git常见术语\"><a href=\"#git常见术语\" class=\"headerlink\" title=\"git常见术语\"></a>git常见术语</h1><h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><p>提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。</p>\n<h2 id=\"branches\"><a href=\"#branches\" class=\"headerlink\" title=\"branches\"></a>branches</h2><p>分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交</p>\n<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h2><p>git中的tag指向一次commit的id。通常用来给开发做版本号。</p>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -a v1.01 -m &quot;Relase version 1.01&quot;</div></pre></td></tr></table></figure>\n<p><code>git tags</code>是打标签的命令，<code>-a</code>是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释</p>\n<h3 id=\"提交标签到远端仓库\"><a href=\"#提交标签到远端仓库\" class=\"headerlink\" title=\"提交标签到远端仓库\"></a>提交标签到远端仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin -tags</div></pre></td></tr></table></figure>\n<p>就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。</p>\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -d v1.01</div></pre></td></tr></table></figure>\n<p><code>-d</code>表示删除，后面跟版本号</p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :refs/tags/v1.01</div></pre></td></tr></table></figure>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><p><code>git tag</code><br>或者<br><code>git tag -l</code></p>\n<h1 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h1><p>克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息</p>\n<h1 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h1><p>pull操作是用于两个存储库实例之间的同步</p>\n<h1 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h1><p>将本地仓库中的文件同步到远端库中</p>\n<h1 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h1><p>HEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中</p>\n<h1 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">初始化新版本库：git init</div><div class=\"line\">全局设置：git config   --global user.name &quot;xzavier&quot;  git config --global user.email &quot;xzavier.xxx.com&quot;</div><div class=\"line\">克隆版本库：git clone &quot;url&quot;</div><div class=\"line\">查看分支：git branch</div><div class=\"line\">创建分支：git branch branch_nema</div><div class=\"line\">切换分支：git checkout branch_name</div><div class=\"line\">创建+切换分支：git checkout -b branch_name</div><div class=\"line\">合并某分支到当前分支：git merge branch_name</div><div class=\"line\">重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支</div><div class=\"line\">重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支</div><div class=\"line\">删除分支：git branch -d branch_name </div><div class=\"line\">强制删除分支： git branch -D branch_name</div><div class=\"line\">删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支</div><div class=\"line\">拉取代码：git pull orgin branch_name</div><div class=\"line\">查看更改：git status</div><div class=\"line\">查看更改细节：git diff file_name</div><div class=\"line\">查看谁修改过代码：git blame filename</div><div class=\"line\">回到上次修改：git reset --hard</div><div class=\"line\">添加单个文件：git add filename.js</div><div class=\"line\">添加所有js文件：git add *.js</div><div class=\"line\">添加所有文件：git add .</div><div class=\"line\">提交添加的文件：git commit -m &quot;your description about this branch&quot;</div><div class=\"line\">提交单个文件：git commit -m &quot;your description about this branch&quot; filename.js</div><div class=\"line\">push分支：git push orgin your_branch_name</div><div class=\"line\">备份当前分支内容：git stash</div><div class=\"line\">查看历史记录：git log</div><div class=\"line\">创建标签：git tag 1.0.0  //标签无法重命名</div><div class=\"line\">显示标签列表：git tag</div><div class=\"line\">切出标签：git checkout 1.0.0</div><div class=\"line\">删除标签：git tag -d 1.0.0</div><div class=\"line\">查看git远程地址：git remote -v</div><div class=\"line\">更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git</div></pre></td></tr></table></figure>\n<h1 id=\"git-gulp小工作流\"><a href=\"#git-gulp小工作流\" class=\"headerlink\" title=\"git+gulp小工作流\"></a>git+gulp小工作流</h1><p>早上上班的时候切换到master分支，拉一下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure></p>\n<p>开始写代码，新建一个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure></p>\n<p>切换到别的分支修改代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>修复bug后提交代码查看修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure></p>\n<p>需要查看修改的细节：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff file_name</div></pre></td></tr></table></figure></p>\n<p>没有问题就提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>解决完bug切换到原来的分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b you_old_branch</div></pre></td></tr></table></figure></p>\n<p>恢复刚刚保存的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash   //备份当前的工作区的内容，保存到git栈</div><div class=\"line\"></div><div class=\"line\">git stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复</div><div class=\"line\">git stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复</div><div class=\"line\">git stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了</div></pre></td></tr></table></figure></p>\n<p>恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin master</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin his/her_branch_name</div></pre></td></tr></table></figure></p>\n<p>用gulp构建工具<br>在修改bug的时候将环境调成本地环境<br><code>protected</code>&lt;<code>config</code>&lt;<code>dev.php</code>下的<code>#当前环境  &#39;env&#39; =&gt; &#39;&#39;</code><br><code>env</code>为空为上线环境，<code>env</code>为<code>dev</code>为本地环境</p>\n<p>先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交</p>\n<p>然后查看完线上环境没有问题了可以进行<code>gulp build</code>，可能会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: ENOENT: no such file or directory, open &apos;C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json&apos;</div><div class=\"line\">    at Error (native)</div></pre></td></tr></table></figure>\n<p>这是要clean一下，<code>gulp clean:temp</code><br>然后在<code>gulp build</code><br>之后就可以git三件套了</p>\n<p>摘自：<a href=\"https://segmentfault.com/a/1190000005945614\" target=\"_blank\" rel=\"external\">前端资源系列（1）-Git常用命令&amp;设置快捷命令&amp;小工作流</a></p>\n","excerpt":"<p>本篇长期更新，记录一些常用的git命令和使用git团队合作的命令</p>","more":"<h1 id=\"git的工作步骤\"><a href=\"#git的工作步骤\" class=\"headerlink\" title=\"git的工作步骤\"></a>git的工作步骤</h1><ol>\n<li>修改文件的工作目录</li>\n<li>将这些文件添加到暂存区</li>\n<li>执行commit操作，发布版本</li>\n<li>push将发布的版本推送到git仓库</li>\n</ol>\n<h1 id=\"git常见术语\"><a href=\"#git常见术语\" class=\"headerlink\" title=\"git常见术语\"></a>git常见术语</h1><h2 id=\"commit\"><a href=\"#commit\" class=\"headerlink\" title=\"commit\"></a>commit</h2><p>提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。</p>\n<h2 id=\"branches\"><a href=\"#branches\" class=\"headerlink\" title=\"branches\"></a>branches</h2><p>分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交</p>\n<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h2><p>git中的tag指向一次commit的id。通常用来给开发做版本号。</p>\n<h3 id=\"打标签\"><a href=\"#打标签\" class=\"headerlink\" title=\"打标签\"></a>打标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -a v1.01 -m &quot;Relase version 1.01&quot;</div></pre></td></tr></table></figure>\n<p><code>git tags</code>是打标签的命令，<code>-a</code>是添加标签，其后要跟新标签号，-m及后面的字符串是对该标签的注释</p>\n<h3 id=\"提交标签到远端仓库\"><a href=\"#提交标签到远端仓库\" class=\"headerlink\" title=\"提交标签到远端仓库\"></a>提交标签到远端仓库</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin -tags</div></pre></td></tr></table></figure>\n<p>就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。</p>\n<h3 id=\"删除标签\"><a href=\"#删除标签\" class=\"headerlink\" title=\"删除标签\"></a>删除标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git tag -d v1.01</div></pre></td></tr></table></figure>\n<p><code>-d</code>表示删除，后面跟版本号</p>\n<h3 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git push origin :refs/tags/v1.01</div></pre></td></tr></table></figure>\n<h3 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h3><p><code>git tag</code><br>或者<br><code>git tag -l</code></p>\n<h1 id=\"clone\"><a href=\"#clone\" class=\"headerlink\" title=\"clone\"></a>clone</h1><p>克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息</p>\n<h1 id=\"pull\"><a href=\"#pull\" class=\"headerlink\" title=\"pull\"></a>pull</h1><p>pull操作是用于两个存储库实例之间的同步</p>\n<h1 id=\"push\"><a href=\"#push\" class=\"headerlink\" title=\"push\"></a>push</h1><p>将本地仓库中的文件同步到远端库中</p>\n<h1 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h1><p>HEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中</p>\n<h1 id=\"git常用命令\"><a href=\"#git常用命令\" class=\"headerlink\" title=\"git常用命令\"></a>git常用命令</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">初始化新版本库：git init</div><div class=\"line\">全局设置：git config   --global user.name &quot;xzavier&quot;  git config --global user.email &quot;xzavier.xxx.com&quot;</div><div class=\"line\">克隆版本库：git clone &quot;url&quot;</div><div class=\"line\">查看分支：git branch</div><div class=\"line\">创建分支：git branch branch_nema</div><div class=\"line\">切换分支：git checkout branch_name</div><div class=\"line\">创建+切换分支：git checkout -b branch_name</div><div class=\"line\">合并某分支到当前分支：git merge branch_name</div><div class=\"line\">重命名分支：git branch -m branch_name branch_new_name //不会覆盖已经存在的分支</div><div class=\"line\">重命名分支：git branch -M branch_name branch_new_name //会覆盖已经存在的分支</div><div class=\"line\">删除分支：git branch -d branch_name </div><div class=\"line\">强制删除分支： git branch -D branch_name</div><div class=\"line\">删除远程分支： git push origin : branch_name //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支</div><div class=\"line\">拉取代码：git pull orgin branch_name</div><div class=\"line\">查看更改：git status</div><div class=\"line\">查看更改细节：git diff file_name</div><div class=\"line\">查看谁修改过代码：git blame filename</div><div class=\"line\">回到上次修改：git reset --hard</div><div class=\"line\">添加单个文件：git add filename.js</div><div class=\"line\">添加所有js文件：git add *.js</div><div class=\"line\">添加所有文件：git add .</div><div class=\"line\">提交添加的文件：git commit -m &quot;your description about this branch&quot;</div><div class=\"line\">提交单个文件：git commit -m &quot;your description about this branch&quot; filename.js</div><div class=\"line\">push分支：git push orgin your_branch_name</div><div class=\"line\">备份当前分支内容：git stash</div><div class=\"line\">查看历史记录：git log</div><div class=\"line\">创建标签：git tag 1.0.0  //标签无法重命名</div><div class=\"line\">显示标签列表：git tag</div><div class=\"line\">切出标签：git checkout 1.0.0</div><div class=\"line\">删除标签：git tag -d 1.0.0</div><div class=\"line\">查看git远程地址：git remote -v</div><div class=\"line\">更改远程git地址：git remote set -url origin https://github.com/USERNAME/OTHERREPOSITORY.git  ; git remote set-url origin git@github.com:USERNAME/OTHERREPOSITORY.git</div></pre></td></tr></table></figure>\n<h1 id=\"git-gulp小工作流\"><a href=\"#git-gulp小工作流\" class=\"headerlink\" title=\"git+gulp小工作流\"></a>git+gulp小工作流</h1><p>早上上班的时候切换到master分支，拉一下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull origin master</div></pre></td></tr></table></figure></p>\n<p>开始写代码，新建一个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>正在码代码的时候，如果其他分支有需要处理的bug，先将当前状态保存一下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash</div></pre></td></tr></table></figure></p>\n<p>切换到别的分支修改代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b branch_name</div></pre></td></tr></table></figure></p>\n<p>修复bug后提交代码查看修改：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git status</div></pre></td></tr></table></figure></p>\n<p>需要查看修改的细节：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git diff file_name</div></pre></td></tr></table></figure></p>\n<p>没有问题就提交：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>解决完bug切换到原来的分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout -b you_old_branch</div></pre></td></tr></table></figure></p>\n<p>恢复刚刚保存的内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">git stash   //备份当前的工作区的内容，保存到git栈</div><div class=\"line\"></div><div class=\"line\">git stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复</div><div class=\"line\">git stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复</div><div class=\"line\">git stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了</div></pre></td></tr></table></figure></p>\n<p>恢复代码之后又可以开始码代码了，代码写完之后，提交三部曲：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git add .</div><div class=\"line\">git commit &quot;your description&quot;</div><div class=\"line\">git push orgin your_branch_name</div></pre></td></tr></table></figure></p>\n<p>最后合并到master，多个队员一起开发，一般合并master时会遇到冲突，这是需要解决冲突，冲突一般是多个开发人员修改同一处代码造成的，拉取master代码（队友也没有合并master就商量好拉他的代码，最后解决完冲突只把你这个分支提交就好了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin master</div></pre></td></tr></table></figure></p>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git pull orgin his/her_branch_name</div></pre></td></tr></table></figure></p>\n<p>用gulp构建工具<br>在修改bug的时候将环境调成本地环境<br><code>protected</code>&lt;<code>config</code>&lt;<code>dev.php</code>下的<code>#当前环境  &#39;env&#39; =&gt; &#39;&#39;</code><br><code>env</code>为空为上线环境，<code>env</code>为<code>dev</code>为本地环境</p>\n<p>先把env改成dev 然后改你要改的 改完在gitbash里执行以下gulp build 然后把env改成空 这时候引用的是构建好的线上环境代码 再本地看一下没问题了 再提交</p>\n<p>然后查看完线上环境没有问题了可以进行<code>gulp build</code>，可能会报错</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Error: ENOENT: no such file or directory, open &apos;C:\\xampp\\htdocs\\fzc\\static_tmp\\rev\\images\\web\\rev-manifest.json&apos;</div><div class=\"line\">    at Error (native)</div></pre></td></tr></table></figure>\n<p>这是要clean一下，<code>gulp clean:temp</code><br>然后在<code>gulp build</code><br>之后就可以git三件套了</p>\n<p>摘自：<a href=\"https://segmentfault.com/a/1190000005945614\">前端资源系列（1）-Git常用命令&amp;设置快捷命令&amp;小工作流</a></p>"},{"title":"了解githubPages+hexo搭建博客的原理","date":"2017-02-26T06:30:15.000Z","_content":"之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","source":"_posts/Hexo-Understand-the-principles-of-githubPages-hexoblog.md","raw":"---\ntitle: 了解githubPages+hexo搭建博客的原理\ndate: 2017-02-26 14:30:15\ntags: hexo \ncategories: git\n---\n之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。\n<!--more-->\n\n什么是github pages\n---------------------\n1. 什么是github pages\n github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面\n > 所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。\n\n2. 下面是GitHub Pages 官方文档:\n- https://pages.github.com/ \n- http://help.github.com/pages\n\n3. GitHub提供两种类型的主页(https://help.github.com/articles/user-organization-and-project-pages):\n\n - 个人或组织主页 - 页面内容位于 master 下 \n - 项目主页 - 页面内容位于每个项目的master下\n \n 我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）\n\n\n\n\n怎么使用github pages\n------------------\n1. 使用个人或组织页面\n使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：http://sunshine940326.github.io来访问我的个人博客。\n2. 使用项目主页的方法如下\n\n - 设置的方法很简单，只需要在你项目的右上角点击setting\n    ![这里写图片描述](http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 找到下方的pages，将默认的none改成master分支![这里写图片描述](http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n - 点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容![这里写图片描述](http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n> user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.\n\n什么是hexo以及安装hexo\n----------------\n说完了githubpages，继续来说一下什么是hexo\n1. 什么是Hexo\ngoogle的第一条结果的解释是这样的\n![这里写图片描述](http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点开这个链接就是中文版的官网了，**强烈建议大家多看看官方教程**，比看其他的教程有用多了\n\nhexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash\n这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。\n2. 安装 Git\n - Windows：下载并安装 git.[百度云git下载地址](https://github.com/waylau/git-for-win)\n - Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。\n - Linux (Ubuntu, Debian)：sudo apt-get install git-core\n - Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core\n3. 安装node\n 安装node的方式有很多种，我建议直接使用安装程序安装[node安装程序](https://nodejs.org/en/)\n> 对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。\n**安装node是需要配置环境变量的**\n\n 安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功\n4. 安装Hexo\n当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =\n只需要输入下面的代码就可以安装hexo\n在任意位置新建一个文件夹名为hexo ````\n$ cd d:/hexo\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n$ npm install\n$ hexo g # 或者hexo generate\n$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看\n````\n至此，你可以在浏览器输入http://localhost:4000/，预览你的博客了，通常都是一篇hello world= =\n然后我们就需要将我们的项目部署到github上\n\n**首先需要明白所谓部署到github的原理。**\n**之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。**\n**Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。**\n**需要将hexo生成的静态网站，提交(git commit)到github上。**\n然后我们需要配置_config.yml配置文件\n目前我安装所用的本地环境如下：(可以通过hexo -v查看)`$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h\n`\n要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）\n**注意type:后面有一个空格**\n将repository后面的链接换成你的博客名字`# Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git`\n然后在执行\n`$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d\n`\n5. 命令解释：\n\n - hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n - hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，\n - hexo server (hexo s) 启动本地web服务，用于博客的预览\n - hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n - 是的，现在你拥有了自己的博客！\n然后你就可以输入http://sunshine940326.github.io来查看你的博客啦~\n注意需要提前安装一个扩展：`$ npm install hexo-deployer-git --save`\n\n装饰你的个人博客\n------------------\n至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客\n1. Hexo 主题配置\n就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好  \n这里以主题NexT为例进行说明。\n2. 安装主题 `$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next\n`\n3. 启用主题\n\n修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。\n4. 更新主题```\n$ cd themes/next\n$ git pull\n$ hexo g # 生成\n$ hexo s # 启动本地web服务器\n```\n\n现在打开http://localhost:4000/ ，会看到我们已经应用了一个新的主题。\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你的主题，我使用的Next主题\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽\n\n","slug":"Hexo-Understand-the-principles-of-githubPages-hexoblog","published":1,"updated":"2017-02-26T11:33:53.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel1w000aqkyf3tieyb9r","content":"<p>之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。<br><a id=\"more\"></a></p>\n<h2 id=\"什么是github-pages\"><a href=\"#什么是github-pages\" class=\"headerlink\" title=\"什么是github pages\"></a>什么是github pages</h2><ol>\n<li><p>什么是github pages<br>github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面</p>\n<blockquote>\n<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>\n</blockquote>\n</li>\n<li><p>下面是GitHub Pages 官方文档:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://pages.github.com/\" target=\"_blank\" rel=\"external\">https://pages.github.com/</a> </li>\n<li><a href=\"http://help.github.com/pages\" target=\"_blank\" rel=\"external\">http://help.github.com/pages</a></li>\n</ul>\n<ol>\n<li><p>GitHub提供两种类型的主页(<a href=\"https://help.github.com/articles/user-organization-and-project-pages\" target=\"_blank\" rel=\"external\">https://help.github.com/articles/user-organization-and-project-pages</a>):</p>\n<ul>\n<li>个人或组织主页 - 页面内容位于 master 下 </li>\n<li>项目主页 - 页面内容位于每个项目的master下</li>\n</ul>\n<p>我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）</p>\n</li>\n</ol>\n<h2 id=\"怎么使用github-pages\"><a href=\"#怎么使用github-pages\" class=\"headerlink\" title=\"怎么使用github pages\"></a>怎么使用github pages</h2><ol>\n<li>使用个人或组织页面<br>使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：<a href=\"http://sunshine940326.github.io来访问我的个人博客。\" target=\"_blank\" rel=\"external\">http://sunshine940326.github.io来访问我的个人博客。</a></li>\n<li><p>使用项目主页的方法如下</p>\n<ul>\n<li>设置的方法很简单，只需要在你项目的右上角点击setting<br><img src=\"http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>找到下方的pages，将默认的none改成master分支<img src=\"http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容<img src=\"http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.</p>\n</blockquote>\n<h2 id=\"什么是hexo以及安装hexo\"><a href=\"#什么是hexo以及安装hexo\" class=\"headerlink\" title=\"什么是hexo以及安装hexo\"></a>什么是hexo以及安装hexo</h2><p>说完了githubpages，继续来说一下什么是hexo</p>\n<ol>\n<li>什么是Hexo<br>google的第一条结果的解释是这样的<br><img src=\"http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点开这个链接就是中文版的官网了，<strong>强烈建议大家多看看官方教程</strong>，比看其他的教程有用多了</li>\n</ol>\n<p>hexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash<br>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p>\n<ol>\n<li>安装 Git<ul>\n<li>Windows：下载并安装 git.<a href=\"https://github.com/waylau/git-for-win\" target=\"_blank\" rel=\"external\">百度云git下载地址</a></li>\n<li>Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n</li>\n<li><p>安装node<br>安装node的方式有很多种，我建议直接使用安装程序安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">node安装程序</a></p>\n<blockquote>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br><strong>安装node是需要配置环境变量的</strong></p>\n</blockquote>\n<p>安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功</p>\n</li>\n<li>安装Hexo<br>当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =<br>只需要输入下面的代码就可以安装hexo<br>在任意位置新建一个文件夹名为hexo <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd d:/hexo</div><div class=\"line\">$ npm install hexo-cli -g</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div><div class=\"line\">$ npm install</div><div class=\"line\">$ hexo g # 或者hexo generate</div><div class=\"line\">$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看</div></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你可以在浏览器输入<a href=\"http://localhost:4000/，预览你的博客了，通常都是一篇hello\" target=\"_blank\" rel=\"external\">http://localhost:4000/，预览你的博客了，通常都是一篇hello</a> world= =<br>然后我们就需要将我们的项目部署到github上</p>\n<p><strong>首先需要明白所谓部署到github的原理。</strong><br><strong>之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。</strong><br><strong>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</strong><br><strong>需要将hexo生成的静态网站，提交(git commit)到github上。</strong><br>然后我们需要配置_config.yml配置文件<br>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<code>$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h</code><br>要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）<br><strong>注意type:后面有一个空格</strong><br>将repository后面的链接换成你的博客名字<code># Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</code><br>然后在执行<br><code>$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d</code></p>\n<ol>\n<li><p>命令解释：</p>\n<ul>\n<li>hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>\n<li>hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，</li>\n<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>\n<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！</li>\n<li>是的，现在你拥有了自己的博客！<br>然后你就可以输入<a href=\"http://sunshine940326.github.io来查看你的博客啦~\" target=\"_blank\" rel=\"external\">http://sunshine940326.github.io来查看你的博客啦~</a><br>注意需要提前安装一个扩展：<code>$ npm install hexo-deployer-git --save</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"装饰你的个人博客\"><a href=\"#装饰你的个人博客\" class=\"headerlink\" title=\"装饰你的个人博客\"></a>装饰你的个人博客</h2><p>至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客</p>\n<ol>\n<li>Hexo 主题配置<br>就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好<br>这里以主题NexT为例进行说明。</li>\n<li>安装主题 <code>$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>\n<li>启用主题</li>\n</ol>\n<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n<ol>\n<li>更新主题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd themes/next</div><div class=\"line\">$ git pull</div><div class=\"line\">$ hexo g # 生成</div><div class=\"line\">$ hexo s # 启动本地web服务器</div></pre></td></tr></table></figure></li>\n</ol>\n<p>现在打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Themes·Hexo</a>上选择你的主题，我使用的Next主题<br>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next官方文档</a>,内容十分详尽</p>\n","excerpt":"<p>之前用githubPages+hexo搭建了一个自己的博客：sunshine940326.github.io(就是你现在看到的博客)，当时还不知道怎么使用git和github，所以只是跟着网上的教程在一步一步操作，现在了解了git知道怎么使用之后才慢慢明白其中的原理。<br>","more":"</p>\n<h2 id=\"什么是github-pages\"><a href=\"#什么是github-pages\" class=\"headerlink\" title=\"什么是github pages\"></a>什么是github pages</h2><ol>\n<li><p>什么是github pages<br>github是项目托管网站，列出了项目的源文件，所以github  有一个pages功能，可以自定义主页，用来代替默认的列出源列表的这个页面</p>\n<blockquote>\n<p>所以，github Pages可以被认为是用户编写的、托管在github上的静态网页。</p>\n</blockquote>\n</li>\n<li><p>下面是GitHub Pages 官方文档:</p>\n</li>\n</ol>\n<ul>\n<li><a href=\"https://pages.github.com/\">https://pages.github.com/</a> </li>\n<li><a href=\"http://help.github.com/pages\">http://help.github.com/pages</a></li>\n</ul>\n<ol>\n<li><p>GitHub提供两种类型的主页(<a href=\"https://help.github.com/articles/user-organization-and-project-pages\">https://help.github.com/articles/user-organization-and-project-pages</a>):</p>\n<ul>\n<li>个人或组织主页 - 页面内容位于 master 下 </li>\n<li>项目主页 - 页面内容位于每个项目的master下</li>\n</ul>\n<p>我们创建的博客属于个人页面（也可以创建为项目主页，不过默认的域名不一样，个人理解）</p>\n</li>\n</ol>\n<h2 id=\"怎么使用github-pages\"><a href=\"#怎么使用github-pages\" class=\"headerlink\" title=\"怎么使用github pages\"></a>怎么使用github pages</h2><ol>\n<li>使用个人或组织页面<br>使用个人或组织页面，需要先创建一个和你的账号同名的仓库，比我我的github账号是sunshine940326，那么我需要创建一个名为sunshine940326.github.io的repo，然后在master上提交你的项目代码，这样就可以通过网址：<a href=\"http://sunshine940326.github.io来访问我的个人博客。\">http://sunshine940326.github.io来访问我的个人博客。</a></li>\n<li><p>使用项目主页的方法如下</p>\n<ul>\n<li>设置的方法很简单，只需要在你项目的右上角点击setting<br><img src=\"http://img.blog.csdn.net/20170226100516628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>找到下方的pages，将默认的none改成master分支<img src=\"http://img.blog.csdn.net/20170226100803503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n<li>点击保存，之后就可以在github pages后面看到你的项目链接了，你可以直接通过这个链接查看你master分支中代码的html内容<img src=\"http://img.blog.csdn.net/20170226101029145?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>user pages只有一个, project pages可以有多个, 对于个人博客而言, 两种方式都可以.如果用户申请了自己的域名, 还可以使用CNAME文件自定义domain name, 这样访问你的域名就自动访问到github上的页面. 用户也可以自定义404页面.</p>\n</blockquote>\n<h2 id=\"什么是hexo以及安装hexo\"><a href=\"#什么是hexo以及安装hexo\" class=\"headerlink\" title=\"什么是hexo以及安装hexo\"></a>什么是hexo以及安装hexo</h2><p>说完了githubpages，继续来说一下什么是hexo</p>\n<ol>\n<li>什么是Hexo<br>google的第一条结果的解释是这样的<br><img src=\"http://img.blog.csdn.net/20170226102946906?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>点开这个链接就是中文版的官网了，<strong>强烈建议大家多看看官方教程</strong>，比看其他的教程有用多了</li>\n</ol>\n<p>hexo是基于node环境，所以你需要先安装node，进行一些操作需要用到命令行，所以建议大家直接装一个git bash<br>这是git for windows自带的一组程序，提供了Linux风格的shell，在该环境下，您可以直接用上面提到的命令来安装Node.js。打开它的方法很简单，在任意位置单击右键，选择“GitBash Here”即可。由于Hexo的很多操作都涉及到命令行，您可以考虑始终使用Git Bash来进行操作。</p>\n<ol>\n<li>安装 Git<ul>\n<li>Windows：下载并安装 git.<a href=\"https://github.com/waylau/git-for-win\">百度云git下载地址</a></li>\n<li>Mac：使用 Homebrew, MacPorts ：brew install git;或下载 安装程序 安装。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n</li>\n<li><p>安装node<br>安装node的方式有很多种，我建议直接使用安装程序安装<a href=\"https://nodejs.org/en/\">node安装程序</a></p>\n<blockquote>\n<p>对于windows用户来说，建议使用安装程序进行安装。安装时，请勾选Add to PATH选项。<br><strong>安装node是需要配置环境变量的</strong></p>\n</blockquote>\n<p>安装完成之后打开命令行，输入 node -v，如果有返回版本号，即说明安装成功</p>\n</li>\n<li>安装Hexo<br>当你安装好了git和node之后，就可以安装hexo了，好激动有没有，先不要激动的太早，这才刚开始= =<br>只需要输入下面的代码就可以安装hexo<br>在任意位置新建一个文件夹名为hexo <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd d:/hexo</div><div class=\"line\">$ npm install hexo-cli -g</div><div class=\"line\">$ hexo init blog</div><div class=\"line\">$ cd blog</div><div class=\"line\">$ npm install</div><div class=\"line\">$ hexo g # 或者hexo generate</div><div class=\"line\">$ hexo s # 或者hexo server可以在http://localhost:4000/ 查看</div></pre></td></tr></table></figure></li>\n</ol>\n<p>至此，你可以在浏览器输入<a href=\"http://localhost:4000/，预览你的博客了，通常都是一篇hello\">http://localhost:4000/，预览你的博客了，通常都是一篇hello</a> world= =<br>然后我们就需要将我们的项目部署到github上</p>\n<p><strong>首先需要明白所谓部署到github的原理。</strong><br><strong>之前步骤中在Github上创建的那个个人项目的repo（sunshine940326.github.io）一个最大的特点就是其master中的html静态文件，可以通过链接http:// .github.io来直接访问。</strong><br><strong>Hexo -g 会生成一个静态网站（第一次会生成一个public目录），这个静态文件可以直接访问。</strong><br><strong>需要将hexo生成的静态网站，提交(git commit)到github上。</strong><br>然后我们需要配置_config.yml配置文件<br>目前我安装所用的本地环境如下：(可以通过hexo -v查看)<code>$ hexo -v\nhexo: 3.2.2\nhexo-cli: 1.0.2\nos: Windows_NT 6.3.9600 win32 x64\nhttp_parser: 2.7.0\nnode: 4.5.0\nv8: 4.5.103.37\nuv: 1.9.1\nzlib: 1.2.8\nares: 1.10.1-DEV\nicu: 56.1\nmodules: 46\nopenssl: 1.0.2h</code><br>要想部署到github，我们需要作如下配置（貌似不同版本的hexo配置不同，主要是hexo2.0和hexo3.0，所以你需要先查看自己安装的hexo版本）<br><strong>注意type:后面有一个空格</strong><br>将repository后面的链接换成你的博客名字<code># Deployment\n Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</code><br>然后在执行<br><code>$ hexo clean\n $ hexo g\n $ hexo s\n $ hexo d</code></p>\n<ol>\n<li><p>命令解释：</p>\n<ul>\n<li>hexo clean：清除public，当 source文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。</li>\n<li>hexo generate (hexo g)： 编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件 开启本地服务，</li>\n<li>hexo server (hexo s) 启动本地web服务，用于博客的预览</li>\n<li>hexo deploy (hexo d) 部署播客到远端（比如github, heroku等平台）：部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！</li>\n<li>是的，现在你拥有了自己的博客！<br>然后你就可以输入<a href=\"http://sunshine940326.github.io来查看你的博客啦~\">http://sunshine940326.github.io来查看你的博客啦~</a><br>注意需要提前安装一个扩展：<code>$ npm install hexo-deployer-git --save</code></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"装饰你的个人博客\"><a href=\"#装饰你的个人博客\" class=\"headerlink\" title=\"装饰你的个人博客\"></a>装饰你的个人博客</h2><p>至此，已经完成了github pages+hexo搭建博客的步骤，现在需要装饰你的博客</p>\n<ol>\n<li>Hexo 主题配置<br>就和当时我们用的qq空间一样，我们可以直接用写好的主题，然后我们就只需要写文章就好<br>这里以主题NexT为例进行说明。</li>\n<li>安装主题 <code>$ hexo clean\n$ git clone https://github.com/iissnan/hexo-theme-next themes/next</code></li>\n<li>启用主题</li>\n</ol>\n<p>修改Hexo目录下的_config.yml配置文件中的theme属性，将其设置为next。</p>\n<ol>\n<li>更新主题<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd themes/next</div><div class=\"line\">$ git pull</div><div class=\"line\">$ hexo g # 生成</div><div class=\"line\">$ hexo s # 启动本地web服务器</div></pre></td></tr></table></figure></li>\n</ol>\n<p>现在打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a> ，会看到我们已经应用了一个新的主题。<br>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">Themes·Hexo</a>上选择你的主题，我使用的Next主题<br>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\">Next官方文档</a>,内容十分详尽</p>"},{"title":"hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能","date":"2017-04-09T14:32:30.000Z","_content":"# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","source":"_posts/Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical.md","raw":"---\ntitle: hexo高阶教程next主题优化之加入网易云音乐、网易云跟帖、动态背景、自定义主题、统计功能\ndate: 2017-04-09 22:32:30\ntags: [git,hexo教程] \ncategories: git\n---\n# 前言\n本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：[了解githubPages+hexo搭建博客的原理](http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/) 或者[利用Gitpage+hexo开发自己的博客](http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/)，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容\n\n - 域名绑定，将github博客和你的独有域名绑定\n - 添加更多的menu内容\n - 添加头像\n - 定义网站个性logo\n - 自定义样式，重写默认样式，个性化定制你的博客\n - 炫酷动态背景制作\n - 添加网易云音乐\n - 添加网易云跟帖\n - 添加leancloud阅读次数统计功能\n - 添加wordcount页面字数统计\n - 添加fork me on github功能\n\n要想最快的知道这些功能的效果，请移步我的个人博客：http://cherryblog.site/ ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ \n<!--more-->\n首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／\n\n> hexo  v3.2.2\n> next  v5.1.0\n> node v4.5.0\n \n在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：[next官网](http://theme-next.iissnan.com/)![这里写图片描述](http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n> 授之于鱼不如授之于渔\n希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)\n\n 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~\n 默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n我们最先修改的应该是在hexo根目录下的配置文件`_config.yml`文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~\n 其次就是我们的主题配置文件\n 在对应的主题下的`_config.yml` 因为我使用的是next主题，所以目录的路径为`C:\\Hexo\\themes\\next\\_config.yml` 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)\n 然后我们需要修改样式的话是需要设置css和甚至是修改模板，\n 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：\n```\n├── .github            #git信息\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-Hans.yml      #简体中文\n|   └── zh-tw.yml      #繁体中文\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _custom        #可以自己修改的模板，覆盖原有模板\n|   |   ├── _header.swig    #头部样式\n|   |   ├── _sidebar.swig   #侧边栏样式\n|   ├── _macro        #可以自己修改的模板，覆盖原有模板\n|   |   ├── post.swig    #文章模板\n|   |   ├── reward.swig    #打赏模板\n|   |   ├── sidebar.swig   #侧边栏模板\n|   ├── _partial       #局部的布局\n|   |   ├── head       #头部模板\n|   |   ├── search     #搜索模板\n|   |   ├── share      #分享模板\n|   ├── _script        #局部的布局\n|   ├── _third-party   #第三方模板\n|   ├── _layout.swig   #主页面模板\n|   ├── index.swig     #主页面模板\n|   ├── page           #页面模板\n|   └── tag.swig       #tag模板\n├── scripts            #script源码\n|   ├── tags           #tags的script源码\n|   ├── marge.js       #页面模板\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _common    #*.styl基础css\n|   |   ├── _custom    #*.styl局部css\n|   |   └── _mixins    #mixins的css\n|   ├── fonts          #字体\n|   ├── images         #图片\n|   ├── uploads        #添加的文件\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n# 绑定域名\n绑定域名的思路如下：\n\n - 在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）\n - 解析DNS\n - 在hexo中添加CNAME文件\n\n \n## 购买域名\n之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。\n我选择的是[万网](https://wanwang.aliyun.com/)，阿里下面的。我选择了一个`.site`的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~\n按照官网的步骤一步一来就可以了~\n## 解析DNS\n购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”\n![这里写图片描述](http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n \n  点击添加解析，记录类型选A或CNAME，\n  \n\n> A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，\n> 解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。\n\n## 在hexo中添加CNAME文件\n接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的`cherryblog.site`\n![这里写图片描述](http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n然后你就可以`hexo clean`,`hexo g`，`hexo d` 发布你的博客看看效果啦~\n![这里写图片描述](http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n**在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =** \n# 添加菜单页\n添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令`hexo new page \"photo\"` 就直接创建了` C:\\Hexo\\source\\photo\\index.md\n`文件，然后编辑index.md 文件就可以了~\n![这里写图片描述](http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n第二种：手动创建上面的文件= =\n\n - 在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下\n - 在hexo的source文件下添加对应的文件夹\n - 在主题的配置文件添加menu_icon字段设置对应的icon\n - 修改language文件下zh-hans语言包\n - 在发表文章的时候添加对应的menu字段就可以看到\n\n \n刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建**首先我们要分清什么是页面，什么是文章，**\n**在hexo中menu下的内容都是新的页面**我们可以通过`hexo new page \"pagename\"` 创建，hexo默认的页面只有`home`,`archives`,`tags` 三个，之后我们写的博文就是文章，通过`hexo new \"name\"` 创建的`name.md` 文件在根目录的`source\\_posts` 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 \n## 在配置文件中添加menu索引路径\n我们可以在主题配置的_config文件下找到相应的字段，字段前加`#` 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu`life` 和`photo`\n![这里写图片描述](http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是`hexo/source` 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了\n![这里写图片描述](http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast ),\n没有明白什么意思的同学看下图\n\n \n## 在source文件添加menu文件夹\n我们需要在这个路径下自己建立对应的页面，比如说我新建了menu`life` 和`photos`，然后再source文件夹下面新建两个名字为`life` 和`photo` 的文件夹，里面添加一个`index.md` markdown文件，内容是类似这样的\n\n```\ntitle: photo\ndate: 2017-04-04 22:14:07\ntype: \"photo\"\ncomments: false\n---\n啦啦啦~\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下\n## 给menu添加icon\n如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：![这里写图片描述](http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了`FontAwsome` 所以我们只需要在主题的配置文件中加入相应的icon名字即可\n![这里写图片描述](http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast )\n## 查找`FontAwsome` icon\n 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到[FontAwsome官网](http://www.bootcss.com/p/font-awesome/#)，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~\n ![这里写图片描述](http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的\"icon-\"\n## 在language添加zh-hans翻译字段\n上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~\n ![这里写图片描述](http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n## 在发表文章的时候添加对应的menu字段\n在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:\n```\ntitle: Git使用中的报错情况\ndate: 2017-03-11 23:54:11\ntags: [git,实战经验] \ncategories: git\n---\n```\ntags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了\n![这里写图片描述](http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 添加头像\n我使用的主题头像是位于侧边栏，显示的效果如下，\n![这里写图片描述](http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面\n```\n# Sidebar Avatar\n# in theme directory(source/images): /images/avatar.jpg\n# in site  directory(source/uploads): /uploads/avatar.jpg\navatar: /uploads/avatar.png\n```\n![这里写图片描述](http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 设置网站logo\n跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在[Favicon在线制作](http://tool.lu/favicon/)工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：`favicon: images/favicon.ico`\n# 自定义样式\n不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~\n![这里写图片描述](http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 炫酷动态背景\n之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。\n添加修改代码`next/layout/_layout.swig`在`</body>`之前加上\n```\n{% if theme.canvas_nest %}\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n{% endif %}\n```\n打开`next/_config.yml`，添加以下代码就可以了：\n```\n # Canvas-nest\ncanvas_nest: true\n```\n这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~\n![这里写图片描述](http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n所以我们需要在layout下面的`_layout.swig` 添加一个canvas\n\n然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：\nhttps://github.com/sunshine940326/canvas-nest\n\n```\n<script>\nclass Circle {\n    //创建对象\n    //以一个圆为对象\n    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离\n    //this.r是创建圆的半径，参数越大半径越大\n    //this._mx,this._my是移动的距离，参数越大移动\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.r = Math.random() * 10 ;\n        this._mx = Math.random() ;\n        this._my = Math.random() ;\n\n    }\n\n    //canvas 画圆和画直线\n    //画圆就是正常的用canvas画一个圆\n    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。\n        ctx.arc(this.x, this.y, this.r, 0, 360)\n        ctx.closePath();\n        ctx.fillStyle = 'rgba(204, 204, 204, 0.3)';\n        ctx.fill();\n    }\n\n    drawLine(ctx, _circle) {\n        let dx = this.x - _circle.x;\n        let dy = this.y - _circle.y;\n        let d = Math.sqrt(dx * dx + dy * dy)\n        if (d < 150) {\n            ctx.beginPath();\n            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：\n            ctx.moveTo(this.x, this.y);   //起始点\n            ctx.lineTo(_circle.x, _circle.y);   //终点\n            ctx.closePath();\n            ctx.strokeStyle = 'rgba(204, 204, 204, 0.3)';\n            ctx.stroke();\n        }\n    }\n\n    // 圆圈移动\n    // 圆圈移动的距离必须在屏幕范围内\n    move(w, h) {\n        this._mx = (this.x < w && this.x > 0) ? this._mx : (-this._mx);\n        this._my = (this.y < h && this.y > 0) ? this._my : (-this._my);\n        this.x += this._mx / 2;\n        this.y += this._my / 2;\n    }\n}\n//鼠标点画圆闪烁变动\nclass currentCirle extends Circle {\n    constructor(x, y) {\n        super(x, y)\n    }\n\n    drawCircle(ctx) {\n        ctx.beginPath();\n        //注释内容为鼠标焦点的地方圆圈半径变化\n        //this.r = (this.r < 14 && this.r > 1) ? this.r + (Math.random() * 2 - 1) : 2;\n        this.r = 8;\n        ctx.arc(this.x, this.y, this.r, 0, 360);\n        ctx.closePath();\n        //ctx.fillStyle = 'rgba(0,0,0,' + (parseInt(Math.random() * 100) / 100) + ')'\n        ctx.fillStyle = 'rgba(255, 77, 54, 0.3)'\n        ctx.fill();\n\n    }\n}\n//更新页面用requestAnimationFrame替代setTimeout\nwindow.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;\n\nlet canvas = document.getElementById('canvas');\nlet ctx = canvas.getContext('2d');\nlet w = canvas.width = canvas.offsetWidth;\nlet h = canvas.height = canvas.offsetHeight;\nlet circles = [];\nlet current_circle = new currentCirle(0, 0)\n\nlet draw = function () {\n    ctx.clearRect(0, 0, w, h);\n    for (let i = 0; i < circles.length; i++) {\n        circles[i].move(w, h);\n        circles[i].drawCircle(ctx);\n        for (j = i + 1; j < circles.length; j++) {\n            circles[i].drawLine(ctx, circles[j])\n        }\n    }\n    if (current_circle.x) {\n        current_circle.drawCircle(ctx);\n        for (var k = 1; k < circles.length; k++) {\n            current_circle.drawLine(ctx, circles[k])\n        }\n    }\n    requestAnimationFrame(draw)\n}\n\nlet init = function (num) {\n    for (var i = 0; i < num; i++) {\n        circles.push(new Circle(Math.random() * w, Math.random() * h));\n    }\n    draw();\n}\nwindow.addEventListener('load', init(60));\nwindow.onmousemove = function (e) {\n    e = e || window.event;\n    current_circle.x = e.clientX;\n    current_circle.y = e.clientY;\n}\nwindow.onmouseout = function () {\n    current_circle.x = null;\n    current_circle.y = null;\n\n};\n</script>\n```\n# 添加网易云音乐\n在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，\n我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器\n![这里写图片描述](http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可\n![这里写图片描述](http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n我放在了`layout/_macro/sidebar.swig` 文件下\n\n```\n<div id=\"music163player\">\n    <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=280 height=86 src=\"//music.163.com/outchain/player?type=2&id=38358214&auto=0&height=66\">\n    </iframe>\n</div>\n```\n然后就可以在侧边栏看见我的播放器了~\n![这里写图片描述](http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n# 网易云跟帖\n之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网[网易云跟帖](https://manage.gentie.163.com/)中注册，然后在获取代码>通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~\n#添加Fork me on GitHub\n去网址https://github.com/blog/273-github-ribbons 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可\n记得把里面的url换成自己的!\n# hexo-wordcount实现统计功能 \n![这里写图片描述](http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\nwordcount可以实现字数统计，阅读时常还有总字数的统计功能\n只需要`npm install hexo-wordcount --save` 就可以安装wordcount插件，\n主要功能\n字数统计:WordCount\n阅读时长预计:Min2Read\n总字数统计: TotalCount\n安装完插件之后在主题的配置文件中开启该功能就可以~\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true\n  min2read: true\n```\n# leancloud阅读次数统计\nnext也集成了leancloud，在[leancloud官网](https://leancloud.cn/)\n中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置\n```\n# Show number of visitors to each article.\n# You can visit https://leancloud.cn get AppID and AppKey.\nleancloud_visitors:\n  enable: true\n  app_id: yourapp_id\n  app_key: yourapp_key\n```\n然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示\n![这里写图片描述](http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n# 个人网站地址：http://cherryblog.site/，顺便求个fork\n# 附录1：站点配置文件\n```\n # Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site   站点信息\ntitle: Cherry's Blog    #站点名字\nsubtitle: To Be a Batter Me  #副标题\ndescription: 做更好的自己   #站点描述，在侧边栏显示\nauthor: Cherry   #博主名字\nemail: 991939332@qq.com #联系邮箱\nlanguage: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案\ntimezone:\n\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://yoursite.com\nroot: /\npermalink: :year/:month/:day/:title/\npermalink_defaults:\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）\nrelative_link: false\nfuture: true\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: false\n  tab_replace:\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map:\ntag_map:\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: next\n\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/sunshine940326/sunshine940326.github.io.git\n  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io\n```\n\n","slug":"Hexo-high-level-tutorialcloudmusic,bg-customthemes-statistical","published":1,"updated":"2017-04-09T15:54:36.836Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel1w000fqkyf38edj4k8","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：<a href=\"http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/\">了解githubPages+hexo搭建博客的原理</a> 或者<a href=\"http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\">利用Gitpage+hexo开发自己的博客</a>，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容</p>\n<ul>\n<li>域名绑定，将github博客和你的独有域名绑定</li>\n<li>添加更多的menu内容</li>\n<li>添加头像</li>\n<li>定义网站个性logo</li>\n<li>自定义样式，重写默认样式，个性化定制你的博客</li>\n<li>炫酷动态背景制作</li>\n<li>添加网易云音乐</li>\n<li>添加网易云跟帖</li>\n<li>添加leancloud阅读次数统计功能</li>\n<li>添加wordcount页面字数统计</li>\n<li>添加fork me on github功能</li>\n</ul>\n<p>要想最快的知道这些功能的效果，请移步我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ<br><a id=\"more\"></a><br>首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／</p>\n<blockquote>\n<p>hexo  v3.2.2<br>next  v5.1.0<br>node v4.5.0</p>\n</blockquote>\n<p>在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">next官网</a><img src=\"http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p>\n</blockquote>\n<p> 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~<br> 默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>我们最先修改的应该是在hexo根目录下的配置文件<code>_config.yml</code>文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~<br> 其次就是我们的主题配置文件<br> 在对应的主题下的<code>_config.yml</code> 因为我使用的是next主题，所以目录的路径为<code>C:\\Hexo\\themes\\next\\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)<br> 然后我们需要修改样式的话是需要设置css和甚至是修改模板，<br> 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── .github            #git信息</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-Hans.yml      #简体中文</div><div class=\"line\">|   └── zh-tw.yml      #繁体中文</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── _header.swig    #头部样式</div><div class=\"line\">|   |   ├── _sidebar.swig   #侧边栏样式</div><div class=\"line\">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── post.swig    #文章模板</div><div class=\"line\">|   |   ├── reward.swig    #打赏模板</div><div class=\"line\">|   |   ├── sidebar.swig   #侧边栏模板</div><div class=\"line\">|   ├── _partial       #局部的布局</div><div class=\"line\">|   |   ├── head       #头部模板</div><div class=\"line\">|   |   ├── search     #搜索模板</div><div class=\"line\">|   |   ├── share      #分享模板</div><div class=\"line\">|   ├── _script        #局部的布局</div><div class=\"line\">|   ├── _third-party   #第三方模板</div><div class=\"line\">|   ├── _layout.swig   #主页面模板</div><div class=\"line\">|   ├── index.swig     #主页面模板</div><div class=\"line\">|   ├── page           #页面模板</div><div class=\"line\">|   └── tag.swig       #tag模板</div><div class=\"line\">├── scripts            #script源码</div><div class=\"line\">|   ├── tags           #tags的script源码</div><div class=\"line\">|   ├── marge.js       #页面模板</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _common    #*.styl基础css</div><div class=\"line\">|   |   ├── _custom    #*.styl局部css</div><div class=\"line\">|   |   └── _mixins    #mixins的css</div><div class=\"line\">|   ├── fonts          #字体</div><div class=\"line\">|   ├── images         #图片</div><div class=\"line\">|   ├── uploads        #添加的文件</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>绑定域名的思路如下：</p>\n<ul>\n<li>在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）</li>\n<li>解析DNS</li>\n<li>在hexo中添加CNAME文件</li>\n</ul>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。<br>我选择的是<a href=\"https://wanwang.aliyun.com/\" target=\"_blank\" rel=\"external\">万网</a>，阿里下面的。我选择了一个<code>.site</code>的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~<br>按照官网的步骤一步一来就可以了~</p>\n<h2 id=\"解析DNS\"><a href=\"#解析DNS\" class=\"headerlink\" title=\"解析DNS\"></a>解析DNS</h2><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src=\"http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  点击添加解析，记录类型选A或CNAME，</p>\n<blockquote>\n<p>A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，<br>解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。</p>\n</blockquote>\n<h2 id=\"在hexo中添加CNAME文件\"><a href=\"#在hexo中添加CNAME文件\" class=\"headerlink\" title=\"在hexo中添加CNAME文件\"></a>在hexo中添加CNAME文件</h2><p>接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的<code>cherryblog.site</code><br><img src=\"http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后你就可以<code>hexo clean</code>,<code>hexo g</code>，<code>hexo d</code> 发布你的博客看看效果啦~<br><img src=\"http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =</strong> </p>\n<h1 id=\"添加菜单页\"><a href=\"#添加菜单页\" class=\"headerlink\" title=\"添加菜单页\"></a>添加菜单页</h1><p>添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令<code>hexo new page &quot;photo&quot;</code> 就直接创建了<code>C:\\Hexo\\source\\photo\\index.md</code>文件，然后编辑index.md 文件就可以了~<br><img src=\"http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>第二种：手动创建上面的文件= =</p>\n<ul>\n<li>在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下</li>\n<li>在hexo的source文件下添加对应的文件夹</li>\n<li>在主题的配置文件添加menu_icon字段设置对应的icon</li>\n<li>修改language文件下zh-hans语言包</li>\n<li>在发表文章的时候添加对应的menu字段就可以看到</li>\n</ul>\n<p>刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建<strong>首先我们要分清什么是页面，什么是文章，</strong><br><strong>在hexo中menu下的内容都是新的页面</strong>我们可以通过<code>hexo new page &quot;pagename&quot;</code> 创建，hexo默认的页面只有<code>home</code>,<code>archives</code>,<code>tags</code> 三个，之后我们写的博文就是文章，通过<code>hexo new &quot;name&quot;</code> 创建的<code>name.md</code> 文件在根目录的<code>source\\_posts</code> 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 </p>\n<h2 id=\"在配置文件中添加menu索引路径\"><a href=\"#在配置文件中添加menu索引路径\" class=\"headerlink\" title=\"在配置文件中添加menu索引路径\"></a>在配置文件中添加menu索引路径</h2><p>我们可以在主题配置的_config文件下找到相应的字段，字段前加<code>#</code> 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu<code>life</code> 和<code>photo</code><br><img src=\"http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是<code>hexo/source</code> 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了<br><img src=\"http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">,<br>没有明白什么意思的同学看下图</p>\n<h2 id=\"在source文件添加menu文件夹\"><a href=\"#在source文件添加menu文件夹\" class=\"headerlink\" title=\"在source文件添加menu文件夹\"></a>在source文件添加menu文件夹</h2><p>我们需要在这个路径下自己建立对应的页面，比如说我新建了menu<code>life</code> 和<code>photos</code>，然后再source文件夹下面新建两个名字为<code>life</code> 和<code>photo</code> 的文件夹，里面添加一个<code>index.md</code> markdown文件，内容是类似这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: photo</div><div class=\"line\">date: 2017-04-04 22:14:07</div><div class=\"line\">type: &quot;photo&quot;</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">啦啦啦~</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下</p>\n<h2 id=\"给menu添加icon\"><a href=\"#给menu添加icon\" class=\"headerlink\" title=\"给menu添加icon\"></a>给menu添加icon</h2><p>如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：<img src=\"http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了<code>FontAwsome</code> 所以我们只需要在主题的配置文件中加入相应的icon名字即可<br><img src=\"http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h2><p> 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\" target=\"_blank\" rel=\"external\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~<br> <img src=\"http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h2 id=\"在language添加zh-hans翻译字段\"><a href=\"#在language添加zh-hans翻译字段\" class=\"headerlink\" title=\"在language添加zh-hans翻译字段\"></a>在language添加zh-hans翻译字段</h2><p>上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~<br> <img src=\"http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在发表文章的时候添加对应的menu字段\"><a href=\"#在发表文章的时候添加对应的menu字段\" class=\"headerlink\" title=\"在发表文章的时候添加对应的menu字段\"></a>在发表文章的时候添加对应的menu字段</h2><p>在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Git使用中的报错情况</div><div class=\"line\">date: 2017-03-11 23:54:11</div><div class=\"line\">tags: [git,实战经验] </div><div class=\"line\">categories: git</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了<br><img src=\"http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h1><p>我使用的主题头像是位于侧边栏，显示的效果如下，<br><img src=\"http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Sidebar Avatar</div><div class=\"line\"># in theme directory(source/images): /images/avatar.jpg</div><div class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class=\"line\">avatar: /uploads/avatar.png</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"设置网站logo\"><a href=\"#设置网站logo\" class=\"headerlink\" title=\"设置网站logo\"></a>设置网站logo</h1><p>跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在<a href=\"http://tool.lu/favicon/\" target=\"_blank\" rel=\"external\">Favicon在线制作</a>工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：<code>favicon: images/favicon.ico</code></p>\n<h1 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h1><p>不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~<br><img src=\"http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"炫酷动态背景\"><a href=\"#炫酷动态背景\" class=\"headerlink\" title=\"炫酷动态背景\"></a>炫酷动态背景</h1><p>之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。<br>添加修改代码<code>next/layout/_layout.swig</code>在<code>&lt;/body&gt;</code>之前加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.canvas_nest %&#125;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p>打开<code>next/_config.yml</code>，添加以下代码就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Canvas-nest</div><div class=\"line\">canvas_nest: true</div></pre></td></tr></table></figure></p>\n<p>这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~<br><img src=\"http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>所以我们需要在layout下面的<code>_layout.swig</code> 添加一个canvas</p>\n<p>然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：<br><a href=\"https://github.com/sunshine940326/canvas-nest\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/canvas-nest</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">class Circle &#123;</div><div class=\"line\">    //创建对象</div><div class=\"line\">    //以一个圆为对象</div><div class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</div><div class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</div><div class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.random() * 10 ;</div><div class=\"line\">        this._mx = Math.random() ;</div><div class=\"line\">        this._my = Math.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //canvas 画圆和画直线</div><div class=\"line\">    //画圆就是正常的用canvas画一个圆</div><div class=\"line\">    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360)</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawLine(ctx, _circle) &#123;</div><div class=\"line\">        let dx = this.x - _circle.x;</div><div class=\"line\">        let dy = this.y - _circle.y;</div><div class=\"line\">        let d = Math.sqrt(dx * dx + dy * dy)</div><div class=\"line\">        if (d &lt; 150) &#123;</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</div><div class=\"line\">            ctx.moveTo(this.x, this.y);   //起始点</div><div class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   //终点</div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">            ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 圆圈移动</div><div class=\"line\">    // 圆圈移动的距离必须在屏幕范围内</div><div class=\"line\">    move(w, h) &#123;</div><div class=\"line\">        this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);</div><div class=\"line\">        this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);</div><div class=\"line\">        this.x += this._mx / 2;</div><div class=\"line\">        this.y += this._my / 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//鼠标点画圆闪烁变动</div><div class=\"line\">class currentCirle extends Circle &#123;</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        super(x, y)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //注释内容为鼠标焦点的地方圆圈半径变化</div><div class=\"line\">        //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</div><div class=\"line\">        this.r = 8;</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//更新页面用requestAnimationFrame替代setTimeout</div><div class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\">let canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">let w = canvas.width = canvas.offsetWidth;</div><div class=\"line\">let h = canvas.height = canvas.offsetHeight;</div><div class=\"line\">let circles = [];</div><div class=\"line\">let current_circle = new currentCirle(0, 0)</div><div class=\"line\"></div><div class=\"line\">let draw = function () &#123;</div><div class=\"line\">    ctx.clearRect(0, 0, w, h);</div><div class=\"line\">    for (let i = 0; i &lt; circles.length; i++) &#123;</div><div class=\"line\">        circles[i].move(w, h);</div><div class=\"line\">        circles[i].drawCircle(ctx);</div><div class=\"line\">        for (j = i + 1; j &lt; circles.length; j++) &#123;</div><div class=\"line\">            circles[i].drawLine(ctx, circles[j])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (current_circle.x) &#123;</div><div class=\"line\">        current_circle.drawCircle(ctx);</div><div class=\"line\">        for (var k = 1; k &lt; circles.length; k++) &#123;</div><div class=\"line\">            current_circle.drawLine(ctx, circles[k])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    requestAnimationFrame(draw)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let init = function (num) &#123;</div><div class=\"line\">    for (var i = 0; i &lt; num; i++) &#123;</div><div class=\"line\">        circles.push(new Circle(Math.random() * w, Math.random() * h));</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw();</div><div class=\"line\">&#125;</div><div class=\"line\">window.addEventListener(&apos;load&apos;, init(60));</div><div class=\"line\">window.onmousemove = function (e) &#123;</div><div class=\"line\">    e = e || window.event;</div><div class=\"line\">    current_circle.x = e.clientX;</div><div class=\"line\">    current_circle.y = e.clientY;</div><div class=\"line\">&#125;</div><div class=\"line\">window.onmouseout = function () &#123;</div><div class=\"line\">    current_circle.x = null;</div><div class=\"line\">    current_circle.y = null;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，<br>我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可<br><img src=\"http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我放在了<code>layout/_macro/sidebar.swig</code> 文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;music163player&quot;&gt;</div><div class=\"line\">    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt;</div><div class=\"line\">    &lt;/iframe&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>然后就可以在侧边栏看见我的播放器了~<br><img src=\"http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"网易云跟帖\"><a href=\"#网易云跟帖\" class=\"headerlink\" title=\"网易云跟帖\"></a>网易云跟帖</h1><p>之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网<a href=\"https://manage.gentie.163.com/\" target=\"_blank\" rel=\"external\">网易云跟帖</a>中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~</p>\n<p>#添加Fork me on GitHub<br>去网址<a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可<br>记得把里面的url换成自己的!</p>\n<h1 id=\"hexo-wordcount实现统计功能\"><a href=\"#hexo-wordcount实现统计功能\" class=\"headerlink\" title=\"hexo-wordcount实现统计功能\"></a>hexo-wordcount实现统计功能</h1><p><img src=\"http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>wordcount可以实现字数统计，阅读时常还有总字数的统计功能<br>只需要<code>npm install hexo-wordcount --save</code> 就可以安装wordcount插件，<br>主要功能<br>字数统计:WordCount<br>阅读时长预计:Min2Read<br>总字数统计: TotalCount<br>安装完插件之后在主题的配置文件中开启该功能就可以~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Post wordcount display settings</div><div class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</div><div class=\"line\">post_wordcount:</div><div class=\"line\">  item_text: true</div><div class=\"line\">  wordcount: true</div><div class=\"line\">  min2read: true</div></pre></td></tr></table></figure></p>\n<h1 id=\"leancloud阅读次数统计\"><a href=\"#leancloud阅读次数统计\" class=\"headerlink\" title=\"leancloud阅读次数统计\"></a>leancloud阅读次数统计</h1><p>next也集成了leancloud，在<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"external\">leancloud官网</a><br>中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Show number of visitors to each article.</div><div class=\"line\"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class=\"line\">leancloud_visitors:</div><div class=\"line\">  enable: true</div><div class=\"line\">  app_id: yourapp_id</div><div class=\"line\">  app_key: yourapp_key</div></pre></td></tr></table></figure></p>\n<p>然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示<br><img src=\"http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"个人网站地址：http-cherryblog-site-，顺便求个fork\"><a href=\"#个人网站地址：http-cherryblog-site-，顺便求个fork\" class=\"headerlink\" title=\"个人网站地址：http://cherryblog.site/，顺便求个fork\"></a>个人网站地址：<a href=\"http://cherryblog.site/，顺便求个fork\">http://cherryblog.site/，顺便求个fork</a></h1><h1 id=\"附录1：站点配置文件\"><a href=\"#附录1：站点配置文件\" class=\"headerlink\" title=\"附录1：站点配置文件\"></a>附录1：站点配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site   站点信息</div><div class=\"line\">title: Cherry&apos;s Blog    #站点名字</div><div class=\"line\">subtitle: To Be a Batter Me  #副标题</div><div class=\"line\">description: 做更好的自己   #站点描述，在侧边栏显示</div><div class=\"line\">author: Cherry   #博主名字</div><div class=\"line\">email: 991939332@qq.com #联系邮箱</div><div class=\"line\">language: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io</div></pre></td></tr></table></figure>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>本篇文章是在已经搭建好gitpage+hexo的博客的前提下（不懂怎么搭建的可以参考我的另一篇博文：<a href=\"http://cherryblog.site/2017/02/26/%E4%BA%86%E8%A7%A3githubPages-hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E5%8E%9F%E7%90%86/\">了解githubPages+hexo搭建博客的原理</a> 或者<a href=\"http://cherryblog.site/2016/09/16/%E5%88%A9%E7%94%A8Gitpage-hexo%E5%BC%80%E5%8F%91%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/\">利用Gitpage+hexo开发自己的博客</a>，这两篇博文都比较详细的教大家最基础的怎么将博客搭建起来。本篇博文是使用next主题的进击版本，主要是有以下内容</p>\n<ul>\n<li>域名绑定，将github博客和你的独有域名绑定</li>\n<li>添加更多的menu内容</li>\n<li>添加头像</li>\n<li>定义网站个性logo</li>\n<li>自定义样式，重写默认样式，个性化定制你的博客</li>\n<li>炫酷动态背景制作</li>\n<li>添加网易云音乐</li>\n<li>添加网易云跟帖</li>\n<li>添加leancloud阅读次数统计功能</li>\n<li>添加wordcount页面字数统计</li>\n<li>添加fork me on github功能</li>\n</ul>\n<p>要想最快的知道这些功能的效果，请移步我的个人博客：<a href=\"http://cherryblog.site/\">http://cherryblog.site/</a> ，顺便求个fork，大爷们看过可以评论一下，试一下新加上的网易云跟帖效果怎么样ヽ(●´ε｀●)ノ<br>","more":"<br>首先要说一下我使用的版本，这个是很重要的，我的博客最先创建于2016年的9月份，距离现在已经有大半年了，所以好多版本都已经进行了更新，特别是next主题集成了更多的插件，简直不要太爽＼（＠￣∇￣＠）／</p>\n<blockquote>\n<p>hexo  v3.2.2<br>next  v5.1.0<br>node v4.5.0</p>\n</blockquote>\n<p>在改成自己想要的效果之后，对整体的hexo的next主题我有了一个大概的了解，其实next主题的最新版（5.1）已经集成了大部分我们需要的插件，只需要在主题配置文件中将默认的false改为true即可，但是我们也仍然需要知道都有哪些新的功能，最有效的方法是直接去查看官网的api：<a href=\"http://theme-next.iissnan.com/\">next官网</a><img src=\"http://img.blog.csdn.net/20170409220356907?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<blockquote>\n<p>授之于鱼不如授之于渔<br>希望我们都能够理解其源码，制作出属于自己专属的个性化博客(•̀ᴗ•́)</p>\n</blockquote>\n<p> 我们需要改的文件其实也就那么几个，大部分是不需要更改，next都已经帮我们配置好了~<br> 默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>我们最先修改的应该是在hexo根目录下的配置文件<code>_config.yml</code>文件，这里是配置整个站点的配置信息，在文章的最后贴出我的配置文件，有兴趣的朋友可以参考一下~<br> 其次就是我们的主题配置文件<br> 在对应的主题下的<code>_config.yml</code> 因为我使用的是next主题，所以目录的路径为<code>C:\\Hexo\\themes\\next\\_config.yml</code> 这里配置的是使用主题的配置文件，这个配置文件的东西就有点多了，我们大部分的修改也是在这个文件下完成的。比如说使用集成的第三方插件，默认为false，我们需要将其改为true并且配置相应的app_key就可以使用该插件了~有木有很方便(^ ◕ᴥ◕ ^)<br> 然后我们需要修改样式的话是需要设置css和甚至是修改模板，<br> 页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以next主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── .github            #git信息</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-Hans.yml      #简体中文</div><div class=\"line\">|   └── zh-tw.yml      #繁体中文</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _custom        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── _header.swig    #头部样式</div><div class=\"line\">|   |   ├── _sidebar.swig   #侧边栏样式</div><div class=\"line\">|   ├── _macro        #可以自己修改的模板，覆盖原有模板</div><div class=\"line\">|   |   ├── post.swig    #文章模板</div><div class=\"line\">|   |   ├── reward.swig    #打赏模板</div><div class=\"line\">|   |   ├── sidebar.swig   #侧边栏模板</div><div class=\"line\">|   ├── _partial       #局部的布局</div><div class=\"line\">|   |   ├── head       #头部模板</div><div class=\"line\">|   |   ├── search     #搜索模板</div><div class=\"line\">|   |   ├── share      #分享模板</div><div class=\"line\">|   ├── _script        #局部的布局</div><div class=\"line\">|   ├── _third-party   #第三方模板</div><div class=\"line\">|   ├── _layout.swig   #主页面模板</div><div class=\"line\">|   ├── index.swig     #主页面模板</div><div class=\"line\">|   ├── page           #页面模板</div><div class=\"line\">|   └── tag.swig       #tag模板</div><div class=\"line\">├── scripts            #script源码</div><div class=\"line\">|   ├── tags           #tags的script源码</div><div class=\"line\">|   ├── marge.js       #页面模板</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _common    #*.styl基础css</div><div class=\"line\">|   |   ├── _custom    #*.styl局部css</div><div class=\"line\">|   |   └── _mixins    #mixins的css</div><div class=\"line\">|   ├── fonts          #字体</div><div class=\"line\">|   ├── images         #图片</div><div class=\"line\">|   ├── uploads        #添加的文件</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<h1 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h1><p>绑定域名的思路如下：</p>\n<ul>\n<li>在万网购买自己喜欢的域名（.com的会贵一点，.site和.xyz的相对便宜一些，有的只需要几块钱一年就可以）</li>\n<li>解析DNS</li>\n<li>在hexo中添加CNAME文件</li>\n</ul>\n<h2 id=\"购买域名\"><a href=\"#购买域名\" class=\"headerlink\" title=\"购买域名\"></a>购买域名</h2><p>之前没有买域名的时候我想使用网易云跟帖，发现在注册网易云跟帖的时候使用原来的域名提示“url已被使用”，这是因为网易云跟帖不认可二级域名，所以要自己买域名。<br>我选择的是<a href=\"https://wanwang.aliyun.com/\">万网</a>，阿里下面的。我选择了一个<code>.site</code>的域名，原价8元，使用阿里云app支付还优惠5元，等于3元到手一个域名（一年）~<br>按照官网的步骤一步一来就可以了~</p>\n<h2 id=\"解析DNS\"><a href=\"#解析DNS\" class=\"headerlink\" title=\"解析DNS\"></a>解析DNS</h2><p>购买完域名之后我们需要解析DNS地址，在管理控制台中的左侧有域名选项，然后找到你的域名，点击后面的“解析”<br><img src=\"http://img.blog.csdn.net/20170409132041051?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>  点击添加解析，记录类型选A或CNAME，</p>\n<blockquote>\n<p>A记录的记录值就是ip地址，github(官方文档)提供了两个IP地址，192.30.252.153和192.30.252.154，这两个IP地址为github的服务器地址，两个都要填上，<br>解析记录设置两个www和@，线路就默认就行了，CNAME记录值填你的github博客网址。如我的是sunshine940326.github.io。</p>\n</blockquote>\n<h2 id=\"在hexo中添加CNAME文件\"><a href=\"#在hexo中添加CNAME文件\" class=\"headerlink\" title=\"在hexo中添加CNAME文件\"></a>在hexo中添加CNAME文件</h2><p>接下来在你的hexo文件夹下source文件夹下新建一个CANME文件,里面加上你刚刚购买的域名比如我的<code>cherryblog.site</code><br><img src=\"http://img.blog.csdn.net/20170409141726073?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后你就可以<code>hexo clean</code>,<code>hexo g</code>，<code>hexo d</code> 发布你的博客看看效果啦~<br><img src=\"http://img.blog.csdn.net/20170409142438270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br><strong>在这里我出现一个问题，就是单独输入域名是可以访问的，但是前面加上www之后就访问不聊了= =了，我感觉应该是可以的，但是不行，再等几天看看效果= =</strong> </p>\n<h1 id=\"添加菜单页\"><a href=\"#添加菜单页\" class=\"headerlink\" title=\"添加菜单页\"></a>添加菜单页</h1><p>添加菜单页的思路（添加菜单页就是添加一个页面，有两种方式）：第一种是使用git命令<code>hexo new page &quot;photo&quot;</code> 就直接创建了<code>C:\\Hexo\\source\\photo\\index.md</code>文件，然后编辑index.md 文件就可以了~<br><img src=\"http://img.blog.csdn.net/20170409165246422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>第二种：手动创建上面的文件= =</p>\n<ul>\n<li>在主题的配置文件添加menu索引路径（根路径是hexo/source）,所以你如果想要更改页面的内容就去hexo/source下找到对应的文件夹，默认内容是在其index.md文件下</li>\n<li>在hexo的source文件下添加对应的文件夹</li>\n<li>在主题的配置文件添加menu_icon字段设置对应的icon</li>\n<li>修改language文件下zh-hans语言包</li>\n<li>在发表文章的时候添加对应的menu字段就可以看到</li>\n</ul>\n<p>刚开始的时候不理解怎么添加分类页和添加文章的区别，公司有一个项目用到了wordpress，然后发现两者有相似的地方，不同的就是wordpress是有可视化的操作后台，而hexo是需要git bash自己创建<strong>首先我们要分清什么是页面，什么是文章，</strong><br><strong>在hexo中menu下的内容都是新的页面</strong>我们可以通过<code>hexo new page &quot;pagename&quot;</code> 创建，hexo默认的页面只有<code>home</code>,<code>archives</code>,<code>tags</code> 三个，之后我们写的博文就是文章，通过<code>hexo new &quot;name&quot;</code> 创建的<code>name.md</code> 文件在根目录的<code>source\\_posts</code> 下，在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级 </p>\n<h2 id=\"在配置文件中添加menu索引路径\"><a href=\"#在配置文件中添加menu索引路径\" class=\"headerlink\" title=\"在配置文件中添加menu索引路径\"></a>在配置文件中添加menu索引路径</h2><p>我们可以在主题配置的_config文件下找到相应的字段，字段前加<code>#</code> 表示被注释掉，我们也可以自己添加menu的内容，比如我又新增了两个menu<code>life</code> 和<code>photo</code><br><img src=\"http://img.blog.csdn.net/20170409143920151?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这里添加的字段其实是加上文件索引的路径，这里hexo设置的根路径是<code>hexo/source</code> 接下来我们在这个根路径下建立相应的文件夹就可以实现点击mune跳转到相应的页面上了<br><img src=\"http://img.blog.csdn.net/20170409151941047?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">,<br>没有明白什么意思的同学看下图</p>\n<h2 id=\"在source文件添加menu文件夹\"><a href=\"#在source文件添加menu文件夹\" class=\"headerlink\" title=\"在source文件添加menu文件夹\"></a>在source文件添加menu文件夹</h2><p>我们需要在这个路径下自己建立对应的页面，比如说我新建了menu<code>life</code> 和<code>photos</code>，然后再source文件夹下面新建两个名字为<code>life</code> 和<code>photo</code> 的文件夹，里面添加一个<code>index.md</code> markdown文件，内容是类似这样的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: photo</div><div class=\"line\">date: 2017-04-04 22:14:07</div><div class=\"line\">type: &quot;photo&quot;</div><div class=\"line\">comments: false</div><div class=\"line\">---</div><div class=\"line\">啦啦啦~</div></pre></td></tr></table></figure>\n<p><img src=\"http://img.blog.csdn.net/20170409152554707?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>这是一个markdown文件，你可以自己编写，但是我还不知道怎么把添加html文件= =，回来研究一下</p>\n<h2 id=\"给menu添加icon\"><a href=\"#给menu添加icon\" class=\"headerlink\" title=\"给menu添加icon\"></a>给menu添加icon</h2><p>如果只是上面的步骤，那么你可能会创建出一个新的页面，但是显示的效果会是这样：<img src=\"http://img.blog.csdn.net/20170409153513929?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>怎么icon没有换？？？其实hexo中换icon是一个很简单的事情，因为hexo集成了<code>FontAwsome</code> 所以我们只需要在主题的配置文件中加入相应的icon名字即可<br><img src=\"http://img.blog.csdn.net/20170409153837056?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"查找FontAwsome-icon\"><a href=\"#查找FontAwsome-icon\" class=\"headerlink\" title=\"查找FontAwsome icon\"></a>查找<code>FontAwsome</code> icon</h2><p> 这时候你想要换一个自己喜欢的icon怎么办，这就需要自己动手，丰衣足食了，你需要自己到<a href=\"http://www.bootcss.com/p/font-awesome/#\">FontAwsome官网</a>，然后鼠标往下拉，在图标集中选择自己喜欢的icon，然后记住名字，保存在上面的menu_icon字段中就可以啦~<br> <img src=\"http://img.blog.csdn.net/20170409154335951?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">tips ：在字段中只需要填写icon-name后面跟的name即可，不需要加上前面的”icon-“</p>\n<h2 id=\"在language添加zh-hans翻译字段\"><a href=\"#在language添加zh-hans翻译字段\" class=\"headerlink\" title=\"在language添加zh-hans翻译字段\"></a>在language添加zh-hans翻译字段</h2><p>上面的步骤完成之后你会发现，在你的博客首页显示的仍然是英文名，而我们想要有一个中文的名字，并且想要个性化定制我们的页面，我们可以在主题的language文件下的zh-hans（中文）语言包下增加相应的字段（做过翻译的童鞋应该都知道什么意思~）还可以修改其他的字段，这样就可以定制我们的博客了呢~<br> <img src=\"http://img.blog.csdn.net/20170409171442363?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"在发表文章的时候添加对应的menu字段\"><a href=\"#在发表文章的时候添加对应的menu字段\" class=\"headerlink\" title=\"在发表文章的时候添加对应的menu字段\"></a>在发表文章的时候添加对应的menu字段</h2><p>在我们写文章的时候只要在头部信息添加相应的字段就在tags页面和categories中显示相应的分类，例如:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Git使用中的报错情况</div><div class=\"line\">date: 2017-03-11 23:54:11</div><div class=\"line\">tags: [git,实战经验] </div><div class=\"line\">categories: git</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了<br><img src=\"http://img.blog.csdn.net/20170409172519879?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"添加头像\"><a href=\"#添加头像\" class=\"headerlink\" title=\"添加头像\"></a>添加头像</h1><p>我使用的主题头像是位于侧边栏，显示的效果如下，<br><img src=\"http://img.blog.csdn.net/20170409172733268?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">要添加一个这个的头像要怎么操作呢，其实思路就是将你要上传的头像放在你的文件夹中，然后再配置文件中引用正确的路径即可，当然也可以上传绝对路径。在你的主题配置文件找到avatar字段，然后将你得图片路径写在后面，我是新建了一个uploads文件夹，将图片放在下面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Sidebar Avatar</div><div class=\"line\"># in theme directory(source/images): /images/avatar.jpg</div><div class=\"line\"># in site  directory(source/uploads): /uploads/avatar.jpg</div><div class=\"line\">avatar: /uploads/avatar.png</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://img.blog.csdn.net/20170409173222538?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"设置网站logo\"><a href=\"#设置网站logo\" class=\"headerlink\" title=\"设置网站logo\"></a>设置网站logo</h1><p>跟设置头像其实是一个思路，都是在配置文件中引入正确的地址就可以了，不过网站的logo是对图片有要求的，我们需要在<a href=\"http://tool.lu/favicon/\">Favicon在线制作</a>工具中制作32*32的.ico图片，然后放在source/images下面。然后在主题配置文件下添加主题配置文件中添加：<code>favicon: images/favicon.ico</code></p>\n<h1 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h1><p>不得不说next还是很人性化的，你可以个性化定制你的网站，你所有的改动（css）需要放在主题文件的source/css/_costum/costum.styl文件中，会覆盖原来的css，所以只要你不想要你修改的样式，只需要删除这个文件夹就可以了，再也不用担心还原不回去了~<br><img src=\"http://img.blog.csdn.net/20170409174107213?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"炫酷动态背景\"><a href=\"#炫酷动态背景\" class=\"headerlink\" title=\"炫酷动态背景\"></a>炫酷动态背景</h1><p>之前做过一个类似的canvas-nest的效果。新版本的next已经支持canvas-nest了，但是效果不怎么样，就不用了，但是也介绍一下，毕竟简单，只有两步就可以了。<br>添加修改代码<code>next/layout/_layout.swig</code>在<code>&lt;/body&gt;</code>之前加上<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;% if theme.canvas_nest %&#125;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&#123;% endif %&#125;</div></pre></td></tr></table></figure></p>\n<p>打开<code>next/_config.yml</code>，添加以下代码就可以了：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Canvas-nest</div><div class=\"line\">canvas_nest: true</div></pre></td></tr></table></figure></p>\n<p>这种虽然简单，但是我认为效果不够好，于是我决定添加原生的js来仿知乎的登录界面做背景，这就需要修改模板来实现了。首先我们要知道next文件的结构，这样我们想改什么就知道在什么位置了~<br><img src=\"http://img.blog.csdn.net/20170409180317491?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>所以我们需要在layout下面的<code>_layout.swig</code> 添加一个canvas</p>\n<p>然后使用原生js写一个仿知乎页面,详情script代码可以从github上clone：<br><a href=\"https://github.com/sunshine940326/canvas-nest\">https://github.com/sunshine940326/canvas-nest</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script&gt;</div><div class=\"line\">class Circle &#123;</div><div class=\"line\">    //创建对象</div><div class=\"line\">    //以一个圆为对象</div><div class=\"line\">    //设置随机的 x，y坐标，r半径，_mx，_my移动的距离</div><div class=\"line\">    //this.r是创建圆的半径，参数越大半径越大</div><div class=\"line\">    //this._mx,this._my是移动的距离，参数越大移动</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        this.x = x;</div><div class=\"line\">        this.y = y;</div><div class=\"line\">        this.r = Math.random() * 10 ;</div><div class=\"line\">        this._mx = Math.random() ;</div><div class=\"line\">        this._my = Math.random() ;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    //canvas 画圆和画直线</div><div class=\"line\">    //画圆就是正常的用canvas画一个圆</div><div class=\"line\">    //画直线是两个圆连线，为了避免直线过多，给圆圈距离设置了一个值，距离很远的圆圈，就不做连线处理</div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //arc() 方法使用一个中心点和半径，为一个画布的当前子路径添加一条弧。</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360)</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawLine(ctx, _circle) &#123;</div><div class=\"line\">        let dx = this.x - _circle.x;</div><div class=\"line\">        let dy = this.y - _circle.y;</div><div class=\"line\">        let d = Math.sqrt(dx * dx + dy * dy)</div><div class=\"line\">        if (d &lt; 150) &#123;</div><div class=\"line\">            ctx.beginPath();</div><div class=\"line\">            //开始一条路径，移动到位置 this.x,this.y。创建到达位置 _circle.x,_circle.y 的一条线：</div><div class=\"line\">            ctx.moveTo(this.x, this.y);   //起始点</div><div class=\"line\">            ctx.lineTo(_circle.x, _circle.y);   //终点</div><div class=\"line\">            ctx.closePath();</div><div class=\"line\">            ctx.strokeStyle = &apos;rgba(204, 204, 204, 0.3)&apos;;</div><div class=\"line\">            ctx.stroke();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // 圆圈移动</div><div class=\"line\">    // 圆圈移动的距离必须在屏幕范围内</div><div class=\"line\">    move(w, h) &#123;</div><div class=\"line\">        this._mx = (this.x &lt; w &amp;&amp; this.x &gt; 0) ? this._mx : (-this._mx);</div><div class=\"line\">        this._my = (this.y &lt; h &amp;&amp; this.y &gt; 0) ? this._my : (-this._my);</div><div class=\"line\">        this.x += this._mx / 2;</div><div class=\"line\">        this.y += this._my / 2;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//鼠标点画圆闪烁变动</div><div class=\"line\">class currentCirle extends Circle &#123;</div><div class=\"line\">    constructor(x, y) &#123;</div><div class=\"line\">        super(x, y)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    drawCircle(ctx) &#123;</div><div class=\"line\">        ctx.beginPath();</div><div class=\"line\">        //注释内容为鼠标焦点的地方圆圈半径变化</div><div class=\"line\">        //this.r = (this.r &lt; 14 &amp;&amp; this.r &gt; 1) ? this.r + (Math.random() * 2 - 1) : 2;</div><div class=\"line\">        this.r = 8;</div><div class=\"line\">        ctx.arc(this.x, this.y, this.r, 0, 360);</div><div class=\"line\">        ctx.closePath();</div><div class=\"line\">        //ctx.fillStyle = &apos;rgba(0,0,0,&apos; + (parseInt(Math.random() * 100) / 100) + &apos;)&apos;</div><div class=\"line\">        ctx.fillStyle = &apos;rgba(255, 77, 54, 0.3)&apos;</div><div class=\"line\">        ctx.fill();</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">//更新页面用requestAnimationFrame替代setTimeout</div><div class=\"line\">window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;</div><div class=\"line\"></div><div class=\"line\">let canvas = document.getElementById(&apos;canvas&apos;);</div><div class=\"line\">let ctx = canvas.getContext(&apos;2d&apos;);</div><div class=\"line\">let w = canvas.width = canvas.offsetWidth;</div><div class=\"line\">let h = canvas.height = canvas.offsetHeight;</div><div class=\"line\">let circles = [];</div><div class=\"line\">let current_circle = new currentCirle(0, 0)</div><div class=\"line\"></div><div class=\"line\">let draw = function () &#123;</div><div class=\"line\">    ctx.clearRect(0, 0, w, h);</div><div class=\"line\">    for (let i = 0; i &lt; circles.length; i++) &#123;</div><div class=\"line\">        circles[i].move(w, h);</div><div class=\"line\">        circles[i].drawCircle(ctx);</div><div class=\"line\">        for (j = i + 1; j &lt; circles.length; j++) &#123;</div><div class=\"line\">            circles[i].drawLine(ctx, circles[j])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    if (current_circle.x) &#123;</div><div class=\"line\">        current_circle.drawCircle(ctx);</div><div class=\"line\">        for (var k = 1; k &lt; circles.length; k++) &#123;</div><div class=\"line\">            current_circle.drawLine(ctx, circles[k])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    requestAnimationFrame(draw)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">let init = function (num) &#123;</div><div class=\"line\">    for (var i = 0; i &lt; num; i++) &#123;</div><div class=\"line\">        circles.push(new Circle(Math.random() * w, Math.random() * h));</div><div class=\"line\">    &#125;</div><div class=\"line\">    draw();</div><div class=\"line\">&#125;</div><div class=\"line\">window.addEventListener(&apos;load&apos;, init(60));</div><div class=\"line\">window.onmousemove = function (e) &#123;</div><div class=\"line\">    e = e || window.event;</div><div class=\"line\">    current_circle.x = e.clientX;</div><div class=\"line\">    current_circle.y = e.clientY;</div><div class=\"line\">&#125;</div><div class=\"line\">window.onmouseout = function () &#123;</div><div class=\"line\">    current_circle.x = null;</div><div class=\"line\">    current_circle.y = null;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\">&lt;/script&gt;</div></pre></td></tr></table></figure>\n<h1 id=\"添加网易云音乐\"><a href=\"#添加网易云音乐\" class=\"headerlink\" title=\"添加网易云音乐\"></a>添加网易云音乐</h1><p>在知道了页面的结构之后，你就可以将你的播放器添加在页面的任意位置，开始我是放在了首页，然后发现一上来就自动播放太吵了，于是就放在了侧边栏，想要听得朋友可以手动点击播放，<br>我们可以直接在网易云音乐中搜索我们想要插入的音乐，然后点击生成外链播放器<br><img src=\"http://img.blog.csdn.net/20170409181717791?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后可以根据你得设置生成相应的html代码，将获得的html代码插入到你想要插入的位置即可<br><img src=\"http://img.blog.csdn.net/20170409181941920?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>我放在了<code>layout/_macro/sidebar.swig</code> 文件下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div id=&quot;music163player&quot;&gt;</div><div class=\"line\">    &lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=280 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=38358214&amp;auto=0&amp;height=66&quot;&gt;</div><div class=\"line\">    &lt;/iframe&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>然后就可以在侧边栏看见我的播放器了~<br><img src=\"http://img.blog.csdn.net/20170409191354574?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"网易云跟帖\"><a href=\"#网易云跟帖\" class=\"headerlink\" title=\"网易云跟帖\"></a>网易云跟帖</h1><p>之前用的是多说，但是多说在2017年6月1日就关闭评论服务了= =，很忧伤，于是转到了网易云跟帖。由于最新版（5.1）版本的next已经集成了网易云跟帖，所以只需要在主题的设置文件中配置你的productKey就可以了。获取productKey也很简单，在官网<a href=\"https://manage.gentie.163.com/\">网易云跟帖</a>中注册，然后在获取代码&gt;通用代码中拿到productKey，之后在你的主题配置文件中的gentie_productKey字段后添加即可~</p>\n<p>#添加Fork me on GitHub<br>去网址<a href=\"https://github.com/blog/273-github-ribbons\">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\\next\\layout_layout.swig的body标签之内即可<br>记得把里面的url换成自己的!</p>\n<h1 id=\"hexo-wordcount实现统计功能\"><a href=\"#hexo-wordcount实现统计功能\" class=\"headerlink\" title=\"hexo-wordcount实现统计功能\"></a>hexo-wordcount实现统计功能</h1><p><img src=\"http://img.blog.csdn.net/20170409212441592?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>wordcount可以实现字数统计，阅读时常还有总字数的统计功能<br>只需要<code>npm install hexo-wordcount --save</code> 就可以安装wordcount插件，<br>主要功能<br>字数统计:WordCount<br>阅读时长预计:Min2Read<br>总字数统计: TotalCount<br>安装完插件之后在主题的配置文件中开启该功能就可以~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Post wordcount display settings</div><div class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</div><div class=\"line\">post_wordcount:</div><div class=\"line\">  item_text: true</div><div class=\"line\">  wordcount: true</div><div class=\"line\">  min2read: true</div></pre></td></tr></table></figure></p>\n<h1 id=\"leancloud阅读次数统计\"><a href=\"#leancloud阅读次数统计\" class=\"headerlink\" title=\"leancloud阅读次数统计\"></a>leancloud阅读次数统计</h1><p>next也集成了leancloud，在<a href=\"https://leancloud.cn/\">leancloud官网</a><br>中注册账号等一步一步的操作就不说了哈~，我们主要是为了拿到app_key和app_id,然后在主题配置文件做一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Show number of visitors to each article.</div><div class=\"line\"># You can visit https://leancloud.cn get AppID and AppKey.</div><div class=\"line\">leancloud_visitors:</div><div class=\"line\">  enable: true</div><div class=\"line\">  app_id: yourapp_id</div><div class=\"line\">  app_key: yourapp_key</div></pre></td></tr></table></figure></p>\n<p>然后再leancloud的控制台中的存储添加一个counter的class就可以检测到我们的浏览量了，同时在你文章的副标题也可以看到有阅读次数的显示<br><img src=\"http://img.blog.csdn.net/20170409213510970?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h1 id=\"个人网站地址：http-cherryblog-site-，顺便求个fork\"><a href=\"#个人网站地址：http-cherryblog-site-，顺便求个fork\" class=\"headerlink\" title=\"个人网站地址：http://cherryblog.site/，顺便求个fork\"></a>个人网站地址：<a href=\"http://cherryblog.site/，顺便求个fork\">http://cherryblog.site/，顺便求个fork</a></h1><h1 id=\"附录1：站点配置文件\"><a href=\"#附录1：站点配置文件\" class=\"headerlink\" title=\"附录1：站点配置文件\"></a>附录1：站点配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div></pre></td><td class=\"code\"><pre><div class=\"line\"> # Hexo Configuration</div><div class=\"line\">## Docs: https://hexo.io/docs/configuration.html</div><div class=\"line\">## Source: https://github.com/hexojs/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site   站点信息</div><div class=\"line\">title: Cherry&apos;s Blog    #站点名字</div><div class=\"line\">subtitle: To Be a Batter Me  #副标题</div><div class=\"line\">description: 做更好的自己   #站点描述，在侧边栏显示</div><div class=\"line\">author: Cherry   #博主名字</div><div class=\"line\">email: 991939332@qq.com #联系邮箱</div><div class=\"line\">language: zh-Hans   #使用的语言包，语言包在主题文件的language文件夹下，可以更改网站显示出的文案</div><div class=\"line\">timezone:</div><div class=\"line\"></div><div class=\"line\"># URL</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://yoursite.com</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">permalink_defaults:</div><div class=\"line\"></div><div class=\"line\"># Directory</div><div class=\"line\">source_dir: source</div><div class=\"line\">public_dir: public</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\">i18n_dir: :lang</div><div class=\"line\">skip_render:</div><div class=\"line\"></div><div class=\"line\"># Writing</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">post_asset_folder: true  #新建一个页面后自动生成一个同名文件夹（默认为false）</div><div class=\"line\">relative_link: false</div><div class=\"line\">future: true</div><div class=\"line\">highlight:</div><div class=\"line\">  enable: true</div><div class=\"line\">  line_number: true</div><div class=\"line\">  auto_detect: false</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag</div><div class=\"line\">default_category: uncategorized</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: YYYY-MM-DD</div><div class=\"line\">time_format: HH:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Extensions</div><div class=\"line\">## Plugins: https://hexo.io/plugins/</div><div class=\"line\">## Themes: https://hexo.io/themes/</div><div class=\"line\">theme: next</div><div class=\"line\"></div><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/sunshine940326/sunshine940326.github.io.git</div><div class=\"line\">  #repository: ssh://git@github.com/sunshine940326/sunshine940326.github.io</div></pre></td></tr></table></figure>"},{"title":"hexo高级进阶","date":"2016-09-16T17:14:19.000Z","_content":"这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","source":"_posts/Hexo-advanced.md","raw":"---\ntitle: hexo高级进阶\ndate: 2016-09-17 01:14:19\ntags: hexo \ncategories: git\n---\n这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。\n<!--more-->\n\n1、永久链接\n===\n\n你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。\n\n（1）变量\n---\n\n下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。\n\n    :year 4位的年，比如2015\n    :month 2位的月，比如06\n    :i_month 去掉前面0的月，比如9代表9月\n    :day 两位的天，比如05代表5号\n    :i_day 同理\n    :title 文件名\n    :id 文章ID\n    :category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n\n你也可以自定义每个变量，在 permalink_defaults 中这样设置：\n```\npermalink_defaults:\n    lang: en\n```\n\n（2）举例说明\n---\n\n假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：\n```\ntitle: Hello World\ndate: 2015-06-01\ncategories:\n- foo\n- bar\n```\n    设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n    设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n    设置为： :category/:title 结果为： foo/bar/hello-world\n\n（3）多语言支持\n---\n\n你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。\n```\nnew_post_name: :lang/:title.md\npermalink: :lang/:title/\n```\n当你创建一个新的文章的时候， hexo new \"Hello World\" --lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 http://localhost:4000/tw/hello-world/ 便会指向该文章。\n2、主题\n===\n\nhexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：\n```\n.\n├── _config.yml\n├── languages\n├── layout\n├── scripts\n└── source\n```\n（1）主题全局设置\n---\n\n_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。\n（2）语言\n---\n语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。\n3、模版\n===\n模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：\n\n    index 首页\n    post 文章\n    page 分页\n    archive 归档\n    category 分类归档\n    tag 标签归档\n\n（1）Layouts（布局）\n---\n\n如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：\n```\n<!--index.ejs-->\nindex\n\n<!--layout.ejs-->\n<html>\n  <body><%- body %></body>\n</html>\n```\n生成的结果如下：\n```\n<!DOCTYPE html>\n<html>\n  <body>index</body>\n</html>\n```\n每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。\n\n也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。\n（2）Partials（局部模版）\n---\n局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= config.title %></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header') %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">My Site</h1>\n<div id=\"content\">Home page</div>\n```\n这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。\n（3）Local Variables（本地变量）\n---\n\n这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：\n```\n<!--partial/header.ejs-->\n<h1 id=\"logo\"><%= title></h1>\n\n<!--index.ejs-->\n<%- partial('partial/header', {title: 'Hello World'}) %>\n<div id=\"content\">Home page</div>\n```\n生成后就是：\n```\n<h1 id=\"logo\">Hello World</h1>\n<div id=\"content\">Home page</div>\n```\n这个也不难理解，就是传递变量的过程。\n（4）Optimization（最优化）\n----\n\n假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：\n```\n<%- fragment_cache('header', function(){\n  return '<header></header>';\n});\n```\n如果使用局部模版的话，如下：\n```\n<%- partial('header', {}, {cache: true});\n```\n但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。\n4、变量\n===\n（1）全局变量\n---\n\n    site 网站变量\n        site.posts 所有文章\n        site.pages 所有分页\n        site.categories 所有分类\n        site.tags 所有标签\n    page 针对改页面的内容以及前置申明中所设定的变量\n    config 配置文件中的变量\n    theme 主题配置文件中的变量\n    _ lodash 函数库\n    path 当前页面的路径（不含根路径）\n    url 页面完整网址\n    env 环境变量\n\n（2）页面变量\n---\nPage(page)这里指的是 hexo new page 创建的那个页面\n\n    page.title 文章标题\n    page.date 文章建立日期\n    page.updated 文章更新日期\n    page.comments 留言是否开启\n    page.layout 布局名称\n    page.content 文章完整内容\n    page.excerpt 文章摘要\n    page.more 除了摘要的其他内容\n    page.source 文章原始路劲\n    page.full_source 文章完整原始路径\n    page.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\n    page.permalink 文章永久网址\n    page.prev 上一篇文章，如果此为第一篇文章则为 null\n    page.next 下一篇文章，如果此为最后一篇文章则为 null\n    page.raw 文章原始内容\n    page.photos 文章的照片（用于相册）\n    page.link 文章的外链（用于链接文章）\n\nPost(post)这里指的是文章页面，与page布局相同，添加如下变量：\n\n    page.pulished 文章非草稿为true\n    page.categories 文章分类\n    page.tags 文章标签\n\n**首页(index)**\n\n    page.per_page 每一页显示的文章数\n    page.total 文章数量\n    page.current 当前页码\n    page.current_url 当前页的URL\n    page.posts 当前页的文章\n    page.prev 前一页页码，如果为第一页，该值为0\n    page.prev_link 前一页URL，如果为第一页，则为''\n    page.next 后一页页码，如果为最后一页，则为0\n    page.next_link 后一页URL，如果为最后一页，则为''\n    page.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n\n归档页(archive)与 index 布局相同，但是新增如下变量：\n\n    archive 为true\n    year 归档年份（4位）\n    month 归档月份（不包含0）\n\n分类页(category)与 index 布局相同，但是新增如下变量：\n\n    category 分类名称\n\n标签页(tag)与 index 布局相同，但是新增如下变量：\n\n    tag 标签名称\n\n5、帮助函数\n===\n帮助函数被用于在模版中快速插入内容。\n（1）URL\n---\n\n    url_for 返回一个带root路径的url，用法： <%- url_for(path) %>\n    relative_url 返回from相对的to路径，用法： <%- relative_url(from, to) %>\n\n    gravatar 插入Gravatar图片，用法： <%- gravatar(email, [size])%> ，例如：\n\n    <%- gravatar('a@abc.com') %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n    <%- gravatar('a@abc.com', 40) %>\n    // http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n\n（2）HTML\n---\n   1 css 载入CSS文件。用法： <%- css(path, ...)%> ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：\n\n    <%- css('style.css') %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n\n\n    <%- css(['style.css', 'screen.css']) %>\n    // <link rel=\"stylesheet\" href=\"/style.css\" type=\"text/css\">\n    // <link rel=\"stylesheet\" href=\"/screen.css\" type=\"text/css\">\n\n   2 js 载入 JavaScript 文件。用法： <%- js(path, ...) %> ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。\n\n    <%- js('script.js') %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    <%- js(['script.js', 'gallery.js']) %>\n    // <script type=\"text/javascript\" src=\"/script.js\"></script>\n    // <script type=\"text/javascript\" src=\"/gallery.js\"></script>\n\n   3 link_to 插入链接。用法： <%- link_to(path, [text], [options]) %> ， options 参数有：\n  - external 在新窗口中打开链接，默认值为false\n  - class Class名称，也就是html标签a的class名\n  - id ID名，也就是html标签a的id名\n\n    示例如下：\n\n\n\n\n    <%- link_to('http://www.google.com') %>\n     // <a href=\"http://www.google.com\" title=\"http://www.google.com\">http://www.google.com</a>\n    <%- link_to('http://www.google.com', 'Google') %>\n    // <a href=\"http://www.google.com\" title=\"Google\">Google</a>\n\n\n    <%- link_to('http://www.google.com', 'Google', {external: true, class: \"link\"}) %>\n    // <a href=\"http://www.google.com\" title=\"Google\" target=\"_blank\" rel=\"external\" class=\"link\">Google</a>\n\n   4 mail_to 插入电子邮件链接。用法： <%- mail_to(path, [text], [options])%> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - subject 邮件主题\n   - cc 抄送（CC）\n   - bcc 密送（BCC）\n   - body 邮件内容\n\n    示例如下：\n\n\n\n\n    <%- mail_to('a@abc.com') %>\n    // <a href=\"mailto:a@abc.com\" title=\"a@abc.com\">a@abc.com</a>\n    <%- mail_to('a@abc.com', 'Email') %>\n    // <a href=\"mailto:a@abc.com\" title=\"Email\">Email</a>\n\n   5 image_tag 插入图片。用法： <%- image_tag(path, [options]) %> ， options 参数有：\n   - class Class名称，也就是html标签a的class名\n   - id ID名，也就是html标签a的id名\n   - alt 替代文字\n   - width 宽度\n   - height 高度\n\n    基本上就是 img 标签里的属性值。\n\n6 favicon_tag 插入favicon。用法：\n```<%- favicon_tag(path) %>```\n\n7 feed_tag 插入feed链接。用法：\n```<%- feed_tag(path, [options]) %> ```，参数有： title 和 type (默认值为atom)\n\n（3）条件函数\n---\n    is_current 判断 path 是否符合目前页面的网址。 <%- is_current(path, [strict]) %>\n    is_home 判断目前是否为首页。\n    is_post 检查目前是否为文章。 <%- is_post() %>\n    is_archive 检查目前是否为存档页面。 <%- is_archive() %>\n    is_year 检查目前是否为年度归档页面。 <%- is_year() %>\n    is_month 检查目前是否为月度归档页面。 <%- is_month() %>\n    is_category 检查目前是否为分类归档页面。 <%- is_category() %>\n    is_tag 检查目前是否为标签归档页面。 <%- is_tag() %>\n\n（4）字符串处理\n---\n   - trim 清除字符串开头和结尾的空格。 ```<%- trim(string) %>`\n\n   - strip_html 清除字符串中的 HTML 标签。``` <%- strip_html(string) %> ```，示例：\n```\n    <%- strip_html('It's not <b>important</b> anymore!') %>\n    // It's not important anymore!\n```\n   - titlecase 把字符串转换为正确的 Title case。 ```<%- titlecase(string) %> ```示例：\n```\n    <%- titlecase('this is an apple') %>\n    # This is an Apple\n```\n\n- markdown 使用 Markdown 解析字符串。 <%- markdown(str) %> 示例：\n```\n    <%- markdown('make me **strong**') %>\n    // make me <strong>strong</strong>\n```\n\n- render 解析字符串。``` <%- render(str, engine, [options]) %>```\n\n    word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 ```<%- word_wrap(str, [length]) %> ```，示例：\n```\n    <%- word_wrap('Once upon a time', 8) %>\n    // Once upon\\n a time\n```\n\n- truncate 移除超过 length 长度的字符串。 ```<%- truncate(text, length) %> ```示例：\n```\n    <%- truncate('Once upon a time in a world far far away', 16) %>\n\n    // Once upon a time\n```\n\n（5）模板\n---\n   - partial 载入其他模板文件，您可在 locals 设定区域变量。 <%- partial(layout, [locals], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false\n\n   - fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 <%- fragment_cache(id, fn); 示例：\n\n    <%- fragment_cache('header', function(){\n          return '<header></header>';\n    }) %>\n\n（6）日期与时间\n---\n   - date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 <%- date(date, [format]) %> 示例：\n\n\n\n\n\n    <%- date(Date.now()) %>\n    // Jan 1, 2013\n    <%- date(Date.now(), 'YYYY/M/D') %>\n    // 2013/1/1\n\n   - date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 <%- date_xml(date) %> ，示例：\n```\n    <%- date_xml(Date.now()) %>\n    // 2013-01-01T00:00:00.000Z\n```\n   - time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 ```<%- time(date, [format]) %>``` 示例：\n```\n    <%- time(Date.now()) %>\n    // 13:05:12\n\n\n    <%- time(Date.now(), 'h:mm:ss a') %>\n    // 1:05:12 pm\n\n   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <%- full_date(date, [format]) %> 示例：\n\n\n\n\n    <%- full_date(new Date()) %>\n    // Jan 1, 2013 0:00:00\n    <%- full_date(new Date(), 'dddd, MMMM Do YYYY, h:mm:ss a') %>\n    // Tuesday, January 1st 2013, 12:00:00 am\n\n（7）列表\n---\n\n   - list_categories 插入分类列表。 <%- list_categories([categories], [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |\n\n   - list_tags 插入标签列表。 <%- list_tags([tags], [options]) %>\n\n    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0\n\n   - list_archives 插入归档列表。 ```<%- list_archives([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |\n\n   - list_posts 插入文章列表。 ```<%- list_posts([options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |\n\n   - tagcloud 插入标签云。 ```<%- tagcloud([tags], [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |\n\n（8）其他\n---\n   - paginator 插入分页链接。 ```<%- paginator(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false\n\n   - search_form 插入 Google 搜索框。 ```<%- search_form(options) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false\n\n   - number_format 格式化数字。 ```<%- number_format(number, [options]) %>```\n\n    参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .\n    示例：\n\n\n\n\n    <%- number_format(12345.67, {precision: 1}) %>\n    // 12,345.68\n    <%- number_format(12345.67, {precision: 4}) %>\n    // 12,345.6700\n\n\n    <%- number_format(12345.67, {precision: 0}) %>\n    // 12,345\n\n\n    <%- number_format(12345.67, {delimiter: ''}) %>\n    // 12345.67\n\n\n    <%- number_format(12345.67, {separator: '/'}) %>\n    // 12,345/67\n\n   - open_graph 插入 open graph 资源。 <%- open_graph([options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |\n\n   - toc 解析内容中的标题标签 (h1~h6) 并插入目录。 <%- toc(str, [options]) %>\n\n    参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true\n\n    下面示例就是解析文章内容，并生成目录列表：\n```\n    <%- toc(page.content) %>```\n\n6、本地化\n===\n\n所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。\n\n例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：``` <h1 class=\"title\"><%= __('comment') %></h1> ```，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。\n\n这一块知道这些就基本上满足了自定义主题的需求了。\n7、插件\n===\n这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：\n\n    Generator\n    Renderer\n    Helper\n    Deployer\n    Processor\n    Tag\n    Console\n    Migrator\n    Filter\n\n注意\n\n1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；\n\n2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。\n","slug":"Hexo-advanced","published":1,"updated":"2017-02-26T12:08:39.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel1w000iqkyfpacixrc9","content":"<p>这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。<br><a id=\"more\"></a></p>\n<h1 id=\"1、永久链接\"><a href=\"#1、永久链接\" class=\"headerlink\" title=\"1、永久链接\"></a>1、永久链接</h1><p>你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。</p>\n<h2 id=\"（1）变量\"><a href=\"#（1）变量\" class=\"headerlink\" title=\"（1）变量\"></a>（1）变量</h2><p>下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。</p>\n<pre><code>:year 4位的年，比如2015\n:month 2位的月，比如06\n:i_month 去掉前面0的月，比如9代表9月\n:day 两位的天，比如05代表5号\n:i_day 同理\n:title 文件名\n:id 文章ID\n:category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n</code></pre><p>你也可以自定义每个变量，在 permalink_defaults 中这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink_defaults:</div><div class=\"line\">    lang: en</div></pre></td></tr></table></figure></p>\n<h2 id=\"（2）举例说明\"><a href=\"#（2）举例说明\" class=\"headerlink\" title=\"（2）举例说明\"></a>（2）举例说明</h2><p>假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2015-06-01</div><div class=\"line\">categories:</div><div class=\"line\">- foo</div><div class=\"line\">- bar</div></pre></td></tr></table></figure></p>\n<pre><code>设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n设置为： :category/:title 结果为： foo/bar/hello-world\n</code></pre><h2 id=\"（3）多语言支持\"><a href=\"#（3）多语言支持\" class=\"headerlink\" title=\"（3）多语言支持\"></a>（3）多语言支持</h2><p>你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new_post_name: :lang/:title.md</div><div class=\"line\">permalink: :lang/:title/</div></pre></td></tr></table></figure></p>\n<p>当你创建一个新的文章的时候， hexo new “Hello World” –lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 <a href=\"http://localhost:4000/tw/hello-world/\" target=\"_blank\" rel=\"external\">http://localhost:4000/tw/hello-world/</a> 便会指向该文章。</p>\n<h1 id=\"2、主题\"><a href=\"#2、主题\" class=\"headerlink\" title=\"2、主题\"></a>2、主题</h1><p>hexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── languages</div><div class=\"line\">├── layout</div><div class=\"line\">├── scripts</div><div class=\"line\">└── source</div></pre></td></tr></table></figure></p>\n<h2 id=\"（1）主题全局设置\"><a href=\"#（1）主题全局设置\" class=\"headerlink\" title=\"（1）主题全局设置\"></a>（1）主题全局设置</h2><p>_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。</p>\n<h2 id=\"（2）语言\"><a href=\"#（2）语言\" class=\"headerlink\" title=\"（2）语言\"></a>（2）语言</h2><p>语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。</p>\n<h1 id=\"3、模版\"><a href=\"#3、模版\" class=\"headerlink\" title=\"3、模版\"></a>3、模版</h1><p>模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>\n<pre><code>index 首页\npost 文章\npage 分页\narchive 归档\ncategory 分类归档\ntag 标签归档\n</code></pre><h2 id=\"（1）Layouts（布局）\"><a href=\"#（1）Layouts（布局）\" class=\"headerlink\" title=\"（1）Layouts（布局）\"></a>（1）Layouts（布局）</h2><p>如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">index</div><div class=\"line\"></div><div class=\"line\">&lt;!--layout.ejs--&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>生成的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;index&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n<p>也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。</p>\n<h2 id=\"（2）Partials（局部模版）\"><a href=\"#（2）Partials（局部模版）\" class=\"headerlink\" title=\"（2）Partials（局部模版）\"></a>（2）Partials（局部模版）</h2><p>局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>\n<h2 id=\"（3）Local-Variables（本地变量）\"><a href=\"#（3）Local-Variables（本地变量）\" class=\"headerlink\" title=\"（3）Local Variables（本地变量）\"></a>（3）Local Variables（本地变量）</h2><p>这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个也不难理解，就是传递变量的过程。</p>\n<h2 id=\"（4）Optimization（最优化）\"><a href=\"#（4）Optimization（最优化）\" class=\"headerlink\" title=\"（4）Optimization（最优化）\"></a>（4）Optimization（最优化）</h2><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;</div><div class=\"line\">  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果使用局部模版的话，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</div></pre></td></tr></table></figure></p>\n<p>但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>\n<h1 id=\"4、变量\"><a href=\"#4、变量\" class=\"headerlink\" title=\"4、变量\"></a>4、变量</h1><h2 id=\"（1）全局变量\"><a href=\"#（1）全局变量\" class=\"headerlink\" title=\"（1）全局变量\"></a>（1）全局变量</h2><pre><code>site 网站变量\n    site.posts 所有文章\n    site.pages 所有分页\n    site.categories 所有分类\n    site.tags 所有标签\npage 针对改页面的内容以及前置申明中所设定的变量\nconfig 配置文件中的变量\ntheme 主题配置文件中的变量\n_ lodash 函数库\npath 当前页面的路径（不含根路径）\nurl 页面完整网址\nenv 环境变量\n</code></pre><h2 id=\"（2）页面变量\"><a href=\"#（2）页面变量\" class=\"headerlink\" title=\"（2）页面变量\"></a>（2）页面变量</h2><p>Page(page)这里指的是 hexo new page 创建的那个页面</p>\n<pre><code>page.title 文章标题\npage.date 文章建立日期\npage.updated 文章更新日期\npage.comments 留言是否开启\npage.layout 布局名称\npage.content 文章完整内容\npage.excerpt 文章摘要\npage.more 除了摘要的其他内容\npage.source 文章原始路劲\npage.full_source 文章完整原始路径\npage.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\npage.permalink 文章永久网址\npage.prev 上一篇文章，如果此为第一篇文章则为 null\npage.next 下一篇文章，如果此为最后一篇文章则为 null\npage.raw 文章原始内容\npage.photos 文章的照片（用于相册）\npage.link 文章的外链（用于链接文章）\n</code></pre><p>Post(post)这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<pre><code>page.pulished 文章非草稿为true\npage.categories 文章分类\npage.tags 文章标签\n</code></pre><p><strong>首页(index)</strong></p>\n<pre><code>page.per_page 每一页显示的文章数\npage.total 文章数量\npage.current 当前页码\npage.current_url 当前页的URL\npage.posts 当前页的文章\npage.prev 前一页页码，如果为第一页，该值为0\npage.prev_link 前一页URL，如果为第一页，则为&apos;&apos;\npage.next 后一页页码，如果为最后一页，则为0\npage.next_link 后一页URL，如果为最后一页，则为&apos;&apos;\npage.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n</code></pre><p>归档页(archive)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>archive 为true\nyear 归档年份（4位）\nmonth 归档月份（不包含0）\n</code></pre><p>分类页(category)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>category 分类名称\n</code></pre><p>标签页(tag)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>tag 标签名称\n</code></pre><h1 id=\"5、帮助函数\"><a href=\"#5、帮助函数\" class=\"headerlink\" title=\"5、帮助函数\"></a>5、帮助函数</h1><p>帮助函数被用于在模版中快速插入内容。</p>\n<h2 id=\"（1）URL\"><a href=\"#（1）URL\" class=\"headerlink\" title=\"（1）URL\"></a>（1）URL</h2><pre><code>url_for 返回一个带root路径的url，用法： &lt;%- url_for(path) %&gt;\nrelative_url 返回from相对的to路径，用法： &lt;%- relative_url(from, to) %&gt;\n\ngravatar 插入Gravatar图片，用法： &lt;%- gravatar(email, [size])%&gt; ，例如：\n\n&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n</code></pre><h2 id=\"（2）HTML\"><a href=\"#（2）HTML\" class=\"headerlink\" title=\"（2）HTML\"></a>（2）HTML</h2><p>   1 css 载入CSS文件。用法： &lt;%- css(path, …)%&gt; ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：</p>\n<pre><code>&lt;%- css(&apos;style.css&apos;) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n\n\n&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>   2 js 载入 JavaScript 文件。用法： &lt;%- js(path, …) %&gt; ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。</p>\n<pre><code>&lt;%- js(&apos;script.js&apos;) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>   3 link_to 插入链接。用法： &lt;%- link_to(path, [text], [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>external 在新窗口中打开链接，默认值为false</li>\n<li>class Class名称，也就是html标签a的class名</li>\n<li><p>id ID名，也就是html标签a的id名</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;\n // &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;\n\n\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, {external: true, class: &quot;link&quot;}) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;\n</code></pre><p>   4 mail_to 插入电子邮件链接。用法： &lt;%- mail_to(path, [text], [options])%&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>subject 邮件主题</li>\n<li>cc 抄送（CC）</li>\n<li>bcc 密送（BCC）</li>\n<li><p>body 邮件内容</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;\n&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;\n</code></pre><p>   5 image_tag 插入图片。用法： &lt;%- image_tag(path, [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>alt 替代文字</li>\n<li>width 宽度</li>\n<li><p>height 高度</p>\n<p>基本上就是 img 标签里的属性值。</p>\n</li>\n</ul>\n<p>6 favicon_tag 插入favicon。用法：<br><figure class=\"highlight plain\"><figcaption><span>favicon_tag(path) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">7 feed_tag 插入feed链接。用法：</div><div class=\"line\">```&lt;%- feed_tag(path, [options]) %&gt; ```，参数有： title 和 type (默认值为atom)</div><div class=\"line\"></div><div class=\"line\">（3）条件函数</div><div class=\"line\">---</div><div class=\"line\">    is_current 判断 path 是否符合目前页面的网址。 &lt;%- is_current(path, [strict]) %&gt;</div><div class=\"line\">    is_home 判断目前是否为首页。</div><div class=\"line\">    is_post 检查目前是否为文章。 &lt;%- is_post() %&gt;</div><div class=\"line\">    is_archive 检查目前是否为存档页面。 &lt;%- is_archive() %&gt;</div><div class=\"line\">    is_year 检查目前是否为年度归档页面。 &lt;%- is_year() %&gt;</div><div class=\"line\">    is_month 检查目前是否为月度归档页面。 &lt;%- is_month() %&gt;</div><div class=\"line\">    is_category 检查目前是否为分类归档页面。 &lt;%- is_category() %&gt;</div><div class=\"line\">    is_tag 检查目前是否为标签归档页面。 &lt;%- is_tag() %&gt;</div><div class=\"line\"></div><div class=\"line\">（4）字符串处理</div><div class=\"line\">---</div><div class=\"line\">   - trim 清除字符串开头和结尾的空格。 ```&lt;%- trim(string) %&gt;`</div><div class=\"line\"></div><div class=\"line\">   - strip_html 清除字符串中的 HTML 标签。``` &lt;%- strip_html(string) %&gt; ```，示例：</div></pre></td></tr></table></figure></p>\n<pre><code>&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;\n// It&apos;s not important anymore!\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- titlecase 把字符串转换为正确的 Title case。 ```&lt;%- titlecase(string) %&gt; ```示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;\n# This is an Apple\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- markdown 使用 Markdown 解析字符串。 &lt;%- markdown(str) %&gt; 示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;\n// make me &lt;strong&gt;strong&lt;/strong&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- render 解析字符串。``` &lt;%- render(str, engine, [options]) %&gt;</div></pre></td></tr></table></figure>\n<pre><code>word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 <figure class=\"highlight plain\"><figcaption><span>word_wrap(str, [length]) %> ```，示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;</div><div class=\"line\">    // Once upon\\n a time</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>truncate 移除超过 length 长度的字符串。 <figure class=\"highlight plain\"><figcaption><span>truncate(text, length) %> ```示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, 16) %&gt;</div><div class=\"line\"></div><div class=\"line\">    // Once upon a time</div></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"（5）模板\"><a href=\"#（5）模板\" class=\"headerlink\" title=\"（5）模板\"></a>（5）模板</h2><ul>\n<li><p>partial 载入其他模板文件，您可在 locals 设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt;</p>\n<p>参数 | 描述 | 默认值 — | — | — cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false</p>\n</li>\n<li><p>fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); 示例：</p>\n<p>&lt;%- fragment_cache(‘header’, function(){</p>\n<pre><code>return &apos;&lt;header&gt;&lt;/header&gt;&apos;;\n</code></pre><p>}) %&gt;</p>\n</li>\n</ul>\n<h2 id=\"（6）日期与时间\"><a href=\"#（6）日期与时间\" class=\"headerlink\" title=\"（6）日期与时间\"></a>（6）日期与时间</h2><ul>\n<li>date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 &lt;%- date(date, [format]) %&gt; 示例：</li>\n</ul>\n<pre><code>&lt;%- date(Date.now()) %&gt;\n// Jan 1, 2013\n&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;\n// 2013/1/1\n</code></pre><ul>\n<li><p>date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 &lt;%- date_xml(date) %&gt; ，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- date_xml(Date.now()) %&gt;</div><div class=\"line\">// 2013-01-01T00:00:00.000Z</div></pre></td></tr></table></figure>\n</li>\n<li><p>time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <figure class=\"highlight plain\"><figcaption><span>time(date, [format]) %>``` 示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- time(Date.now()) %&gt;</div><div class=\"line\">    // 13:05:12</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // 1:05:12 pm</div><div class=\"line\"></div><div class=\"line\">   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 &lt;%- full_date(date, [format]) %&gt; 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- full_date(new Date()) %&gt;</div><div class=\"line\">    // Jan 1, 2013 0:00:00</div><div class=\"line\">    &lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // Tuesday, January 1st 2013, 12:00:00 am</div><div class=\"line\"></div><div class=\"line\">（7）列表</div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">   - list_categories 插入分类列表。 &lt;%- list_categories([categories], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">   - list_tags 插入标签列表。 &lt;%- list_tags([tags], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0</div><div class=\"line\"></div><div class=\"line\">   - list_archives 插入归档列表。 ```&lt;%- list_archives([options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |</p>\n</li>\n<li><p>list_posts 插入文章列表。 <figure class=\"highlight plain\"><figcaption><span>list_posts([options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">- tagcloud 插入标签云。 ```&lt;%- tagcloud([tags], [options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |</p>\n</li>\n</ul>\n<h2 id=\"（8）其他\"><a href=\"#（8）其他\" class=\"headerlink\" title=\"（8）其他\"></a>（8）其他</h2><ul>\n<li><p>paginator 插入分页链接。 <figure class=\"highlight plain\"><figcaption><span>paginator(options) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &amp;hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false</div><div class=\"line\"></div><div class=\"line\">- search_form 插入 Google 搜索框。 ```&lt;%- search_form(options) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false</p>\n</li>\n<li><p>number_format 格式化数字。 <figure class=\"highlight plain\"><figcaption><span>number_format(number, [options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .</div><div class=\"line\"> 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</div><div class=\"line\"> // 12,345.68</div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</div><div class=\"line\"> // 12,345.6700</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</div><div class=\"line\"> // 12,345</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;</div><div class=\"line\"> // 12345.67</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;</div><div class=\"line\"> // 12,345/67</div><div class=\"line\"></div><div class=\"line\">- open_graph 插入 open graph 资源。 &lt;%- open_graph([options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |</div><div class=\"line\"></div><div class=\"line\">- toc 解析内容中的标题标签 (h1~h6) 并插入目录。 &lt;%- toc(str, [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true</div><div class=\"line\"></div><div class=\"line\"> 下面示例就是解析文章内容，并生成目录列表：</div></pre></td></tr></table></figure></p>\n<p>&lt;%- toc(page.content) %&gt;```</p>\n</li>\n</ul>\n<h1 id=\"6、本地化\"><a href=\"#6、本地化\" class=\"headerlink\" title=\"6、本地化\"></a>6、本地化</h1><p>所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。</p>\n<p>例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：<code>&lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&#39;comment&#39;) %&gt;&lt;/h1&gt;</code>，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。</p>\n<p>这一块知道这些就基本上满足了自定义主题的需求了。</p>\n<h1 id=\"7、插件\"><a href=\"#7、插件\" class=\"headerlink\" title=\"7、插件\"></a>7、插件</h1><p>这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：</p>\n<pre><code>Generator\nRenderer\nHelper\nDeployer\nProcessor\nTag\nConsole\nMigrator\nFilter\n</code></pre><p>注意</p>\n<p>1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；</p>\n<p>2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。</p>\n","excerpt":"<p>这一部分的主要是一些高级进阶的功能，想自定义自己的主题，就需要这部分的内容。<br>","more":"</p>\n<h1 id=\"1、永久链接\"><a href=\"#1、永久链接\" class=\"headerlink\" title=\"1、永久链接\"></a>1、永久链接</h1><p>你可以通过 _config.yml 或者文章的头部申明来设置文章的永久链接。</p>\n<h2 id=\"（1）变量\"><a href=\"#（1）变量\" class=\"headerlink\" title=\"（1）变量\"></a>（1）变量</h2><p>下面列举了可以使用在永久链接里的变量，除了下面这些，你可以使用固定链接中的任何属性。</p>\n<pre><code>:year 4位的年，比如2015\n:month 2位的月，比如06\n:i_month 去掉前面0的月，比如9代表9月\n:day 两位的天，比如05代表5号\n:i_day 同理\n:title 文件名\n:id 文章ID\n:category 类别；如果文章没有指定，那么就是 default_category 字段设置的那个。\n</code></pre><p>你也可以自定义每个变量，在 permalink_defaults 中这样设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">permalink_defaults:</div><div class=\"line\">    lang: en</div></pre></td></tr></table></figure></p>\n<h2 id=\"（2）举例说明\"><a href=\"#（2）举例说明\" class=\"headerlink\" title=\"（2）举例说明\"></a>（2）举例说明</h2><p>假设在_posts目录下有一篇名为hello-world.md的文章，声明如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: Hello World</div><div class=\"line\">date: 2015-06-01</div><div class=\"line\">categories:</div><div class=\"line\">- foo</div><div class=\"line\">- bar</div></pre></td></tr></table></figure></p>\n<pre><code>设置为： :year/:month/:day/:title/ 结果为： 2015/06/01/hello-world\n设置为： :year-:month-:day-:title.html 结果为： 2015-06-01-hello-world.html\n设置为： :category/:title 结果为： foo/bar/hello-world\n</code></pre><h2 id=\"（3）多语言支持\"><a href=\"#（3）多语言支持\" class=\"headerlink\" title=\"（3）多语言支持\"></a>（3）多语言支持</h2><p>你可以通过 new_post_name 和 permalink 字段的设定，来创建一个多语言的网站。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">new_post_name: :lang/:title.md</div><div class=\"line\">permalink: :lang/:title/</div></pre></td></tr></table></figure></p>\n<p>当你创建一个新的文章的时候， hexo new “Hello World” –lang tw ，hexo会创建source/_posts/tw/Hello-World.md，那么 <a href=\"http://localhost:4000/tw/hello-world/\">http://localhost:4000/tw/hello-world/</a> 便会指向该文章。</p>\n<h1 id=\"2、主题\"><a href=\"#2、主题\" class=\"headerlink\" title=\"2、主题\"></a>2、主题</h1><p>hexo根目录中的theme目录就是主题的所在地，设置主题非常简单，只需将 _config.yml 中theme字段值设为主题名就行了。下面看一下一个主题的目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── _config.yml</div><div class=\"line\">├── languages</div><div class=\"line\">├── layout</div><div class=\"line\">├── scripts</div><div class=\"line\">└── source</div></pre></td></tr></table></figure></p>\n<h2 id=\"（1）主题全局设置\"><a href=\"#（1）主题全局设置\" class=\"headerlink\" title=\"（1）主题全局设置\"></a>（1）主题全局设置</h2><p>_config.yml配置文件，跟hexo的全局配置文件名一样。只是在不同的目录中，在该配置文件中的改动不需要重启服务，就可以实时体现在站点中。</p>\n<h2 id=\"（2）语言\"><a href=\"#（2）语言\" class=\"headerlink\" title=\"（2）语言\"></a>（2）语言</h2><p>语言文件夹，详细信息可以查看Localization(i18n)的说明，下面再介绍。</p>\n<h1 id=\"3、模版\"><a href=\"#3、模版\" class=\"headerlink\" title=\"3、模版\"></a>3、模版</h1><p>模版基本上就是网站的布局了，如果你想要自己亲手制作一个Hexo的主题，那么就要深入了解这块内容了，每一个主题至少都要包含一个index模版，下面是各页面对应的模版名称：</p>\n<pre><code>index 首页\npost 文章\npage 分页\narchive 归档\ncategory 分类归档\ntag 标签归档\n</code></pre><h2 id=\"（1）Layouts（布局）\"><a href=\"#（1）Layouts（布局）\" class=\"headerlink\" title=\"（1）Layouts（布局）\"></a>（1）Layouts（布局）</h2><p>如果页面结构类似，举个例子，两个模版都含有header以及footer，你就可以考虑通过「布局」让两个模板共享相同的结构。一个布局文件必须要能显示 body 变量的内容，如此一来模板的内容才会被显示，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">index</div><div class=\"line\"></div><div class=\"line\">&lt;!--layout.ejs--&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;&lt;%- body %&gt;&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>生成的结果如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">  &lt;body&gt;index&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>每个模板都默认使用 layout 布局，您可在文章的前置申明中指定其他布局，比如“post”或者“page”或是设为false来关闭布局功能（如果不填默认是post，这个在_config.yml中可以设置默认值），您甚至可在布局中再使用其他布局来建立嵌套布局。</p>\n<p>也许你看到官方Docs这么说，还是不明白说的是什么意思，后面我会通过创建个人简历的布局示例来详细讲解这一块内容。</p>\n<h2 id=\"（2）Partials（局部模版）\"><a href=\"#（2）Partials（局部模版）\" class=\"headerlink\" title=\"（2）Partials（局部模版）\"></a>（2）Partials（局部模版）</h2><p>局部模版可以让你在不同的模版中分享相同的组件，例如Header、Footer或者Sidebar侧边栏等等，可以利用局部模版功能将各个组件分割成独立的文件，便于维护。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= config.title %&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;My Site&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个很容易理解，就是将局部模块里的内容，原封不动的拷贝到引用它的文件中。</p>\n<h2 id=\"（3）Local-Variables（本地变量）\"><a href=\"#（3）Local-Variables（本地变量）\" class=\"headerlink\" title=\"（3）Local Variables（本地变量）\"></a>（3）Local Variables（本地变量）</h2><p>这里的变量就是针对局部模版来使用的，您可以在局部模块中指定局部变量来进行传递。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!--partial/header.ejs--&gt;</div><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;&lt;%= title&gt;&lt;/h1&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--index.ejs--&gt;</div><div class=\"line\">&lt;%- partial(&apos;partial/header&apos;, &#123;title: &apos;Hello World&apos;&#125;) %&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>生成后就是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h1 id=&quot;logo&quot;&gt;Hello World&lt;/h1&gt;</div><div class=\"line\">&lt;div id=&quot;content&quot;&gt;Home page&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>这个也不难理解，就是传递变量的过程。</p>\n<h2 id=\"（4）Optimization（最优化）\"><a href=\"#（4）Optimization（最优化）\" class=\"headerlink\" title=\"（4）Optimization（最优化）\"></a>（4）Optimization（最优化）</h2><p>假如你的主题特别复杂，因为要生成的文件过于庞大，这样会导致hexo生成性能下降，除了优化主题外，你还可以通过Fragment Caching(局部缓存)的功能来处理。它的主要功能就是缓存局部的内容，减少文件查询。常用在那些很少变动的模块中，比如Header、Footer等等，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- fragment_cache(&apos;header&apos;, function()&#123;</div><div class=\"line\">  return &apos;&lt;header&gt;&lt;/header&gt;&apos;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果使用局部模版的话，如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;header&apos;, &#123;&#125;, &#123;cache: true&#125;);</div></pre></td></tr></table></figure></p>\n<p>但是需要注意的是，如果开启了 relative_link 参数的话，就不要使用局部缓存的功能，因为relative link在每个页面可能不同。</p>\n<h1 id=\"4、变量\"><a href=\"#4、变量\" class=\"headerlink\" title=\"4、变量\"></a>4、变量</h1><h2 id=\"（1）全局变量\"><a href=\"#（1）全局变量\" class=\"headerlink\" title=\"（1）全局变量\"></a>（1）全局变量</h2><pre><code>site 网站变量\n    site.posts 所有文章\n    site.pages 所有分页\n    site.categories 所有分类\n    site.tags 所有标签\npage 针对改页面的内容以及前置申明中所设定的变量\nconfig 配置文件中的变量\ntheme 主题配置文件中的变量\n_ lodash 函数库\npath 当前页面的路径（不含根路径）\nurl 页面完整网址\nenv 环境变量\n</code></pre><h2 id=\"（2）页面变量\"><a href=\"#（2）页面变量\" class=\"headerlink\" title=\"（2）页面变量\"></a>（2）页面变量</h2><p>Page(page)这里指的是 hexo new page 创建的那个页面</p>\n<pre><code>page.title 文章标题\npage.date 文章建立日期\npage.updated 文章更新日期\npage.comments 留言是否开启\npage.layout 布局名称\npage.content 文章完整内容\npage.excerpt 文章摘要\npage.more 除了摘要的其他内容\npage.source 文章原始路劲\npage.full_source 文章完整原始路径\npage.path 文章网址（不含根路径），通常在主题中使用 url_for(page.path)\npage.permalink 文章永久网址\npage.prev 上一篇文章，如果此为第一篇文章则为 null\npage.next 下一篇文章，如果此为最后一篇文章则为 null\npage.raw 文章原始内容\npage.photos 文章的照片（用于相册）\npage.link 文章的外链（用于链接文章）\n</code></pre><p>Post(post)这里指的是文章页面，与page布局相同，添加如下变量：</p>\n<pre><code>page.pulished 文章非草稿为true\npage.categories 文章分类\npage.tags 文章标签\n</code></pre><p><strong>首页(index)</strong></p>\n<pre><code>page.per_page 每一页显示的文章数\npage.total 文章数量\npage.current 当前页码\npage.current_url 当前页的URL\npage.posts 当前页的文章\npage.prev 前一页页码，如果为第一页，该值为0\npage.prev_link 前一页URL，如果为第一页，则为&apos;&apos;\npage.next 后一页页码，如果为最后一页，则为0\npage.next_link 后一页URL，如果为最后一页，则为&apos;&apos;\npage.path 当前页网址（不含根路径），通常在主题中使用 url_for(page.path)\n</code></pre><p>归档页(archive)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>archive 为true\nyear 归档年份（4位）\nmonth 归档月份（不包含0）\n</code></pre><p>分类页(category)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>category 分类名称\n</code></pre><p>标签页(tag)与 index 布局相同，但是新增如下变量：</p>\n<pre><code>tag 标签名称\n</code></pre><h1 id=\"5、帮助函数\"><a href=\"#5、帮助函数\" class=\"headerlink\" title=\"5、帮助函数\"></a>5、帮助函数</h1><p>帮助函数被用于在模版中快速插入内容。</p>\n<h2 id=\"（1）URL\"><a href=\"#（1）URL\" class=\"headerlink\" title=\"（1）URL\"></a>（1）URL</h2><pre><code>url_for 返回一个带root路径的url，用法： &lt;%- url_for(path) %&gt;\nrelative_url 返回from相对的to路径，用法： &lt;%- relative_url(from, to) %&gt;\n\ngravatar 插入Gravatar图片，用法： &lt;%- gravatar(email, [size])%&gt; ，例如：\n\n&lt;%- gravatar(&apos;a@abc.com&apos;) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787\n&lt;%- gravatar(&apos;a@abc.com&apos;, 40) %&gt;\n// http://www.gravatar.com/avatar/b9b00e66c6b8a70f88c73cb6bdb06787?s=40\n</code></pre><h2 id=\"（2）HTML\"><a href=\"#（2）HTML\" class=\"headerlink\" title=\"（2）HTML\"></a>（2）HTML</h2><p>   1 css 载入CSS文件。用法： &lt;%- css(path, …)%&gt; ， path 可以是数据或者字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路劲；如果后面没有加上 .css 扩展名的话，也会自动加上。示例如下：</p>\n<pre><code>&lt;%- css(&apos;style.css&apos;) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n\n\n&lt;%- css([&apos;style.css&apos;, &apos;screen.css&apos;]) %&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/style.css&quot; type=&quot;text/css&quot;&gt;\n// &lt;link rel=&quot;stylesheet&quot; href=&quot;/screen.css&quot; type=&quot;text/css&quot;&gt;\n</code></pre><p>   2 js 载入 JavaScript 文件。用法： &lt;%- js(path, …) %&gt; ， path 可以是数组或字符串，如果 path 开头不是 / 或任何协议，则会自动加上根路径；如果后面没有加上 .js 扩展名的话，也会自动加上。</p>\n<pre><code>&lt;%- js(&apos;script.js&apos;) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n&lt;%- js([&apos;script.js&apos;, &apos;gallery.js&apos;]) %&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/script.js&quot;&gt;&lt;/script&gt;\n// &lt;script type=&quot;text/javascript&quot; src=&quot;/gallery.js&quot;&gt;&lt;/script&gt;\n</code></pre><p>   3 link_to 插入链接。用法： &lt;%- link_to(path, [text], [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>external 在新窗口中打开链接，默认值为false</li>\n<li>class Class名称，也就是html标签a的class名</li>\n<li><p>id ID名，也就是html标签a的id名</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- link_to(&apos;http://www.google.com&apos;) %&gt;\n // &lt;a href=&quot;http://www.google.com&quot; title=&quot;http://www.google.com&quot;&gt;http://www.google.com&lt;/a&gt;\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot;&gt;Google&lt;/a&gt;\n\n\n&lt;%- link_to(&apos;http://www.google.com&apos;, &apos;Google&apos;, {external: true, class: &quot;link&quot;}) %&gt;\n// &lt;a href=&quot;http://www.google.com&quot; title=&quot;Google&quot; target=&quot;_blank&quot; rel=&quot;external&quot; class=&quot;link&quot;&gt;Google&lt;/a&gt;\n</code></pre><p>   4 mail_to 插入电子邮件链接。用法： &lt;%- mail_to(path, [text], [options])%&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>subject 邮件主题</li>\n<li>cc 抄送（CC）</li>\n<li>bcc 密送（BCC）</li>\n<li><p>body 邮件内容</p>\n<p>示例如下：</p>\n</li>\n</ul>\n<pre><code>&lt;%- mail_to(&apos;a@abc.com&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;a@abc.com&quot;&gt;a@abc.com&lt;/a&gt;\n&lt;%- mail_to(&apos;a@abc.com&apos;, &apos;Email&apos;) %&gt;\n// &lt;a href=&quot;mailto:a@abc.com&quot; title=&quot;Email&quot;&gt;Email&lt;/a&gt;\n</code></pre><p>   5 image_tag 插入图片。用法： &lt;%- image_tag(path, [options]) %&gt; ， options 参数有：</p>\n<ul>\n<li>class Class名称，也就是html标签a的class名</li>\n<li>id ID名，也就是html标签a的id名</li>\n<li>alt 替代文字</li>\n<li>width 宽度</li>\n<li><p>height 高度</p>\n<p>基本上就是 img 标签里的属性值。</p>\n</li>\n</ul>\n<p>6 favicon_tag 插入favicon。用法：<br><figure class=\"highlight plain\"><figcaption><span>favicon_tag(path) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">7 feed_tag 插入feed链接。用法：</div><div class=\"line\">```&lt;%- feed_tag(path, [options]) %&gt; ```，参数有： title 和 type (默认值为atom)</div><div class=\"line\"></div><div class=\"line\">（3）条件函数</div><div class=\"line\">---</div><div class=\"line\">    is_current 判断 path 是否符合目前页面的网址。 &lt;%- is_current(path, [strict]) %&gt;</div><div class=\"line\">    is_home 判断目前是否为首页。</div><div class=\"line\">    is_post 检查目前是否为文章。 &lt;%- is_post() %&gt;</div><div class=\"line\">    is_archive 检查目前是否为存档页面。 &lt;%- is_archive() %&gt;</div><div class=\"line\">    is_year 检查目前是否为年度归档页面。 &lt;%- is_year() %&gt;</div><div class=\"line\">    is_month 检查目前是否为月度归档页面。 &lt;%- is_month() %&gt;</div><div class=\"line\">    is_category 检查目前是否为分类归档页面。 &lt;%- is_category() %&gt;</div><div class=\"line\">    is_tag 检查目前是否为标签归档页面。 &lt;%- is_tag() %&gt;</div><div class=\"line\"></div><div class=\"line\">（4）字符串处理</div><div class=\"line\">---</div><div class=\"line\">   - trim 清除字符串开头和结尾的空格。 ```&lt;%- trim(string) %&gt;`</div><div class=\"line\"></div><div class=\"line\">   - strip_html 清除字符串中的 HTML 标签。``` &lt;%- strip_html(string) %&gt; ```，示例：</div></pre></td></tr></table></figure></p>\n<pre><code>&lt;%- strip_html(&apos;It&apos;s not &lt;b&gt;important&lt;/b&gt; anymore!&apos;) %&gt;\n// It&apos;s not important anymore!\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">- titlecase 把字符串转换为正确的 Title case。 ```&lt;%- titlecase(string) %&gt; ```示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- titlecase(&apos;this is an apple&apos;) %&gt;\n# This is an Apple\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- markdown 使用 Markdown 解析字符串。 &lt;%- markdown(str) %&gt; 示例：</div></pre></td></tr></table></figure>\n<pre><code>&lt;%- markdown(&apos;make me **strong**&apos;) %&gt;\n// make me &lt;strong&gt;strong&lt;/strong&gt;\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">- render 解析字符串。``` &lt;%- render(str, engine, [options]) %&gt;</div></pre></td></tr></table></figure>\n<pre><code>word_wrap 使每行的字符串长度不超过 length 。 length 预设为 80。 <figure class=\"highlight plain\"><figcaption><span>word_wrap(str, [length]) %> ```，示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- word_wrap(&apos;Once upon a time&apos;, 8) %&gt;</div><div class=\"line\">    // Once upon\\n a time</div></pre></td></tr></table></figure>\n</code></pre><ul>\n<li>truncate 移除超过 length 长度的字符串。 <figure class=\"highlight plain\"><figcaption><span>truncate(text, length) %> ```示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- truncate(&apos;Once upon a time in a world far far away&apos;, 16) %&gt;</div><div class=\"line\"></div><div class=\"line\">    // Once upon a time</div></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"（5）模板\"><a href=\"#（5）模板\" class=\"headerlink\" title=\"（5）模板\"></a>（5）模板</h2><ul>\n<li><p>partial 载入其他模板文件，您可在 locals 设定区域变量。 &lt;%- partial(layout, [locals], [options]) %&gt;</p>\n<p>参数 | 描述 | 默认值 — | — | — cache | 缓存（使用 Fragment cache） | false only | 限制局部变量。在模板中只能使用 locals 中设定的变量。 | false</p>\n</li>\n<li><p>fragment_cache 局部缓存。它储存局部内容，下次使用时就能直接使用缓存。 &lt;%- fragment_cache(id, fn); 示例：</p>\n<p>&lt;%- fragment_cache(‘header’, function(){</p>\n<pre><code>return &apos;&lt;header&gt;&lt;/header&gt;&apos;;\n</code></pre><p>}) %&gt;</p>\n</li>\n</ul>\n<h2 id=\"（6）日期与时间\"><a href=\"#（6）日期与时间\" class=\"headerlink\" title=\"（6）日期与时间\"></a>（6）日期与时间</h2><ul>\n<li>date 插入格式化的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 date_format 配置信息。 &lt;%- date(date, [format]) %&gt; 示例：</li>\n</ul>\n<pre><code>&lt;%- date(Date.now()) %&gt;\n// Jan 1, 2013\n&lt;%- date(Date.now(), &apos;YYYY/M/D&apos;) %&gt;\n// 2013/1/1\n</code></pre><ul>\n<li><p>date_xml 插入 XML 格式的日期。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 &lt;%- date_xml(date) %&gt; ，示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- date_xml(Date.now()) %&gt;</div><div class=\"line\">// 2013-01-01T00:00:00.000Z</div></pre></td></tr></table></figure>\n</li>\n<li><p>time 插入格式化的时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 <figure class=\"highlight plain\"><figcaption><span>time(date, [format]) %>``` 示例：</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">```</div><div class=\"line\">    &lt;%- time(Date.now()) %&gt;</div><div class=\"line\">    // 13:05:12</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- time(Date.now(), &apos;h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // 1:05:12 pm</div><div class=\"line\"></div><div class=\"line\">   - full_date 插入格式化的日期和时间。 date 可以是 UNIX 时间、ISO 字符串、Date 对象或 [Moment.js] 对象。 format 默认为 time_format 配置信息。 &lt;%- full_date(date, [format]) %&gt; 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    &lt;%- full_date(new Date()) %&gt;</div><div class=\"line\">    // Jan 1, 2013 0:00:00</div><div class=\"line\">    &lt;%- full_date(new Date(), &apos;dddd, MMMM Do YYYY, h:mm:ss a&apos;) %&gt;</div><div class=\"line\">    // Tuesday, January 1st 2013, 12:00:00 am</div><div class=\"line\"></div><div class=\"line\">（7）列表</div><div class=\"line\">---</div><div class=\"line\"></div><div class=\"line\">   - list_categories 插入分类列表。 &lt;%- list_categories([categories], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    参数 | 描述 | 默认值 --- | --- | --- orderby | 分类排列方式 | name order | 分类排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个分类的文章总数 | true style | 分类列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 分类间的分隔符号。只有在 style 不是 list 时有用。 | , depth | 要显示的分类层级。 0 显示所有层级的分类； -1 和 0 很类似，但是显示不分层 级； 1 只显示第一层的分类。 | 0 class | 分类列表的 class 名称。 | category transform | 改变分类名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">   - list_tags 插入标签列表。 &lt;%- list_tags([tags], [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\">    选项 | 描述 | 预设值 --- | --- | --- orderby | 标签排列方式 | name order | 标签排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个标签的文章总数 | true style | 标签列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 标签间的分隔符号。只有在 style 不是 list 时有用。 | , class | 标签列表的 class 名称。 | tag transform | 改变标签名称显示方法的函数 | amount | 要显示的标签数量（0 = 无限制） | 0</div><div class=\"line\"></div><div class=\"line\">   - list_archives 插入归档列表。 ```&lt;%- list_archives([options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — type | 类型。此设定可为 yearly 或 monthly 。 | monthly order | 排列顺序。 1 , asc 升序； -1 , desc 降序。 | 1 show_count | 显示每个归档的文章总数 | true format | 日期格式 | MMMM YYYY style | 归档列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 归档间的分隔符号。只有在 style 不是 list 时有用。 | , class | 归档列表的 class 名称。 | archive transform | 改变归档名称显示方法的函数 |</p>\n</li>\n<li><p>list_posts 插入文章列表。 <figure class=\"highlight plain\"><figcaption><span>list_posts([options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- orderby | 文章排列方式 | date order | 文章排列顺序。 1 , asc 升序； -1 , desc 降序。 | -1 style | 文章列表的显示方式。使用 list 以无序列表（unordered list）方式显示。 | list separator | 文章间的分隔符号。只有在 style 不是 list 时有用。 | , class | 文章列表的 class 名称。 | post amount | 要显示的文章数量（0 = 无限制） | 6 transform | 改变文章名称显示方法的函数 |</div><div class=\"line\"></div><div class=\"line\">- tagcloud 插入标签云。 ```&lt;%- tagcloud([tags], [options]) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — min_font | 最小字体尺寸 | 10 max_font | 最大字体尺寸 | 20 unit | 字体尺寸的单位 | px amount | 标签总量 | 40 orderby | 标签排列方式 | name order | 标签排列顺序。 1 , sac 升序； -1 , desc 降序 | 1 color | 使用颜色 | false start_color | 开始的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 | end_color | 结束的颜色。您可使用十六进位值（ #b700ff ），rgba（ rgba(183, 0, 255, 1) ），hsla（ hsla(283, 100%, 50%, 1) ）或 [颜色关键字]。此变量仅在 color 参数开启时才有用。 |</p>\n</li>\n</ul>\n<h2 id=\"（8）其他\"><a href=\"#（8）其他\" class=\"headerlink\" title=\"（8）其他\"></a>（8）其他</h2><ul>\n<li><p>paginator 插入分页链接。 <figure class=\"highlight plain\"><figcaption><span>paginator(options) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- base | 基础网址 | / format | 网址格式 | page/%d/ total | 分页总数 | 1 current | 目前页数 | 0 prev_text | 上一页链接的文字。仅在 prev_next 设定开启时才有用。 | Prev next_text | 下一页链接的文字。仅在 prev_next 设定开启时才有用。 | Next space | 空白文字 | &amp;hellp; prev_next | 显示上一页和下一页的链接 | true end_size | 显示于两侧的页数 | 1 mid_size | 显示于中间的页数 | 2 show_all | 显示所有页数。如果开启此参数的话， end_size 和 mid_size 就没用了。 | false</div><div class=\"line\"></div><div class=\"line\">- search_form 插入 Google 搜索框。 ```&lt;%- search_form(options) %&gt;</div></pre></td></tr></table></figure></p>\n<p>参数 | 描述 | 默认值 — | — | — class | 表单的 class name | search-form text | 搜索提示文字 | Search button | 显示搜索按钮。此参数可为布尔值（boolean）或字符串，当设定是字符串的时候，即为搜索按钮的文字。 | false</p>\n</li>\n<li><p>number_format 格式化数字。 <figure class=\"highlight plain\"><figcaption><span>number_format(number, [options]) %>```</span></figcaption><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- precision | 数字精度。此选项可为 false 或非负整数。 | false delimiter | 千位数分隔符号 | , separator | 整数和小数之间的分隔符号 | .</div><div class=\"line\"> 示例：</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 1&#125;) %&gt;</div><div class=\"line\"> // 12,345.68</div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 4&#125;) %&gt;</div><div class=\"line\"> // 12,345.6700</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;precision: 0&#125;) %&gt;</div><div class=\"line\"> // 12,345</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;delimiter: &apos;&apos;&#125;) %&gt;</div><div class=\"line\"> // 12345.67</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"> &lt;%- number_format(12345.67, &#123;separator: &apos;/&apos;&#125;) %&gt;</div><div class=\"line\"> // 12,345/67</div><div class=\"line\"></div><div class=\"line\">- open_graph 插入 open graph 资源。 &lt;%- open_graph([options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- title | 页面标题 ( og:title ) | page.title type | 页面类型 ( og:type ) | blog url | 页面网址 ( og:url ) | url image | 页面图片 ( og:image ) | 内容中的图片 site_name | 网站名称 ( og:site_name ) | config.title description | 页面描述 ( og:desription ) | 内容摘要或前 200 字 twitter_card | Twitter 卡片类型 ( twitter:card ) | summary twitter_id | Twitter ID ( twitter:creator ) | twitter_site | Twitter 网站 ( twitter:site ) | google_plus | Google+ 个人资料链接 | fb_admins | Facebook 管理者 ID | fb_app_id | Facebook 应用程序 ID |</div><div class=\"line\"></div><div class=\"line\">- toc 解析内容中的标题标签 (h1~h6) 并插入目录。 &lt;%- toc(str, [options]) %&gt;</div><div class=\"line\"></div><div class=\"line\"> 参数 | 描述 | 默认值 --- | --- | --- class | Class 名称 | toc list_number | 显示编号 | true</div><div class=\"line\"></div><div class=\"line\"> 下面示例就是解析文章内容，并生成目录列表：</div></pre></td></tr></table></figure></p>\n<p>&lt;%- toc(page.content) %&gt;```</p>\n</li>\n</ul>\n<h1 id=\"6、本地化\"><a href=\"#6、本地化\" class=\"headerlink\" title=\"6、本地化\"></a>6、本地化</h1><p>所谓的本地化功能，就是在主题中设置不同的语言模版，在文件夹 languages ，然后通过设置改变网页中的预设文本。在模版中是通过 __ 或 _p 来引用的。</p>\n<p>例如你在 _config.yml 中设置 language: zh-CN ，而网页模版中有这么一段引用：<code>&lt;h1 class=&quot;title&quot;&gt;&lt;%= __(&#39;comment&#39;) %&gt;&lt;/h1&gt;</code>，那么网站会在 languages 文件夹中找 zh-CH.yml 文件，并找到对应的 comment 值，将值显示在网站中。</p>\n<p>这一块知道这些就基本上满足了自定义主题的需求了。</p>\n<h1 id=\"7、插件\"><a href=\"#7、插件\" class=\"headerlink\" title=\"7、插件\"></a>7、插件</h1><p>这一块内容主要针对开发者的，帮助开发hexo的插件或者向hexo提供插件，主要就是通过github提交代码。大致可以了解一下Hexo的九种插件，您可以在 API 页面中获得更多信息：</p>\n<pre><code>Generator\nRenderer\nHelper\nDeployer\nProcessor\nTag\nConsole\nMigrator\nFilter\n</code></pre><p>注意</p>\n<p>1、上面提到的所有 Options 参数一定要按照 json 的格式来书写；</p>\n<p>2、虽然官方Docs已经写得很详细了，但是缺乏实际例子，后续我会以我的站点为例，详细介绍一些功能如何使用。 或者直接在Github中fork我的主题 light-ch （基于hexo-theme-light主题的China版）自行查看代码。</p>"},{"title":"javascript设计模式（一）","date":"2017-03-11T15:54:11.000Z","_content":" \n\n在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的[学习javascript设计模式](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)，本文的所有demo地址见本人的github：https://github.com/sunshine940326/js-object-demo\n<!--more-->\n\njavascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）\n\n#定义函数\n# 构造器模式\njs不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。\n\n在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。\n\n对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。\n\n## 创建对象\n在js中创建对象有三种基本方式：\n下面的每一种方式都会创建一个新对象\n1. 对象直接量\n\n```\nvar empty = {};\n    console.log(empty);\n    var point = {\n        x:0,\n        y:1\n    }\n    console.log(point.x,+point.y)\n    var point2 = {\n        x:point.x,\n        y:point.y+1\n    }\n    console.log(\"point2.x\" + \":\"+ point2.x + \",\"+ \"point2.y\" +\":\"+ point2.y)\n\n    var book = {\n        \"main_title\":\"javascript\",\n        \"sub_title\" : \"The Definitive Guide\",\n        \"for\":\"all\",\n        \"author\":{\n            \"firstName\":\"cherry\",\n            \"lastName\":\"Li\"\n        }\n    }\n    console.log(book.author.firstName,book.author.lastName)\n    console.log(book.main_title)\n    console.log(book.sub_title)\n    console.log(book.for)\n```\n2. Object.create\n```\nvar newObject = Object.create(null)\n```\n`Object.create()` 方法创建一个拥有指定原型和若干个指定属性的对象。\n语法\n>Object.create(proto, [ propertiesObject ])\n参数\n\n- proto\n一个对象，作为新创建对象的原型。或者为 null。\n- propertiesObject\n可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。\n```\n\n    var myCar = {\n        name:\"Fort\",\n        drive:function () {\n            console.log(\"I'm driving!\")\n        },\n        panic:function () {\n            console.log(\"wait\")\n        }\n    }\n\n    // Use Object.create to instantiate a new car\n    var youCar = Object.create(myCar);\n    // Now we can see that one is a prototype of the other\n    console.log(youCar.name)\n\n    var vehicle = {\n        getModel:function () {\n            console.log(\"The model of this vehicle is..\" +this.model)\n        }\n    }\n\n    var car = Object.create(vehicle,{\n        \"id\":{\n            value:'car1',\n\n        },\n        \"model\":{\n            value:'Ford',\n\n        }\n    })\n\n```\n3. 构造函数方式（new）\n通过new创建对象，new后跟一个函数调用（构造函数）\n```\nvar newObject = new Object();\n```\n\n---\n其实这三种方式都可以相互转化\n\n通过字面量方式创建的空对象相当于`Object.create(Object.prototype)`\n```\no = {}\n\no = Object.create(Object.prototype) \n```\n下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n```\nfunction Constructor() {};\no = new Constructor();\no = Object.create(Constructor.prototype) \n```\n\n## 给对象设置属性和获取属性值\n### 使用.的方式\n```\nnewObject.sayHello = \"Hello\";\nconsole.log(newObject.sayHello)\n```\n### 使用[]方式\n```\nnewObject['sayHello'] = 'Hello';\nconsole.log(newObject['sayHello']);\n```\n这两种设置属性的区别\n- 使用保留字作为属性名的时候，必须用方括号\n- . 不能修改，因为属性名是标识符\n- []为字符串，可以修改和创建\n\n### Object.defineProperty方式\n>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n>Object.defineProperty(obj, prop, descriptor)\n\n>obj\n需要定义属性的对象。\nprop\n需定义或修改的属性的名字。\ndescriptor\n将被定义或修改的属性的描述符。\n\n\n#### 创建属性\n如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。\n\n通过`.` `[]`设置的属性，可以使用`delete`删除,通过`Object.defineProperty()`设置的属性不能被delete删除，使用  `Object.defineProperty()` 增加的属性值是不可改变的。\n```\n//删除对象的属性\n    //通过. []设置的属性，可以使用delete删除\n    function fun() {\n        this.name = 'name';\n        this['age'] = 12;\n    }\n\n    var obj = new fun();\n    console.log(obj.name);   //name\n    console.log(obj.age)\n    delete obj.name;\n    delete obj.age;\n    console.log(obj.name);    //undefined\n    console.log(obj.age);\n\n    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。\n    var o = {} //创建一个空对象\n    Object.defineProperty(o,'a',{    //给o设置一个属性a，值为37\n        value:37,\n        writable:true,\n        configurable:true\n    });\n\n    var bValue ;\n    Object.defineProperty(o,'b',{\n        get:function () {\n            return bValue\n        },\n        set:function (newValue) {\n            bValue = newValue;\n        },\n        enumerable:true,\n        configurable:true,\n    })\n    o.b = 38;\n\n    //数据描述符和存取描述符不能混合使用\n    Object.defineProperty(o,\"conflict\",{\n        value:11111,\n        get:function () {\n            return 11111\n        }\n    })// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n```\n\n#### 修改属性\n如果属性已经存在，`Object.defineProperty()`将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。\n\n##### Writable 属性\n\n当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。\n\n```\nvar o = {}; // 创建一个新对象\n\nObject.defineProperty(o, \"a\", { value : 37,\n                                writable : false });\n\nconsole.log(o.a); // 打印 37\no.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）\nconsole.log(o.a); // 打印 37， 赋值不起作用。\n```\n\n##### Enumerable 特性\n\n属性特性 enumerable 定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n\n\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { value : 1, enumerable:true });\nObject.defineProperty(o, \"b\", { value : 2, enumerable:false });\nObject.defineProperty(o, \"c\", { value : 3 }); // enumerable defaults to false\no.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true\n\nfor (var i in o) {    \n  console.log(i);  \n}\n// 打印 'a' 和 'd' (in undefined order)\n\nObject.keys(o); // [\"a\", \"d\"]\n\no.propertyIsEnumerable('a'); // true\no.propertyIsEnumerable('b'); // false\no.propertyIsEnumerable('c'); // false\n```\n\n##### Configurable 特性\n\nconfigurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { get : function(){return 1;}, \n                                configurable : false } );\n\n// throws a TypeError\nObject.defineProperty(o, \"a\", {configurable : true}); \n// throws a TypeError\nObject.defineProperty(o, \"a\", {enumerable : true}); \n// throws a TypeError (set was undefined previously) \nObject.defineProperty(o, \"a\", {set : function(){}}); \n// throws a TypeError (even though the new get does exactly the same thing) \nObject.defineProperty(o, \"a\", {get : function(){return 1;}});\n// throws a TypeError\nObject.defineProperty(o, \"a\", {value : 12});\n\nconsole.log(o.a); // logs 1\ndelete o.a; // Nothing happens\nconsole.log(o.a); // logs 1\n```\n#### 添加多个属性和默认值\n\n考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的\n```\nvar o = {};\n\no.a = 1;\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : true,\n  configurable : true,\n  enumerable : true\n});\n\n\n// 另一方面，\nObject.defineProperty(o, \"a\", { value : 1 });\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : false,\n  configurable : false,\n  enumerable : false\n});\n```\n### Object.defineProperties方式\n\n```\n// 设置属性\nObject.defineProperties( newObject, {\n\n  \"someKey\": { \n    value: \"Hello World\", \n    writable: true \n  },\n\n  \"anotherKey\": { \n    value: \"Foo bar\", \n    writable: false \n  } \n\n});\n\n```\n","source":"_posts/JavaScript-Design-Pattern.md","raw":"---\ntitle: javascript设计模式（一）\ndate: 2017-03-11 23:54:11\ntags: [js,js设计模式] \ncategories: js\n---\n \n\n在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的[学习javascript设计模式](http://wiki.jikexueyuan.com/project/javascript-design-patterns/)，本文的所有demo地址见本人的github：https://github.com/sunshine940326/js-object-demo\n<!--more-->\n\njavascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）\n\n#定义函数\n# 构造器模式\njs不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。\n\n在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。\n\n对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。\n\n## 创建对象\n在js中创建对象有三种基本方式：\n下面的每一种方式都会创建一个新对象\n1. 对象直接量\n\n```\nvar empty = {};\n    console.log(empty);\n    var point = {\n        x:0,\n        y:1\n    }\n    console.log(point.x,+point.y)\n    var point2 = {\n        x:point.x,\n        y:point.y+1\n    }\n    console.log(\"point2.x\" + \":\"+ point2.x + \",\"+ \"point2.y\" +\":\"+ point2.y)\n\n    var book = {\n        \"main_title\":\"javascript\",\n        \"sub_title\" : \"The Definitive Guide\",\n        \"for\":\"all\",\n        \"author\":{\n            \"firstName\":\"cherry\",\n            \"lastName\":\"Li\"\n        }\n    }\n    console.log(book.author.firstName,book.author.lastName)\n    console.log(book.main_title)\n    console.log(book.sub_title)\n    console.log(book.for)\n```\n2. Object.create\n```\nvar newObject = Object.create(null)\n```\n`Object.create()` 方法创建一个拥有指定原型和若干个指定属性的对象。\n语法\n>Object.create(proto, [ propertiesObject ])\n参数\n\n- proto\n一个对象，作为新创建对象的原型。或者为 null。\n- propertiesObject\n可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。\n```\n\n    var myCar = {\n        name:\"Fort\",\n        drive:function () {\n            console.log(\"I'm driving!\")\n        },\n        panic:function () {\n            console.log(\"wait\")\n        }\n    }\n\n    // Use Object.create to instantiate a new car\n    var youCar = Object.create(myCar);\n    // Now we can see that one is a prototype of the other\n    console.log(youCar.name)\n\n    var vehicle = {\n        getModel:function () {\n            console.log(\"The model of this vehicle is..\" +this.model)\n        }\n    }\n\n    var car = Object.create(vehicle,{\n        \"id\":{\n            value:'car1',\n\n        },\n        \"model\":{\n            value:'Ford',\n\n        }\n    })\n\n```\n3. 构造函数方式（new）\n通过new创建对象，new后跟一个函数调用（构造函数）\n```\nvar newObject = new Object();\n```\n\n---\n其实这三种方式都可以相互转化\n\n通过字面量方式创建的空对象相当于`Object.create(Object.prototype)`\n```\no = {}\n\no = Object.create(Object.prototype) \n```\n下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码\n```\nfunction Constructor() {};\no = new Constructor();\no = Object.create(Constructor.prototype) \n```\n\n## 给对象设置属性和获取属性值\n### 使用.的方式\n```\nnewObject.sayHello = \"Hello\";\nconsole.log(newObject.sayHello)\n```\n### 使用[]方式\n```\nnewObject['sayHello'] = 'Hello';\nconsole.log(newObject['sayHello']);\n```\n这两种设置属性的区别\n- 使用保留字作为属性名的时候，必须用方括号\n- . 不能修改，因为属性名是标识符\n- []为字符串，可以修改和创建\n\n### Object.defineProperty方式\n>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。\n\n>Object.defineProperty(obj, prop, descriptor)\n\n>obj\n需要定义属性的对象。\nprop\n需定义或修改的属性的名字。\ndescriptor\n将被定义或修改的属性的描述符。\n\n\n#### 创建属性\n如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。\n\n通过`.` `[]`设置的属性，可以使用`delete`删除,通过`Object.defineProperty()`设置的属性不能被delete删除，使用  `Object.defineProperty()` 增加的属性值是不可改变的。\n```\n//删除对象的属性\n    //通过. []设置的属性，可以使用delete删除\n    function fun() {\n        this.name = 'name';\n        this['age'] = 12;\n    }\n\n    var obj = new fun();\n    console.log(obj.name);   //name\n    console.log(obj.age)\n    delete obj.name;\n    delete obj.age;\n    console.log(obj.name);    //undefined\n    console.log(obj.age);\n\n    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。\n    var o = {} //创建一个空对象\n    Object.defineProperty(o,'a',{    //给o设置一个属性a，值为37\n        value:37,\n        writable:true,\n        configurable:true\n    });\n\n    var bValue ;\n    Object.defineProperty(o,'b',{\n        get:function () {\n            return bValue\n        },\n        set:function (newValue) {\n            bValue = newValue;\n        },\n        enumerable:true,\n        configurable:true,\n    })\n    o.b = 38;\n\n    //数据描述符和存取描述符不能混合使用\n    Object.defineProperty(o,\"conflict\",{\n        value:11111,\n        get:function () {\n            return 11111\n        }\n    })// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors\n\n```\n\n#### 修改属性\n如果属性已经存在，`Object.defineProperty()`将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。\n\n##### Writable 属性\n\n当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。\n\n```\nvar o = {}; // 创建一个新对象\n\nObject.defineProperty(o, \"a\", { value : 37,\n                                writable : false });\n\nconsole.log(o.a); // 打印 37\no.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）\nconsole.log(o.a); // 打印 37， 赋值不起作用。\n```\n\n##### Enumerable 特性\n\n属性特性 enumerable 定义了对象的属性是否可以在 for...in 循环和 Object.keys() 中被枚举。\n\n\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { value : 1, enumerable:true });\nObject.defineProperty(o, \"b\", { value : 2, enumerable:false });\nObject.defineProperty(o, \"c\", { value : 3 }); // enumerable defaults to false\no.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true\n\nfor (var i in o) {    \n  console.log(i);  \n}\n// 打印 'a' 和 'd' (in undefined order)\n\nObject.keys(o); // [\"a\", \"d\"]\n\no.propertyIsEnumerable('a'); // true\no.propertyIsEnumerable('b'); // false\no.propertyIsEnumerable('c'); // false\n```\n\n##### Configurable 特性\n\nconfigurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改\n```\nvar o = {};\nObject.defineProperty(o, \"a\", { get : function(){return 1;}, \n                                configurable : false } );\n\n// throws a TypeError\nObject.defineProperty(o, \"a\", {configurable : true}); \n// throws a TypeError\nObject.defineProperty(o, \"a\", {enumerable : true}); \n// throws a TypeError (set was undefined previously) \nObject.defineProperty(o, \"a\", {set : function(){}}); \n// throws a TypeError (even though the new get does exactly the same thing) \nObject.defineProperty(o, \"a\", {get : function(){return 1;}});\n// throws a TypeError\nObject.defineProperty(o, \"a\", {value : 12});\n\nconsole.log(o.a); // logs 1\ndelete o.a; // Nothing happens\nconsole.log(o.a); // logs 1\n```\n#### 添加多个属性和默认值\n\n考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的\n```\nvar o = {};\n\no.a = 1;\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : true,\n  configurable : true,\n  enumerable : true\n});\n\n\n// 另一方面，\nObject.defineProperty(o, \"a\", { value : 1 });\n// 等同于 :\nObject.defineProperty(o, \"a\", {\n  value : 1,\n  writable : false,\n  configurable : false,\n  enumerable : false\n});\n```\n### Object.defineProperties方式\n\n```\n// 设置属性\nObject.defineProperties( newObject, {\n\n  \"someKey\": { \n    value: \"Hello World\", \n    writable: true \n  },\n\n  \"anotherKey\": { \n    value: \"Foo bar\", \n    writable: false \n  } \n\n});\n\n```\n","slug":"JavaScript-Design-Pattern","published":1,"updated":"2017-03-16T14:12:37.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel2b000mqkyf9bgy9zlv","content":"<p>在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的<a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\" target=\"_blank\" rel=\"external\">学习javascript设计模式</a>，本文的所有demo地址见本人的github：<a href=\"https://github.com/sunshine940326/js-object-demo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/js-object-demo</a><br><a id=\"more\"></a></p>\n<p>javascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）</p>\n<p>#定义函数</p>\n<h1 id=\"构造器模式\"><a href=\"#构造器模式\" class=\"headerlink\" title=\"构造器模式\"></a>构造器模式</h1><p>js不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。</p>\n<p>在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。</p>\n<p>对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><p>在js中创建对象有三种基本方式：<br>下面的每一种方式都会创建一个新对象</p>\n<ol>\n<li>对象直接量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var empty = &#123;&#125;;</div><div class=\"line\">    console.log(empty);</div><div class=\"line\">    var point = &#123;</div><div class=\"line\">        x:0,</div><div class=\"line\">        y:1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(point.x,+point.y)</div><div class=\"line\">    var point2 = &#123;</div><div class=\"line\">        x:point.x,</div><div class=\"line\">        y:point.y+1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&quot;point2.x&quot; + &quot;:&quot;+ point2.x + &quot;,&quot;+ &quot;point2.y&quot; +&quot;:&quot;+ point2.y)</div><div class=\"line\"></div><div class=\"line\">    var book = &#123;</div><div class=\"line\">        &quot;main_title&quot;:&quot;javascript&quot;,</div><div class=\"line\">        &quot;sub_title&quot; : &quot;The Definitive Guide&quot;,</div><div class=\"line\">        &quot;for&quot;:&quot;all&quot;,</div><div class=\"line\">        &quot;author&quot;:&#123;</div><div class=\"line\">            &quot;firstName&quot;:&quot;cherry&quot;,</div><div class=\"line\">            &quot;lastName&quot;:&quot;Li&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(book.author.firstName,book.author.lastName)</div><div class=\"line\">    console.log(book.main_title)</div><div class=\"line\">    console.log(book.sub_title)</div><div class=\"line\">    console.log(book.for)</div></pre></td></tr></table></figure>\n<ol>\n<li>Object.create<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = Object.create(null)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法</p>\n<blockquote>\n<p>Object.create(proto, [ propertiesObject ])<br>参数</p>\n</blockquote>\n<ul>\n<li>proto<br>一个对象，作为新创建对象的原型。或者为 null。</li>\n<li>propertiesObject<br>可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var myCar = &#123;</div><div class=\"line\">    name:&quot;Fort&quot;,</div><div class=\"line\">    drive:function () &#123;</div><div class=\"line\">        console.log(&quot;I&apos;m driving!&quot;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    panic:function () &#123;</div><div class=\"line\">        console.log(&quot;wait&quot;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var youCar = Object.create(myCar);</div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log(youCar.name)</div><div class=\"line\"></div><div class=\"line\">var vehicle = &#123;</div><div class=\"line\">    getModel:function () &#123;</div><div class=\"line\">        console.log(&quot;The model of this vehicle is..&quot; +this.model)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = Object.create(vehicle,&#123;</div><div class=\"line\">    &quot;id&quot;:&#123;</div><div class=\"line\">        value:&apos;car1&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;model&quot;:&#123;</div><div class=\"line\">        value:&apos;Ford&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>构造函数方式（new）<br>通过new创建对象，new后跟一个函数调用（构造函数）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = new Object();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>其实这三种方式都可以相互转化</p>\n<p>通过字面量方式创建的空对象相当于<code>Object.create(Object.prototype)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">o = Object.create(Object.prototype)</div></pre></td></tr></table></figure></p>\n<p>下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Constructor() &#123;&#125;;</div><div class=\"line\">o = new Constructor();</div><div class=\"line\">o = Object.create(Constructor.prototype)</div></pre></td></tr></table></figure></p>\n<h2 id=\"给对象设置属性和获取属性值\"><a href=\"#给对象设置属性和获取属性值\" class=\"headerlink\" title=\"给对象设置属性和获取属性值\"></a>给对象设置属性和获取属性值</h2><h3 id=\"使用-的方式\"><a href=\"#使用-的方式\" class=\"headerlink\" title=\"使用.的方式\"></a>使用.的方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject.sayHello = &quot;Hello&quot;;</div><div class=\"line\">console.log(newObject.sayHello)</div></pre></td></tr></table></figure>\n<h3 id=\"使用-方式\"><a href=\"#使用-方式\" class=\"headerlink\" title=\"使用[]方式\"></a>使用[]方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject[&apos;sayHello&apos;] = &apos;Hello&apos;;</div><div class=\"line\">console.log(newObject[&apos;sayHello&apos;]);</div></pre></td></tr></table></figure>\n<p>这两种设置属性的区别</p>\n<ul>\n<li>使用保留字作为属性名的时候，必须用方括号</li>\n<li>. 不能修改，因为属性名是标识符</li>\n<li>[]为字符串，可以修改和创建</li>\n</ul>\n<h3 id=\"Object-defineProperty方式\"><a href=\"#Object-defineProperty方式\" class=\"headerlink\" title=\"Object.defineProperty方式\"></a>Object.defineProperty方式</h3><blockquote>\n<p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<p>Object.defineProperty(obj, prop, descriptor)</p>\n<p>obj<br>需要定义属性的对象。<br>prop<br>需定义或修改的属性的名字。<br>descriptor<br>将被定义或修改的属性的描述符。</p>\n</blockquote>\n<h4 id=\"创建属性\"><a href=\"#创建属性\" class=\"headerlink\" title=\"创建属性\"></a>创建属性</h4><p>如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。</p>\n<p>通过<code>.</code> <code>[]</code>设置的属性，可以使用<code>delete</code>删除,通过<code>Object.defineProperty()</code>设置的属性不能被delete删除，使用  <code>Object.defineProperty()</code> 增加的属性值是不可改变的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除对象的属性</div><div class=\"line\">    //通过. []设置的属性，可以使用delete删除</div><div class=\"line\">    function fun() &#123;</div><div class=\"line\">        this.name = &apos;name&apos;;</div><div class=\"line\">        this[&apos;age&apos;] = 12;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var obj = new fun();</div><div class=\"line\">    console.log(obj.name);   //name</div><div class=\"line\">    console.log(obj.age)</div><div class=\"line\">    delete obj.name;</div><div class=\"line\">    delete obj.age;</div><div class=\"line\">    console.log(obj.name);    //undefined</div><div class=\"line\">    console.log(obj.age);</div><div class=\"line\"></div><div class=\"line\">    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。</div><div class=\"line\">    var o = &#123;&#125; //创建一个空对象</div><div class=\"line\">    Object.defineProperty(o,&apos;a&apos;,&#123;    //给o设置一个属性a，值为37</div><div class=\"line\">        value:37,</div><div class=\"line\">        writable:true,</div><div class=\"line\">        configurable:true</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    var bValue ;</div><div class=\"line\">    Object.defineProperty(o,&apos;b&apos;,&#123;</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return bValue</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set:function (newValue) &#123;</div><div class=\"line\">            bValue = newValue;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable:true,</div><div class=\"line\">        configurable:true,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    o.b = 38;</div><div class=\"line\"></div><div class=\"line\">    //数据描述符和存取描述符不能混合使用</div><div class=\"line\">    Object.defineProperty(o,&quot;conflict&quot;,&#123;</div><div class=\"line\">        value:11111,</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return 11111</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改属性\"><a href=\"#修改属性\" class=\"headerlink\" title=\"修改属性\"></a>修改属性</h4><p>如果属性已经存在，<code>Object.defineProperty()</code>将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。</p>\n<h5 id=\"Writable-属性\"><a href=\"#Writable-属性\" class=\"headerlink\" title=\"Writable 属性\"></a>Writable 属性</h5><p>当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;; // 创建一个新对象</div><div class=\"line\"></div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 37,</div><div class=\"line\">                                writable : false &#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // 打印 37</div><div class=\"line\">o.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）</div><div class=\"line\">console.log(o.a); // 打印 37， 赋值不起作用。</div></pre></td></tr></table></figure>\n<h5 id=\"Enumerable-特性\"><a href=\"#Enumerable-特性\" class=\"headerlink\" title=\"Enumerable 特性\"></a>Enumerable 特性</h5><p>属性特性 enumerable 定义了对象的属性是否可以在 for…in 循环和 Object.keys() 中被枚举。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1, enumerable:true &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;b&quot;, &#123; value : 2, enumerable:false &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;c&quot;, &#123; value : 3 &#125;); // enumerable defaults to false</div><div class=\"line\">o.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true</div><div class=\"line\"></div><div class=\"line\">for (var i in o) &#123;    </div><div class=\"line\">  console.log(i);  </div><div class=\"line\">&#125;</div><div class=\"line\">// 打印 &apos;a&apos; 和 &apos;d&apos; (in undefined order)</div><div class=\"line\"></div><div class=\"line\">Object.keys(o); // [&quot;a&quot;, &quot;d&quot;]</div><div class=\"line\"></div><div class=\"line\">o.propertyIsEnumerable(&apos;a&apos;); // true</div><div class=\"line\">o.propertyIsEnumerable(&apos;b&apos;); // false</div><div class=\"line\">o.propertyIsEnumerable(&apos;c&apos;); // false</div></pre></td></tr></table></figure>\n<h5 id=\"Configurable-特性\"><a href=\"#Configurable-特性\" class=\"headerlink\" title=\"Configurable 特性\"></a>Configurable 特性</h5><p>configurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; get : function()&#123;return 1;&#125;, </div><div class=\"line\">                                configurable : false &#125; );</div><div class=\"line\"></div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;configurable : true&#125;); </div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;enumerable : true&#125;); </div><div class=\"line\">// throws a TypeError (set was undefined previously) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;set : function()&#123;&#125;&#125;); </div><div class=\"line\">// throws a TypeError (even though the new get does exactly the same thing) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;get : function()&#123;return 1;&#125;&#125;);</div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;value : 12&#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // logs 1</div><div class=\"line\">delete o.a; // Nothing happens</div><div class=\"line\">console.log(o.a); // logs 1</div></pre></td></tr></table></figure></p>\n<h4 id=\"添加多个属性和默认值\"><a href=\"#添加多个属性和默认值\" class=\"headerlink\" title=\"添加多个属性和默认值\"></a>添加多个属性和默认值</h4><p>考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">o.a = 1;</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : true,</div><div class=\"line\">  configurable : true,</div><div class=\"line\">  enumerable : true</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 另一方面，</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1 &#125;);</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : false,</div><div class=\"line\">  configurable : false,</div><div class=\"line\">  enumerable : false</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Object-defineProperties方式\"><a href=\"#Object-defineProperties方式\" class=\"headerlink\" title=\"Object.defineProperties方式\"></a>Object.defineProperties方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置属性</div><div class=\"line\">Object.defineProperties( newObject, &#123;</div><div class=\"line\"></div><div class=\"line\">  &quot;someKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Hello World&quot;, </div><div class=\"line\">    writable: true </div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  &quot;anotherKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Foo bar&quot;, </div><div class=\"line\">    writable: false </div><div class=\"line\">  &#125; </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n","excerpt":"<p>在之前学习javascript模块发开发的过程中，看到了一篇好文，是极客学院的<a href=\"http://wiki.jikexueyuan.com/project/javascript-design-patterns/\">学习javascript设计模式</a>，本文的所有demo地址见本人的github：<a href=\"https://github.com/sunshine940326/js-object-demo\">https://github.com/sunshine940326/js-object-demo</a><br>","more":"</p>\n<p>javascript的设计模式，首先，我们需要知道什么是函数（基础知识，大神跳过）</p>\n<p>#定义函数</p>\n<h1 id=\"构造器模式\"><a href=\"#构造器模式\" class=\"headerlink\" title=\"构造器模式\"></a>构造器模式</h1><p>js不支持类的概念，但它支持与对象一起使用的特殊Constructor（构造器）函数。通过在构造器前面加new关键字，告诉js想树勇构造器一样实例化一个新的对象，并且对象成员由该函数定义。在构造器内，关键字this引用新创建的对象。</p>\n<p>在面向对象编程中，构造器是一个当新建对象的内存被分配后，用来初始化该对象的一个特殊函数。</p>\n<p>对象构造器是被用来创建特殊类型的对象的，首先它要准备使用的对象，其次在对象初次被创建时，通过接收参数，构造器用来对成员的属性和方法进行赋值。</p>\n<h2 id=\"创建对象\"><a href=\"#创建对象\" class=\"headerlink\" title=\"创建对象\"></a>创建对象</h2><p>在js中创建对象有三种基本方式：<br>下面的每一种方式都会创建一个新对象</p>\n<ol>\n<li>对象直接量</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\">var empty = &#123;&#125;;</div><div class=\"line\">    console.log(empty);</div><div class=\"line\">    var point = &#123;</div><div class=\"line\">        x:0,</div><div class=\"line\">        y:1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(point.x,+point.y)</div><div class=\"line\">    var point2 = &#123;</div><div class=\"line\">        x:point.x,</div><div class=\"line\">        y:point.y+1</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(&quot;point2.x&quot; + &quot;:&quot;+ point2.x + &quot;,&quot;+ &quot;point2.y&quot; +&quot;:&quot;+ point2.y)</div><div class=\"line\"></div><div class=\"line\">    var book = &#123;</div><div class=\"line\">        &quot;main_title&quot;:&quot;javascript&quot;,</div><div class=\"line\">        &quot;sub_title&quot; : &quot;The Definitive Guide&quot;,</div><div class=\"line\">        &quot;for&quot;:&quot;all&quot;,</div><div class=\"line\">        &quot;author&quot;:&#123;</div><div class=\"line\">            &quot;firstName&quot;:&quot;cherry&quot;,</div><div class=\"line\">            &quot;lastName&quot;:&quot;Li&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    console.log(book.author.firstName,book.author.lastName)</div><div class=\"line\">    console.log(book.main_title)</div><div class=\"line\">    console.log(book.sub_title)</div><div class=\"line\">    console.log(book.for)</div></pre></td></tr></table></figure>\n<ol>\n<li>Object.create<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = Object.create(null)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><code>Object.create()</code> 方法创建一个拥有指定原型和若干个指定属性的对象。<br>语法</p>\n<blockquote>\n<p>Object.create(proto, [ propertiesObject ])<br>参数</p>\n</blockquote>\n<ul>\n<li>proto<br>一个对象，作为新创建对象的原型。或者为 null。</li>\n<li>propertiesObject<br>可选。该参数对象是一组属性与值，该对象的属性名称将是新创建的对象的属性名称，值是属性描述符（这些属性描述符的结构与Object.defineProperties()的第二个参数一样）。注意：该参数对象不能是 undefined，另外只有该对象中自身拥有的可枚举的属性才有效，也就是说该对象的原型链上属性是无效的。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">var myCar = &#123;</div><div class=\"line\">    name:&quot;Fort&quot;,</div><div class=\"line\">    drive:function () &#123;</div><div class=\"line\">        console.log(&quot;I&apos;m driving!&quot;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    panic:function () &#123;</div><div class=\"line\">        console.log(&quot;wait&quot;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var youCar = Object.create(myCar);</div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log(youCar.name)</div><div class=\"line\"></div><div class=\"line\">var vehicle = &#123;</div><div class=\"line\">    getModel:function () &#123;</div><div class=\"line\">        console.log(&quot;The model of this vehicle is..&quot; +this.model)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = Object.create(vehicle,&#123;</div><div class=\"line\">    &quot;id&quot;:&#123;</div><div class=\"line\">        value:&apos;car1&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;,</div><div class=\"line\">    &quot;model&quot;:&#123;</div><div class=\"line\">        value:&apos;Ford&apos;,</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li>构造函数方式（new）<br>通过new创建对象，new后跟一个函数调用（构造函数）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">var newObject = new Object();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<p>其实这三种方式都可以相互转化</p>\n<p>通过字面量方式创建的空对象相当于<code>Object.create(Object.prototype)</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">o = Object.create(Object.prototype)</div></pre></td></tr></table></figure></p>\n<p>下面这两句是等价的，当然,如果在Constructor函数中有一些初始化代码,Object.create不能执行那些代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Constructor() &#123;&#125;;</div><div class=\"line\">o = new Constructor();</div><div class=\"line\">o = Object.create(Constructor.prototype)</div></pre></td></tr></table></figure></p>\n<h2 id=\"给对象设置属性和获取属性值\"><a href=\"#给对象设置属性和获取属性值\" class=\"headerlink\" title=\"给对象设置属性和获取属性值\"></a>给对象设置属性和获取属性值</h2><h3 id=\"使用-的方式\"><a href=\"#使用-的方式\" class=\"headerlink\" title=\"使用.的方式\"></a>使用.的方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject.sayHello = &quot;Hello&quot;;</div><div class=\"line\">console.log(newObject.sayHello)</div></pre></td></tr></table></figure>\n<h3 id=\"使用-方式\"><a href=\"#使用-方式\" class=\"headerlink\" title=\"使用[]方式\"></a>使用[]方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">newObject[&apos;sayHello&apos;] = &apos;Hello&apos;;</div><div class=\"line\">console.log(newObject[&apos;sayHello&apos;]);</div></pre></td></tr></table></figure>\n<p>这两种设置属性的区别</p>\n<ul>\n<li>使用保留字作为属性名的时候，必须用方括号</li>\n<li>. 不能修改，因为属性名是标识符</li>\n<li>[]为字符串，可以修改和创建</li>\n</ul>\n<h3 id=\"Object-defineProperty方式\"><a href=\"#Object-defineProperty方式\" class=\"headerlink\" title=\"Object.defineProperty方式\"></a>Object.defineProperty方式</h3><blockquote>\n<p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个已经存在的属性， 并返回这个对象。</p>\n<p>Object.defineProperty(obj, prop, descriptor)</p>\n<p>obj<br>需要定义属性的对象。<br>prop<br>需定义或修改的属性的名字。<br>descriptor<br>将被定义或修改的属性的描述符。</p>\n</blockquote>\n<h4 id=\"创建属性\"><a href=\"#创建属性\" class=\"headerlink\" title=\"创建属性\"></a>创建属性</h4><p>如果对象中不存在指定的属性，Object.defineProperty()就创建这个属性。当描述符中省略某些字段时，这些字段将使用他们的默认值。拥有布尔值的字段的默认值都是false。value，get和set字段的默认值都是undefined。定义属性时如果没有get/set/value/writable，那它被归类为数据描述符。</p>\n<p>通过<code>.</code> <code>[]</code>设置的属性，可以使用<code>delete</code>删除,通过<code>Object.defineProperty()</code>设置的属性不能被delete删除，使用  <code>Object.defineProperty()</code> 增加的属性值是不可改变的。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\">//删除对象的属性</div><div class=\"line\">    //通过. []设置的属性，可以使用delete删除</div><div class=\"line\">    function fun() &#123;</div><div class=\"line\">        this.name = &apos;name&apos;;</div><div class=\"line\">        this[&apos;age&apos;] = 12;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var obj = new fun();</div><div class=\"line\">    console.log(obj.name);   //name</div><div class=\"line\">    console.log(obj.age)</div><div class=\"line\">    delete obj.name;</div><div class=\"line\">    delete obj.age;</div><div class=\"line\">    console.log(obj.name);    //undefined</div><div class=\"line\">    console.log(obj.age);</div><div class=\"line\"></div><div class=\"line\">    //Object.defineProperty()设置的属性不能被delete删除，使用  Object.defineProperty() 增加的属性值是不可改变的。</div><div class=\"line\">    var o = &#123;&#125; //创建一个空对象</div><div class=\"line\">    Object.defineProperty(o,&apos;a&apos;,&#123;    //给o设置一个属性a，值为37</div><div class=\"line\">        value:37,</div><div class=\"line\">        writable:true,</div><div class=\"line\">        configurable:true</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    var bValue ;</div><div class=\"line\">    Object.defineProperty(o,&apos;b&apos;,&#123;</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return bValue</div><div class=\"line\">        &#125;,</div><div class=\"line\">        set:function (newValue) &#123;</div><div class=\"line\">            bValue = newValue;</div><div class=\"line\">        &#125;,</div><div class=\"line\">        enumerable:true,</div><div class=\"line\">        configurable:true,</div><div class=\"line\">    &#125;)</div><div class=\"line\">    o.b = 38;</div><div class=\"line\"></div><div class=\"line\">    //数据描述符和存取描述符不能混合使用</div><div class=\"line\">    Object.defineProperty(o,&quot;conflict&quot;,&#123;</div><div class=\"line\">        value:11111,</div><div class=\"line\">        get:function () &#123;</div><div class=\"line\">            return 11111</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)// throws a TypeError: value appears only in data descriptors, get appears only in accessor descriptors</div></pre></td></tr></table></figure></p>\n<h4 id=\"修改属性\"><a href=\"#修改属性\" class=\"headerlink\" title=\"修改属性\"></a>修改属性</h4><p>如果属性已经存在，<code>Object.defineProperty()</code>将尝试根据描述符中的值以及对象当前的配置来修改这个属性。如果描述符的 configurable 特性为false（即该特性为non-configurable），那么除了 writable 外，其他特性都不能被修改，并且数据和存取描述符也不能相互切换。</p>\n<h5 id=\"Writable-属性\"><a href=\"#Writable-属性\" class=\"headerlink\" title=\"Writable 属性\"></a>Writable 属性</h5><p>当属性特性（property attribute） writable 设置为false时，表示 non-writable，属性不能被修改。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;; // 创建一个新对象</div><div class=\"line\"></div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 37,</div><div class=\"line\">                                writable : false &#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // 打印 37</div><div class=\"line\">o.a = 25; // 没有错误抛出（在严格模式下会抛出，即使之前已经有相同的值）</div><div class=\"line\">console.log(o.a); // 打印 37， 赋值不起作用。</div></pre></td></tr></table></figure>\n<h5 id=\"Enumerable-特性\"><a href=\"#Enumerable-特性\" class=\"headerlink\" title=\"Enumerable 特性\"></a>Enumerable 特性</h5><p>属性特性 enumerable 定义了对象的属性是否可以在 for…in 循环和 Object.keys() 中被枚举。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1, enumerable:true &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;b&quot;, &#123; value : 2, enumerable:false &#125;);</div><div class=\"line\">Object.defineProperty(o, &quot;c&quot;, &#123; value : 3 &#125;); // enumerable defaults to false</div><div class=\"line\">o.d = 4; // 如果使用直接赋值的方式创建对象的属性，则这个属性的enumerable为true</div><div class=\"line\"></div><div class=\"line\">for (var i in o) &#123;    </div><div class=\"line\">  console.log(i);  </div><div class=\"line\">&#125;</div><div class=\"line\">// 打印 &apos;a&apos; 和 &apos;d&apos; (in undefined order)</div><div class=\"line\"></div><div class=\"line\">Object.keys(o); // [&quot;a&quot;, &quot;d&quot;]</div><div class=\"line\"></div><div class=\"line\">o.propertyIsEnumerable(&apos;a&apos;); // true</div><div class=\"line\">o.propertyIsEnumerable(&apos;b&apos;); // false</div><div class=\"line\">o.propertyIsEnumerable(&apos;c&apos;); // false</div></pre></td></tr></table></figure>\n<h5 id=\"Configurable-特性\"><a href=\"#Configurable-特性\" class=\"headerlink\" title=\"Configurable 特性\"></a>Configurable 特性</h5><p>configurable 特性表示对象的属性是否可以被删除，以及除 writable 特性外的其他特性是否可以被修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; get : function()&#123;return 1;&#125;, </div><div class=\"line\">                                configurable : false &#125; );</div><div class=\"line\"></div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;configurable : true&#125;); </div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;enumerable : true&#125;); </div><div class=\"line\">// throws a TypeError (set was undefined previously) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;set : function()&#123;&#125;&#125;); </div><div class=\"line\">// throws a TypeError (even though the new get does exactly the same thing) </div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;get : function()&#123;return 1;&#125;&#125;);</div><div class=\"line\">// throws a TypeError</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;value : 12&#125;);</div><div class=\"line\"></div><div class=\"line\">console.log(o.a); // logs 1</div><div class=\"line\">delete o.a; // Nothing happens</div><div class=\"line\">console.log(o.a); // logs 1</div></pre></td></tr></table></figure></p>\n<h4 id=\"添加多个属性和默认值\"><a href=\"#添加多个属性和默认值\" class=\"headerlink\" title=\"添加多个属性和默认值\"></a>添加多个属性和默认值</h4><p>考虑特性被赋予的默认特性值非常重要，通常，使用点运算符和Object.defineProperty()为对象的属性赋值时，数据描述符中的属性默认值是不同的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var o = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">o.a = 1;</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : true,</div><div class=\"line\">  configurable : true,</div><div class=\"line\">  enumerable : true</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">// 另一方面，</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123; value : 1 &#125;);</div><div class=\"line\">// 等同于 :</div><div class=\"line\">Object.defineProperty(o, &quot;a&quot;, &#123;</div><div class=\"line\">  value : 1,</div><div class=\"line\">  writable : false,</div><div class=\"line\">  configurable : false,</div><div class=\"line\">  enumerable : false</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<h3 id=\"Object-defineProperties方式\"><a href=\"#Object-defineProperties方式\" class=\"headerlink\" title=\"Object.defineProperties方式\"></a>Object.defineProperties方式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 设置属性</div><div class=\"line\">Object.defineProperties( newObject, &#123;</div><div class=\"line\"></div><div class=\"line\">  &quot;someKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Hello World&quot;, </div><div class=\"line\">    writable: true </div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  &quot;anotherKey&quot;: &#123; </div><div class=\"line\">    value: &quot;Foo bar&quot;, </div><div class=\"line\">    writable: false </div><div class=\"line\">  &#125; </div><div class=\"line\"></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"hexo附件插入音乐、分享、评论、标签页、搜索","date":"2016-09-16T17:01:48.000Z","_content":"\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","source":"_posts/Hexo-insert-music-share-comment-tab-search.md","raw":"---\ntitle: hexo附件插入音乐、分享、评论、标签页、搜索\ndate: 2016-09-17 01:01:48\ntags: hexo \ncategories: git\n\n---\n\nhexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页\n<!--more-->\n\n博客中插入图片\n----------\n基本分为两种办法\n1. 放在本地文件\n首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。\n在 hexo 目录，执行`$ npm install https://github.com/CodeFalling/hexo-asset-image --save`\n\n之后再使用 hexo new 'new' 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。\n使用的时候\n`![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)`\n\n2. 放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。\n3. 也可以放在服务器上，在图片链接输入绝对路径就可以\n4. 我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径\n\n\n插入音乐\n-------\n可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器\n\n```\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=298 height=52 src=\"http://music.163.com/outchain/player?type=2&id=32192436&auto=1&height=32\"></iframe>\n\n//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐\n```\n\n\n集成多说评论，分享\n---------\n\n申请多说帐号,打开页面点击我要安装注册帐号\n\n在themes/next目录下打开 _config.yml，设置\n\n```\n  duoshuo_shortname:  nanshanyi //上面多说域名中填的内容\n  需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信\n```\n\n然后打开themes\\landscape\\layout_partial\\article.ejs文件\n把以下代码\n```\n  <% if (!index && post.comments && config.disqus_shortname){ %>\n  <section id=\"comments\">\n    <div id=\"disqus_thread\">\n      <noscript>Please enable JavaScript to view the <a href=\"//disqus.com/?ref_noscript\">comments powered by Disqus.</a></noscript>\n    </div>\n  </section>\n  <% } %>\n```\n替换为\n```\n<% if (!index && post.comments && config.duoshuo_shortname){ %>\n  <section id=\"comments\">\n    <!-- 多说评论框 start -->\n    <div class=\"ds-thread\" data-thread-key=\"<%= post.layout %>-<%= post.slug %>\" data-title=\"<%= post.title %>\" data-url=\"<%= page.permalink %>\"></div>\n    <!-- 多说评论框 end -->\n    <!-- 多说公共JS代码 start (一个网页只需插入一次) -->\n    <script type=\"text/javascript\">\n    var duoshuoQuery = {short_name:'<%= config.duoshuo_shortname %>'};\n      (function() {\n        var ds = document.createElement('script');\n        ds.type = 'text/javascript';ds.async = true;\n        ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.js';\n        ds.charset = 'UTF-8';\n        (document.getElementsByTagName('head')[0]\n         || document.getElementsByTagName('body')[0]).appendChild(ds);\n      })();\n      </script>\n    <!-- 多说公共JS代码 end -->\n  </section>\n  <% } %>\n```\n然后你hexo s ,打开http://localhost:4000/ 打开文章看一下，评论和分享已经静静的躺在那了\n\n\n添加标签页\n------\n创建标签页或者创建分类页面方法具体请查看官方文档：[hexo-主题引用](http://theme-next.iissnan.com/theme-settings.html)\n\n概括一下分为三步：\n1. 新建页面\n2. 在菜单中将其显示\n3. 给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白\n**分类页面同理**\n\n在username.github.io文件目录下执行\n```\n$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹\n```\n修改username.github.io/themes/next/_config.yml\n```\nmenu:\n  home: /      //主页\n  #categories: /categories //分类\n  archives: /archives   //归档\n  tags: /tags   //标签（添加此行即可）\n  about: /about   //关于\n  #commonweal: /404.html\n```\n首页菜单就会有便签项，点击即可进入标签页。\n\n添加搜索功能\n-------\nnext支持Swiftype 、微搜索和Local Search\n1. Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址\n然后选择\n\n![Swiftype注册页面](http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n选择 install Search\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n\n\n途中的即为swiftype_key\n修改nanshanyi.github.io/themes/next/_config.yml中的\n```\nswiftype_key:上面红圈中的内容\n```\n\n点击 resume Configuration 选择 search field edit\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\nsave\n发布即可看到效果\n\n![swiftype](http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2)\n2. 添加本地搜索\n安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：\n```\n$ npm install hexo-generator-search --save\n```\n在nanshanyi.github.io/themes/next/_config.yml添加\n```\nsearch:\n      path: search.xml\n      field: post\n```\n\n发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。\n\n文／_南山忆（简书作者）\n原文链接：http://www.jianshu.com/p/a52b68794a6b\n著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。","slug":"Hexo-insert-music-share-comment-tab-search","published":1,"updated":"2017-02-26T12:08:39.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel2b000pqkyf08258qfx","content":"<p>hexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页<br><a id=\"more\"></a></p>\n<h2 id=\"博客中插入图片\"><a href=\"#博客中插入图片\" class=\"headerlink\" title=\"博客中插入图片\"></a>博客中插入图片</h2><p>基本分为两种办法</p>\n<ol>\n<li>放在本地文件<br>首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行<code>$ npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>\n</ol>\n<p>之后再使用 hexo new ‘new’ 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候<br><code>![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)</code></p>\n<ol>\n<li>放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</li>\n<li>也可以放在服务器上，在图片链接输入绝对路径就可以</li>\n<li>我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径</li>\n</ol>\n<h2 id=\"插入音乐\"><a href=\"#插入音乐\" class=\"headerlink\" title=\"插入音乐\"></a>插入音乐</h2><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\"></div><div class=\"line\">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</div></pre></td></tr></table></figure>\n<h2 id=\"集成多说评论，分享\"><a href=\"#集成多说评论，分享\" class=\"headerlink\" title=\"集成多说评论，分享\"></a>集成多说评论，分享</h2><p>申请多说帐号,打开页面点击我要安装注册帐号</p>\n<p>在themes/next目录下打开 _config.yml，设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname:  nanshanyi //上面多说域名中填的内容</div><div class=\"line\">需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信</div></pre></td></tr></table></figure>\n<p>然后打开themes\\landscape\\layout_partial\\article.ejs文件<br>把以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</div><div class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</div><div class=\"line\">  &lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 start --&gt;</div><div class=\"line\">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 end --&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;;</div><div class=\"line\">      (function() &#123;</div><div class=\"line\">        var ds = document.createElement(&apos;script&apos;);</div><div class=\"line\">        ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class=\"line\">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</div><div class=\"line\">        ds.charset = &apos;UTF-8&apos;;</div><div class=\"line\">        (document.getElementsByTagName(&apos;head&apos;)[0]</div><div class=\"line\">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class=\"line\">      &#125;)();</div><div class=\"line\">      &lt;/script&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 end --&gt;</div><div class=\"line\">  &lt;/section&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后你hexo s ,打开<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a> 打开文章看一下，评论和分享已经静静的躺在那了</p>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><p>创建标签页或者创建分类页面方法具体请查看官方文档：<a href=\"http://theme-next.iissnan.com/theme-settings.html\" target=\"_blank\" rel=\"external\">hexo-主题引用</a></p>\n<p>概括一下分为三步：</p>\n<ol>\n<li>新建页面</li>\n<li>在菜单中将其显示</li>\n<li>给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白<br><strong>分类页面同理</strong></li>\n</ol>\n<p>在username.github.io文件目录下执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹</div></pre></td></tr></table></figure></p>\n<p>修改username.github.io/themes/next/_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: /      //主页</div><div class=\"line\">  #categories: /categories //分类</div><div class=\"line\">  archives: /archives   //归档</div><div class=\"line\">  tags: /tags   //标签（添加此行即可）</div><div class=\"line\">  about: /about   //关于</div><div class=\"line\">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>\n<p>首页菜单就会有便签项，点击即可进入标签页。</p>\n<h2 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h2><p>next支持Swiftype 、微搜索和Local Search</p>\n<ol>\n<li>Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址<br>然后选择</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"Swiftype注册页面\"></p>\n<p>选择 install Search</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<p>途中的即为swiftype_key<br>修改nanshanyi.github.io/themes/next/_config.yml中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swiftype_key:上面红圈中的内容</div></pre></td></tr></table></figure></p>\n<p>点击 resume Configuration 选择 search field edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"swiftype\"></p>\n<p>save<br>发布即可看到效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<ol>\n<li>添加本地搜索<br>安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在nanshanyi.github.io/themes/next/_config.yml添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\">      path: search.xml</div><div class=\"line\">      field: post</div></pre></td></tr></table></figure></p>\n<p>发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。</p>\n<p>文／_南山忆（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/a52b68794a6b\" target=\"_blank\" rel=\"external\">http://www.jianshu.com/p/a52b68794a6b</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>\n","excerpt":"<p>hexo高阶教程，教你怎样在你的博客中插入音乐、分享、评论和标签页<br>","more":"</p>\n<h2 id=\"博客中插入图片\"><a href=\"#博客中插入图片\" class=\"headerlink\" title=\"博客中插入图片\"></a>博客中插入图片</h2><p>基本分为两种办法</p>\n<ol>\n<li>放在本地文件<br>首先在username.github.io目录下确认 _config.yml 中有 post_asset_folder:true 。<br>在 hexo 目录，执行<code>$ npm install https://github.com/CodeFalling/hexo-asset-image --save</code></li>\n</ol>\n<p>之后再使用 hexo new ‘new’ 创建新博客的时候，会在source/_posts里面创建.md文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候<br><code>![“图片描述”（可以不写）](/文件夹名/你的图片名字.JPG)\n例如：\n！[ ] (new/text.jpg)</code></p>\n<ol>\n<li>放在七牛上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</li>\n<li>也可以放在服务器上，在图片链接输入绝对路径就可以</li>\n<li>我通常用的方法，因为在webstorm中写md格式的文章不能同时预览，所以我一般都是在csdn写博客的界面写好，在copy到webstorm上，这样就可以直接在其中插入图片，其实相当于你在引用你在csdn中发表文章里面图片的绝对路径</li>\n</ol>\n<h2 id=\"插入音乐\"><a href=\"#插入音乐\" class=\"headerlink\" title=\"插入音乐\"></a>插入音乐</h2><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=298 height=52 src=&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;&gt;&lt;/iframe&gt;</div><div class=\"line\"></div><div class=\"line\">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</div></pre></td></tr></table></figure>\n<h2 id=\"集成多说评论，分享\"><a href=\"#集成多说评论，分享\" class=\"headerlink\" title=\"集成多说评论，分享\"></a>集成多说评论，分享</h2><p>申请多说帐号,打开页面点击我要安装注册帐号</p>\n<p>在themes/next目录下打开 _config.yml，设置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">duoshuo_shortname:  nanshanyi //上面多说域名中填的内容</div><div class=\"line\">需要分享的打开duoshuo_share: true 即可，支持分享到微博、QQ空间、微信</div></pre></td></tr></table></figure>\n<p>然后打开themes\\landscape\\layout_partial\\article.ejs文件<br>把以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.disqus_shortname)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">  &lt;div id=&quot;disqus_thread&quot;&gt;</div><div class=\"line\">    &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;//disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>替换为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.duoshuo_shortname)&#123; %&gt;</div><div class=\"line\">  &lt;section id=&quot;comments&quot;&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 start --&gt;</div><div class=\"line\">    &lt;div class=&quot;ds-thread&quot; data-thread-key=&quot;&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;&quot; data-title=&quot;&lt;%= post.title %&gt;&quot; data-url=&quot;&lt;%= page.permalink %&gt;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">    &lt;!-- 多说评论框 end --&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</div><div class=\"line\">    &lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">    var duoshuoQuery = &#123;short_name:&apos;&lt;%= config.duoshuo_shortname %&gt;&apos;&#125;;</div><div class=\"line\">      (function() &#123;</div><div class=\"line\">        var ds = document.createElement(&apos;script&apos;);</div><div class=\"line\">        ds.type = &apos;text/javascript&apos;;ds.async = true;</div><div class=\"line\">        ds.src = (document.location.protocol == &apos;https:&apos; ? &apos;https:&apos; : &apos;http:&apos;) + &apos;//static.duoshuo.com/embed.js&apos;;</div><div class=\"line\">        ds.charset = &apos;UTF-8&apos;;</div><div class=\"line\">        (document.getElementsByTagName(&apos;head&apos;)[0]</div><div class=\"line\">         || document.getElementsByTagName(&apos;body&apos;)[0]).appendChild(ds);</div><div class=\"line\">      &#125;)();</div><div class=\"line\">      &lt;/script&gt;</div><div class=\"line\">    &lt;!-- 多说公共JS代码 end --&gt;</div><div class=\"line\">  &lt;/section&gt;</div><div class=\"line\">  &lt;% &#125; %&gt;</div></pre></td></tr></table></figure></p>\n<p>然后你hexo s ,打开<a href=\"http://localhost:4000/\">http://localhost:4000/</a> 打开文章看一下，评论和分享已经静静的躺在那了</p>\n<h2 id=\"添加标签页\"><a href=\"#添加标签页\" class=\"headerlink\" title=\"添加标签页\"></a>添加标签页</h2><p>创建标签页或者创建分类页面方法具体请查看官方文档：<a href=\"http://theme-next.iissnan.com/theme-settings.html\">hexo-主题引用</a></p>\n<p>概括一下分为三步：</p>\n<ol>\n<li>新建页面</li>\n<li>在菜单中将其显示</li>\n<li>给文章加标签，如果所有的文章都没有标签，那么标签页将显示空白<br><strong>分类页面同理</strong></li>\n</ol>\n<p>在username.github.io文件目录下执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new page tags //会在username.github.io/source下创建tags文件夹内部是一个index.md和index文件夹</div></pre></td></tr></table></figure></p>\n<p>修改username.github.io/themes/next/_config.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu:</div><div class=\"line\">  home: /      //主页</div><div class=\"line\">  #categories: /categories //分类</div><div class=\"line\">  archives: /archives   //归档</div><div class=\"line\">  tags: /tags   //标签（添加此行即可）</div><div class=\"line\">  about: /about   //关于</div><div class=\"line\">  #commonweal: /404.html</div></pre></td></tr></table></figure></p>\n<p>首页菜单就会有便签项，点击即可进入标签页。</p>\n<h2 id=\"添加搜索功能\"><a href=\"#添加搜索功能\" class=\"headerlink\" title=\"添加搜索功能\"></a>添加搜索功能</h2><p>next支持Swiftype 、微搜索和Local Search</p>\n<ol>\n<li>Swiftype （收费的没有免费版，进可以使用15天）是为网站和移动应用提供内部搜索的工具，点击进入Swiftype注册页面 ，注册之后需要填写自己的博客的网址<br>然后选择</li>\n</ol>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-7aed60a7543e2571.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"Swiftype注册页面\"></p>\n<p>选择 install Search</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-8cfb4600366ab1c0.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<p>途中的即为swiftype_key<br>修改nanshanyi.github.io/themes/next/_config.yml中的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">swiftype_key:上面红圈中的内容</div></pre></td></tr></table></figure></p>\n<p>点击 resume Configuration 选择 search field edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-6673e77e95e084da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"swiftype\"></p>\n<p>save<br>发布即可看到效果</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/966908-fd0c0885439ef44d.png?imageMogr2/auto-orient/strip%7CimageView2/2\" alt=\"swiftype\"></p>\n<ol>\n<li>添加本地搜索<br>安装 hexo-generator-search，在nanshanyi.github.io目录下执行以下命令：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在nanshanyi.github.io/themes/next/_config.yml添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">search:</div><div class=\"line\">      path: search.xml</div><div class=\"line\">      field: post</div></pre></td></tr></table></figure></p>\n<p>发布即可看到效果，和上面的 swiftType 效果差不多，就不再粘图片了。</p>\n<p>文／_南山忆（简书作者）<br>原文链接：<a href=\"http://www.jianshu.com/p/a52b68794a6b\">http://www.jianshu.com/p/a52b68794a6b</a><br>著作权归作者所有，转载请联系作者获得授权，并标注“简书作者”。</p>"},{"title":"javascript设计模式（二）：模块化模式","date":"2017-03-24T15:09:08.000Z","_content":"\n在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量\n<!--more-->\n# 模块化模式\n所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法\n\n通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量\n\n模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。\n\n这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数\n\n## 闭包实现模块模式基础版\n下面就是一个最简单的用闭包实现模块模式的栗子~\n```\nvar testModule = (function(){\n    var counter = 0;\n    \n    return{\n        incrementCounter:function(){\n            return counter++;\n        }\n        resetCounter:function(){\n            console.log(\"counter value prior to reset:\"+counter);\n            counter = 0;\n        }\n    }\n})();\n\n//use\n\ntestModule.incrementCounter();\n\ntestModule.resetCounter();\n```\n这个栗子中，在函数体内定义的变量`counter`就是一个“私有变量”，在函数外部是不能直接访问到的。在`return`中给我们提供了这个函数的两个`public`方法：`incrementCounter()`和`resetCounter()`。我们想要使用这个函数的功能就直接调用`testModule.incrementCounter();`就可以了\n\n## 包含命名空间、公有变量和私有变量\n下面是一个包含了命名空间、公有变量和私有变量的一个栗子~\n```\nvar myNamespace = (function(){\n    var myPrivateVar,myPrivateMethod\n\n    myPrivateVar = 0;\n    \n    myPrivateMethod = function(foo){\n        console.log(foo)\n    }\n    \n    return{\n        myPublicVar:\"foo\",\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            \n            myPrivateMethod(bar)\n        }\n    }\n})()\n```\n\n## 升级版使用模块模式实现购物车\n```\nvar basketModule = (function () {\n\n  // privates\n\n  var basket = [];\n\n  function doSomethingPrivate() {\n    //...\n  }\n\n  function doSomethingElsePrivate() {\n    //...\n  }\n\n  // Return an object exposed to the public\n  return {\n\n    // Add items to our basket\n    addItem: function( values ) {\n      basket.push(values);\n    },\n\n    // Get the count of items in the basket\n    getItemCount: function () {\n      return basket.length;\n    },\n\n    // Public alias to a  private function\n    doSomething: doSomethingPrivate,\n\n    // Get the total value of items in the basket\n    getTotal: function () {\n\n      var q = this.getItemCount(),\n          p = 0;\n\n      while (q--) {\n        p += basket[q].price;\n      }\n\n      return p;\n    }\n  };\n}());\n```\n在这个栗子中，这个模块完全自包含在`basketModule`这个模块中，其中的`basket`数组是私有的，在外部访问不到，我们需要访问`basketModule`中return的方法使用对应的功能，使用方法如下\n```\n// basketModule returns an object with a public API we can use\n\nbasketModule.addItem({\n  item: \"bread\",\n  price: 0.5\n});\n\nbasketModule.addItem({\n  item: \"butter\",\n  price: 0.3\n});\n\n// Outputs: 2\nconsole.log( basketModule.getItemCount() );\n\n// Outputs: 0.8\nconsole.log( basketModule.getTotal() );\n\n// However, the following will not work:\n\n// Outputs: undefined\n// This is because the basket itself is not exposed as a part of our\n// the public API\nconsole.log( basketModule.basket );\n\n// This also won't work as it only exists within the scope of our\n// basketModule closure, but not the returned public object\nconsole.log( basket );\n```\n\n","source":"_posts/JavaScript-Design-Pattern2modular-mode.md","raw":"---\ntitle: javascript设计模式（二）：模块化模式\ndate: 2017-03-24 23:09:08\ntags: [js,js设计模式] \ncategories: js\n---\n\n在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量\n<!--more-->\n# 模块化模式\n所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法\n\n通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量\n\n模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。\n\n这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数\n\n## 闭包实现模块模式基础版\n下面就是一个最简单的用闭包实现模块模式的栗子~\n```\nvar testModule = (function(){\n    var counter = 0;\n    \n    return{\n        incrementCounter:function(){\n            return counter++;\n        }\n        resetCounter:function(){\n            console.log(\"counter value prior to reset:\"+counter);\n            counter = 0;\n        }\n    }\n})();\n\n//use\n\ntestModule.incrementCounter();\n\ntestModule.resetCounter();\n```\n这个栗子中，在函数体内定义的变量`counter`就是一个“私有变量”，在函数外部是不能直接访问到的。在`return`中给我们提供了这个函数的两个`public`方法：`incrementCounter()`和`resetCounter()`。我们想要使用这个函数的功能就直接调用`testModule.incrementCounter();`就可以了\n\n## 包含命名空间、公有变量和私有变量\n下面是一个包含了命名空间、公有变量和私有变量的一个栗子~\n```\nvar myNamespace = (function(){\n    var myPrivateVar,myPrivateMethod\n\n    myPrivateVar = 0;\n    \n    myPrivateMethod = function(foo){\n        console.log(foo)\n    }\n    \n    return{\n        myPublicVar:\"foo\",\n        myPublicFunction:function(bar){\n            myPrivateVar++;\n            \n            myPrivateMethod(bar)\n        }\n    }\n})()\n```\n\n## 升级版使用模块模式实现购物车\n```\nvar basketModule = (function () {\n\n  // privates\n\n  var basket = [];\n\n  function doSomethingPrivate() {\n    //...\n  }\n\n  function doSomethingElsePrivate() {\n    //...\n  }\n\n  // Return an object exposed to the public\n  return {\n\n    // Add items to our basket\n    addItem: function( values ) {\n      basket.push(values);\n    },\n\n    // Get the count of items in the basket\n    getItemCount: function () {\n      return basket.length;\n    },\n\n    // Public alias to a  private function\n    doSomething: doSomethingPrivate,\n\n    // Get the total value of items in the basket\n    getTotal: function () {\n\n      var q = this.getItemCount(),\n          p = 0;\n\n      while (q--) {\n        p += basket[q].price;\n      }\n\n      return p;\n    }\n  };\n}());\n```\n在这个栗子中，这个模块完全自包含在`basketModule`这个模块中，其中的`basket`数组是私有的，在外部访问不到，我们需要访问`basketModule`中return的方法使用对应的功能，使用方法如下\n```\n// basketModule returns an object with a public API we can use\n\nbasketModule.addItem({\n  item: \"bread\",\n  price: 0.5\n});\n\nbasketModule.addItem({\n  item: \"butter\",\n  price: 0.3\n});\n\n// Outputs: 2\nconsole.log( basketModule.getItemCount() );\n\n// Outputs: 0.8\nconsole.log( basketModule.getTotal() );\n\n// However, the following will not work:\n\n// Outputs: undefined\n// This is because the basket itself is not exposed as a part of our\n// the public API\nconsole.log( basketModule.basket );\n\n// This also won't work as it only exists within the scope of our\n// basketModule closure, but not the returned public object\nconsole.log( basket );\n```\n\n","slug":"JavaScript-Design-Pattern2modular-mode","published":1,"updated":"2017-03-24T15:12:21.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel2b000uqkyft36hg6ti","content":"<p>在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量<br><a id=\"more\"></a></p>\n<h1 id=\"模块化模式\"><a href=\"#模块化模式\" class=\"headerlink\" title=\"模块化模式\"></a>模块化模式</h1><p>所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法</p>\n<p>通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量</p>\n<p>模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。</p>\n<p>这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数</p>\n<h2 id=\"闭包实现模块模式基础版\"><a href=\"#闭包实现模块模式基础版\" class=\"headerlink\" title=\"闭包实现模块模式基础版\"></a>闭包实现模块模式基础版</h2><p>下面就是一个最简单的用闭包实现模块模式的栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var testModule = (function()&#123;</div><div class=\"line\">    var counter = 0;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        incrementCounter:function()&#123;</div><div class=\"line\">            return counter++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        resetCounter:function()&#123;</div><div class=\"line\">            console.log(&quot;counter value prior to reset:&quot;+counter);</div><div class=\"line\">            counter = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">//use</div><div class=\"line\"></div><div class=\"line\">testModule.incrementCounter();</div><div class=\"line\"></div><div class=\"line\">testModule.resetCounter();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，在函数体内定义的变量<code>counter</code>就是一个“私有变量”，在函数外部是不能直接访问到的。在<code>return</code>中给我们提供了这个函数的两个<code>public</code>方法：<code>incrementCounter()</code>和<code>resetCounter()</code>。我们想要使用这个函数的功能就直接调用<code>testModule.incrementCounter();</code>就可以了</p>\n<h2 id=\"包含命名空间、公有变量和私有变量\"><a href=\"#包含命名空间、公有变量和私有变量\" class=\"headerlink\" title=\"包含命名空间、公有变量和私有变量\"></a>包含命名空间、公有变量和私有变量</h2><p>下面是一个包含了命名空间、公有变量和私有变量的一个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myNamespace = (function()&#123;</div><div class=\"line\">    var myPrivateVar,myPrivateMethod</div><div class=\"line\"></div><div class=\"line\">    myPrivateVar = 0;</div><div class=\"line\">    </div><div class=\"line\">    myPrivateMethod = function(foo)&#123;</div><div class=\"line\">        console.log(foo)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        myPublicVar:&quot;foo&quot;,</div><div class=\"line\">        myPublicFunction:function(bar)&#123;</div><div class=\"line\">            myPrivateVar++;</div><div class=\"line\">            </div><div class=\"line\">            myPrivateMethod(bar)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<h2 id=\"升级版使用模块模式实现购物车\"><a href=\"#升级版使用模块模式实现购物车\" class=\"headerlink\" title=\"升级版使用模块模式实现购物车\"></a>升级版使用模块模式实现购物车</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">var basketModule = (function () &#123;</div><div class=\"line\"></div><div class=\"line\">  // privates</div><div class=\"line\"></div><div class=\"line\">  var basket = [];</div><div class=\"line\"></div><div class=\"line\">  function doSomethingPrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function doSomethingElsePrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Return an object exposed to the public</div><div class=\"line\">  return &#123;</div><div class=\"line\"></div><div class=\"line\">    // Add items to our basket</div><div class=\"line\">    addItem: function( values ) &#123;</div><div class=\"line\">      basket.push(values);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Get the count of items in the basket</div><div class=\"line\">    getItemCount: function () &#123;</div><div class=\"line\">      return basket.length;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Public alias to a  private function</div><div class=\"line\">    doSomething: doSomethingPrivate,</div><div class=\"line\"></div><div class=\"line\">    // Get the total value of items in the basket</div><div class=\"line\">    getTotal: function () &#123;</div><div class=\"line\"></div><div class=\"line\">      var q = this.getItemCount(),</div><div class=\"line\">          p = 0;</div><div class=\"line\"></div><div class=\"line\">      while (q--) &#123;</div><div class=\"line\">        p += basket[q].price;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      return p;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>在这个栗子中，这个模块完全自包含在<code>basketModule</code>这个模块中，其中的<code>basket</code>数组是私有的，在外部访问不到，我们需要访问<code>basketModule</code>中return的方法使用对应的功能，使用方法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// basketModule returns an object with a public API we can use</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;bread&quot;,</div><div class=\"line\">  price: 0.5</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;butter&quot;,</div><div class=\"line\">  price: 0.3</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Outputs: 2</div><div class=\"line\">console.log( basketModule.getItemCount() );</div><div class=\"line\"></div><div class=\"line\">// Outputs: 0.8</div><div class=\"line\">console.log( basketModule.getTotal() );</div><div class=\"line\"></div><div class=\"line\">// However, the following will not work:</div><div class=\"line\"></div><div class=\"line\">// Outputs: undefined</div><div class=\"line\">// This is because the basket itself is not exposed as a part of our</div><div class=\"line\">// the public API</div><div class=\"line\">console.log( basketModule.basket );</div><div class=\"line\"></div><div class=\"line\">// This also won&apos;t work as it only exists within the scope of our</div><div class=\"line\">// basketModule closure, but not the returned public object</div><div class=\"line\">console.log( basket );</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>在javascript中，是没有类的概念的，也没有私有变量和全局变量的区别，这样的话，我们很有可能会遇到命名冲突的问题，然后就是我们希望能跟其他面向对象编程语言一样，能够将一个方法封装成一个类，这样的话别人在引用这个方法的时候只需要调用接口就可以了，不需要知道内部是怎么实现的，我们也往往不想让外部访问到类中的成员变量<br>","more":"</p>\n<h1 id=\"模块化模式\"><a href=\"#模块化模式\" class=\"headerlink\" title=\"模块化模式\"></a>模块化模式</h1><p>所以模块化模式最先开始就是为了解决这个问题的，是用来模拟类的概念的，模拟私有变量的实现（模拟！！在js中是没有类和私有变量的说法的），对传统软件工程中的类提供私有和公共封装的方法</p>\n<p>通过这样的方式，我们可以在一个单一的对象中包含公有/私有的方法和变量</p>\n<p>模块模式使用“闭包”的方式来将不想让外部访问到的变量封装为“私有变量（private）”。提供一种将公有（pubilc）和私有（private）方法，变量封装混合在一起的方式，声明的变量或者方法只在模块内部有效，其他人可以调用return中的方法和变量。这种方式防止内部信息泄露到全局中，从而避免了和其他开发者接口发生冲突的可能。</p>\n<p>这种方式和立即调用函数表达式有相似的地方，不同的是这种模式返回的是一个对象，而立即调用表达式返回的是一个函数</p>\n<h2 id=\"闭包实现模块模式基础版\"><a href=\"#闭包实现模块模式基础版\" class=\"headerlink\" title=\"闭包实现模块模式基础版\"></a>闭包实现模块模式基础版</h2><p>下面就是一个最简单的用闭包实现模块模式的栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var testModule = (function()&#123;</div><div class=\"line\">    var counter = 0;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        incrementCounter:function()&#123;</div><div class=\"line\">            return counter++;</div><div class=\"line\">        &#125;</div><div class=\"line\">        resetCounter:function()&#123;</div><div class=\"line\">            console.log(&quot;counter value prior to reset:&quot;+counter);</div><div class=\"line\">            counter = 0;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\">//use</div><div class=\"line\"></div><div class=\"line\">testModule.incrementCounter();</div><div class=\"line\"></div><div class=\"line\">testModule.resetCounter();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，在函数体内定义的变量<code>counter</code>就是一个“私有变量”，在函数外部是不能直接访问到的。在<code>return</code>中给我们提供了这个函数的两个<code>public</code>方法：<code>incrementCounter()</code>和<code>resetCounter()</code>。我们想要使用这个函数的功能就直接调用<code>testModule.incrementCounter();</code>就可以了</p>\n<h2 id=\"包含命名空间、公有变量和私有变量\"><a href=\"#包含命名空间、公有变量和私有变量\" class=\"headerlink\" title=\"包含命名空间、公有变量和私有变量\"></a>包含命名空间、公有变量和私有变量</h2><p>下面是一个包含了命名空间、公有变量和私有变量的一个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myNamespace = (function()&#123;</div><div class=\"line\">    var myPrivateVar,myPrivateMethod</div><div class=\"line\"></div><div class=\"line\">    myPrivateVar = 0;</div><div class=\"line\">    </div><div class=\"line\">    myPrivateMethod = function(foo)&#123;</div><div class=\"line\">        console.log(foo)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    return&#123;</div><div class=\"line\">        myPublicVar:&quot;foo&quot;,</div><div class=\"line\">        myPublicFunction:function(bar)&#123;</div><div class=\"line\">            myPrivateVar++;</div><div class=\"line\">            </div><div class=\"line\">            myPrivateMethod(bar)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)()</div></pre></td></tr></table></figure></p>\n<h2 id=\"升级版使用模块模式实现购物车\"><a href=\"#升级版使用模块模式实现购物车\" class=\"headerlink\" title=\"升级版使用模块模式实现购物车\"></a>升级版使用模块模式实现购物车</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">var basketModule = (function () &#123;</div><div class=\"line\"></div><div class=\"line\">  // privates</div><div class=\"line\"></div><div class=\"line\">  var basket = [];</div><div class=\"line\"></div><div class=\"line\">  function doSomethingPrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  function doSomethingElsePrivate() &#123;</div><div class=\"line\">    //...</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  // Return an object exposed to the public</div><div class=\"line\">  return &#123;</div><div class=\"line\"></div><div class=\"line\">    // Add items to our basket</div><div class=\"line\">    addItem: function( values ) &#123;</div><div class=\"line\">      basket.push(values);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Get the count of items in the basket</div><div class=\"line\">    getItemCount: function () &#123;</div><div class=\"line\">      return basket.length;</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    // Public alias to a  private function</div><div class=\"line\">    doSomething: doSomethingPrivate,</div><div class=\"line\"></div><div class=\"line\">    // Get the total value of items in the basket</div><div class=\"line\">    getTotal: function () &#123;</div><div class=\"line\"></div><div class=\"line\">      var q = this.getItemCount(),</div><div class=\"line\">          p = 0;</div><div class=\"line\"></div><div class=\"line\">      while (q--) &#123;</div><div class=\"line\">        p += basket[q].price;</div><div class=\"line\">      &#125;</div><div class=\"line\"></div><div class=\"line\">      return p;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n<p>在这个栗子中，这个模块完全自包含在<code>basketModule</code>这个模块中，其中的<code>basket</code>数组是私有的，在外部访问不到，我们需要访问<code>basketModule</code>中return的方法使用对应的功能，使用方法如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">// basketModule returns an object with a public API we can use</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;bread&quot;,</div><div class=\"line\">  price: 0.5</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">basketModule.addItem(&#123;</div><div class=\"line\">  item: &quot;butter&quot;,</div><div class=\"line\">  price: 0.3</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">// Outputs: 2</div><div class=\"line\">console.log( basketModule.getItemCount() );</div><div class=\"line\"></div><div class=\"line\">// Outputs: 0.8</div><div class=\"line\">console.log( basketModule.getTotal() );</div><div class=\"line\"></div><div class=\"line\">// However, the following will not work:</div><div class=\"line\"></div><div class=\"line\">// Outputs: undefined</div><div class=\"line\">// This is because the basket itself is not exposed as a part of our</div><div class=\"line\">// the public API</div><div class=\"line\">console.log( basketModule.basket );</div><div class=\"line\"></div><div class=\"line\">// This also won&apos;t work as it only exists within the scope of our</div><div class=\"line\">// basketModule closure, but not the returned public object</div><div class=\"line\">console.log( basket );</div></pre></td></tr></table></figure></p>"},{"title":"javascript设计模式（三）：原型模式","date":"2017-03-25T15:05:28.000Z","_content":"原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用`Object.create(prototype)`方法或者是使用字面量的方式创建对象\n<!--more-->\n# 原型模式\n\n原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力--原型链，使用原型链来实现继承。\n\n我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性\n\n##　使用`Object.create(prototype)`方法\n举个栗子~\n```\nvar myCar = {\n\n  name: \"Ford Escort\",\n\n  drive: function () {\n    console.log( \"Weeee. I'm driving!\" );\n  },\n\n  panic: function () {\n    console.log( \"Wait. How do you stop this thing?\" );\n  }\n\n};\n\n// Use Object.create to instantiate a new car\nvar yourCar = Object.create( myCar );\n\n// Now we can see that one is a prototype of the other\nconsole.log( yourCar.name );\n```\n在这个例子中，我们定义了一个作为原型的对象`myCar`，这个对象中有两个属性`name`和`drive`，然后用`Object.create()`方法来创建了一个拥有`myCar`原型的对象`yourCar`，这样新创建的`yourCar`就继承了`myCar`中的属性和方法，我们可以直接调用\n\n当然，`Object.create()`方法也可以传入第二个参数(第一个参数是要继承的原型)`Object.create(prototype,optionalDescriptorObject))。`第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对\n\n## 使用面向字面量方法创建\n如果不希望在不直接使用`Object.create`的前提下实现原型链，我们可以模拟原型链实现继承\n```\nvar vehiclePrototype = {\n\n  init: function ( carModel ) {\n    this.model = carModel;\n  },\n\n  getModel: function () {\n    console.log( \"The model of this vehicle is..\" + this.model);\n  }\n};\n\nfunction vehicle( model ) {\n\n  function F() {};\n  \n  var f = new F();\n\n  f.init( model );\n  return f;\n\n}\n\nvar car = vehicle( \"Ford Escort\" );\ncar.getModel();\n```\n这个栗子中，对象`vehiclePrototype`中有两个方法`init`和`getModel`,然后`vehicle`继承了`vehiclePrototype`，继承的方法是先创建一个空函数`F`然后`F`的`prototype`属性指向`vehiclePrototype`，然后创建`F`类的一个实例`f`,`f`使用了`vehiclePrototype`的`init`方法，最后返回`f`,所以`vehicle`函数内部就完成了对`vehiclePrototype`的继承，最后将对象`f`返回.\n\n**其实`var f = new F();`就相当于`f = Object.create(F.prototype);`**\n\n```\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n```\n\n","source":"_posts/JavaScript-Design-Pattern3prototype-model.md","raw":"---\ntitle: javascript设计模式（三）：原型模式\ndate: 2017-03-25 23:05:28\ntags: [js,js设计模式] \ncategories: js\n---\n原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用`Object.create(prototype)`方法或者是使用字面量的方式创建对象\n<!--more-->\n# 原型模式\n\n原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力--原型链，使用原型链来实现继承。\n\n我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性\n\n##　使用`Object.create(prototype)`方法\n举个栗子~\n```\nvar myCar = {\n\n  name: \"Ford Escort\",\n\n  drive: function () {\n    console.log( \"Weeee. I'm driving!\" );\n  },\n\n  panic: function () {\n    console.log( \"Wait. How do you stop this thing?\" );\n  }\n\n};\n\n// Use Object.create to instantiate a new car\nvar yourCar = Object.create( myCar );\n\n// Now we can see that one is a prototype of the other\nconsole.log( yourCar.name );\n```\n在这个例子中，我们定义了一个作为原型的对象`myCar`，这个对象中有两个属性`name`和`drive`，然后用`Object.create()`方法来创建了一个拥有`myCar`原型的对象`yourCar`，这样新创建的`yourCar`就继承了`myCar`中的属性和方法，我们可以直接调用\n\n当然，`Object.create()`方法也可以传入第二个参数(第一个参数是要继承的原型)`Object.create(prototype,optionalDescriptorObject))。`第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对\n\n## 使用面向字面量方法创建\n如果不希望在不直接使用`Object.create`的前提下实现原型链，我们可以模拟原型链实现继承\n```\nvar vehiclePrototype = {\n\n  init: function ( carModel ) {\n    this.model = carModel;\n  },\n\n  getModel: function () {\n    console.log( \"The model of this vehicle is..\" + this.model);\n  }\n};\n\nfunction vehicle( model ) {\n\n  function F() {};\n  \n  var f = new F();\n\n  f.init( model );\n  return f;\n\n}\n\nvar car = vehicle( \"Ford Escort\" );\ncar.getModel();\n```\n这个栗子中，对象`vehiclePrototype`中有两个方法`init`和`getModel`,然后`vehicle`继承了`vehiclePrototype`，继承的方法是先创建一个空函数`F`然后`F`的`prototype`属性指向`vehiclePrototype`，然后创建`F`类的一个实例`f`,`f`使用了`vehiclePrototype`的`init`方法，最后返回`f`,所以`vehicle`函数内部就完成了对`vehiclePrototype`的继承，最后将对象`f`返回.\n\n**其实`var f = new F();`就相当于`f = Object.create(F.prototype);`**\n\n```\no = {};\n// 以字面量方式创建的空对象就相当于:\no = Object.create(Object.prototype);\n```\n\n","slug":"JavaScript-Design-Pattern3prototype-model","published":1,"updated":"2017-03-25T15:06:32.737Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel2b000wqkyfm2h0jkvc","content":"<p>原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用<code>Object.create(prototype)</code>方法或者是使用字面量的方式创建对象<br><a id=\"more\"></a></p>\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力–原型链，使用原型链来实现继承。</p>\n<p>我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性</p>\n<p>##　使用<code>Object.create(prototype)</code>方法<br>举个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myCar = &#123;</div><div class=\"line\"></div><div class=\"line\">  name: &quot;Ford Escort&quot;,</div><div class=\"line\"></div><div class=\"line\">  drive: function () &#123;</div><div class=\"line\">    console.log( &quot;Weeee. I&apos;m driving!&quot; );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  panic: function () &#123;</div><div class=\"line\">    console.log( &quot;Wait. How do you stop this thing?&quot; );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var yourCar = Object.create( myCar );</div><div class=\"line\"></div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log( yourCar.name );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义了一个作为原型的对象<code>myCar</code>，这个对象中有两个属性<code>name</code>和<code>drive</code>，然后用<code>Object.create()</code>方法来创建了一个拥有<code>myCar</code>原型的对象<code>yourCar</code>，这样新创建的<code>yourCar</code>就继承了<code>myCar</code>中的属性和方法，我们可以直接调用</p>\n<p>当然，<code>Object.create()</code>方法也可以传入第二个参数(第一个参数是要继承的原型)<code>Object.create(prototype,optionalDescriptorObject))。</code>第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对</p>\n<h2 id=\"使用面向字面量方法创建\"><a href=\"#使用面向字面量方法创建\" class=\"headerlink\" title=\"使用面向字面量方法创建\"></a>使用面向字面量方法创建</h2><p>如果不希望在不直接使用<code>Object.create</code>的前提下实现原型链，我们可以模拟原型链实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vehiclePrototype = &#123;</div><div class=\"line\"></div><div class=\"line\">  init: function ( carModel ) &#123;</div><div class=\"line\">    this.model = carModel;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getModel: function () &#123;</div><div class=\"line\">    console.log( &quot;The model of this vehicle is..&quot; + this.model);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function vehicle( model ) &#123;</div><div class=\"line\"></div><div class=\"line\">  function F() &#123;&#125;;</div><div class=\"line\">  </div><div class=\"line\">  var f = new F();</div><div class=\"line\"></div><div class=\"line\">  f.init( model );</div><div class=\"line\">  return f;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = vehicle( &quot;Ford Escort&quot; );</div><div class=\"line\">car.getModel();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，对象<code>vehiclePrototype</code>中有两个方法<code>init</code>和<code>getModel</code>,然后<code>vehicle</code>继承了<code>vehiclePrototype</code>，继承的方法是先创建一个空函数<code>F</code>然后<code>F</code>的<code>prototype</code>属性指向<code>vehiclePrototype</code>，然后创建<code>F</code>类的一个实例<code>f</code>,<code>f</code>使用了<code>vehiclePrototype</code>的<code>init</code>方法，最后返回<code>f</code>,所以<code>vehicle</code>函数内部就完成了对<code>vehiclePrototype</code>的继承，最后将对象<code>f</code>返回.</p>\n<p><strong>其实<code>var f = new F();</code>就相当于<code>f = Object.create(F.prototype);</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;;</div><div class=\"line\">// 以字面量方式创建的空对象就相当于:</div><div class=\"line\">o = Object.create(Object.prototype);</div></pre></td></tr></table></figure>\n","excerpt":"<p>原型模式就是通过javascript中的原型链的思想来实现继承的，当调用函数的方法时，首先会寻找本身是否有该方法，如果没有就寻找其原型链上是否有，一共有两种方式来实现原型模式：1、使用<code>Object.create(prototype)</code>方法或者是使用字面量的方式创建对象<br>","more":"</p>\n<h1 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h1><p>原型模式应该是我们比较熟悉的，其实原型模式不需要去模拟其他语言的概念，而是使用javascript提供的原生能力–原型链，使用原型链来实现继承。</p>\n<p>我们能够将原型模式认作是基于原型的继承中，我们创建作为其他对象原型的对象，原型对象自身被当作构造器创建的每一个对象的蓝本高效的使用着，如果构造器函数使用的原型包含例如叫作name的属性，那么每一个通过同一个构造器创建的对象都有name属性</p>\n<p>##　使用<code>Object.create(prototype)</code>方法<br>举个栗子~<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var myCar = &#123;</div><div class=\"line\"></div><div class=\"line\">  name: &quot;Ford Escort&quot;,</div><div class=\"line\"></div><div class=\"line\">  drive: function () &#123;</div><div class=\"line\">    console.log( &quot;Weeee. I&apos;m driving!&quot; );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  panic: function () &#123;</div><div class=\"line\">    console.log( &quot;Wait. How do you stop this thing?&quot; );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Use Object.create to instantiate a new car</div><div class=\"line\">var yourCar = Object.create( myCar );</div><div class=\"line\"></div><div class=\"line\">// Now we can see that one is a prototype of the other</div><div class=\"line\">console.log( yourCar.name );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们定义了一个作为原型的对象<code>myCar</code>，这个对象中有两个属性<code>name</code>和<code>drive</code>，然后用<code>Object.create()</code>方法来创建了一个拥有<code>myCar</code>原型的对象<code>yourCar</code>，这样新创建的<code>yourCar</code>就继承了<code>myCar</code>中的属性和方法，我们可以直接调用</p>\n<p>当然，<code>Object.create()</code>方法也可以传入第二个参数(第一个参数是要继承的原型)<code>Object.create(prototype,optionalDescriptorObject))。</code>第二个参数来初始化对象的属性，我认为这个属性就是可以为其创建新的属性，不知道理解的对不对</p>\n<h2 id=\"使用面向字面量方法创建\"><a href=\"#使用面向字面量方法创建\" class=\"headerlink\" title=\"使用面向字面量方法创建\"></a>使用面向字面量方法创建</h2><p>如果不希望在不直接使用<code>Object.create</code>的前提下实现原型链，我们可以模拟原型链实现继承<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var vehiclePrototype = &#123;</div><div class=\"line\"></div><div class=\"line\">  init: function ( carModel ) &#123;</div><div class=\"line\">    this.model = carModel;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getModel: function () &#123;</div><div class=\"line\">    console.log( &quot;The model of this vehicle is..&quot; + this.model);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function vehicle( model ) &#123;</div><div class=\"line\"></div><div class=\"line\">  function F() &#123;&#125;;</div><div class=\"line\">  </div><div class=\"line\">  var f = new F();</div><div class=\"line\"></div><div class=\"line\">  f.init( model );</div><div class=\"line\">  return f;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var car = vehicle( &quot;Ford Escort&quot; );</div><div class=\"line\">car.getModel();</div></pre></td></tr></table></figure></p>\n<p>这个栗子中，对象<code>vehiclePrototype</code>中有两个方法<code>init</code>和<code>getModel</code>,然后<code>vehicle</code>继承了<code>vehiclePrototype</code>，继承的方法是先创建一个空函数<code>F</code>然后<code>F</code>的<code>prototype</code>属性指向<code>vehiclePrototype</code>，然后创建<code>F</code>类的一个实例<code>f</code>,<code>f</code>使用了<code>vehiclePrototype</code>的<code>init</code>方法，最后返回<code>f</code>,所以<code>vehicle</code>函数内部就完成了对<code>vehiclePrototype</code>的继承，最后将对象<code>f</code>返回.</p>\n<p><strong>其实<code>var f = new F();</code>就相当于<code>f = Object.create(F.prototype);</code></strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">o = &#123;&#125;;</div><div class=\"line\">// 以字面量方式创建的空对象就相当于:</div><div class=\"line\">o = Object.create(Object.prototype);</div></pre></td></tr></table></figure>"},{"layout":"ew","title":"Javascript模块化编程（一）：模块的写法","date":"2017-03-07T14:40:16.000Z","_content":"不得不说现在“前端”的知识点实在是太多了，(ಥ_ಥ)\n就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ_ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成\n\n<!--more-->\n\n# 了解基本概念：AMD/CMD/commonJS\n先来大体说一些这些都是什么东西：\nAMD/CMD/commonJS都是JavaScript模块化变的规范\n\n\n> 因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n\n\n\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\n- CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n- commonJS是nodejs在推广过程中对模块定义的规范化产出。\n\n因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。\n\n## AMD(Asynchronous Module Definition)\n全称是Asynchronous Module Definition，即异步模块加载机制。\n\n## commonJS\nCommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。\n\n通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。\n> CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。\n> \n> 由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来\n--[JavaScript模块化开发（二）——CommonJS规范](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com)\n\n\n# 那么AMD/CMD又有什么区别呢？\nAMD和CMD的区别 \n1. 对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. \n2. CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） \n3. AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。\n\n\n# 总结\n不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。\n\n先挖个坑，以后我胡汉三还会回来的~","source":"_posts/Javascript-modular-programming1module-writing.md","raw":"layout: ew\ntitle: Javascript模块化编程（一）：模块的写法\ndate: 2017-03-07 22:40:16\ntags: [js模块化,js]\ncategories: js\n\n---\n不得不说现在“前端”的知识点实在是太多了，(ಥ_ಥ)\n就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ_ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成\n\n<!--more-->\n\n# 了解基本概念：AMD/CMD/commonJS\n先来大体说一些这些都是什么东西：\nAMD/CMD/commonJS都是JavaScript模块化变的规范\n\n\n> 因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。\n但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。\n\n\n\n- AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。\n- CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。\n- commonJS是nodejs在推广过程中对模块定义的规范化产出。\n\n因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。\n\n## AMD(Asynchronous Module Definition)\n全称是Asynchronous Module Definition，即异步模块加载机制。\n\n## commonJS\nCommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。\n\n通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。\n> CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。\n> \n> 由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来\n--[JavaScript模块化开发（二）——CommonJS规范](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com)\n\n\n# 那么AMD/CMD又有什么区别呢？\nAMD和CMD的区别 \n1. 对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. \n2. CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） \n3. AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。\n\n\n# 总结\n不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。\n\n先挖个坑，以后我胡汉三还会回来的~","slug":"Javascript-modular-programming1module-writing","published":1,"updated":"2017-03-07T14:42:38.175Z","comments":1,"photos":[],"link":"","_id":"cj1jcel2r000zqkyf9svu6pl5","content":"<p>不得不说现在“前端”的知识点实在是太多了，(ಥ<em>ಥ)<br>就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ</em>ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成</p>\n<a id=\"more\"></a>\n<h1 id=\"了解基本概念：AMD-CMD-commonJS\"><a href=\"#了解基本概念：AMD-CMD-commonJS\" class=\"headerlink\" title=\"了解基本概念：AMD/CMD/commonJS\"></a>了解基本概念：AMD/CMD/commonJS</h1><p>先来大体说一些这些都是什么东西：<br>AMD/CMD/commonJS都是JavaScript模块化变的规范</p>\n<blockquote>\n<p>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。<br>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。</p>\n</blockquote>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</li>\n<li>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</li>\n<li>commonJS是nodejs在推广过程中对模块定义的规范化产出。</li>\n</ul>\n<p>因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。</p>\n<h2 id=\"AMD-Asynchronous-Module-Definition\"><a href=\"#AMD-Asynchronous-Module-Definition\" class=\"headerlink\" title=\"AMD(Asynchronous Module Definition)\"></a>AMD(Asynchronous Module Definition)</h2><p>全称是Asynchronous Module Definition，即异步模块加载机制。</p>\n<h2 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h2><p>CommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。</p>\n<p>通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。</p>\n<blockquote>\n<p>CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。</p>\n<p>由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来<br>–<a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com\" target=\"_blank\" rel=\"external\">JavaScript模块化开发（二）——CommonJS规范</a></p>\n</blockquote>\n<h1 id=\"那么AMD-CMD又有什么区别呢？\"><a href=\"#那么AMD-CMD又有什么区别呢？\" class=\"headerlink\" title=\"那么AMD/CMD又有什么区别呢？\"></a>那么AMD/CMD又有什么区别呢？</h1><p>AMD和CMD的区别 </p>\n<ol>\n<li>对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. </li>\n<li>CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） </li>\n<li>AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。</p>\n<p>先挖个坑，以后我胡汉三还会回来的~</p>\n","excerpt":"<p>不得不说现在“前端”的知识点实在是太多了，(ಥ<em>ಥ)<br>就在昨天，我就是想看一下webpack怎么使用，然后在慕课网的视频中用到了commonJS的知识，今天我就想查一下什么是有关commonJS的知识，然后发现查到了是和node和AMD/CMD相关，望天(ಥ</em>ಥ)，最后发现这些都是js模块化编程的内容，于是决定跟着阮一峰老师学习js模块化变成</p>","more":"<h1 id=\"了解基本概念：AMD-CMD-commonJS\"><a href=\"#了解基本概念：AMD-CMD-commonJS\" class=\"headerlink\" title=\"了解基本概念：AMD/CMD/commonJS\"></a>了解基本概念：AMD/CMD/commonJS</h1><p>先来大体说一些这些都是什么东西：<br>AMD/CMD/commonJS都是JavaScript模块化变的规范</p>\n<blockquote>\n<p>因为有了模块，我们就可以更方便地使用别人的代码，想要什么功能，就加载什么模块。<br>但是，这样做有一个前提，那就是大家必须以同样的方式编写模块，否则你有你的写法，我有我的写法，岂不是乱了套！考虑到Javascript模块现在还没有官方规范，这一点就更重要了。</p>\n</blockquote>\n<ul>\n<li>AMD 是 RequireJS 在推广过程中对模块定义的规范化产出。</li>\n<li>CMD 是 SeaJS 在推广过程中对模块定义的规范化产出。</li>\n<li>commonJS是nodejs在推广过程中对模块定义的规范化产出。</li>\n</ul>\n<p>因为node主要是将javascript语言用于服务器端编程，所以对应的commonJS主要是针对服务端，AMD/CMD主要是针对浏览器端。</p>\n<h2 id=\"AMD-Asynchronous-Module-Definition\"><a href=\"#AMD-Asynchronous-Module-Definition\" class=\"headerlink\" title=\"AMD(Asynchronous Module Definition)\"></a>AMD(Asynchronous Module Definition)</h2><p>全称是Asynchronous Module Definition，即异步模块加载机制。</p>\n<h2 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h2><p>CommonJS 的目标是定义一套普通应用程序使用的API，从而填补原生JavaScript标准库过少的缺点。终极目标是实现一个像python，java中含有的标准库。现在非常火爆的node.js实际上就是CommonJS 的一个实现。</p>\n<p>通过 CommonJS 的规范和代码可以看出，require 是同步的，模块系统需要同步读取模块文件内容，并编译执行以得到模块接口。在服务端，比如node.js，这一般来说没有问题，文件请求都是本地获取，对性能没有什么影响。但是放在浏览器端，问题就出来了，等到所有模块同步加载完毕，时间不知道要过去多久了。</p>\n<blockquote>\n<p>CommonJS 最早叫做 ServerJS，Modules 1.0规范在node.js上实践的很好，由于知道自身在浏览器中的不足，CommonJS社区把名字改为CommonJS，意为想统一服务器端和浏览器端，但是要实现浏览器端，就要有新的版本的标准，在新的版本制定过程中，社区出现了分歧，在这个分歧中，分出了AMD规范。</p>\n<p>由于风格和机制的差异，最终，AMD从CommonJS社区中独立了出来<br>–<a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-commonjs/?utm_source=caibaojian.com\">JavaScript模块化开发（二）——CommonJS规范</a></p>\n</blockquote>\n<h1 id=\"那么AMD-CMD又有什么区别呢？\"><a href=\"#那么AMD-CMD又有什么区别呢？\" class=\"headerlink\" title=\"那么AMD/CMD又有什么区别呢？\"></a>那么AMD/CMD又有什么区别呢？</h1><p>AMD和CMD的区别 </p>\n<ol>\n<li>对于依赖的模块，AMD 是 提前执行 ，CMD 是 延迟执行 。不过 RequireJS 从 2.0 开始，也改成可以延迟执行（根据写法不同，处理方式不同）。CMD 推崇 as lazy as possible. </li>\n<li>CMD 推崇 依赖就近 ，AMD 推崇 依赖前置 。（这一点是非常重要的区别） </li>\n<li>AMD 的 API 默认是 一个当多个用 ，CMD 的 API 严格区分，推崇 职责单一 。</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>不得不说，其实这篇文章大部分都是摘录的，反思了一下，归根结底还是自己对这些概念理解的不清，首先是没有找到系统的讲解文章，其次是自己没有用到项目中去，自我批评。</p>\n<p>先挖个坑，以后我胡汉三还会回来的~</p>"},{"title":"javascript模块化编程（二）：js模块化发展史","date":"2017-03-07T15:04:40.000Z","_content":"在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）\n<!--more-->\n# js在发展过程\n有几个阶段：\n过程式的JavaScript→面向对象的javascript→面相模块的javascript\n1. 原始写法：\n模块就是实现特定功能的一组写法：\n\n```\nfunction m1(){\n    //do something\n}\n\nfunction m2(){\n    //do something\n}\n```\n上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。\n\n这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系\n2. 对象写法\n这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容\n\n```\nvar module1 = new Object({\n        _count:0,\n\n        m1 : function () {\n            console.log(module1._count)\n        },\n\n        m2 : function () {\n            for(var i=0;i<5;i++){\n                module1._count += i;\n                console.log(module1._count)\n            }\n        }\n    });\n\n    module1.m1();\n    module1.m2();\n    module1._count=5;\n    console.log(module1._count)\n```\n上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了`module1.m1()`,\n但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如\n\n```\nmodule1._count = 5;   //外部代码可以直接改变内部计数器的值\n```\n3. 立即执行函数写法\n这种写法可以达到不暴露私有成员的目的\n\n```\n   var module1 = (function () {\n        var _count = 0;\n        var m1 = function () {\n            console.log(_count)\n        };\n\n        var m2 = function () {\n            for(var i=0;i<5;i++){\n                _count += i;\n                console.log(_count)\n            }\n        };\n\n        return{\n            r1 : m1,\n            r2 : m2,\n        }\n    })();\n\n    module1.r1();   //0\n    module1.r2();\n    console.log(module1._count)  //undefined\n```\n这里只能通过return的函数名来调用函数，达到了包装函数的作用\n这里还运用了闭包的思想，在函数`module1`的外部调用了函数内的变量`_count`\n\n## 闭包\n闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量`_count`,然后在`module1`的`return`中又将m1作为返回值，这样就可以在`module1`的外部访问`module1`中的局部变量`_count`\n\n4. 放大模式\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)\n\n```\n    var module1 = function () {\n        console.log(\"原module1模块\")\n    }\n    var module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(module1);\n\n\n    module1.m3()\n\n```\n在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用**方法模式**来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数`module1`“放大”\n\n在执行完这段代码之后，我们的模块就可以拥有一个新的 `module1.m3`的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象\n\n5. 宽放大模式\n宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象\n\n```\nvar module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(window.module1 || {});\n\n\n    module1.m3()\n\n```\n在放大模式中，如果没有上面定义`module1`模块时，是会报错的，经过改进，就算在执行这段代码的时候，`module1`  即使没有定义也不会报错，也会创建`module1.m3()`这个公有方法\n\n\n在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript\n\n# 为什么使用模块化的js\n使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）\n1. 命名冲突，是不是有点同感了！！！\n闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题\n**通过export暴露接口，不需要命名空间，不需要全局变量**\n2. 文件依赖\n文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！\n**js模块化的解决方式是使用require引入依赖，使依赖内置**，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。\n\n# commonJS\n为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的\n## 什么是commonJS\ncommonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）\n\n## 使用commonJS编写node\n以下是node写模块化的一个示例：\n1. math.js\n\n```\nexports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n```\n2.  increment.js\n\n```\nvar add = require('math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n3. main.js，该文件为入口文件\n\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n从上述代码可以看到：\n-  node要求一个js文件对应一个模块。\n- 使用exports导出API\n- 使用require加载其它模块\n\n\n## commonJS的缺点\n因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的\n1. 服务器端的js模块就在本地，浏览器端则需要通过网络请求\n2. 服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多\n\n \n如下\n\n```\nvar event = require(\"event\");\n \nevent.bind(el, 'click', function() {\n    // todo\n});\n```\n\n`event.bind(el, 'click', function()`，在第一行require(\"event\")之后运行，因此必须等`event`加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n> 这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n# AMD\n基于上述两点的commcommonJS的缺点，AMD就孕育而生，\n\n\n## 什么是AMD\nAMD可以理解为异步模块定义，可以认为是浏览器中的模块规范\n> AMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\n为什么说AMD可以解决commonJS在浏览器上的不足呢？\n\n```\n　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。\n\nAMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！\n\n```\ndefine(id?, dependencies?, factory);\n```\n其中：\n- id: 模块标识，可以省略。\n- dependencies: 所依赖的模块，可以省略。\n- factory: 模块的实现，或者一个JavaScript对象。\n- id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。\n\n## 简单的AMD模式应用\n以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）\n`base.js`\n\n```\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n`ui.js`\n\n```\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\n```\n`page.js``\n```\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n`data.js`\n\n```\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n- 定义无依赖的模块（base.js）\n- 定义有依赖的模块（ui.js，page.js）\n- 定义数据对象模块（data.js）\n\n以上的id参数都为空，这是为什么呢？\n\n```\ndefine('index', ['data','base'], function(data, base) {\n    // todo\n});\n```\n这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。\n\n\n\n更多请阅读：\n- [浅谈模块化的JavaScript](http://www.tuicool.com/articles/rqEjEv)\n- [JavaScript模块化开发库之SeaJS](http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html)\n- [Node.js模块风格在浏览器中的尝试](http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html)\n- [JavaScript中模块写法](http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html)\n- [JavaScript中的AMD和CMD模块化](http://caibaojian.com/toutiao/6090)\n- [CMD 模块定义规范](https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com)\n- [JavaScript模块化开发（四）——RequireJS](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/)\n- [Javascript模块化编程](http://note.youdao.com/)\n","source":"_posts/JavaScript-modular-programming2JSmodulardevelopmenthistory.md","raw":"---\ntitle: javascript模块化编程（二）：js模块化发展史\ndate: 2017-03-07 23:04:40\ntags: [js模块化,js]\ncategories: js\n---\n在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）\n<!--more-->\n# js在发展过程\n有几个阶段：\n过程式的JavaScript→面向对象的javascript→面相模块的javascript\n1. 原始写法：\n模块就是实现特定功能的一组写法：\n\n```\nfunction m1(){\n    //do something\n}\n\nfunction m2(){\n    //do something\n}\n```\n上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。\n\n这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系\n2. 对象写法\n这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容\n\n```\nvar module1 = new Object({\n        _count:0,\n\n        m1 : function () {\n            console.log(module1._count)\n        },\n\n        m2 : function () {\n            for(var i=0;i<5;i++){\n                module1._count += i;\n                console.log(module1._count)\n            }\n        }\n    });\n\n    module1.m1();\n    module1.m2();\n    module1._count=5;\n    console.log(module1._count)\n```\n上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了`module1.m1()`,\n但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如\n\n```\nmodule1._count = 5;   //外部代码可以直接改变内部计数器的值\n```\n3. 立即执行函数写法\n这种写法可以达到不暴露私有成员的目的\n\n```\n   var module1 = (function () {\n        var _count = 0;\n        var m1 = function () {\n            console.log(_count)\n        };\n\n        var m2 = function () {\n            for(var i=0;i<5;i++){\n                _count += i;\n                console.log(_count)\n            }\n        };\n\n        return{\n            r1 : m1,\n            r2 : m2,\n        }\n    })();\n\n    module1.r1();   //0\n    module1.r2();\n    console.log(module1._count)  //undefined\n```\n这里只能通过return的函数名来调用函数，达到了包装函数的作用\n这里还运用了闭包的思想，在函数`module1`的外部调用了函数内的变量`_count`\n\n## 闭包\n闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量`_count`,然后在`module1`的`return`中又将m1作为返回值，这样就可以在`module1`的外部访问`module1`中的局部变量`_count`\n\n4. 放大模式\n如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)\n\n```\n    var module1 = function () {\n        console.log(\"原module1模块\")\n    }\n    var module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(module1);\n\n\n    module1.m3()\n\n```\n在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用**方法模式**来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数`module1`“放大”\n\n在执行完这段代码之后，我们的模块就可以拥有一个新的 `module1.m3`的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象\n\n5. 宽放大模式\n宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象\n\n```\nvar module1 = (function (mod){\n        mod.m3 = function () {\n            console.log(\"m3\")\n        };\n        return mod;\n    })(window.module1 || {});\n\n\n    module1.m3()\n\n```\n在放大模式中，如果没有上面定义`module1`模块时，是会报错的，经过改进，就算在执行这段代码的时候，`module1`  即使没有定义也不会报错，也会创建`module1.m3()`这个公有方法\n\n\n在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript\n\n# 为什么使用模块化的js\n使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）\n1. 命名冲突，是不是有点同感了！！！\n闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题\n**通过export暴露接口，不需要命名空间，不需要全局变量**\n2. 文件依赖\n文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！\n**js模块化的解决方式是使用require引入依赖，使依赖内置**，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。\n\n# commonJS\n为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的\n## 什么是commonJS\ncommonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）\n\n## 使用commonJS编写node\n以下是node写模块化的一个示例：\n1. math.js\n\n```\nexports.add = function() {\n    var sum = 0, i = 0, args = arguments, l = args.length;\n    while (i < l) {\n        sum += args[i++];\n    }\n    return sum;\n};\n\n```\n2.  increment.js\n\n```\nvar add = require('math').add;\nexports.increment = function(val) {\n    return add(val, 1);\n};\n```\n3. main.js，该文件为入口文件\n\n```\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); // 2\n```\n\n从上述代码可以看到：\n-  node要求一个js文件对应一个模块。\n- 使用exports导出API\n- 使用require加载其它模块\n\n\n## commonJS的缺点\n因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的\n1. 服务器端的js模块就在本地，浏览器端则需要通过网络请求\n2. 服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多\n\n \n如下\n\n```\nvar event = require(\"event\");\n \nevent.bind(el, 'click', function() {\n    // todo\n});\n```\n\n`event.bind(el, 'click', function()`，在第一行require(\"event\")之后运行，因此必须等`event`加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。\n> 这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于\"假死\"状态。\n因此，浏览器端的模块，不能采用\"同步加载\"（synchronous），只能采用\"异步加载\"（asynchronous）。这就是AMD规范诞生的背景。\n\n# AMD\n基于上述两点的commcommonJS的缺点，AMD就孕育而生，\n\n\n## 什么是AMD\nAMD可以理解为异步模块定义，可以认为是浏览器中的模块规范\n> AMD是\"Asynchronous Module Definition\"的缩写，意思就是\"异步模块定义\"。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。\n\n为什么说AMD可以解决commonJS在浏览器上的不足呢？\n\n```\n　require(['math'], function (math) {\n　　　　math.add(2, 3);\n　　});\n```\nmath.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。\n\nAMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！\n\n```\ndefine(id?, dependencies?, factory);\n```\n其中：\n- id: 模块标识，可以省略。\n- dependencies: 所依赖的模块，可以省略。\n- factory: 模块的实现，或者一个JavaScript对象。\n- id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。\n\n## 简单的AMD模式应用\n以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）\n`base.js`\n\n```\ndefine(function() {\n    return {\n        mix: function(source, target) {\n        }\n    };\n});\n```\n`ui.js`\n\n```\ndefine(['base'], function(base) {\n    return {\n        show: function() {\n            // todo with module base\n        }\n    }\n});\n\n```\n`page.js``\n```\ndefine(['data', 'ui'], function(data, ui) {\n    // init here\n});\n```\n`data.js`\n\n```\ndefine({\n    users: [],\n    members: []\n});\n```\n\n以上同时演示了define的三种用法\n- 定义无依赖的模块（base.js）\n- 定义有依赖的模块（ui.js，page.js）\n- 定义数据对象模块（data.js）\n\n以上的id参数都为空，这是为什么呢？\n\n```\ndefine('index', ['data','base'], function(data, base) {\n    // todo\n});\n```\n这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。\n\n\n\n更多请阅读：\n- [浅谈模块化的JavaScript](http://www.tuicool.com/articles/rqEjEv)\n- [JavaScript模块化开发库之SeaJS](http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html)\n- [Node.js模块风格在浏览器中的尝试](http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html)\n- [JavaScript中模块写法](http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html)\n- [JavaScript中的AMD和CMD模块化](http://caibaojian.com/toutiao/6090)\n- [CMD 模块定义规范](https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com)\n- [JavaScript模块化开发（四）——RequireJS](http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/)\n- [Javascript模块化编程](http://note.youdao.com/)\n","slug":"JavaScript-modular-programming2JSmodulardevelopmenthistory","published":1,"updated":"2017-03-08T15:14:24.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel2r0012qkyfp12wpqp4","content":"<p>在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）<br><a id=\"more\"></a></p>\n<h1 id=\"js在发展过程\"><a href=\"#js在发展过程\" class=\"headerlink\" title=\"js在发展过程\"></a>js在发展过程</h1><p>有几个阶段：<br>过程式的JavaScript→面向对象的javascript→面相模块的javascript</p>\n<ol>\n<li>原始写法：<br>模块就是实现特定功能的一组写法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function m1()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function m2()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。</p>\n<p>这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系</p>\n<ol>\n<li>对象写法<br>这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = new Object(&#123;</div><div class=\"line\">        _count:0,</div><div class=\"line\"></div><div class=\"line\">        m1 : function () &#123;</div><div class=\"line\">            console.log(module1._count)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        m2 : function () &#123;</div><div class=\"line\">            for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">                module1._count += i;</div><div class=\"line\">                console.log(module1._count)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    module1.m1();</div><div class=\"line\">    module1.m2();</div><div class=\"line\">    module1._count=5;</div><div class=\"line\">    console.log(module1._count)</div></pre></td></tr></table></figure>\n<p>上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了<code>module1.m1()</code>,<br>但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module1._count = 5;   //外部代码可以直接改变内部计数器的值</div></pre></td></tr></table></figure>\n<ol>\n<li>立即执行函数写法<br>这种写法可以达到不暴露私有成员的目的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function () &#123;</div><div class=\"line\">     var _count = 0;</div><div class=\"line\">     var m1 = function () &#123;</div><div class=\"line\">         console.log(_count)</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     var m2 = function () &#123;</div><div class=\"line\">         for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">             _count += i;</div><div class=\"line\">             console.log(_count)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     return&#123;</div><div class=\"line\">         r1 : m1,</div><div class=\"line\">         r2 : m2,</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;)();</div><div class=\"line\"></div><div class=\"line\"> module1.r1();   //0</div><div class=\"line\"> module1.r2();</div><div class=\"line\"> console.log(module1._count)  //undefined</div></pre></td></tr></table></figure>\n<p>这里只能通过return的函数名来调用函数，达到了包装函数的作用<br>这里还运用了闭包的思想，在函数<code>module1</code>的外部调用了函数内的变量<code>_count</code></p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量<code>_count</code>,然后在<code>module1</code>的<code>return</code>中又将m1作为返回值，这样就可以在<code>module1</code>的外部访问<code>module1</code>中的局部变量<code>_count</code></p>\n<ol>\n<li>放大模式<br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = function () &#123;</div><div class=\"line\">    console.log(&quot;原module1模块&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">    mod.m3 = function () &#123;</div><div class=\"line\">        console.log(&quot;m3&quot;)</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return mod;</div><div class=\"line\">&#125;)(module1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module1.m3()</div></pre></td></tr></table></figure>\n<p>在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用<strong>方法模式</strong>来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数<code>module1</code>“放大”</p>\n<p>在执行完这段代码之后，我们的模块就可以拥有一个新的 <code>module1.m3</code>的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象</p>\n<ol>\n<li>宽放大模式<br>宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">        mod.m3 = function () &#123;</div><div class=\"line\">            console.log(&quot;m3&quot;)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        return mod;</div><div class=\"line\">    &#125;)(window.module1 || &#123;&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    module1.m3()</div></pre></td></tr></table></figure>\n<p>在放大模式中，如果没有上面定义<code>module1</code>模块时，是会报错的，经过改进，就算在执行这段代码的时候，<code>module1</code>  即使没有定义也不会报错，也会创建<code>module1.m3()</code>这个公有方法</p>\n<p>在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript</p>\n<h1 id=\"为什么使用模块化的js\"><a href=\"#为什么使用模块化的js\" class=\"headerlink\" title=\"为什么使用模块化的js\"></a>为什么使用模块化的js</h1><p>使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）</p>\n<ol>\n<li>命名冲突，是不是有点同感了！！！<br>闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题<br><strong>通过export暴露接口，不需要命名空间，不需要全局变量</strong></li>\n<li>文件依赖<br>文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！<br><strong>js模块化的解决方式是使用require引入依赖，使依赖内置</strong>，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。</li>\n</ol>\n<h1 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h1><p>为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的</p>\n<h2 id=\"什么是commonJS\"><a href=\"#什么是commonJS\" class=\"headerlink\" title=\"什么是commonJS\"></a>什么是commonJS</h2><p>commonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）</p>\n<h2 id=\"使用commonJS编写node\"><a href=\"#使用commonJS编写node\" class=\"headerlink\" title=\"使用commonJS编写node\"></a>使用commonJS编写node</h2><p>以下是node写模块化的一个示例：</p>\n<ol>\n<li>math.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.add = function() &#123;</div><div class=\"line\">    var sum = 0, i = 0, args = arguments, l = args.length;</div><div class=\"line\">    while (i &lt; l) &#123;</div><div class=\"line\">        sum += args[i++];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>increment.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var add = require(&apos;math&apos;).add;</div><div class=\"line\">exports.increment = function(val) &#123;</div><div class=\"line\">    return add(val, 1);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>main.js，该文件为入口文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var inc = require(&apos;increment&apos;).increment;</div><div class=\"line\">var a = 1;</div><div class=\"line\">inc(a); // 2</div></pre></td></tr></table></figure>\n<p>从上述代码可以看到：</p>\n<ul>\n<li>node要求一个js文件对应一个模块。</li>\n<li>使用exports导出API</li>\n<li>使用require加载其它模块</li>\n</ul>\n<h2 id=\"commonJS的缺点\"><a href=\"#commonJS的缺点\" class=\"headerlink\" title=\"commonJS的缺点\"></a>commonJS的缺点</h2><p>因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的</p>\n<ol>\n<li>服务器端的js模块就在本地，浏览器端则需要通过网络请求</li>\n<li>服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多</li>\n</ol>\n<p>如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = require(&quot;event&quot;);</div><div class=\"line\"> </div><div class=\"line\">event.bind(el, &apos;click&apos;, function() &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>event.bind(el, &#39;click&#39;, function()</code>，在第一行require(“event”)之后运行，因此必须等<code>event</code>加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<blockquote>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>\n</blockquote>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>基于上述两点的commcommonJS的缺点，AMD就孕育而生，</p>\n<h2 id=\"什么是AMD\"><a href=\"#什么是AMD\" class=\"headerlink\" title=\"什么是AMD\"></a>什么是AMD</h2><p>AMD可以理解为异步模块定义，可以认为是浏览器中的模块规范</p>\n<blockquote>\n<p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n</blockquote>\n<p>为什么说AMD可以解决commonJS在浏览器上的不足呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　require([&apos;math&apos;], function (math) &#123;</div><div class=\"line\">　　　　math.add(2, 3);</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>\n<p>AMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>id: 模块标识，可以省略。</li>\n<li>dependencies: 所依赖的模块，可以省略。</li>\n<li>factory: 模块的实现，或者一个JavaScript对象。</li>\n<li>id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。</li>\n</ul>\n<h2 id=\"简单的AMD模式应用\"><a href=\"#简单的AMD模式应用\" class=\"headerlink\" title=\"简单的AMD模式应用\"></a>简单的AMD模式应用</h2><p>以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）<br><code>base.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        mix: function(source, target) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>ui.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;base&apos;], function(base) &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        show: function() &#123;</div><div class=\"line\">            // todo with module base</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>`page.js``<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;data&apos;, &apos;ui&apos;], function(data, ui) &#123;</div><div class=\"line\">    // init here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>data.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">    users: [],</div><div class=\"line\">    members: []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上同时演示了define的三种用法</p>\n<ul>\n<li>定义无依赖的模块（base.js）</li>\n<li>定义有依赖的模块（ui.js，page.js）</li>\n<li>定义数据对象模块（data.js）</li>\n</ul>\n<p>以上的id参数都为空，这是为什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&apos;index&apos;, [&apos;data&apos;,&apos;base&apos;], function(data, base) &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。</p>\n<p>更多请阅读：</p>\n<ul>\n<li><a href=\"http://www.tuicool.com/articles/rqEjEv\" target=\"_blank\" rel=\"external\">浅谈模块化的JavaScript</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html\" target=\"_blank\" rel=\"external\">JavaScript模块化开发库之SeaJS</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html\" target=\"_blank\" rel=\"external\">Node.js模块风格在浏览器中的尝试</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html\" target=\"_blank\" rel=\"external\">JavaScript中模块写法</a></li>\n<li><a href=\"http://caibaojian.com/toutiao/6090\" target=\"_blank\" rel=\"external\">JavaScript中的AMD和CMD模块化</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com\" target=\"_blank\" rel=\"external\">CMD 模块定义规范</a></li>\n<li><a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/\" target=\"_blank\" rel=\"external\">JavaScript模块化开发（四）——RequireJS</a></li>\n<li><a href=\"http://note.youdao.com/\" target=\"_blank\" rel=\"external\">Javascript模块化编程</a></li>\n</ul>\n","excerpt":"<p>在看了一下午的文章之后，我大概对js模块化有了一定的了解。现在来回顾和记录一下javascrip的模块化发展史，主要是commonJS、AMD和应用AMD的requireJS、CMD和应用CMD的seaJS（不过现在seaJS貌似用的人挺少的，就不详细说明了）<br>","more":"</p>\n<h1 id=\"js在发展过程\"><a href=\"#js在发展过程\" class=\"headerlink\" title=\"js在发展过程\"></a>js在发展过程</h1><p>有几个阶段：<br>过程式的JavaScript→面向对象的javascript→面相模块的javascript</p>\n<ol>\n<li>原始写法：<br>模块就是实现特定功能的一组写法：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">function m1()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function m2()&#123;</div><div class=\"line\">    //do something</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的m1和m2构成了一个模块，使用的时候直接调用就可以了。</p>\n<p>这种做法的缺点是：“污染”了全局变量，无法保证不与其他的模块中的变量发生冲突，并且模块之间看不出直接的关系</p>\n<ol>\n<li>对象写法<br>这时已经发展到了第二个阶段了，面向对象的javascript，这时就就是我们所熟悉的面向对象的编程思想了，继承、原型、闭包等都是面向对象的内容</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = new Object(&#123;</div><div class=\"line\">        _count:0,</div><div class=\"line\"></div><div class=\"line\">        m1 : function () &#123;</div><div class=\"line\">            console.log(module1._count)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        m2 : function () &#123;</div><div class=\"line\">            for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">                module1._count += i;</div><div class=\"line\">                console.log(module1._count)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    module1.m1();</div><div class=\"line\">    module1.m2();</div><div class=\"line\">    module1._count=5;</div><div class=\"line\">    console.log(module1._count)</div></pre></td></tr></table></figure>\n<p>上面的函数m1和m2都封装在module1对象中，使用的时候，直接调用这个对象的属性就可以了<code>module1.m1()</code>,<br>但是这样写会暴露所有的模块成员，内部状态可以被外部改变。比如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module1._count = 5;   //外部代码可以直接改变内部计数器的值</div></pre></td></tr></table></figure>\n<ol>\n<li>立即执行函数写法<br>这种写法可以达到不暴露私有成员的目的</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function () &#123;</div><div class=\"line\">     var _count = 0;</div><div class=\"line\">     var m1 = function () &#123;</div><div class=\"line\">         console.log(_count)</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     var m2 = function () &#123;</div><div class=\"line\">         for(var i=0;i&lt;5;i++)&#123;</div><div class=\"line\">             _count += i;</div><div class=\"line\">             console.log(_count)</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;;</div><div class=\"line\"></div><div class=\"line\">     return&#123;</div><div class=\"line\">         r1 : m1,</div><div class=\"line\">         r2 : m2,</div><div class=\"line\">     &#125;</div><div class=\"line\"> &#125;)();</div><div class=\"line\"></div><div class=\"line\"> module1.r1();   //0</div><div class=\"line\"> module1.r2();</div><div class=\"line\"> console.log(module1._count)  //undefined</div></pre></td></tr></table></figure>\n<p>这里只能通过return的函数名来调用函数，达到了包装函数的作用<br>这里还运用了闭包的思想，在函数<code>module1</code>的外部调用了函数内的变量<code>_count</code></p>\n<h2 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h2><p>闭包就是能够读取其他函数内部变量的函数，在这个例子中，m1就是一个闭包的例子，在m1中引用了module的局部变量<code>_count</code>,然后在<code>module1</code>的<code>return</code>中又将m1作为返回值，这样就可以在<code>module1</code>的外部访问<code>module1</code>中的局部变量<code>_count</code></p>\n<ol>\n<li>放大模式<br>如果一个模块很大，必须分成几个部分，或者一个模块需要继承另一个模块，这时就有必要采用“放大模式”(将原有的模块扩充，达到放大的目的。实则就是给模块添加新的方法)</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = function () &#123;</div><div class=\"line\">    console.log(&quot;原module1模块&quot;)</div><div class=\"line\">&#125;</div><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">    mod.m3 = function () &#123;</div><div class=\"line\">        console.log(&quot;m3&quot;)</div><div class=\"line\">    &#125;;</div><div class=\"line\">    return mod;</div><div class=\"line\">&#125;)(module1);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">module1.m3()</div></pre></td></tr></table></figure>\n<p>在大型项目中我们是不能将所有的js都放在一个文件夹下的，这样就可以使用<strong>方法模式</strong>来实现。首先，我们导入一个模块，并为它添加属性，最后再导出他，这样就将原来的函数<code>module1</code>“放大”</p>\n<p>在执行完这段代码之后，我们的模块就可以拥有一个新的 <code>module1.m3</code>的公有方法，这个放大文件也会维护它自己的私有内置状态和导入的对象</p>\n<ol>\n<li>宽放大模式<br>宽放大就是为了解决放大模式的缺点的，放大模式有一个致命的缺点就是不确定加载顺序，可能加载一个不存在空对象</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var module1 = (function (mod)&#123;</div><div class=\"line\">        mod.m3 = function () &#123;</div><div class=\"line\">            console.log(&quot;m3&quot;)</div><div class=\"line\">        &#125;;</div><div class=\"line\">        return mod;</div><div class=\"line\">    &#125;)(window.module1 || &#123;&#125;);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">    module1.m3()</div></pre></td></tr></table></figure>\n<p>在放大模式中，如果没有上面定义<code>module1</code>模块时，是会报错的，经过改进，就算在执行这段代码的时候，<code>module1</code>  即使没有定义也不会报错，也会创建<code>module1.m3()</code>这个公有方法</p>\n<p>在经历了这些阶段，我们现在的主流js编程方式是面相模块的javascript</p>\n<h1 id=\"为什么使用模块化的js\"><a href=\"#为什么使用模块化的js\" class=\"headerlink\" title=\"为什么使用模块化的js\"></a>为什么使用模块化的js</h1><p>使用模块化的javascript主要是为了解决两个问题（个人理解，以下均是，欢迎指正(＾－＾)V）</p>\n<ol>\n<li>命名冲突，是不是有点同感了！！！<br>闭包作用域和命名空间其实已经解决了这个问题了，但是js模块化更加优雅的解决了这个问题<br><strong>通过export暴露接口，不需要命名空间，不需要全局变量</strong></li>\n<li>文件依赖<br>文件的加载顺序很重要啊有没有，一不小心就犯错了，还是很不好找原因啊！<br><strong>js模块化的解决方式是使用require引入依赖，使依赖内置</strong>，开发者只需关心当前模块的依赖，其他事情 SeaJS都会自动处理好。对模块开发者来说，这是一种很好的 关注度分离 ，能让程序员更多地享受编码的乐趣。</li>\n</ol>\n<h1 id=\"commonJS\"><a href=\"#commonJS\" class=\"headerlink\" title=\"commonJS\"></a>commonJS</h1><p>为了解决上述的两个问题，commonJS就出现了，node应该是将commonJS运用的最出名的</p>\n<h2 id=\"什么是commonJS\"><a href=\"#什么是commonJS\" class=\"headerlink\" title=\"什么是commonJS\"></a>什么是commonJS</h2><p>commonJS就是一套javascript使用模块化的规范，原本是想统一服务器端和浏览器，所以起名叫做commonJS，但是commonJS在浏览器上使用有诸多不便，所以诞生了AMD（稍后详细说明）</p>\n<h2 id=\"使用commonJS编写node\"><a href=\"#使用commonJS编写node\" class=\"headerlink\" title=\"使用commonJS编写node\"></a>使用commonJS编写node</h2><p>以下是node写模块化的一个示例：</p>\n<ol>\n<li>math.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">exports.add = function() &#123;</div><div class=\"line\">    var sum = 0, i = 0, args = arguments, l = args.length;</div><div class=\"line\">    while (i &lt; l) &#123;</div><div class=\"line\">        sum += args[i++];</div><div class=\"line\">    &#125;</div><div class=\"line\">    return sum;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>increment.js</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var add = require(&apos;math&apos;).add;</div><div class=\"line\">exports.increment = function(val) &#123;</div><div class=\"line\">    return add(val, 1);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ol>\n<li>main.js，该文件为入口文件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var inc = require(&apos;increment&apos;).increment;</div><div class=\"line\">var a = 1;</div><div class=\"line\">inc(a); // 2</div></pre></td></tr></table></figure>\n<p>从上述代码可以看到：</p>\n<ul>\n<li>node要求一个js文件对应一个模块。</li>\n<li>使用exports导出API</li>\n<li>使用require加载其它模块</li>\n</ul>\n<h2 id=\"commonJS的缺点\"><a href=\"#commonJS的缺点\" class=\"headerlink\" title=\"commonJS的缺点\"></a>commonJS的缺点</h2><p>因为node也可以进行服务器端的编程，那么使用commonJS写模块是不是就可以前后端兼顾呢，事与愿违，commonJS在浏览器的支持还是有很多不足的</p>\n<ol>\n<li>服务器端的js模块就在本地，浏览器端则需要通过网络请求</li>\n<li>服务器端可以很容易进行同步或异步请求模块，浏览器则问题多多</li>\n</ol>\n<p>如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var event = require(&quot;event&quot;);</div><div class=\"line\"> </div><div class=\"line\">event.bind(el, &apos;click&apos;, function() &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>event.bind(el, &#39;click&#39;, function()</code>，在第一行require(“event”)之后运行，因此必须等<code>event</code>加载完成。也就是说，如果加载时间很长，整个应用就会停在那里等。</p>\n<blockquote>\n<p>这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，浏览器处于”假死”状态。<br>因此，浏览器端的模块，不能采用”同步加载”（synchronous），只能采用”异步加载”（asynchronous）。这就是AMD规范诞生的背景。</p>\n</blockquote>\n<h1 id=\"AMD\"><a href=\"#AMD\" class=\"headerlink\" title=\"AMD\"></a>AMD</h1><p>基于上述两点的commcommonJS的缺点，AMD就孕育而生，</p>\n<h2 id=\"什么是AMD\"><a href=\"#什么是AMD\" class=\"headerlink\" title=\"什么是AMD\"></a>什么是AMD</h2><p>AMD可以理解为异步模块定义，可以认为是浏览器中的模块规范</p>\n<blockquote>\n<p>AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p>\n</blockquote>\n<p>为什么说AMD可以解决commonJS在浏览器上的不足呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　require([&apos;math&apos;], function (math) &#123;</div><div class=\"line\">　　　　math.add(2, 3);</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>math.add()与math模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p>\n<p>AMD只有一个简洁的API，是的，只有一句API！！！并且其中的两个参数都是可选的！！！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(id?, dependencies?, factory);</div></pre></td></tr></table></figure>\n<p>其中：</p>\n<ul>\n<li>id: 模块标识，可以省略。</li>\n<li>dependencies: 所依赖的模块，可以省略。</li>\n<li>factory: 模块的实现，或者一个JavaScript对象。</li>\n<li>id遵循CommonJS Module Identifiers 。dependencies元素的顺序和factory参数一一对应。</li>\n</ul>\n<h2 id=\"简单的AMD模式应用\"><a href=\"#简单的AMD模式应用\" class=\"headerlink\" title=\"简单的AMD模式应用\"></a>简单的AMD模式应用</h2><p>以下是使用AMD模式开发的简单的三层结构（基础库/UI层/应用层）<br><code>base.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        mix: function(source, target) &#123;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><code>ui.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;base&apos;], function(base) &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">        show: function() &#123;</div><div class=\"line\">            // todo with module base</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>`page.js``<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([&apos;data&apos;, &apos;ui&apos;], function(data, ui) &#123;</div><div class=\"line\">    // init here</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p><code>data.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&#123;</div><div class=\"line\">    users: [],</div><div class=\"line\">    members: []</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>以上同时演示了define的三种用法</p>\n<ul>\n<li>定义无依赖的模块（base.js）</li>\n<li>定义有依赖的模块（ui.js，page.js）</li>\n<li>定义数据对象模块（data.js）</li>\n</ul>\n<p>以上的id参数都为空，这是为什么呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(&apos;index&apos;, [&apos;data&apos;,&apos;base&apos;], function(data, base) &#123;</div><div class=\"line\">    // todo</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这种具名函数是不推荐的，一般由打包工具合并多个模块到一个js文件中时使用。</p>\n<p>更多请阅读：</p>\n<ul>\n<li><a href=\"http://www.tuicool.com/articles/rqEjEv\">浅谈模块化的JavaScript</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/30/2423612.html\">JavaScript模块化开发库之SeaJS</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/09/2386092.html\">Node.js模块风格在浏览器中的尝试</a></li>\n<li><a href=\"http://www.cnblogs.com/snandy/archive/2012/03/08/2378441.html\">JavaScript中模块写法</a></li>\n<li><a href=\"http://caibaojian.com/toutiao/6090\">JavaScript中的AMD和CMD模块化</a></li>\n<li><a href=\"https://github.com/seajs/seajs/issues/242?utm_source=caibaojian.com\">CMD 模块定义规范</a></li>\n<li><a href=\"http://www.feeldesignstudio.com/2013/09/javascript-module-pattern-requirejs/\">JavaScript模块化开发（四）——RequireJS</a></li>\n<li><a href=\"http://note.youdao.com/\">Javascript模块化编程</a></li>\n</ul>"},{"layout":"w","title":"javascript设计模式（四）：工厂模式","date":"2017-03-26T14:01:41.000Z","_content":"\n我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。\n<!--more-->\n## 使用工厂模式\n下面通过使用构造器模式逻辑来定义一个汽车。\n```\n// Types.js - Constructors used behind the scenes\n\n// A constructor for defining new cars\nfunction Car( options ) {\n\n  // some defaults\n  this.doors = options.doors || 4;\n  this.state = options.state || \"brand new\";\n  this.color = options.color || \"silver\";\n\n}\n\n// A constructor for defining new trucks\nfunction Truck( options){\n\n  this.state = options.state || \"used\";\n  this.wheelSize = options.wheelSize || \"large\";\n  this.color = options.color || \"blue\";\n}\n\n// FactoryExample.js\n\n// Define a skeleton vehicle factory\nfunction VehicleFactory() {}\n\n// Define the prototypes and utilities for this factory\n\n// Our default vehicleClass is Car\nVehicleFactory.prototype.vehicleClass = Car;\n\n// Our Factory method for creating new Vehicle instances\nVehicleFactory.prototype.createVehicle = function ( options ) {\n\n  if( options.vehicleType === \"car\" ){\n    this.vehicleClass = Car;\n  }else{\n    this.vehicleClass = Truck;\n  }\n\n  return new this.vehicleClass( options );\n\n};\n\n// Create an instance of our factory that makes cars\nvar carFactory = new VehicleFactory();\nvar car = carFactory.createVehicle( {\n            vehicleType: \"car\",\n            color: \"yellow\",\n            doors: 6 } );\n\n// Test to confirm our car was created using the vehicleClass/prototype Car\n\n// Outputs: true\nconsole.log( car instanceof Car );\n\n// Outputs: Car object of color \"yellow\", doors: 6 in a \"brand new\" state\nconsole.log( car );\n```\n在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法\n\n然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，","source":"_posts/JavaScript-Design-Pattern4factory-mode.md","raw":"layout: w\ntitle: javascript设计模式（四）：工厂模式\ndate: 2017-03-26 22:01:41\ntags: [js,js设计模式] \ncategories: js\n---\n\n我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。\n<!--more-->\n## 使用工厂模式\n下面通过使用构造器模式逻辑来定义一个汽车。\n```\n// Types.js - Constructors used behind the scenes\n\n// A constructor for defining new cars\nfunction Car( options ) {\n\n  // some defaults\n  this.doors = options.doors || 4;\n  this.state = options.state || \"brand new\";\n  this.color = options.color || \"silver\";\n\n}\n\n// A constructor for defining new trucks\nfunction Truck( options){\n\n  this.state = options.state || \"used\";\n  this.wheelSize = options.wheelSize || \"large\";\n  this.color = options.color || \"blue\";\n}\n\n// FactoryExample.js\n\n// Define a skeleton vehicle factory\nfunction VehicleFactory() {}\n\n// Define the prototypes and utilities for this factory\n\n// Our default vehicleClass is Car\nVehicleFactory.prototype.vehicleClass = Car;\n\n// Our Factory method for creating new Vehicle instances\nVehicleFactory.prototype.createVehicle = function ( options ) {\n\n  if( options.vehicleType === \"car\" ){\n    this.vehicleClass = Car;\n  }else{\n    this.vehicleClass = Truck;\n  }\n\n  return new this.vehicleClass( options );\n\n};\n\n// Create an instance of our factory that makes cars\nvar carFactory = new VehicleFactory();\nvar car = carFactory.createVehicle( {\n            vehicleType: \"car\",\n            color: \"yellow\",\n            doors: 6 } );\n\n// Test to confirm our car was created using the vehicleClass/prototype Car\n\n// Outputs: true\nconsole.log( car instanceof Car );\n\n// Outputs: Car object of color \"yellow\", doors: 6 in a \"brand new\" state\nconsole.log( car );\n```\n在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法\n\n然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，","slug":"JavaScript-Design-Pattern4factory-mode","published":1,"updated":"2017-03-26T14:02:49.912Z","comments":1,"photos":[],"link":"","_id":"cj1jcel2r0014qkyf29ztusje","content":"<p>我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。<br><a id=\"more\"></a></p>\n<h2 id=\"使用工厂模式\"><a href=\"#使用工厂模式\" class=\"headerlink\" title=\"使用工厂模式\"></a>使用工厂模式</h2><p>下面通过使用构造器模式逻辑来定义一个汽车。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Types.js - Constructors used behind the scenes</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new cars</div><div class=\"line\">function Car( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  // some defaults</div><div class=\"line\">  this.doors = options.doors || 4;</div><div class=\"line\">  this.state = options.state || &quot;brand new&quot;;</div><div class=\"line\">  this.color = options.color || &quot;silver&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new trucks</div><div class=\"line\">function Truck( options)&#123;</div><div class=\"line\"></div><div class=\"line\">  this.state = options.state || &quot;used&quot;;</div><div class=\"line\">  this.wheelSize = options.wheelSize || &quot;large&quot;;</div><div class=\"line\">  this.color = options.color || &quot;blue&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// FactoryExample.js</div><div class=\"line\"></div><div class=\"line\">// Define a skeleton vehicle factory</div><div class=\"line\">function VehicleFactory() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// Define the prototypes and utilities for this factory</div><div class=\"line\"></div><div class=\"line\">// Our default vehicleClass is Car</div><div class=\"line\">VehicleFactory.prototype.vehicleClass = Car;</div><div class=\"line\"></div><div class=\"line\">// Our Factory method for creating new Vehicle instances</div><div class=\"line\">VehicleFactory.prototype.createVehicle = function ( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  if( options.vehicleType === &quot;car&quot; )&#123;</div><div class=\"line\">    this.vehicleClass = Car;</div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\">    this.vehicleClass = Truck;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return new this.vehicleClass( options );</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Create an instance of our factory that makes cars</div><div class=\"line\">var carFactory = new VehicleFactory();</div><div class=\"line\">var car = carFactory.createVehicle( &#123;</div><div class=\"line\">            vehicleType: &quot;car&quot;,</div><div class=\"line\">            color: &quot;yellow&quot;,</div><div class=\"line\">            doors: 6 &#125; );</div><div class=\"line\"></div><div class=\"line\">// Test to confirm our car was created using the vehicleClass/prototype Car</div><div class=\"line\"></div><div class=\"line\">// Outputs: true</div><div class=\"line\">console.log( car instanceof Car );</div><div class=\"line\"></div><div class=\"line\">// Outputs: Car object of color &quot;yellow&quot;, doors: 6 in a &quot;brand new&quot; state</div><div class=\"line\">console.log( car );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法</p>\n<p>然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，</p>\n","excerpt":"<p>我理解的工厂模式就是我们自己先创造一个工厂，里面可以生成好多组件，比如说我的工厂可以生产小轿车也可以生成大卡车，那么当我需要用小轿车的时候就给我的工厂说我需要小轿车，然后它就可以给你生成一个小轿车。<br>","more":"</p>\n<h2 id=\"使用工厂模式\"><a href=\"#使用工厂模式\" class=\"headerlink\" title=\"使用工厂模式\"></a>使用工厂模式</h2><p>下面通过使用构造器模式逻辑来定义一个汽车。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\">// Types.js - Constructors used behind the scenes</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new cars</div><div class=\"line\">function Car( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  // some defaults</div><div class=\"line\">  this.doors = options.doors || 4;</div><div class=\"line\">  this.state = options.state || &quot;brand new&quot;;</div><div class=\"line\">  this.color = options.color || &quot;silver&quot;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// A constructor for defining new trucks</div><div class=\"line\">function Truck( options)&#123;</div><div class=\"line\"></div><div class=\"line\">  this.state = options.state || &quot;used&quot;;</div><div class=\"line\">  this.wheelSize = options.wheelSize || &quot;large&quot;;</div><div class=\"line\">  this.color = options.color || &quot;blue&quot;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// FactoryExample.js</div><div class=\"line\"></div><div class=\"line\">// Define a skeleton vehicle factory</div><div class=\"line\">function VehicleFactory() &#123;&#125;</div><div class=\"line\"></div><div class=\"line\">// Define the prototypes and utilities for this factory</div><div class=\"line\"></div><div class=\"line\">// Our default vehicleClass is Car</div><div class=\"line\">VehicleFactory.prototype.vehicleClass = Car;</div><div class=\"line\"></div><div class=\"line\">// Our Factory method for creating new Vehicle instances</div><div class=\"line\">VehicleFactory.prototype.createVehicle = function ( options ) &#123;</div><div class=\"line\"></div><div class=\"line\">  if( options.vehicleType === &quot;car&quot; )&#123;</div><div class=\"line\">    this.vehicleClass = Car;</div><div class=\"line\">  &#125;else&#123;</div><div class=\"line\">    this.vehicleClass = Truck;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  return new this.vehicleClass( options );</div><div class=\"line\"></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">// Create an instance of our factory that makes cars</div><div class=\"line\">var carFactory = new VehicleFactory();</div><div class=\"line\">var car = carFactory.createVehicle( &#123;</div><div class=\"line\">            vehicleType: &quot;car&quot;,</div><div class=\"line\">            color: &quot;yellow&quot;,</div><div class=\"line\">            doors: 6 &#125; );</div><div class=\"line\"></div><div class=\"line\">// Test to confirm our car was created using the vehicleClass/prototype Car</div><div class=\"line\"></div><div class=\"line\">// Outputs: true</div><div class=\"line\">console.log( car instanceof Car );</div><div class=\"line\"></div><div class=\"line\">// Outputs: Car object of color &quot;yellow&quot;, doors: 6 in a &quot;brand new&quot; state</div><div class=\"line\">console.log( car );</div></pre></td></tr></table></figure></p>\n<p>在这个例子中，我们首先定义了两个函数：Car 和 Trucks，这两个类中有Car和Trucks的属性默认值并且也可以自己传入参数，就是相当于造Car和Trucks的方法</p>\n<p>然后我们定义了一个工厂，将创造Car和Trucks 的方法放到工厂里面（通过给VehicleFactory的prototype上增加Car和Trucks方法），默认是要创建一个Car，</p>"},{"title":"Javascript模块化编程（三）：require.js的用法","date":"2017-03-08T15:11:42.000Z","_content":"在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的\n本文的源码在个人的github上：https://github.com/sunshine940326/js-module-demo\n<!--more-->\n首先祭上[requireJS的官方api](http://www.requirejs.cn/docs/start.html)\n# 下载requireJS\n我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：http://www.requirejs.cn/docs/download.html\n\n你可以下载最新版本的`require.js`, `r.js`(node中使用)，以及requireJS的插件：\n1. text\n2. domReady\n3. cs(coffeeScript)\n4. i18n（国际化）\n\n# 在html中引入require.js\n使用requireJS的方法很简单，只需要在html中引入`<script src=\"js/require.js\"  data-main=\"js/main\"  async=\"true\"></script>`就可以，和引入普通的js一样。\n\nasync属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应\n\n`data-main=\"js/main`main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以`.js`文件后缀可以省略\n这个`main.js`就是我们程序的js主入口，会第一个被require加载。和c的`main()`一样\n\n\n我们原来的html的`<head>`中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。\n\n并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n所以requireJS解决了这两个问题：\n1. 实现js文件的异步加载，避免网页失去响应；\n2. 管理模块之间的依赖性，便于代码的编写和维护。\n\n# main.js的编写\n我们试着在`main.js`中加入如下代码：\n\n```\nalert(\"Hello world!\")\n```\n\n打开`index,html`看到弹出“Hello world！”就说明我们的require引用成功\n\n这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文\n\n# math.js模块编写\n现在我们来编写一个求和的模块，然后在`main.js`中依赖该模块\n\n```\n//math.js\ndefine(function(){\n   var add = function(x,y){\n       return x+y'\n       \n   }\n   return{\n       add:add\n   }\n})\n```\n# 加载方式\n```\n//main.js\nrequire(['math'],function(){\n    console.log(math.add(1,2))   //3\n})\n```\n\n如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。\n\nrequire()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。\n\n```\n　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　　　// some code here\n　　});\n```\n默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在`main.js`的头部写一个`require.config()`方法就可以了\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n```\nrequire.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n\n```\n如果某个模块在另一台主机上，也可以直接指定它的网址，比如：\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min\"\n　　　　}\n　　});\n\n```\n\n> require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。\n","source":"_posts/Javascript-modular-programming3requirejs-use.md","raw":"---\ntitle: Javascript模块化编程（三）：require.js的用法\ndate: 2017-03-08 23:11:42\ntags: [js模块化,js]\ncategories: js\n---\n在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的\n本文的源码在个人的github上：https://github.com/sunshine940326/js-module-demo\n<!--more-->\n首先祭上[requireJS的官方api](http://www.requirejs.cn/docs/start.html)\n# 下载requireJS\n我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：http://www.requirejs.cn/docs/download.html\n\n你可以下载最新版本的`require.js`, `r.js`(node中使用)，以及requireJS的插件：\n1. text\n2. domReady\n3. cs(coffeeScript)\n4. i18n（国际化）\n\n# 在html中引入require.js\n使用requireJS的方法很简单，只需要在html中引入`<script src=\"js/require.js\"  data-main=\"js/main\"  async=\"true\"></script>`就可以，和引入普通的js一样。\n\nasync属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应\n\n`data-main=\"js/main`main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以`.js`文件后缀可以省略\n这个`main.js`就是我们程序的js主入口，会第一个被require加载。和c的`main()`一样\n\n\n我们原来的html的`<head>`中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。\n\n并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要\n```\n　　<script src=\"1.js\"></script>\n　　<script src=\"2.js\"></script>\n　　<script src=\"3.js\"></script>\n　　<script src=\"4.js\"></script>\n　　<script src=\"5.js\"></script>\n　　<script src=\"6.js\"></script>\n```\n所以requireJS解决了这两个问题：\n1. 实现js文件的异步加载，避免网页失去响应；\n2. 管理模块之间的依赖性，便于代码的编写和维护。\n\n# main.js的编写\n我们试着在`main.js`中加入如下代码：\n\n```\nalert(\"Hello world!\")\n```\n\n打开`index,html`看到弹出“Hello world！”就说明我们的require引用成功\n\n这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文\n\n# math.js模块编写\n现在我们来编写一个求和的模块，然后在`main.js`中依赖该模块\n\n```\n//math.js\ndefine(function(){\n   var add = function(x,y){\n       return x+y'\n       \n   }\n   return{\n       add:add\n   }\n})\n```\n# 加载方式\n```\n//main.js\nrequire(['math'],function(){\n    console.log(math.add(1,2))   //3\n})\n```\n\n如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。\n\nrequire()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。\n\n```\n　　require(['jquery', 'underscore', 'backbone'], function ($, _, Backbone){\n　　　　// some code here\n　　});\n```\n默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在`main.js`的头部写一个`require.config()`方法就可以了\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n```\n上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"lib/jquery.min\",\n　　　　　　\"underscore\": \"lib/underscore.min\",\n　　　　　　\"backbone\": \"lib/backbone.min\"\n　　　　}\n　　});\n```\n另一种则是直接改变基目录（baseUrl）。\n```\nrequire.config({\n　　　　baseUrl: \"js/lib\",\n　　　　paths: {\n　　　　　　\"jquery\": \"jquery.min\",\n　　　　　　\"underscore\": \"underscore.min\",\n　　　　　　\"backbone\": \"backbone.min\"\n　　　　}\n　　});\n\n```\n如果某个模块在另一台主机上，也可以直接指定它的网址，比如：\n```\n　　require.config({\n　　　　paths: {\n　　　　　　\"jquery\": \"https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min\"\n　　　　}\n　　});\n\n```\n\n> require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。\n","slug":"Javascript-modular-programming3requirejs-use","published":1,"updated":"2017-03-08T15:15:25.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel2r0018qkyf3rfu1ihu","content":"<p>在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的<br>本文的源码在个人的github上：<a href=\"https://github.com/sunshine940326/js-module-demo\" target=\"_blank\" rel=\"external\">https://github.com/sunshine940326/js-module-demo</a><br><a id=\"more\"></a><br>首先祭上<a href=\"http://www.requirejs.cn/docs/start.html\" target=\"_blank\" rel=\"external\">requireJS的官方api</a></p>\n<h1 id=\"下载requireJS\"><a href=\"#下载requireJS\" class=\"headerlink\" title=\"下载requireJS\"></a>下载requireJS</h1><p>我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：<a href=\"http://www.requirejs.cn/docs/download.html\" target=\"_blank\" rel=\"external\">http://www.requirejs.cn/docs/download.html</a></p>\n<p>你可以下载最新版本的<code>require.js</code>, <code>r.js</code>(node中使用)，以及requireJS的插件：</p>\n<ol>\n<li>text</li>\n<li>domReady</li>\n<li>cs(coffeeScript)</li>\n<li>i18n（国际化）</li>\n</ol>\n<h1 id=\"在html中引入require-js\"><a href=\"#在html中引入require-js\" class=\"headerlink\" title=\"在html中引入require.js\"></a>在html中引入require.js</h1><p>使用requireJS的方法很简单，只需要在html中引入<code>&lt;script src=&quot;js/require.js&quot;  data-main=&quot;js/main&quot;  async=&quot;true&quot;&gt;&lt;/script&gt;</code>就可以，和引入普通的js一样。</p>\n<p>async属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应</p>\n<p><code>data-main=&quot;js/main</code>main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以<code>.js</code>文件后缀可以省略<br>这个<code>main.js</code>就是我们程序的js主入口，会第一个被require加载。和c的<code>main()</code>一样</p>\n<p>我们原来的html的<code>&lt;head&gt;</code>中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。</p>\n<p>并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>所以requireJS解决了这两个问题：</p>\n<ol>\n<li>实现js文件的异步加载，避免网页失去响应；</li>\n<li>管理模块之间的依赖性，便于代码的编写和维护。</li>\n</ol>\n<h1 id=\"main-js的编写\"><a href=\"#main-js的编写\" class=\"headerlink\" title=\"main.js的编写\"></a>main.js的编写</h1><p>我们试着在<code>main.js</code>中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&quot;Hello world!&quot;)</div></pre></td></tr></table></figure>\n<p>打开<code>index,html</code>看到弹出“Hello world！”就说明我们的require引用成功</p>\n<p>这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文</p>\n<h1 id=\"math-js模块编写\"><a href=\"#math-js模块编写\" class=\"headerlink\" title=\"math.js模块编写\"></a>math.js模块编写</h1><p>现在我们来编写一个求和的模块，然后在<code>main.js</code>中依赖该模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//math.js</div><div class=\"line\">define(function()&#123;</div><div class=\"line\">   var add = function(x,y)&#123;</div><div class=\"line\">       return x+y&apos;</div><div class=\"line\">       </div><div class=\"line\">   &#125;</div><div class=\"line\">   return&#123;</div><div class=\"line\">       add:add</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js</div><div class=\"line\">require([&apos;math&apos;],function()&#123;</div><div class=\"line\">    console.log(math.add(1,2))   //3</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。</p>\n<p>require()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require([&apos;jquery&apos;, &apos;underscore&apos;, &apos;backbone&apos;], function ($, _, Backbone)&#123;</div><div class=\"line\">　　　　// some code here</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在<code>main.js</code>的头部写一个<code>require.config()</code>方法就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>另一种则是直接改变基目录（baseUrl）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">　　　　baseUrl: &quot;js/lib&quot;,</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</p>\n</blockquote>\n","excerpt":"<p>在简单了介绍了javascript的模块化编程思想之后，我们来写一个简单的requireJS的案例，来了解一下具体是怎么在你的项目中使用requireJS的<br>本文的源码在个人的github上：<a href=\"https://github.com/sunshine940326/js-module-demo\">https://github.com/sunshine940326/js-module-demo</a><br>","more":"<br>首先祭上<a href=\"http://www.requirejs.cn/docs/start.html\">requireJS的官方api</a></p>\n<h1 id=\"下载requireJS\"><a href=\"#下载requireJS\" class=\"headerlink\" title=\"下载requireJS\"></a>下载requireJS</h1><p>我们可以再requireJS的官网上下载最新的reqrequireJS：下载链接：<a href=\"http://www.requirejs.cn/docs/download.html\">http://www.requirejs.cn/docs/download.html</a></p>\n<p>你可以下载最新版本的<code>require.js</code>, <code>r.js</code>(node中使用)，以及requireJS的插件：</p>\n<ol>\n<li>text</li>\n<li>domReady</li>\n<li>cs(coffeeScript)</li>\n<li>i18n（国际化）</li>\n</ol>\n<h1 id=\"在html中引入require-js\"><a href=\"#在html中引入require-js\" class=\"headerlink\" title=\"在html中引入require.js\"></a>在html中引入require.js</h1><p>使用requireJS的方法很简单，只需要在html中引入<code>&lt;script src=&quot;js/require.js&quot;  data-main=&quot;js/main&quot;  async=&quot;true&quot;&gt;&lt;/script&gt;</code>就可以，和引入普通的js一样。</p>\n<p>async属性是html5中的新特性，意为异步加载该js，就是可以不用把这个script标签放在底部，不会使网页失去响应</p>\n<p><code>data-main=&quot;js/main</code>main.js就是我们自己编写的js文件，因为requireJS默认的文件后缀就是js，所以<code>.js</code>文件后缀可以省略<br>这个<code>main.js</code>就是我们程序的js主入口，会第一个被require加载。和c的<code>main()</code>一样</p>\n<p>我们原来的html的<code>&lt;head&gt;</code>中是不是加载了很多的js，因为能同时发出的http请求是有限的，所以在加载的时候网页需要响应的时间变长，浏览器会停止网页的渲染。</p>\n<p>并且这样加载还有一个弊端就是js文件之间存在依赖关系，一定要有一个先后顺序，所以加载顺序很重要<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　&lt;script src=&quot;1.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;2.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;3.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;4.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;5.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">　　&lt;script src=&quot;6.js&quot;&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>\n<p>所以requireJS解决了这两个问题：</p>\n<ol>\n<li>实现js文件的异步加载，避免网页失去响应；</li>\n<li>管理模块之间的依赖性，便于代码的编写和维护。</li>\n</ol>\n<h1 id=\"main-js的编写\"><a href=\"#main-js的编写\" class=\"headerlink\" title=\"main.js的编写\"></a>main.js的编写</h1><p>我们试着在<code>main.js</code>中加入如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">alert(&quot;Hello world!&quot;)</div></pre></td></tr></table></figure>\n<p>打开<code>index,html</code>看到弹出“Hello world！”就说明我们的require引用成功</p>\n<p>这只是初步解决了第一个问题，还没有解决模块的依赖关系，这时候就需要使用AMD规范来定义require()函数，不了解AMD规范的请查看前一篇博文</p>\n<h1 id=\"math-js模块编写\"><a href=\"#math-js模块编写\" class=\"headerlink\" title=\"math.js模块编写\"></a>math.js模块编写</h1><p>现在我们来编写一个求和的模块，然后在<code>main.js</code>中依赖该模块</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">//math.js</div><div class=\"line\">define(function()&#123;</div><div class=\"line\">   var add = function(x,y)&#123;</div><div class=\"line\">       return x+y&apos;</div><div class=\"line\">       </div><div class=\"line\">   &#125;</div><div class=\"line\">   return&#123;</div><div class=\"line\">       add:add</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">//main.js</div><div class=\"line\">require([&apos;math&apos;],function()&#123;</div><div class=\"line\">    console.log(math.add(1,2))   //3</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>如果是加载多个模块，那么require的第一个参数就是一个数组，默认情况下，require.js假定这三个模块与main.js在同一个目录。第二个参数是一个回调函数，当前面指定的模块都加载成功后，它将被调用。加载的模块会已参数的形式传入该参数，从而在回调函数内部就可以使用这些模块。</p>\n<p>require()异步加载各个依赖模块，浏览器不会失去响应，并且指定的回调函数只有在前面的模块都加载成功后才会运行，解决了依赖的问题。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require([&apos;jquery&apos;, &apos;underscore&apos;, &apos;backbone&apos;], function ($, _, Backbone)&#123;</div><div class=\"line\">　　　　// some code here</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure>\n<p>默认情况是依赖模块和主模块在一个目录下，但是我们也可以自定义配置，在<code>main.js</code>的头部写一个<code>require.config()</code>方法就可以了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>上面的代码给出了三个模块的文件名，路径默认与main.js在同一个目录（js子目录）。如果这些模块在其他目录，比如js/lib目录，则有两种写法。一种是逐一指定路径。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;lib/jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;lib/underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;lib/backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>另一种则是直接改变基目录（baseUrl）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">　　　　baseUrl: &quot;js/lib&quot;,</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;jquery.min&quot;,</div><div class=\"line\">　　　　　　&quot;underscore&quot;: &quot;underscore.min&quot;,</div><div class=\"line\">　　　　　　&quot;backbone&quot;: &quot;backbone.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<p>如果某个模块在另一台主机上，也可以直接指定它的网址，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　require.config(&#123;</div><div class=\"line\">　　　　paths: &#123;</div><div class=\"line\">　　　　　　&quot;jquery&quot;: &quot;https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min&quot;</div><div class=\"line\">　　　　&#125;</div><div class=\"line\">　　&#125;);</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>require.js要求，每个模块是一个单独的js文件。这样的话，如果加载多个模块，就会发出多次HTTP请求，会影响网页的加载速度。因此，require.js提供了一个优化工具，当模块部署完毕以后，可以用这个工具将多个模块合并在一个文件中，减少HTTP请求数。</p>\n</blockquote>"},{"title":"移动端调试方法","date":"2017-03-28T15:21:55.000Z","_content":"在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。\n<!--more-->\n# iphone+safari\n之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合\n\n## iphone上设置\n设置 → Safari → 高级 → Web 检查器 → 开。\n![这里写图片描述](http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## pc端safari设置\nSafari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单\n![这里写图片描述](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg)\n\n设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了\n\n![](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg)\n\n# android手机+pc\n安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭\n\n1. 首先需要装chrom浏览器\n2. 打开手机的开发者模式，一般是：设置->关于手机->版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开![](http://img0.tuicool.com/JZjuMnM.png!web)\n3. 将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定![](http://img2.tuicool.com/AbE3E3.png!web)\n4. 在手机chrom上打开要调试的页面\n5. 在电脑上打开chrom，新开一地址栏为`chrome://inspect/`的页面,然后就可以调试了![](http://img0.tuicool.com/IzM7Bnv.png!web)\n6. 点击inspect弹出chrom调试工具\n\n# 微信开发者工具\n由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享\n\n## 前期准备\n这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。\n\n## 官方文档&下载地址\n[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)其中有下载地址\n\n## 模拟微信环境调试\n直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求\n\n## 真机调试\n在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥...\n\n---------------3.29更---------------------\n我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证\n在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png)\n然后根据提示一步一步安装就可以了。\n安装完证书就可以打开网页了\n\n# weinre\n跟着我念三遍weinre大法好，weinre大法好，weinre大法好~\n之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！\n缺点就是配置起来有削微的麻烦~\n## 什么是weinre\nweinre是web inspector remote（远程web检查器）的缩写\n\n## 安装weinre\n目前安装weinre我了解到有两种方式：node和java两种方式\n### node方式安装weinre\n首先确保你的电脑上有node环境，然后使用npm来安装\nwindows下\n`npm install weinre -g --registry=https://registry.npm.taobao.org`\nmac下\n`sudo npm install weinre -g --registry=https://registry.npm.taobao.org`\n### java环境下安装weinre\n首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: https://pan.baidu.com/s/1slRiOl3 密码: dsmp\n\n## 运行weinre\n### node环境下\n`weinre --httpPort 8081 --boundHost -all-`\n`8081`是调试服务器运行的端口号，\n`boundHost`是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具\n### java环境下\n在weinre所在文件夹的地址栏输入代码：`java -jar weinre.jar --httpPort 8081 --boundHost -all-`\n![](http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png)\n\n## 开始调试\n设置好端口之后我们在本地打开`http://192.168.0.126:8081`然后就可以看见weinre的基本信息\n![](http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif)\n\n之后我们需要在需要调试的页面上加上一段script标签\n`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n需要改为你自己的ip地址\n### ip的查询方式\n在cmd输入`ipconfig`，然后ipv4中后面跟的就是本机的ip地址\n\n## 手机打开需要调试的链接\n### 在staticWebDir目录下\n本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：`C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web`，然后手机访问:`http://192.168.0.126/contact_page/index.html`，然后在电脑上打开刚刚的页面`http://196.168.0.126:8081`![](http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png)点击`debug client user interface`之后出现\n![](http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png)，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的`elements`和其他的tag就可以进行调试\n\n### 在xampp下\n因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。\n项目存放的地址是`xampp\\htdocs\\app`\n修改配置：\n`C:\\Windows\\System32\\drivers\\etc\\hosts`文件下\n最后一行\n`127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com`\n然后在`C:\\xampp\\apache\\conf\\extra`文件里面修改\n```\n<VirtualHost *:80>\n    DocumentRoot \"C:\\xampp\\htdocs\\ltrip\"\n    ServerName ltrip.com \n    ServerAlias \n  <Directory \"C:\\xampp\\htdocs\\ltrip\">\n      Options FollowSymLinks ExecCGI\n      AllowOverride All\n      Order allow,deny\n      Allow from all\n      Require all granted\n  </Directory>\n</VirtualHost>\n```\n其中的`ServerName ltrip.com `中的`ltrip.com`就代替了` \"C:\\xampp\\htdocs\\ltrip\"`这个路径，\n所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:`http://192.168.0.168/ltrip.com`\n### 使用wenstorm\n在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如`file:///C:/Users/supfn/Desktop/contact_page/index.html`这样子的，在手机肯定访问不到我的电脑上的路径。\n这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。\nwebstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~\n简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器\n# 使用Fiddle抓包\n如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~\nfiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了\n## 下载fiddler\nFiddler 下载地址 ：https://www.telerik.com/download/fiddler\nFiddler 离线下载地址：http://pan.baidu.com/s/1i3NvE8P 密码：ozem\n## 使用fiddler抓取数据包\n在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888\n在fiddler上，点击菜单栏中的 [Tools] –> [Fiddler Options]\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png)\n 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK\n ![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png)\n## 使用weinre与fiddler组合\n我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签\n在完成配置之后打开要调试的链接，然后在fiddler中设置断点\n我们在fiddler中打下页面断点,bpafter + 想要打断点的网址![](http://img1.tuicool.com/Uvii2aN.png!web)\n再次访问该网站，发现本条请求被block住了\n![这里写图片描述](http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在右边加上weinre需要的script标签`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~\n\n参考文章\n- [Fiddler 抓包工具总结](http://blog.csdn.net/qq_21445563/article/details/51017605)\n- [移动端调试工具weinre安装教程（java版）](http://www.cnblogs.com/jhyxk2007/p/5089997.html)\n- [聊一聊移动调试那些事儿](http://www.tuicool.com/articles/MbYz6fA)","source":"_posts/Mobile-terminal-debugging-method.md","raw":"---\ntitle: 移动端调试方法\ndate: 2017-03-28 23:21:55\ntags: [调试] \ncategories: 日积月累\n---\n在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。\n<!--more-->\n# iphone+safari\n之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合\n\n## iphone上设置\n设置 → Safari → 高级 → Web 检查器 → 开。\n![这里写图片描述](http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## pc端safari设置\nSafari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单\n![这里写图片描述](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg)\n\n设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了\n\n![](http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg)\n\n# android手机+pc\n安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭\n\n1. 首先需要装chrom浏览器\n2. 打开手机的开发者模式，一般是：设置->关于手机->版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开![](http://img0.tuicool.com/JZjuMnM.png!web)\n3. 将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定![](http://img2.tuicool.com/AbE3E3.png!web)\n4. 在手机chrom上打开要调试的页面\n5. 在电脑上打开chrom，新开一地址栏为`chrome://inspect/`的页面,然后就可以调试了![](http://img0.tuicool.com/IzM7Bnv.png!web)\n6. 点击inspect弹出chrom调试工具\n\n# 微信开发者工具\n由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享\n\n## 前期准备\n这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。\n\n## 官方文档&下载地址\n[官方文档](https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1455784140&token=&lang=zh_CN)其中有下载地址\n\n## 模拟微信环境调试\n直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求\n\n## 真机调试\n在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥...\n\n---------------3.29更---------------------\n我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证\n在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png)\n然后根据提示一步一步安装就可以了。\n安装完证书就可以打开网页了\n\n# weinre\n跟着我念三遍weinre大法好，weinre大法好，weinre大法好~\n之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！\n缺点就是配置起来有削微的麻烦~\n## 什么是weinre\nweinre是web inspector remote（远程web检查器）的缩写\n\n## 安装weinre\n目前安装weinre我了解到有两种方式：node和java两种方式\n### node方式安装weinre\n首先确保你的电脑上有node环境，然后使用npm来安装\nwindows下\n`npm install weinre -g --registry=https://registry.npm.taobao.org`\nmac下\n`sudo npm install weinre -g --registry=https://registry.npm.taobao.org`\n### java环境下安装weinre\n首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: https://pan.baidu.com/s/1slRiOl3 密码: dsmp\n\n## 运行weinre\n### node环境下\n`weinre --httpPort 8081 --boundHost -all-`\n`8081`是调试服务器运行的端口号，\n`boundHost`是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具\n### java环境下\n在weinre所在文件夹的地址栏输入代码：`java -jar weinre.jar --httpPort 8081 --boundHost -all-`\n![](http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png)\n\n## 开始调试\n设置好端口之后我们在本地打开`http://192.168.0.126:8081`然后就可以看见weinre的基本信息\n![](http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif)\n\n之后我们需要在需要调试的页面上加上一段script标签\n`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n需要改为你自己的ip地址\n### ip的查询方式\n在cmd输入`ipconfig`，然后ipv4中后面跟的就是本机的ip地址\n\n## 手机打开需要调试的链接\n### 在staticWebDir目录下\n本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：`C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web`，然后手机访问:`http://192.168.0.126/contact_page/index.html`，然后在电脑上打开刚刚的页面`http://196.168.0.126:8081`![](http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png)点击`debug client user interface`之后出现\n![](http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png)，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的`elements`和其他的tag就可以进行调试\n\n### 在xampp下\n因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。\n项目存放的地址是`xampp\\htdocs\\app`\n修改配置：\n`C:\\Windows\\System32\\drivers\\etc\\hosts`文件下\n最后一行\n`127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com`\n然后在`C:\\xampp\\apache\\conf\\extra`文件里面修改\n```\n<VirtualHost *:80>\n    DocumentRoot \"C:\\xampp\\htdocs\\ltrip\"\n    ServerName ltrip.com \n    ServerAlias \n  <Directory \"C:\\xampp\\htdocs\\ltrip\">\n      Options FollowSymLinks ExecCGI\n      AllowOverride All\n      Order allow,deny\n      Allow from all\n      Require all granted\n  </Directory>\n</VirtualHost>\n```\n其中的`ServerName ltrip.com `中的`ltrip.com`就代替了` \"C:\\xampp\\htdocs\\ltrip\"`这个路径，\n所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:`http://192.168.0.168/ltrip.com`\n### 使用wenstorm\n在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如`file:///C:/Users/supfn/Desktop/contact_page/index.html`这样子的，在手机肯定访问不到我的电脑上的路径。\n这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。\nwebstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~\n简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器\n# 使用Fiddle抓包\n如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~\nfiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了\n## 下载fiddler\nFiddler 下载地址 ：https://www.telerik.com/download/fiddler\nFiddler 离线下载地址：http://pan.baidu.com/s/1i3NvE8P 密码：ozem\n## 使用fiddler抓取数据包\n在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888\n在fiddler上，点击菜单栏中的 [Tools] –> [Fiddler Options]\n![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png)\n 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK\n ![](http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png)\n## 使用weinre与fiddler组合\n我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签\n在完成配置之后打开要调试的链接，然后在fiddler中设置断点\n我们在fiddler中打下页面断点,bpafter + 想要打断点的网址![](http://img1.tuicool.com/Uvii2aN.png!web)\n再次访问该网站，发现本条请求被block住了\n![这里写图片描述](http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n然后在右边加上weinre需要的script标签`<script src=\"http://192.168.0.126:8081/target/target-script-min.js#anonymous\"></script>`\n然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~\n\n参考文章\n- [Fiddler 抓包工具总结](http://blog.csdn.net/qq_21445563/article/details/51017605)\n- [移动端调试工具weinre安装教程（java版）](http://www.cnblogs.com/jhyxk2007/p/5089997.html)\n- [聊一聊移动调试那些事儿](http://www.tuicool.com/articles/MbYz6fA)","slug":"Mobile-terminal-debugging-method","published":1,"updated":"2017-03-29T15:02:35.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel37001bqkyfaf5b3ml8","content":"<p>在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。<br><a id=\"more\"></a></p>\n<h1 id=\"iphone-safari\"><a href=\"#iphone-safari\" class=\"headerlink\" title=\"iphone+safari\"></a>iphone+safari</h1><p>之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合</p>\n<h2 id=\"iphone上设置\"><a href=\"#iphone上设置\" class=\"headerlink\" title=\"iphone上设置\"></a>iphone上设置</h2><p>设置 → Safari → 高级 → Web 检查器 → 开。<br><img src=\"http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"pc端safari设置\"><a href=\"#pc端safari设置\" class=\"headerlink\" title=\"pc端safari设置\"></a>pc端safari设置</h2><p>Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单<br><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg\" alt=\"这里写图片描述\"></p>\n<p>设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了</p>\n<p><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg\" alt=\"\"></p>\n<h1 id=\"android手机-pc\"><a href=\"#android手机-pc\" class=\"headerlink\" title=\"android手机+pc\"></a>android手机+pc</h1><p>安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭</p>\n<ol>\n<li>首先需要装chrom浏览器</li>\n<li>打开手机的开发者模式，一般是：设置-&gt;关于手机-&gt;版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开<img src=\"http://img0.tuicool.com/JZjuMnM.png!web\" alt=\"\"></li>\n<li>将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定<img src=\"http://img2.tuicool.com/AbE3E3.png!web\" alt=\"\"></li>\n<li>在手机chrom上打开要调试的页面</li>\n<li>在电脑上打开chrom，新开一地址栏为<code>chrome://inspect/</code>的页面,然后就可以调试了<img src=\"http://img0.tuicool.com/IzM7Bnv.png!web\" alt=\"\"></li>\n<li>点击inspect弹出chrom调试工具</li>\n</ol>\n<h1 id=\"微信开发者工具\"><a href=\"#微信开发者工具\" class=\"headerlink\" title=\"微信开发者工具\"></a>微信开发者工具</h1><p>由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。</p>\n<h2 id=\"官方文档-amp-下载地址\"><a href=\"#官方文档-amp-下载地址\" class=\"headerlink\" title=\"官方文档&amp;下载地址\"></a>官方文档&amp;下载地址</h2><p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140&amp;token=&amp;lang=zh_CN\" target=\"_blank\" rel=\"external\">官方文档</a>其中有下载地址</p>\n<h2 id=\"模拟微信环境调试\"><a href=\"#模拟微信环境调试\" class=\"headerlink\" title=\"模拟微信环境调试\"></a>模拟微信环境调试</h2><p>直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求</p>\n<h2 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h2><p>在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥…</p>\n<p>—————3.29更———————<br>我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证<br>在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png\" alt=\"\"><br>然后根据提示一步一步安装就可以了。<br>安装完证书就可以打开网页了</p>\n<h1 id=\"weinre\"><a href=\"#weinre\" class=\"headerlink\" title=\"weinre\"></a>weinre</h1><p>跟着我念三遍weinre大法好，weinre大法好，weinre大法好~<br>之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！<br>缺点就是配置起来有削微的麻烦~</p>\n<h2 id=\"什么是weinre\"><a href=\"#什么是weinre\" class=\"headerlink\" title=\"什么是weinre\"></a>什么是weinre</h2><p>weinre是web inspector remote（远程web检查器）的缩写</p>\n<h2 id=\"安装weinre\"><a href=\"#安装weinre\" class=\"headerlink\" title=\"安装weinre\"></a>安装weinre</h2><p>目前安装weinre我了解到有两种方式：node和java两种方式</p>\n<h3 id=\"node方式安装weinre\"><a href=\"#node方式安装weinre\" class=\"headerlink\" title=\"node方式安装weinre\"></a>node方式安装weinre</h3><p>首先确保你的电脑上有node环境，然后使用npm来安装<br>windows下<br><code>npm install weinre -g --registry=https://registry.npm.taobao.org</code><br>mac下<br><code>sudo npm install weinre -g --registry=https://registry.npm.taobao.org</code></p>\n<h3 id=\"java环境下安装weinre\"><a href=\"#java环境下安装weinre\" class=\"headerlink\" title=\"java环境下安装weinre\"></a>java环境下安装weinre</h3><p>首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: <a href=\"https://pan.baidu.com/s/1slRiOl3\" target=\"_blank\" rel=\"external\">https://pan.baidu.com/s/1slRiOl3</a> 密码: dsmp</p>\n<h2 id=\"运行weinre\"><a href=\"#运行weinre\" class=\"headerlink\" title=\"运行weinre\"></a>运行weinre</h2><h3 id=\"node环境下\"><a href=\"#node环境下\" class=\"headerlink\" title=\"node环境下\"></a>node环境下</h3><p><code>weinre --httpPort 8081 --boundHost -all-</code><br><code>8081</code>是调试服务器运行的端口号，<br><code>boundHost</code>是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具</p>\n<h3 id=\"java环境下\"><a href=\"#java环境下\" class=\"headerlink\" title=\"java环境下\"></a>java环境下</h3><p>在weinre所在文件夹的地址栏输入代码：<code>java -jar weinre.jar --httpPort 8081 --boundHost -all-</code><br><img src=\"http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png\" alt=\"\"></p>\n<h2 id=\"开始调试\"><a href=\"#开始调试\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>设置好端口之后我们在本地打开<code>http://192.168.0.126:8081</code>然后就可以看见weinre的基本信息<br><img src=\"http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif\" alt=\"\"></p>\n<p>之后我们需要在需要调试的页面上加上一段script标签<br><code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>需要改为你自己的ip地址</p>\n<h3 id=\"ip的查询方式\"><a href=\"#ip的查询方式\" class=\"headerlink\" title=\"ip的查询方式\"></a>ip的查询方式</h3><p>在cmd输入<code>ipconfig</code>，然后ipv4中后面跟的就是本机的ip地址</p>\n<h2 id=\"手机打开需要调试的链接\"><a href=\"#手机打开需要调试的链接\" class=\"headerlink\" title=\"手机打开需要调试的链接\"></a>手机打开需要调试的链接</h2><h3 id=\"在staticWebDir目录下\"><a href=\"#在staticWebDir目录下\" class=\"headerlink\" title=\"在staticWebDir目录下\"></a>在staticWebDir目录下</h3><p>本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：<code>C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web</code>，然后手机访问:<code>http://192.168.0.126/contact_page/index.html</code>，然后在电脑上打开刚刚的页面<code>http://196.168.0.126:8081</code><img src=\"http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png\" alt=\"\">点击<code>debug client user interface</code>之后出现<br><img src=\"http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png\" alt=\"\">，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的<code>elements</code>和其他的tag就可以进行调试</p>\n<h3 id=\"在xampp下\"><a href=\"#在xampp下\" class=\"headerlink\" title=\"在xampp下\"></a>在xampp下</h3><p>因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。<br>项目存放的地址是<code>xampp\\htdocs\\app</code><br>修改配置：<br><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>文件下<br>最后一行<br><code>127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com</code><br>然后在<code>C:\\xampp\\apache\\conf\\extra</code>文件里面修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    DocumentRoot &quot;C:\\xampp\\htdocs\\ltrip&quot;</div><div class=\"line\">    ServerName ltrip.com </div><div class=\"line\">    ServerAlias </div><div class=\"line\">  &lt;Directory &quot;C:\\xampp\\htdocs\\ltrip&quot;&gt;</div><div class=\"line\">      Options FollowSymLinks ExecCGI</div><div class=\"line\">      AllowOverride All</div><div class=\"line\">      Order allow,deny</div><div class=\"line\">      Allow from all</div><div class=\"line\">      Require all granted</div><div class=\"line\">  &lt;/Directory&gt;</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>其中的<code>ServerName ltrip.com</code>中的<code>ltrip.com</code>就代替了<code>&quot;C:\\xampp\\htdocs\\ltrip&quot;</code>这个路径，<br>所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:<code>http://192.168.0.168/ltrip.com</code></p>\n<h3 id=\"使用wenstorm\"><a href=\"#使用wenstorm\" class=\"headerlink\" title=\"使用wenstorm\"></a>使用wenstorm</h3><p>在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如<code>file:///C:/Users/supfn/Desktop/contact_page/index.html</code>这样子的，在手机肯定访问不到我的电脑上的路径。<br>这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。<br>webstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~<br>简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器</p>\n<h1 id=\"使用Fiddle抓包\"><a href=\"#使用Fiddle抓包\" class=\"headerlink\" title=\"使用Fiddle抓包\"></a>使用Fiddle抓包</h1><p>如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~<br>fiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了</p>\n<h2 id=\"下载fiddler\"><a href=\"#下载fiddler\" class=\"headerlink\" title=\"下载fiddler\"></a>下载fiddler</h2><p>Fiddler 下载地址 ：<a href=\"https://www.telerik.com/download/fiddler\" target=\"_blank\" rel=\"external\">https://www.telerik.com/download/fiddler</a><br>Fiddler 离线下载地址：<a href=\"http://pan.baidu.com/s/1i3NvE8P\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1i3NvE8P</a> 密码：ozem</p>\n<h2 id=\"使用fiddler抓取数据包\"><a href=\"#使用fiddler抓取数据包\" class=\"headerlink\" title=\"使用fiddler抓取数据包\"></a>使用fiddler抓取数据包</h2><p>在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888<br>在fiddler上，点击菜单栏中的 [Tools] –&gt; [Fiddler Options]<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png\" alt=\"\"><br> 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK<br> <img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png\" alt=\"\"></p>\n<h2 id=\"使用weinre与fiddler组合\"><a href=\"#使用weinre与fiddler组合\" class=\"headerlink\" title=\"使用weinre与fiddler组合\"></a>使用weinre与fiddler组合</h2><p>我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签<br>在完成配置之后打开要调试的链接，然后在fiddler中设置断点<br>我们在fiddler中打下页面断点,bpafter + 想要打断点的网址<img src=\"http://img1.tuicool.com/Uvii2aN.png!web\" alt=\"\"><br>再次访问该网站，发现本条请求被block住了<br><img src=\"http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在右边加上weinre需要的script标签<code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~</p>\n<p>参考文章</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/qq_21445563/article/details/51017605\" target=\"_blank\" rel=\"external\">Fiddler 抓包工具总结</a></li>\n<li><a href=\"http://www.cnblogs.com/jhyxk2007/p/5089997.html\" target=\"_blank\" rel=\"external\">移动端调试工具weinre安装教程（java版）</a></li>\n<li><a href=\"http://www.tuicool.com/articles/MbYz6fA\" target=\"_blank\" rel=\"external\">聊一聊移动调试那些事儿</a></li>\n</ul>\n","excerpt":"<p>在开发中前端免不了要进行移动端的开发，然而在电脑上看的样式和手机上还是有一定的差距的，因为手机上有顶部的状态栏和底部的菜单栏，特别是在qq中打开，差距还是蛮大的，所以在chrom中模拟手机显示的情况虽然有一定的效果，但是还是不能完全模拟，我们还需要在真机环境下测试。<br>","more":"</p>\n<h1 id=\"iphone-safari\"><a href=\"#iphone-safari\" class=\"headerlink\" title=\"iphone+safari\"></a>iphone+safari</h1><p>之前使用的是mac，所以一直都是用的iphone+safari模拟真机环境，这种方法简单明了，只需要简单的设置一下以后都不要设置，插上数据线，打开mac上的safari就可以了，(๑•̀ㅂ•́)و，✧，但是对设备有要求，必须是iphone+mac的组合</p>\n<h2 id=\"iphone上设置\"><a href=\"#iphone上设置\" class=\"headerlink\" title=\"iphone上设置\"></a>iphone上设置</h2><p>设置 → Safari → 高级 → Web 检查器 → 开。<br><img src=\"http://img.blog.csdn.net/20170328162341695?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<h2 id=\"pc端safari设置\"><a href=\"#pc端safari设置\" class=\"headerlink\" title=\"pc端safari设置\"></a>pc端safari设置</h2><p>Safari → 偏好设置 → 高级 → 在菜单栏中显示“开发”菜单<br><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134405455.jpg\" alt=\"这里写图片描述\"></p>\n<p>设置完之后用数据线连接电脑，然后在iphone上用打开safari需要调试的网址，然后在pc端打开safari，最上面的菜单栏中的“开发”然后就可以看到有iphone设备的名称显示然后就可以看见你在iphone中的safari中打开了哪些网址，之后就和调试网页版的一样了</p>\n<p><img src=\"http://www.2cto.com/uploadfile/Collfiles/20140305/20140305134407464.jpg\" alt=\"\"></p>\n<h1 id=\"android手机-pc\"><a href=\"#android手机-pc\" class=\"headerlink\" title=\"android手机+pc\"></a>android手机+pc</h1><p>安卓手机只需要下载chrom浏览器，就可以再电脑上用chrom调试了，是不是很赞(づ￣3￣)づ╭</p>\n<ol>\n<li>首先需要装chrom浏览器</li>\n<li>打开手机的开发者模式，一般是：设置-&gt;关于手机-&gt;版本号连按5次，之后设置菜单中会多出一个开发人员选项，进入将其中的“usb调试”打开<img src=\"http://img0.tuicool.com/JZjuMnM.png!web\" alt=\"\"></li>\n<li>将手机与电脑通过usb连接，弹出对话框“是否允许usb调试”，选择确定<img src=\"http://img2.tuicool.com/AbE3E3.png!web\" alt=\"\"></li>\n<li>在手机chrom上打开要调试的页面</li>\n<li>在电脑上打开chrom，新开一地址栏为<code>chrome://inspect/</code>的页面,然后就可以调试了<img src=\"http://img0.tuicool.com/IzM7Bnv.png!web\" alt=\"\"></li>\n<li>点击inspect弹出chrom调试工具</li>\n</ol>\n<h1 id=\"微信开发者工具\"><a href=\"#微信开发者工具\" class=\"headerlink\" title=\"微信开发者工具\"></a>微信开发者工具</h1><p>由于不可描述原因，有些页面只在微信里面出错，并且好多涉及到了微信相关的接口必须要使用微信环境的，比如自定义分享</p>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>这个使用起来很方便。（我记得之前使用的时候（2016年），你要调试的页面必须是你是管理员的微信公众号下面的js安全域名下的地址），但是刚刚下载一个新版本的开发者工具（v0.7.0），现在的时间是2017年3月28日，发现好像没有这个限制了。所以这样开发起来就方便多了。</p>\n<h2 id=\"官方文档-amp-下载地址\"><a href=\"#官方文档-amp-下载地址\" class=\"headerlink\" title=\"官方文档&amp;下载地址\"></a>官方文档&amp;下载地址</h2><p><a href=\"https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1455784140&amp;token=&amp;lang=zh_CN\">官方文档</a>其中有下载地址</p>\n<h2 id=\"模拟微信环境调试\"><a href=\"#模拟微信环境调试\" class=\"headerlink\" title=\"模拟微信环境调试\"></a>模拟微信环境调试</h2><p>直接在地址栏输入地址就可以模拟微信环境调试，是不是很方便~这种方式可以满足大部分的需求</p>\n<h2 id=\"真机调试\"><a href=\"#真机调试\" class=\"headerlink\" title=\"真机调试\"></a>真机调试</h2><p>在开发者工具中的移动调试中可以有详细的ios和安卓的调试方式，主要是使用代理，这里我没有调试成功，在手机微信中一直打不开网页，所以就不详细写了╥﹏╥…</p>\n<p>—————3.29更———————<br>我找到设置代理之后打不开网页的原因了，在使用fiddler抓包的时候也遇到了同样的问题，原来这里需要下载认证<br>在设置完当前网络的代理之后，在浏览器输入本机的ip地址和ip号，下载fiddler的证书<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124905156-91772621.png\" alt=\"\"><br>然后根据提示一步一步安装就可以了。<br>安装完证书就可以打开网页了</p>\n<h1 id=\"weinre\"><a href=\"#weinre\" class=\"headerlink\" title=\"weinre\"></a>weinre</h1><p>跟着我念三遍weinre大法好，weinre大法好，weinre大法好~<br>之前介绍的几种方式或多或少都有一些条件限制，但是weinre没有啊喂！就比如我是ios+windows的组合，就不能使用iphone+safari和安卓+pc的方式调试，所以使用weinre就可以！！<br>缺点就是配置起来有削微的麻烦~</p>\n<h2 id=\"什么是weinre\"><a href=\"#什么是weinre\" class=\"headerlink\" title=\"什么是weinre\"></a>什么是weinre</h2><p>weinre是web inspector remote（远程web检查器）的缩写</p>\n<h2 id=\"安装weinre\"><a href=\"#安装weinre\" class=\"headerlink\" title=\"安装weinre\"></a>安装weinre</h2><p>目前安装weinre我了解到有两种方式：node和java两种方式</p>\n<h3 id=\"node方式安装weinre\"><a href=\"#node方式安装weinre\" class=\"headerlink\" title=\"node方式安装weinre\"></a>node方式安装weinre</h3><p>首先确保你的电脑上有node环境，然后使用npm来安装<br>windows下<br><code>npm install weinre -g --registry=https://registry.npm.taobao.org</code><br>mac下<br><code>sudo npm install weinre -g --registry=https://registry.npm.taobao.org</code></p>\n<h3 id=\"java环境下安装weinre\"><a href=\"#java环境下安装weinre\" class=\"headerlink\" title=\"java环境下安装weinre\"></a>java环境下安装weinre</h3><p>首先确认你电脑上装好的java环境，然后下载weinre的jar包，上百度云盘的链接：链接: <a href=\"https://pan.baidu.com/s/1slRiOl3\">https://pan.baidu.com/s/1slRiOl3</a> 密码: dsmp</p>\n<h2 id=\"运行weinre\"><a href=\"#运行weinre\" class=\"headerlink\" title=\"运行weinre\"></a>运行weinre</h2><h3 id=\"node环境下\"><a href=\"#node环境下\" class=\"headerlink\" title=\"node环境下\"></a>node环境下</h3><p><code>weinre --httpPort 8081 --boundHost -all-</code><br><code>8081</code>是调试服务器运行的端口号，<br><code>boundHost</code>是调试服务器绑定的ip地址或域名，默认是localhost，设置为-all-是为了在本地能使用localhost打开，在移动设备或本地环境用ip地址打开weinre调试工具</p>\n<h3 id=\"java环境下\"><a href=\"#java环境下\" class=\"headerlink\" title=\"java环境下\"></a>java环境下</h3><p>在weinre所在文件夹的地址栏输入代码：<code>java -jar weinre.jar --httpPort 8081 --boundHost -all-</code><br><img src=\"http://images2015.cnblogs.com/blog/685375/201512/685375-20151230203417729-842406358.png\" alt=\"\"></p>\n<h2 id=\"开始调试\"><a href=\"#开始调试\" class=\"headerlink\" title=\"开始调试\"></a>开始调试</h2><p>设置好端口之后我们在本地打开<code>http://192.168.0.126:8081</code>然后就可以看见weinre的基本信息<br><img src=\"http://pic002.cnblogs.com/images/2012/436120/2012102818102951.gif\" alt=\"\"></p>\n<p>之后我们需要在需要调试的页面上加上一段script标签<br><code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>需要改为你自己的ip地址</p>\n<h3 id=\"ip的查询方式\"><a href=\"#ip的查询方式\" class=\"headerlink\" title=\"ip的查询方式\"></a>ip的查询方式</h3><p>在cmd输入<code>ipconfig</code>，然后ipv4中后面跟的就是本机的ip地址</p>\n<h2 id=\"手机打开需要调试的链接\"><a href=\"#手机打开需要调试的链接\" class=\"headerlink\" title=\"手机打开需要调试的链接\"></a>手机打开需要调试的链接</h2><h3 id=\"在staticWebDir目录下\"><a href=\"#在staticWebDir目录下\" class=\"headerlink\" title=\"在staticWebDir目录下\"></a>在staticWebDir目录下</h3><p>本地的源文件貌似只能在staticWebDir目录下才可以访问到（这是因为在没有使用任何服务器的情况下，weinre自带有服务器，所以只能放在默认的根目录下），将你的源文件放在staticWebDir目录下，staticWebDir的目录是你安装weinre的根目录，我的是：<code>C:\\Users\\supfn\\AppData\\Roaming\\npm\\node_modules\\weinre\\web</code>，然后手机访问:<code>http://192.168.0.126/contact_page/index.html</code>，然后在电脑上打开刚刚的页面<code>http://196.168.0.126:8081</code><img src=\"http://static.oschina.net/uploads/space/2014/0808/121953_40hW_115312.png\" alt=\"\">点击<code>debug client user interface</code>之后出现<br><img src=\"http://static.oschina.net/uploads/space/2014/0808/122132_FRON_115312.png\" alt=\"\">，点击蓝色的链接，变为绿色的之后就说明链接成功了。在后面的<code>elements</code>和其他的tag就可以进行调试</p>\n<h3 id=\"在xampp下\"><a href=\"#在xampp下\" class=\"headerlink\" title=\"在xampp下\"></a>在xampp下</h3><p>因为公司的项目是在xampp下的，已经配置好了apache，可以直接在平时的项目前加上本地的ip，在手机上访问就好。<br>项目存放的地址是<code>xampp\\htdocs\\app</code><br>修改配置：<br><code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>文件下<br>最后一行<br><code>127.0.0.1       localhost ltrip.com fzc.com  m.fzc.com m.ltrip.com</code><br>然后在<code>C:\\xampp\\apache\\conf\\extra</code>文件里面修改<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;VirtualHost *:80&gt;</div><div class=\"line\">    DocumentRoot &quot;C:\\xampp\\htdocs\\ltrip&quot;</div><div class=\"line\">    ServerName ltrip.com </div><div class=\"line\">    ServerAlias </div><div class=\"line\">  &lt;Directory &quot;C:\\xampp\\htdocs\\ltrip&quot;&gt;</div><div class=\"line\">      Options FollowSymLinks ExecCGI</div><div class=\"line\">      AllowOverride All</div><div class=\"line\">      Order allow,deny</div><div class=\"line\">      Allow from all</div><div class=\"line\">      Require all granted</div><div class=\"line\">  &lt;/Directory&gt;</div><div class=\"line\">&lt;/VirtualHost&gt;</div></pre></td></tr></table></figure></p>\n<p>其中的<code>ServerName ltrip.com</code>中的<code>ltrip.com</code>就代替了<code>&quot;C:\\xampp\\htdocs\\ltrip&quot;</code>这个路径，<br>所以就不需要放在staticWebDir目录下了，这样手机打开的地址就变成了:<code>http://192.168.0.168/ltrip.com</code></p>\n<h3 id=\"使用wenstorm\"><a href=\"#使用wenstorm\" class=\"headerlink\" title=\"使用wenstorm\"></a>使用wenstorm</h3><p>在最先开始使用weinre的时候，一直卡在一个地方，就是手机访问的地址问题，在看教程的时候我就卡在不知道怎么输入手机打开的网址，因为我是自己写的一个简单的html的demo，在本地打开的地址是使用本地的绝对路径比如<code>file:///C:/Users/supfn/Desktop/contact_page/index.html</code>这样子的，在手机肯定访问不到我的电脑上的路径。<br>这里是需要在本地搭建一个服务器，这样才能在手机访问到你电脑上的资源，通过服务器其他人也可以访问你电脑上的资源，常见的服务器有apache，使用Java的还可以用tomcat。这些使用起来都比较麻烦，这里推荐一个简单的方式，使用webstorm。<br>webstorm集成了debugger服务器，所以可以直接在你项目html页面的右上角点击浏览器的图标，在对应浏览器打开项目，然后将地址栏上的localhost改为你的ip地址，手机访问这个地址就可以了~<br>简直不要太方便！！所以webstorm真的是web开发利器，而不止是一个编辑器</p>\n<h1 id=\"使用Fiddle抓包\"><a href=\"#使用Fiddle抓包\" class=\"headerlink\" title=\"使用Fiddle抓包\"></a>使用Fiddle抓包</h1><p>如果是要调试线上代码的话经常是无法再页面中直接加入script标签的，然后我们可以利用fiddler为页面设置断点，然后注入js代码，在run就可以了~<br>fiddler是用过改写http代理，让数据从它这通过，来监控截取到的数据。在打开fiddler的时候，就已经自动设置好了浏览器的代理了，关闭的时候，它又把代理还原了</p>\n<h2 id=\"下载fiddler\"><a href=\"#下载fiddler\" class=\"headerlink\" title=\"下载fiddler\"></a>下载fiddler</h2><p>Fiddler 下载地址 ：<a href=\"https://www.telerik.com/download/fiddler\">https://www.telerik.com/download/fiddler</a><br>Fiddler 离线下载地址：<a href=\"http://pan.baidu.com/s/1i3NvE8P\">http://pan.baidu.com/s/1i3NvE8P</a> 密码：ozem</p>\n<h2 id=\"使用fiddler抓取数据包\"><a href=\"#使用fiddler抓取数据包\" class=\"headerlink\" title=\"使用fiddler抓取数据包\"></a>使用fiddler抓取数据包</h2><p>在手机上设置同一个局域网上的代理，代理服务器设置为电脑的ip地址，端口为8888<br>在fiddler上，点击菜单栏中的 [Tools] –&gt; [Fiddler Options]<br><img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124747047-421831359.png\" alt=\"\"><br> 点击 [Connections] ，设置代理端口是8888， 勾选 Allow remote computers to connect， 点击OK<br> <img src=\"http://images2015.cnblogs.com/blog/626593/201601/626593-20160120124843828-142667262.png\" alt=\"\"></p>\n<h2 id=\"使用weinre与fiddler组合\"><a href=\"#使用weinre与fiddler组合\" class=\"headerlink\" title=\"使用weinre与fiddler组合\"></a>使用weinre与fiddler组合</h2><p>我们要实现的目标就是要调试线上的代码，使用fiddler在代码中注入weinre需要加上的script标签<br>在完成配置之后打开要调试的链接，然后在fiddler中设置断点<br>我们在fiddler中打下页面断点,bpafter + 想要打断点的网址<img src=\"http://img1.tuicool.com/Uvii2aN.png!web\" alt=\"\"><br>再次访问该网站，发现本条请求被block住了<br><img src=\"http://img.blog.csdn.net/20170329180201324?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"><br>然后在右边加上weinre需要的script标签<code>&lt;script src=&quot;http://192.168.0.126:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code><br>然后点击右边代码上面绿色的run to completion就可以看到注入js的效果了，之后我们就可以在weinre中调试了~</p>\n<p>参考文章</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/qq_21445563/article/details/51017605\">Fiddler 抓包工具总结</a></li>\n<li><a href=\"http://www.cnblogs.com/jhyxk2007/p/5089997.html\">移动端调试工具weinre安装教程（java版）</a></li>\n<li><a href=\"http://www.tuicool.com/articles/MbYz6fA\">聊一聊移动调试那些事儿</a></li>\n</ul>"},{"title":"react（一）：初识react","date":"2017-03-01T14:01:40.000Z","_content":"这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world\n\n<!--more-->\n\n\n这里是看慕课网初学react做的一些总结[[课程]React入门](http://www.imooc.com/video/9819)，\n\n什么是react\n========\n\n\n在这一个小时内对react的认识中，我有了对react的初步印象\n\n 1. js库\n 2. facebook开发的\n 3. 高度的组件化\n 4. 使用jsx\n 5. 将html和js结合\n 6. 单项传输数据\n 7. 虚拟dom\n 8. 只负责view层\n\nreact并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI\n\nreact应用场景\n========\n\n 1. 复杂场景下的高性能\n 2. 重用组件库，组件组合\n 3. “懒”\n\n使用react\n=======\n最正确的打开方式还是直接看官方api：[react入门教程](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n或者阮一峰老师的教程：[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n\n我们先用React JSFiddle来创建一个最简单的hello world\n\nhtml：\n\n```\n//这里引入的js库只是方便学习和实验的，在正式项目不引入\n<script src=\"https://facebook.github.io/react/js/jsfiddle-integration-babel.js\"></script>\n\n<div id=\"container\">\n    <!-- This element's contents will be replaced with your component. -->\n</div>\n```\n\njs:\n\n```\n\n//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。\n\n//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置\n\n//自定义的componments通过React.createClass来进行创建\n//{}里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合\nvar Hello = React.createClass({\n  render: function() {\n  \n    \n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nReactDOM.render(\n  //生成自定义标签\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n\n为html添加css\n=========\n添加类\n-----\n因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className\n\n内联样式\n-----\n需要使用驼峰写法的键值对\n```\nreturn <div style={{color:'red'}}>Hello {this.props.name}</div>;\n```\n\n","source":"_posts/React-first.md","raw":"---\ntitle: react（一）：初识react\ndate: 2017-03-01 22:01:40\ntags: react\ncategories: react\n---\n这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world\n\n<!--more-->\n\n\n这里是看慕课网初学react做的一些总结[[课程]React入门](http://www.imooc.com/video/9819)，\n\n什么是react\n========\n\n\n在这一个小时内对react的认识中，我有了对react的初步印象\n\n 1. js库\n 2. facebook开发的\n 3. 高度的组件化\n 4. 使用jsx\n 5. 将html和js结合\n 6. 单项传输数据\n 7. 虚拟dom\n 8. 只负责view层\n\nreact并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI\n\nreact应用场景\n========\n\n 1. 复杂场景下的高性能\n 2. 重用组件库，组件组合\n 3. “懒”\n\n使用react\n=======\n最正确的打开方式还是直接看官方api：[react入门教程](http://reactjs.cn/react/docs/getting-started-zh-CN.html)\n\n或者阮一峰老师的教程：[React 入门实例教程](http://www.ruanyifeng.com/blog/2015/03/react.html)\n\n我们先用React JSFiddle来创建一个最简单的hello world\n\nhtml：\n\n```\n//这里引入的js库只是方便学习和实验的，在正式项目不引入\n<script src=\"https://facebook.github.io/react/js/jsfiddle-integration-babel.js\"></script>\n\n<div id=\"container\">\n    <!-- This element's contents will be replaced with your component. -->\n</div>\n```\n\njs:\n\n```\n\n//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。\n\n//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置\n\n//自定义的componments通过React.createClass来进行创建\n//{}里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合\nvar Hello = React.createClass({\n  render: function() {\n  \n    \n    return <div>Hello {this.props.name}</div>;\n  }\n});\n\nReactDOM.render(\n  //生成自定义标签\n  <Hello name=\"World\" />,\n  document.getElementById('container')\n);\n```\n\n为html添加css\n=========\n添加类\n-----\n因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className\n\n内联样式\n-----\n需要使用驼峰写法的键值对\n```\nreturn <div style={{color:'red'}}>Hello {this.props.name}</div>;\n```\n\n","slug":"React-first","published":1,"updated":"2017-03-01T14:39:08.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel37001fqkyf8l25k1kx","content":"<p>这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world</p>\n<a id=\"more\"></a>\n<p>这里是看慕课网初学react做的一些总结<a href=\"http://www.imooc.com/video/9819\" target=\"_blank\" rel=\"external\">[课程]React入门</a>，</p>\n<h1 id=\"什么是react\"><a href=\"#什么是react\" class=\"headerlink\" title=\"什么是react\"></a>什么是react</h1><p>在这一个小时内对react的认识中，我有了对react的初步印象</p>\n<ol>\n<li>js库</li>\n<li>facebook开发的</li>\n<li>高度的组件化</li>\n<li>使用jsx</li>\n<li>将html和js结合</li>\n<li>单项传输数据</li>\n<li>虚拟dom</li>\n<li>只负责view层</li>\n</ol>\n<p>react并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI</p>\n<h1 id=\"react应用场景\"><a href=\"#react应用场景\" class=\"headerlink\" title=\"react应用场景\"></a>react应用场景</h1><ol>\n<li>复杂场景下的高性能</li>\n<li>重用组件库，组件组合</li>\n<li>“懒”</li>\n</ol>\n<h1 id=\"使用react\"><a href=\"#使用react\" class=\"headerlink\" title=\"使用react\"></a>使用react</h1><p>最正确的打开方式还是直接看官方api：<a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\" target=\"_blank\" rel=\"external\">react入门教程</a></p>\n<p>或者阮一峰老师的教程：<a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a></p>\n<p>我们先用React JSFiddle来创建一个最简单的hello world</p>\n<p>html：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这里引入的js库只是方便学习和实验的，在正式项目不引入</div><div class=\"line\">&lt;script src=&quot;https://facebook.github.io/react/js/jsfiddle-integration-babel.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;!-- This element&apos;s contents will be replaced with your component. --&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</div><div class=\"line\"></div><div class=\"line\">//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置</div><div class=\"line\"></div><div class=\"line\">//自定义的componments通过React.createClass来进行创建</div><div class=\"line\">//&#123;&#125;里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合</div><div class=\"line\">var Hello = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\">    return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  //生成自定义标签</div><div class=\"line\">  &lt;Hello name=&quot;World&quot; /&gt;,</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h1 id=\"为html添加css\"><a href=\"#为html添加css\" class=\"headerlink\" title=\"为html添加css\"></a>为html添加css</h1><h2 id=\"添加类\"><a href=\"#添加类\" class=\"headerlink\" title=\"添加类\"></a>添加类</h2><p>因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className</p>\n<h2 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h2><p>需要使用驼峰写法的键值对<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return &lt;div style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>这里只是读书笔记，因为刚开始接触react，概况的说一下什么是react，并且使用react完成hello world</p>","more":"<p>这里是看慕课网初学react做的一些总结<a href=\"http://www.imooc.com/video/9819\">[课程]React入门</a>，</p>\n<h1 id=\"什么是react\"><a href=\"#什么是react\" class=\"headerlink\" title=\"什么是react\"></a>什么是react</h1><p>在这一个小时内对react的认识中，我有了对react的初步印象</p>\n<ol>\n<li>js库</li>\n<li>facebook开发的</li>\n<li>高度的组件化</li>\n<li>使用jsx</li>\n<li>将html和js结合</li>\n<li>单项传输数据</li>\n<li>虚拟dom</li>\n<li>只负责view层</li>\n</ol>\n<p>react并不是一个完整的mvc或者mvvm框架，只是负责view层，特点是“轻”，组件化的开发：组件高度的可重用。含义是将有独立功能的UI控件封装起来，将UI上的每一个独立的模块定义成组件，通过组合或者嵌套的方式构成大的组件，完成完整的UI</p>\n<h1 id=\"react应用场景\"><a href=\"#react应用场景\" class=\"headerlink\" title=\"react应用场景\"></a>react应用场景</h1><ol>\n<li>复杂场景下的高性能</li>\n<li>重用组件库，组件组合</li>\n<li>“懒”</li>\n</ol>\n<h1 id=\"使用react\"><a href=\"#使用react\" class=\"headerlink\" title=\"使用react\"></a>使用react</h1><p>最正确的打开方式还是直接看官方api：<a href=\"http://reactjs.cn/react/docs/getting-started-zh-CN.html\">react入门教程</a></p>\n<p>或者阮一峰老师的教程：<a href=\"http://www.ruanyifeng.com/blog/2015/03/react.html\">React 入门实例教程</a></p>\n<p>我们先用React JSFiddle来创建一个最简单的hello world</p>\n<p>html：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//这里引入的js库只是方便学习和实验的，在正式项目不引入</div><div class=\"line\">&lt;script src=&quot;https://facebook.github.io/react/js/jsfiddle-integration-babel.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;</div><div class=\"line\">    &lt;!-- This element&apos;s contents will be replaced with your component. --&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>js:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">//jsx语法糖，计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。通常来说使用语法糖能够增加程序的可读性，从而减少程序代码出错的机会。</div><div class=\"line\"></div><div class=\"line\">//react里面的div只是虚拟的dom，在react看来只是react componments的一个实例，调用ReactDOM.render方法使虚拟的dom呈现到页面上，ReactDOM.render方法第一次参数就是我们要渲染的react componments，第二个参数是我们要插入的位置</div><div class=\"line\"></div><div class=\"line\">//自定义的componments通过React.createClass来进行创建</div><div class=\"line\">//&#123;&#125;里面为js表达式的值this是我们所使用的componments，props是我们在ReactDOM.render中所使用的属性的集合</div><div class=\"line\">var Hello = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">  </div><div class=\"line\">    </div><div class=\"line\">    return &lt;div&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  //生成自定义标签</div><div class=\"line\">  &lt;Hello name=&quot;World&quot; /&gt;,</div><div class=\"line\">  document.getElementById(&apos;container&apos;)</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<h1 id=\"为html添加css\"><a href=\"#为html添加css\" class=\"headerlink\" title=\"为html添加css\"></a>为html添加css</h1><h2 id=\"添加类\"><a href=\"#添加类\" class=\"headerlink\" title=\"添加类\"></a>添加类</h2><p>因为class是js中的保留字，所以在给标签加css类的时候不能使用class需要用className</p>\n<h2 id=\"内联样式\"><a href=\"#内联样式\" class=\"headerlink\" title=\"内联样式\"></a>内联样式</h2><p>需要使用驼峰写法的键值对<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">return &lt;div style=&#123;&#123;color:&apos;red&apos;&#125;&#125;&gt;Hello &#123;this.props.name&#125;&lt;/div&gt;;</div></pre></td></tr></table></figure></p>"},{"title":"react（二）：用实例认识react","date":"2017-03-02T13:34:44.000Z","_content":"昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！\n然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：[React 入门实例教程](http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html)，希望大家可以看一下老师写的demo\n[github地址](https://github.com/sunshine940326/reactDemo/tree/master)，求fork，求star，(～￣▽￣)～\n<!--more-->\n# HTML模板\n这是一个最简单的react模板\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    ReactDOM.render(\n            <div>\n                hello world\n            </div>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n## 不同版本的react之间的差异\n### jsx和babel\n在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：\n1. script标签由原来的\"text/jsx\"变为\"text/babel\"\n2. 所引入的js库有原来的react.js和jsxTransformer.js变为browser.js\n>   1. JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。\n>   2. 编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。\n>   3. 第二代编译器——babel\n> React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。\n### React.reader和ReactDOM.render\n另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM\n> 这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。\n> \n>  新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 \n> \n> 而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。\n> \n> 总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。\n---\n通过以上的介绍，你应该就清楚了这个demo个行代码的意思了\nscript加载的三个库：`react.js`：React的核心库， `react-dom.js`:react中和dom有关的库，`Browser.js`将将jsx转化为js\n`ReactDOM.render(componments,containerName)`函数是将`componments`插入到`containerName`中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。\nreact中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）\n# 虚拟DOM\n>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\n这里有几点需要注意的：\n1. `componments`只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签\n至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下![image](http://image.beekka.com/blog/2015/bg2015033109.png)\n# JXL语法\n>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n**利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。**\n### 使用 HTML 标签：\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nvar myDivElement = <div className=\"foo\" />;\nrender(myDivElement, document.getElementById('mountNode'));\n```\nHTML 里的 `class` 在 JSX 里要写成 `className`，因为 `class` 在 JS 里是保留关键字。同理某些属性比如 `for` 要写成 `htmlFor`。\n\n### 使用组件：\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport MyComponent from './MyComponet';\n\nvar myElement = <MyComponent someProperty={true} />;\nrender(myElement, document.body);\n\n```\n更多关于使用jsx的方法请见[使用 JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n# component组件\ncomponent在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块\n将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 [demo04](https://github.com/sunshine940326/reactDemo/tree/master/demo4)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div id=\"container\"></div>\n\n<script type=\"text/babel\">\nvar HellOMessage = React.createClass({\n    render:function () {\n        return <h1>Hello {this.props.name}</h1>\n    }\n});\n    \n    ReactDOM.render(\n            <HellOMessage name=\"John\" />\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n**因为这里是插入的组件，所以`HellOMessage`首字母需要大写\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 HelloMessage 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取。上面代码的运行结果如下。\n![image](http://image.beekka.com/blog/2015/bg2015033108.png)\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点（查看 [demo05](https://github.com/sunshine940326/reactDemo/tree/master/demo5)）\n\n\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n\n>这里需要注意， `this.props.children` 的值有三种可能：如果当前组件没有子节点，它就是 `undefined` ;如果有一个子节点，数据类型是 `object` ；如果有多个子节点，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\nReact 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法，[请参考官方文档](https://facebook.github.io/react/docs/react-api.html)。\n# PropTypes\n组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求（查看 [demo06](https://github.com/sunshine940326/reactDemo/tree/master/demo6)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar data = \"123\";\n\n    var TestPropsType = React.createClass({\n        propsType:{\n            title:React.propsType.string.isRequired,\n        },\n        render: function () {\n            return <h1>{this.props.title}</h1>\n        }\n    })\n\n    ReactDOM.render(\n            <TestPropsType title={data}/>\n\n\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这就是验证了在使用`TestPropsType`这个组件时`title`属性是必须的并且传入的参数是字符串，如果将`data` 改为`var data = 123`，`title`属性就通不过验证了,会报错\n# 获取真实的DOM节点\n从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 [demo07](https://github.com/sunshine940326/reactDemo/tree/master/demo7) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var MyComponent = React.createClass({\n        handleClick : function () {\n            this.refs.myTextInput.focus();\n        },\n        render:function () {\n            return(\n                    <div>\n                        <input type=\"text\" ref=\"myTextInput\"/>\n                        <input type=\"text\" value=\"Focus the text input\" onClick={this.handleClick}/>\n                    </div>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <MyComponent/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这个demo中，组件`MyConmponent`的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的`input`标签有一个ref属性，然后`this.refs.[redName]`就会返回这个真实的DOM节点。\n# state\n组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 [demo08](https://github.com/sunshine940326/reactDemo/tree/master/demo8) ）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var LikeBtn = React.createClass({\n        getInitialState: function () {\n            return {liked:false}\n        },\n\n        handleClick:function (event) {\n            this.setState({liked:!this.state.liked})\n        },\n\n        render:function () {\n            var text = this.state.liked ? 'like' : 'haven\\'t liked';\n            return(\n                    <p onClick={this.handleClick}>\n                        You {text} this. click to toggle\n                    </p>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <LikeBtn/>\n            ,document.getElementById('container')\n    )\n\n</script>\n</body>\n</html>\n\n```\n\n在这个demo中，在组件`LikeBtn`中，首先为其定义了`InitialState:liked:false`,就是`liked`初始时的状态为`false`,然后当用户点击时,导致状态的变化，`this.setState`方法就修改`state`,将`liked`修改，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n# React state与props区别\n`state`与`props`都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别\n`state`可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为`false`，然后当我们点击组件（发生了交互，触发事件），然后状态改变`liked`的状态变为`true`，因为状态的改变，所以`p`中的文字就会做出相应的改变\n`props`可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变\n## props属性的用法\n### 键值对：值可以有多种形式<HelloWorld name= ? /> \n- 字符串：\"XiaoWang\";\n- 求值表达式 {123}、{\"XiaoWang\"};\n- 数组{[1,2,3]};\n- 变量{variable};\n- 函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;\n### 展开语法{...props}：\nReact会自动把对象中的属性和值当做属性的赋值\n```\nvar HelloWorld =React.createClass({\n     rencer:function () {\n         return <p>Hello,{this.props.name1 + ' 'this.props.name2}</p>;\n     },\n });\n var HelloUniverse = React.createClass({\n     getInitialState:function () {\n         return {\n             name1:'Tim',\n             name2:'John',\n         };\n     },\n     handleChange: function (event) {\n         this.setState({name: event.target.value});\n     },\n     render: function () {\n         return <div>\n         <HelloWorld name={...this.state}></HelloWorld>\n         <br/>\n         <input type=\"text\" onChange={this.handleChange} />\n         </div>\n     },\n });\n ReactDom.render(<HelloUniverse />,document.body);\n```\n### getDefaultProps\ngetDefaultProps 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(<MyTitle />,document.body);\n\n```\n##  state状态的用法\n### getInitialState\n\n`object getInitialState()`\n\n`getInitialState `方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。在组件挂载之前调用一次。返回值将会作为 `this.state` 的初始值。\n\n### setState\n\n`setState(object nextState[, function callback])`\n合并 `nextState` 和当前 `state`。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 `setState` 执行完毕并且组件重新渲染完成之后调用。`this.setState` 方法用于修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n### replaceState\n\n`replaceState(object nextState[, function callback])`\n类似于 `setState()`，但是删除之前所有已存在的 `state` 键，这些键都不在 `nextState` 中。\n# 表单\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 `this.props` 读取（查看 [demo9](https://github.com/sunshine940326/reactDemo/tree/master/demo9) ）。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar InputTest = React.createClass({\n    getInitialState: function () {\n        return{\n            value : 'hello!'\n        };\n    },\n    handleChange: function (event) {\n        this.setState({\n            value:event.target.value\n        });\n    },\n    render: function () {\n        var value = this.state.value;\n        return(\n                <div>\n                    <input type=\"text\" value={value} onChange={this.handleChange}/>\n                    <p>{value}</p>\n                </div>\n        )\n    }\n});\n\n    ReactDOM.render(\n            <InputTest/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n上述代码的效果是有一个输入框，输入框下面是一个`p`标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。\n\n文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。`textarea` 元素、`select`元素、`radio`元素都属于这种情况\n# componments的生命周期\n组件的生命周期分为三个状态：\n- Mounting：已插入真实DOM\n- Updating： 正在被重新渲染\n- Unmounting：已移除真实的DOM\nReact 为每个状态都提供了两种处理函数，`will` 函数在进入状态之前调用，`did` 函数在进入状态之后调用，三种状态共计五种处理函数。\n- componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n此外，React 还提供两种特殊状态的处理函数。\n- componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n下面是一个例子（查看 [demo10](https://github.com/sunshine940326/reactDemo/tree/master/demo10) )。\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var Hello = React.createClass({\n        getInitialState:function () {\n            alert('init')\n            return{\n                opacity:1.0\n            }\n        },\n\n        componentWillMount:function () {\n          alert('Will')\n        },\n\n        componentDidMount:function () {\n            alert('Did')\n            this.timer = setInterval(function () {\n                var opacity = this.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                this.setState({\n                    opacity: opacity\n                });\n            }.bind(this),100)\n        },\n        render:function () {\n            return(\n                <div style={{opacity:this.state.opacity}}>\n                    Hello {this.props.name}\n                </div>\n            )\n        }\n    });\n\n    ReactDOM.render(\n        <Hello name=\"world!\"/>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。\n\n为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：\n\n```\ncomponentDidMount:function () {\n            alert('Did')\n            var _self  = this;\n            _self.timer = setInterval(function () {\n                var opacity = _self.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                _self.setState({\n                    opacity: opacity\n                });\n            },100)\n        },\n```\n这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)\n# AJAX\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI （查看 [demo11](https://github.com/sunshine940326/reactDemo/tree/master/demo11)) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/jquery.min.js\"></script>\n\n</head>\n<body>\n <div id=\"container\"></div>\n\n <script type=\"text/babel\">\n     var UserGist = React.createClass({\n         getInitialState:function () {\n             return{\n                 username: '',\n                 lastGistUrl: '',\n             }\n         },\n\n         componentDidMount:function () {\n             $.get(this.props.source,function (result) {\n                 var lastGist = result[0];\n                 if(this.isMounted()){\n                     this.setState({\n                         username: lastGist.owner.login,\n                         lastGistUrl: lastGist.html_url\n                     });\n                 }\n             }.bind(this));\n         },\n\n         render: function () {\n             return(\n                 <div>\n                     {this.state.username}'s last gist is <a href={this.lastGistUrl}>here</a>.\n                 </div>\n             )\n         }\n     })\n\n     ReactDOM.render(\n         <UserGist source=\"https://api.github.com/users/octocat/gists\"/>\n         ,document.getElementById('container')\n     )\n </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n","source":"_posts/React2understanding-react-with-examples.md","raw":"---\ntitle: react（二）：用实例认识react\ndate: 2017-03-02 21:34:44\ntags: react\ncategories: react\n---\n昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！\n然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：[React 入门实例教程](http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html)，希望大家可以看一下老师写的demo\n[github地址](https://github.com/sunshine940326/reactDemo/tree/master)，求fork，求star，(～￣▽￣)～\n<!--more-->\n# HTML模板\n这是一个最简单的react模板\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    ReactDOM.render(\n            <div>\n                hello world\n            </div>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n## 不同版本的react之间的差异\n### jsx和babel\n在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：\n1. script标签由原来的\"text/jsx\"变为\"text/babel\"\n2. 所引入的js库有原来的react.js和jsxTransformer.js变为browser.js\n>   1. JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。\n>   2. 编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。\n>   3. 第二代编译器——babel\n> React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。\n### React.reader和ReactDOM.render\n另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM\n> 这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。\n> \n>  新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 \n> \n> 而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。\n> \n> 总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。\n---\n通过以上的介绍，你应该就清楚了这个demo个行代码的意思了\nscript加载的三个库：`react.js`：React的核心库， `react-dom.js`:react中和dom有关的库，`Browser.js`将将jsx转化为js\n`ReactDOM.render(componments,containerName)`函数是将`componments`插入到`containerName`中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。\nreact中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）\n# 虚拟DOM\n>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。\n这里有几点需要注意的：\n1. `componments`只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签\n至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下![image](http://image.beekka.com/blog/2015/bg2015033109.png)\n# JXL语法\n>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。\n**利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。**\n### 使用 HTML 标签：\n```\nimport React from 'react';\nimport { render } from 'react-dom';\n\nvar myDivElement = <div className=\"foo\" />;\nrender(myDivElement, document.getElementById('mountNode'));\n```\nHTML 里的 `class` 在 JSX 里要写成 `className`，因为 `class` 在 JS 里是保留关键字。同理某些属性比如 `for` 要写成 `htmlFor`。\n\n### 使用组件：\n\n```\nimport React from 'react';\nimport { render } from 'react-dom';\nimport MyComponent from './MyComponet';\n\nvar myElement = <MyComponent someProperty={true} />;\nrender(myElement, document.body);\n\n```\n更多关于使用jsx的方法请见[使用 JSX](https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html)\n# component组件\ncomponent在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块\n将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 [demo04](https://github.com/sunshine940326/reactDemo/tree/master/demo4)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<div id=\"container\"></div>\n\n<script type=\"text/babel\">\nvar HellOMessage = React.createClass({\n    render:function () {\n        return <h1>Hello {this.props.name}</h1>\n    }\n});\n    \n    ReactDOM.render(\n            <HellOMessage name=\"John\" />\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n```\n**因为这里是插入的组件，所以`HellOMessage`首字母需要大写\n\n上面代码中，变量 `HelloMessage` 就是一个组件类。模板插入 `<HelloMessage />` 时，会自动生成 HelloMessage 的一个实例（下文的\"组件\"都指组件类的实例）。所有组件类都必须有自己的 `render` 方法，用于输出组件。\n\n组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 `<HelloMessage name=\"John\">` ，就是 `HelloMessage` 组件加入一个 `name` 属性，值为 `John`。组件的属性可以在组件类的 `this.props` 对象上获取，比如 `name` 属性就可以通过 `this.props.name` 读取。上面代码的运行结果如下。\n![image](http://image.beekka.com/blog/2015/bg2015033108.png)\n\n`this.props` 对象的属性与组件的属性一一对应，但是有一个例外，就是 `this.props.children` 属性。它表示组件的所有子节点（查看 [demo05](https://github.com/sunshine940326/reactDemo/tree/master/demo5)）\n\n\n```\nvar NotesList = React.createClass({\n  render: function() {\n    return (\n      <ol>\n      {\n        React.Children.map(this.props.children, function (child) {\n          return <li>{child}</li>;\n        })\n      }\n      </ol>\n    );\n  }\n});\n\nReactDOM.render(\n  <NotesList>\n    <span>hello</span>\n    <span>world</span>\n  </NotesList>,\n  document.body\n);\n```\n\n>这里需要注意， `this.props.children` 的值有三种可能：如果当前组件没有子节点，它就是 `undefined` ;如果有一个子节点，数据类型是 `object` ；如果有多个子节点，数据类型就是 `array` 。所以，处理 `this.props.children` 的时候要小心。\nReact 提供一个工具方法 `React.Children` 来处理 `this.props.children` 。我们可以用 `React.Children.map` 来遍历子节点，而不用担心 `this.props.children` 的数据类型是 `undefined` 还是 `object`。更多的 `React.Children` 的方法，[请参考官方文档](https://facebook.github.io/react/docs/react-api.html)。\n# PropTypes\n组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求\n组件类的`PropTypes`属性，就是用来验证组件实例的属性是否符合要求（查看 [demo06](https://github.com/sunshine940326/reactDemo/tree/master/demo6)）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar data = \"123\";\n\n    var TestPropsType = React.createClass({\n        propsType:{\n            title:React.propsType.string.isRequired,\n        },\n        render: function () {\n            return <h1>{this.props.title}</h1>\n        }\n    })\n\n    ReactDOM.render(\n            <TestPropsType title={data}/>\n\n\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这就是验证了在使用`TestPropsType`这个组件时`title`属性是必须的并且传入的参数是字符串，如果将`data` 改为`var data = 123`，`title`属性就通不过验证了,会报错\n# 获取真实的DOM节点\n从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 [demo07](https://github.com/sunshine940326/reactDemo/tree/master/demo7) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var MyComponent = React.createClass({\n        handleClick : function () {\n            this.refs.myTextInput.focus();\n        },\n        render:function () {\n            return(\n                    <div>\n                        <input type=\"text\" ref=\"myTextInput\"/>\n                        <input type=\"text\" value=\"Focus the text input\" onClick={this.handleClick}/>\n                    </div>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <MyComponent/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n这个demo中，组件`MyConmponent`的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的`input`标签有一个ref属性，然后`this.refs.[redName]`就会返回这个真实的DOM节点。\n# state\n组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 [demo08](https://github.com/sunshine940326/reactDemo/tree/master/demo8) ）\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var LikeBtn = React.createClass({\n        getInitialState: function () {\n            return {liked:false}\n        },\n\n        handleClick:function (event) {\n            this.setState({liked:!this.state.liked})\n        },\n\n        render:function () {\n            var text = this.state.liked ? 'like' : 'haven\\'t liked';\n            return(\n                    <p onClick={this.handleClick}>\n                        You {text} this. click to toggle\n                    </p>\n            )\n        }\n    })\n\n    ReactDOM.render(\n            <LikeBtn/>\n            ,document.getElementById('container')\n    )\n\n</script>\n</body>\n</html>\n\n```\n\n在这个demo中，在组件`LikeBtn`中，首先为其定义了`InitialState:liked:false`,就是`liked`初始时的状态为`false`,然后当用户点击时,导致状态的变化，`this.setState`方法就修改`state`,将`liked`修改，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n# React state与props区别\n`state`与`props`都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别\n`state`可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为`false`，然后当我们点击组件（发生了交互，触发事件），然后状态改变`liked`的状态变为`true`，因为状态的改变，所以`p`中的文字就会做出相应的改变\n`props`可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变\n## props属性的用法\n### 键值对：值可以有多种形式<HelloWorld name= ? /> \n- 字符串：\"XiaoWang\";\n- 求值表达式 {123}、{\"XiaoWang\"};\n- 数组{[1,2,3]};\n- 变量{variable};\n- 函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;\n### 展开语法{...props}：\nReact会自动把对象中的属性和值当做属性的赋值\n```\nvar HelloWorld =React.createClass({\n     rencer:function () {\n         return <p>Hello,{this.props.name1 + ' 'this.props.name2}</p>;\n     },\n });\n var HelloUniverse = React.createClass({\n     getInitialState:function () {\n         return {\n             name1:'Tim',\n             name2:'John',\n         };\n     },\n     handleChange: function (event) {\n         this.setState({name: event.target.value});\n     },\n     render: function () {\n         return <div>\n         <HelloWorld name={...this.state}></HelloWorld>\n         <br/>\n         <input type=\"text\" onChange={this.handleChange} />\n         </div>\n     },\n });\n ReactDom.render(<HelloUniverse />,document.body);\n```\n### getDefaultProps\ngetDefaultProps 方法可以用来设置组件属性的默认值。\n```\nvar MyTitle = React.createClass({\n  getDefaultProps : function () {\n    return {\n      title : 'Hello World'\n    };\n  },\n\n  render: function() {\n     return <h1> {this.props.title} </h1>;\n   }\n});\nReactDOM.render(<MyTitle />,document.body);\n\n```\n##  state状态的用法\n### getInitialState\n\n`object getInitialState()`\n\n`getInitialState `方法用于定义初始状态，也就是一个对象，这个对象可以通过 `this.state` 属性读取。在组件挂载之前调用一次。返回值将会作为 `this.state` 的初始值。\n\n### setState\n\n`setState(object nextState[, function callback])`\n合并 `nextState` 和当前 `state`。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 `setState` 执行完毕并且组件重新渲染完成之后调用。`this.setState` 方法用于修改状态值，每次修改以后，自动调用 `this.render` 方法，再次渲染组件。\n\n### replaceState\n\n`replaceState(object nextState[, function callback])`\n类似于 `setState()`，但是删除之前所有已存在的 `state` 键，这些键都不在 `nextState` 中。\n# 表单\n用户在表单填入的内容，属于用户跟组件的互动，所以不能用 `this.props` 读取（查看 [demo9](https://github.com/sunshine940326/reactDemo/tree/master/demo9) ）。\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\nvar InputTest = React.createClass({\n    getInitialState: function () {\n        return{\n            value : 'hello!'\n        };\n    },\n    handleChange: function (event) {\n        this.setState({\n            value:event.target.value\n        });\n    },\n    render: function () {\n        var value = this.state.value;\n        return(\n                <div>\n                    <input type=\"text\" value={value} onChange={this.handleChange}/>\n                    <p>{value}</p>\n                </div>\n        )\n    }\n});\n\n    ReactDOM.render(\n            <InputTest/>\n            ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n上述代码的效果是有一个输入框，输入框下面是一个`p`标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。\n\n文本输入框的值，不能用 `this.props.value` 读取，而要定义一个 `onChange` 事件的回调函数，通过 `event.target.value` 读取用户输入的值。`textarea` 元素、`select`元素、`radio`元素都属于这种情况\n# componments的生命周期\n组件的生命周期分为三个状态：\n- Mounting：已插入真实DOM\n- Updating： 正在被重新渲染\n- Unmounting：已移除真实的DOM\nReact 为每个状态都提供了两种处理函数，`will` 函数在进入状态之前调用，`did` 函数在进入状态之后调用，三种状态共计五种处理函数。\n- componentWillMount()\n- componentDidMount()\n- componentWillUpdate(object nextProps, object nextState)\n- componentDidUpdate(object prevProps, object prevState)\n- componentWillUnmount()\n此外，React 还提供两种特殊状态的处理函数。\n- componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用\n- shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n![这里写图片描述](http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n下面是一个例子（查看 [demo10](https://github.com/sunshine940326/reactDemo/tree/master/demo10) )。\n\n\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n\n</head>\n<body>\n<div id=\"container\"></div>\n<script type=\"text/babel\">\n    var Hello = React.createClass({\n        getInitialState:function () {\n            alert('init')\n            return{\n                opacity:1.0\n            }\n        },\n\n        componentWillMount:function () {\n          alert('Will')\n        },\n\n        componentDidMount:function () {\n            alert('Did')\n            this.timer = setInterval(function () {\n                var opacity = this.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                this.setState({\n                    opacity: opacity\n                });\n            }.bind(this),100)\n        },\n        render:function () {\n            return(\n                <div style={{opacity:this.state.opacity}}>\n                    Hello {this.props.name}\n                </div>\n            )\n        }\n    });\n\n    ReactDOM.render(\n        <Hello name=\"world!\"/>\n        ,document.getElementById('container')\n    )\n</script>\n</body>\n</html>\n\n```\n整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。\n\n为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：\n\n```\ncomponentDidMount:function () {\n            alert('Did')\n            var _self  = this;\n            _self.timer = setInterval(function () {\n                var opacity = _self.state.opacity;\n                opacity -= 0.05;\n                if(opacity<0.1){\n                    opacity = 1.0\n                }\n                _self.setState({\n                    opacity: opacity\n                });\n            },100)\n        },\n```\n这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)\n# AJAX\n组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 `componentDidMount` 方法设置 Ajax 请求，等到请求成功，再用 `this.setState` 方法重新渲染 UI （查看 [demo11](https://github.com/sunshine940326/reactDemo/tree/master/demo11)) ）。\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n    <script src=\"../build/react.js\"></script>\n    <script src=\"../build/react-dom.js\"></script>\n    <script src=\"../build/browser.min.js\"></script>\n    <script src=\"../build/jquery.min.js\"></script>\n\n</head>\n<body>\n <div id=\"container\"></div>\n\n <script type=\"text/babel\">\n     var UserGist = React.createClass({\n         getInitialState:function () {\n             return{\n                 username: '',\n                 lastGistUrl: '',\n             }\n         },\n\n         componentDidMount:function () {\n             $.get(this.props.source,function (result) {\n                 var lastGist = result[0];\n                 if(this.isMounted()){\n                     this.setState({\n                         username: lastGist.owner.login,\n                         lastGistUrl: lastGist.html_url\n                     });\n                 }\n             }.bind(this));\n         },\n\n         render: function () {\n             return(\n                 <div>\n                     {this.state.username}'s last gist is <a href={this.lastGistUrl}>here</a>.\n                 </div>\n             )\n         }\n     })\n\n     ReactDOM.render(\n         <UserGist source=\"https://api.github.com/users/octocat/gists\"/>\n         ,document.getElementById('container')\n     )\n </script>\n</body>\n</html>\n```\n\n\n\n\n\n\n","slug":"React2understanding-react-with-examples","published":1,"updated":"2017-03-05T07:03:18.027Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel37001jqkyfaj1p6nuv","content":"<p>昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！<br>然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：<a href=\"http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html\" target=\"_blank\" rel=\"external\">React 入门实例教程</a>，希望大家可以看一下老师写的demo<br><a href=\"https://github.com/sunshine940326/reactDemo/tree/master\" target=\"_blank\" rel=\"external\">github地址</a>，求fork，求star，(～￣▽￣)～<br><a id=\"more\"></a></p>\n<h1 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h1><p>这是一个最简单的react模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                hello world</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"不同版本的react之间的差异\"><a href=\"#不同版本的react之间的差异\" class=\"headerlink\" title=\"不同版本的react之间的差异\"></a>不同版本的react之间的差异</h2><h3 id=\"jsx和babel\"><a href=\"#jsx和babel\" class=\"headerlink\" title=\"jsx和babel\"></a>jsx和babel</h3><p>在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：</p>\n<ol>\n<li>script标签由原来的”text/jsx”变为”text/babel”</li>\n<li>所引入的js库有原来的react.js和jsxTransformer.js变为browser.js<blockquote>\n<ol>\n<li>JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。</li>\n<li>编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。</li>\n<li><p>第二代编译器——babel<br>React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。</p>\n<h3 id=\"React-reader和ReactDOM-render\"><a href=\"#React-reader和ReactDOM-render\" class=\"headerlink\" title=\"React.reader和ReactDOM.render\"></a>React.reader和ReactDOM.render</h3><p>另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM<br>这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。</p>\n<p>新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 </p>\n</li>\n</ol>\n<p>而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。</p>\n<p>总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>通过以上的介绍，你应该就清楚了这个demo个行代码的意思了<br>script加载的三个库：<code>react.js</code>：React的核心库， <code>react-dom.js</code>:react中和dom有关的库，<code>Browser.js</code>将将jsx转化为js<br><code>ReactDOM.render(componments,containerName)</code>函数是将<code>componments</code>插入到<code>containerName</code>中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。<br>react中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）</p>\n<h1 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h1><blockquote>\n<p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。<br>这里有几点需要注意的：</p>\n<ol>\n<li><code>componments</code>只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签<br>至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下<img src=\"http://image.beekka.com/blog/2015/bg2015033109.png\" alt=\"image\"><h1 id=\"JXL语法\"><a href=\"#JXL语法\" class=\"headerlink\" title=\"JXL语法\"></a>JXL语法</h1>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。<br><strong>利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。</strong><h3 id=\"使用-HTML-标签：\"><a href=\"#使用-HTML-标签：\" class=\"headerlink\" title=\"使用 HTML 标签：\"></a>使用 HTML 标签：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\"></div><div class=\"line\">var myDivElement = &lt;div className=&quot;foo&quot; /&gt;;</div><div class=\"line\">render(myDivElement, document.getElementById(&apos;mountNode&apos;));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>HTML 里的 <code>class</code> 在 JSX 里要写成 <code>className</code>，因为 <code>class</code> 在 JS 里是保留关键字。同理某些属性比如 <code>for</code> 要写成 <code>htmlFor</code>。</p>\n<h3 id=\"使用组件：\"><a href=\"#使用组件：\" class=\"headerlink\" title=\"使用组件：\"></a>使用组件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\">import MyComponent from &apos;./MyComponet&apos;;</div><div class=\"line\"></div><div class=\"line\">var myElement = &lt;MyComponent someProperty=&#123;true&#125; /&gt;;</div><div class=\"line\">render(myElement, document.body);</div></pre></td></tr></table></figure>\n<p>更多关于使用jsx的方法请见<a href=\"https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">使用 JSX</a></p>\n<h1 id=\"component组件\"><a href=\"#component组件\" class=\"headerlink\" title=\"component组件\"></a>component组件</h1><p>component在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块<br>将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo4\" target=\"_blank\" rel=\"external\">demo04</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var HellOMessage = React.createClass(&#123;</div><div class=\"line\">    render:function () &#123;</div><div class=\"line\">        return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">    </div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;HellOMessage name=&quot;John&quot; /&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>**因为这里是插入的组件，所以<code>HellOMessage</code>首字母需要大写</p>\n<p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code> 时，会自动生成 HelloMessage 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n<p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取。上面代码的运行结果如下。<br><img src=\"http://image.beekka.com/blog/2015/bg2015033108.png\" alt=\"image\"></p>\n<p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo5\" target=\"_blank\" rel=\"external\">demo05</a>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var NotesList = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ol&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">        React.Children.map(this.props.children, function (child) &#123;</div><div class=\"line\">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">      &lt;/ol&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;NotesList&gt;</div><div class=\"line\">    &lt;span&gt;hello&lt;/span&gt;</div><div class=\"line\">    &lt;span&gt;world&lt;/span&gt;</div><div class=\"line\">  &lt;/NotesList&gt;,</div><div class=\"line\">  document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。<br>React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。更多的 <code>React.Children</code> 的方法，<a href=\"https://facebook.github.io/react/docs/react-api.html\" target=\"_blank\" rel=\"external\">请参考官方文档</a>。</p>\n<h1 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h1><p>组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求<br>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo6\" target=\"_blank\" rel=\"external\">demo06</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var data = &quot;123&quot;;</div><div class=\"line\"></div><div class=\"line\">    var TestPropsType = React.createClass(&#123;</div><div class=\"line\">        propsType:&#123;</div><div class=\"line\">            title:React.propsType.string.isRequired,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render: function () &#123;</div><div class=\"line\">            return &lt;h1&gt;&#123;this.props.title&#125;&lt;/h1&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;TestPropsType title=&#123;data&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这就是验证了在使用<code>TestPropsType</code>这个组件时<code>title</code>属性是必须的并且传入的参数是字符串，如果将<code>data</code> 改为<code>var data = 123</code>，<code>title</code>属性就通不过验证了,会报错</p>\n<h1 id=\"获取真实的DOM节点\"><a href=\"#获取真实的DOM节点\" class=\"headerlink\" title=\"获取真实的DOM节点\"></a>获取真实的DOM节点</h1><p>从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo7\" target=\"_blank\" rel=\"external\">demo07</a> ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var MyComponent = React.createClass(&#123;</div><div class=\"line\">        handleClick : function () &#123;</div><div class=\"line\">            this.refs.myTextInput.focus();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;div&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot;/&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125;/&gt;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;MyComponent/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>这个demo中，组件<code>MyConmponent</code>的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的<code>input</code>标签有一个ref属性，然后<code>this.refs.[redName]</code>就会返回这个真实的DOM节点。</p>\n<h1 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h1><p>组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo8\" target=\"_blank\" rel=\"external\">demo08</a> ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var LikeBtn = React.createClass(&#123;</div><div class=\"line\">        getInitialState: function () &#123;</div><div class=\"line\">            return &#123;liked:false&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        handleClick:function (event) &#123;</div><div class=\"line\">            this.setState(&#123;liked:!this.state.liked&#125;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            var text = this.state.liked ? &apos;like&apos; : &apos;haven\\&apos;t liked&apos;;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;p onClick=&#123;this.handleClick&#125;&gt;</div><div class=\"line\">                        You &#123;text&#125; this. click to toggle</div><div class=\"line\">                    &lt;/p&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;LikeBtn/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>在这个demo中，在组件<code>LikeBtn</code>中，首先为其定义了<code>InitialState:liked:false</code>,就是<code>liked</code>初始时的状态为<code>false</code>,然后当用户点击时,导致状态的变化，<code>this.setState</code>方法就修改<code>state</code>,将<code>liked</code>修改，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h1 id=\"React-state与props区别\"><a href=\"#React-state与props区别\" class=\"headerlink\" title=\"React state与props区别\"></a>React state与props区别</h1><p><code>state</code>与<code>props</code>都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别<br><code>state</code>可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为<code>false</code>，然后当我们点击组件（发生了交互，触发事件），然后状态改变<code>liked</code>的状态变为<code>true</code>，因为状态的改变，所以<code>p</code>中的文字就会做出相应的改变<br><code>props</code>可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变</p>\n<h2 id=\"props属性的用法\"><a href=\"#props属性的用法\" class=\"headerlink\" title=\"props属性的用法\"></a>props属性的用法</h2><h3 id=\"键值对：值可以有多种形式\"><a href=\"#键值对：值可以有多种形式\" class=\"headerlink\" title=\"键值对：值可以有多种形式\"></a>键值对：值可以有多种形式<helloworld name=\"?\"></helloworld></h3><ul>\n<li>字符串：”XiaoWang”;</li>\n<li>求值表达式 {123}、{“XiaoWang”};</li>\n<li>数组{[1,2,3]};</li>\n<li>变量{variable};</li>\n<li>函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;<h3 id=\"展开语法-…props-：\"><a href=\"#展开语法-…props-：\" class=\"headerlink\" title=\"展开语法{…props}：\"></a>展开语法{…props}：</h3>React会自动把对象中的属性和值当做属性的赋值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var HelloWorld =React.createClass(&#123;</div><div class=\"line\">     rencer:function () &#123;</div><div class=\"line\">         return &lt;p&gt;Hello,&#123;this.props.name1 + &apos; &apos;this.props.name2&#125;&lt;/p&gt;;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> var HelloUniverse = React.createClass(&#123;</div><div class=\"line\">     getInitialState:function () &#123;</div><div class=\"line\">         return &#123;</div><div class=\"line\">             name1:&apos;Tim&apos;,</div><div class=\"line\">             name2:&apos;John&apos;,</div><div class=\"line\">         &#125;;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     handleChange: function (event) &#123;</div><div class=\"line\">         this.setState(&#123;name: event.target.value&#125;);</div><div class=\"line\">     &#125;,</div><div class=\"line\">     render: function () &#123;</div><div class=\"line\">         return &lt;div&gt;</div><div class=\"line\">         &lt;HelloWorld name=&#123;...this.state&#125;&gt;&lt;/HelloWorld&gt;</div><div class=\"line\">         &lt;br/&gt;</div><div class=\"line\">         &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange&#125; /&gt;</div><div class=\"line\">         &lt;/div&gt;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> ReactDom.render(&lt;HelloUniverse /&gt;,document.body);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h3><p>getDefaultProps 方法可以用来设置组件属性的默认值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MyTitle = React.createClass(&#123;</div><div class=\"line\">  getDefaultProps : function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      title : &apos;Hello World&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(&lt;MyTitle /&gt;,document.body);</div></pre></td></tr></table></figure></p>\n<h2 id=\"state状态的用法\"><a href=\"#state状态的用法\" class=\"headerlink\" title=\"state状态的用法\"></a>state状态的用法</h2><h3 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h3><p><code>object getInitialState()</code></p>\n<p><code>getInitialState</code>方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。在组件挂载之前调用一次。返回值将会作为 <code>this.state</code> 的初始值。</p>\n<h3 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h3><p><code>setState(object nextState[, function callback])</code><br>合并 <code>nextState</code> 和当前 <code>state</code>。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 <code>setState</code> 执行完毕并且组件重新渲染完成之后调用。<code>this.setState</code> 方法用于修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h3 id=\"replaceState\"><a href=\"#replaceState\" class=\"headerlink\" title=\"replaceState\"></a>replaceState</h3><p><code>replaceState(object nextState[, function callback])</code><br>类似于 <code>setState()</code>，但是删除之前所有已存在的 <code>state</code> 键，这些键都不在 <code>nextState</code> 中。</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 <code>this.props</code> 读取（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo9\" target=\"_blank\" rel=\"external\">demo9</a> ）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var InputTest = React.createClass(&#123;</div><div class=\"line\">    getInitialState: function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            value : &apos;hello!&apos;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    handleChange: function (event) &#123;</div><div class=\"line\">        this.setState(&#123;</div><div class=\"line\">            value:event.target.value</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        var value = this.state.value;</div><div class=\"line\">        return(</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class=\"line\">                    &lt;p&gt;&#123;value&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;InputTest/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>上述代码的效果是有一个输入框，输入框下面是一个<code>p</code>标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。</p>\n<p>文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况</p>\n<h1 id=\"componments的生命周期\"><a href=\"#componments的生命周期\" class=\"headerlink\" title=\"componments的生命周期\"></a>componments的生命周期</h1><p>组件的生命周期分为三个状态：</p>\n<ul>\n<li>Mounting：已插入真实DOM</li>\n<li>Updating： 正在被重新渲染</li>\n<li>Unmounting：已移除真实的DOM<br>React 为每个状态都提供了两种处理函数，<code>will</code> 函数在进入状态之前调用，<code>did</code> 函数在进入状态之后调用，三种状态共计五种处理函数。</li>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()<br>此外，React 还提供两种特殊状态的处理函数。</li>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>下面是一个例子（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo10\" target=\"_blank\" rel=\"external\">demo10</a> )。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var Hello = React.createClass(&#123;</div><div class=\"line\">        getInitialState:function () &#123;</div><div class=\"line\">            alert(&apos;init&apos;)</div><div class=\"line\">            return&#123;</div><div class=\"line\">                opacity:1.0</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentWillMount:function () &#123;</div><div class=\"line\">          alert(&apos;Will&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            this.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = this.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;.bind(this),100)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                &lt;div style=&#123;&#123;opacity:this.state.opacity&#125;&#125;&gt;</div><div class=\"line\">                    Hello &#123;this.props.name&#125;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">        &lt;Hello name=&quot;world!&quot;/&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。</p>\n<p>为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            var _self  = this;</div><div class=\"line\">            _self.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = _self.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                _self.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;,100)</div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<p>这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)</p>\n<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 <code>componentDidMount</code> 方法设置 Ajax 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI （查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo11\" target=\"_blank\" rel=\"external\">demo11</a>) ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">     var UserGist = React.createClass(&#123;</div><div class=\"line\">         getInitialState:function () &#123;</div><div class=\"line\">             return&#123;</div><div class=\"line\">                 username: &apos;&apos;,</div><div class=\"line\">                 lastGistUrl: &apos;&apos;,</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         componentDidMount:function () &#123;</div><div class=\"line\">             $.get(this.props.source,function (result) &#123;</div><div class=\"line\">                 var lastGist = result[0];</div><div class=\"line\">                 if(this.isMounted())&#123;</div><div class=\"line\">                     this.setState(&#123;</div><div class=\"line\">                         username: lastGist.owner.login,</div><div class=\"line\">                         lastGistUrl: lastGist.html_url</div><div class=\"line\">                     &#125;);</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;.bind(this));</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         render: function () &#123;</div><div class=\"line\">             return(</div><div class=\"line\">                 &lt;div&gt;</div><div class=\"line\">                     &#123;this.state.username&#125;&apos;s last gist is &lt;a href=&#123;this.lastGistUrl&#125;&gt;here&lt;/a&gt;.</div><div class=\"line\">                 &lt;/div&gt;</div><div class=\"line\">             )</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\"></div><div class=\"line\">     ReactDOM.render(</div><div class=\"line\">         &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot;/&gt;</div><div class=\"line\">         ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">     )</div><div class=\"line\"> &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>昨天在认识了什么是react之后，今天开始用代码来写一些demo，跟着慕课网的视频一起写demo发现运行不出来，找其原因是视频太老了，react已经更新换代了，摔！！<br>然后跟着阮一峰老师一起写12个demo，阮一峰老师的教程：<a href=\"http://note.youdao.com/http://www.ruanyifeng.com/blog/2015/03/react.html\">React 入门实例教程</a>，希望大家可以看一下老师写的demo<br><a href=\"https://github.com/sunshine940326/reactDemo/tree/master\">github地址</a>，求fork，求star，(～￣▽￣)～<br>","more":"</p>\n<h1 id=\"HTML模板\"><a href=\"#HTML模板\" class=\"headerlink\" title=\"HTML模板\"></a>HTML模板</h1><p>这是一个最简单的react模板<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;div&gt;</div><div class=\"line\">                hello world</div><div class=\"line\">            &lt;/div&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<h2 id=\"不同版本的react之间的差异\"><a href=\"#不同版本的react之间的差异\" class=\"headerlink\" title=\"不同版本的react之间的差异\"></a>不同版本的react之间的差异</h2><h3 id=\"jsx和babel\"><a href=\"#jsx和babel\" class=\"headerlink\" title=\"jsx和babel\"></a>jsx和babel</h3><p>在之前我所观看的慕课网的初识react的视频中的模板和这个有些出入，发现在慕课网上敲出来的代码没有效果，原因是react已经更新，其实最主要的变化主要是 之前使用jsxTransformer来编译JSX语法的，现在是使用babel来编译的，使用时的区别是：</p>\n<ol>\n<li>script标签由原来的”text/jsx”变为”text/babel”</li>\n<li>所引入的js库有原来的react.js和jsxTransformer.js变为browser.js<blockquote>\n<ol>\n<li>JSX是什么JSX其实是JavaScript的扩展，React为了代码的可读性更方便地创建虚拟DOM等原因，加入了一些类似XML的语法的扩展。</li>\n<li>编译器——jsxTransformerJSX代码并不能直接运行，需要将它编译成正常的JavaScript表达式才能运行，jsxTransformer.js就是这一编译器的角色。</li>\n<li><p>第二代编译器——babel<br>React官方博客发布了一篇文章，声明其自身用于JSX语法解析的编译器JSTransform已经过期，不再维护，React JS和React Native已经全部采用第三方Babel的JSX编译器实现。原因是两者在功能上已经完全重复，而Babel作为专门的JavaScript语法编译工具，提供了更为强大的功能。而browser.js是babel编译器的浏览器版本。</p>\n<h3 id=\"React-reader和ReactDOM-render\"><a href=\"#React-reader和ReactDOM-render\" class=\"headerlink\" title=\"React.reader和ReactDOM.render\"></a>React.reader和ReactDOM.render</h3><p>另一个变更的地方就是React.reader和ReactDOM.render，或许你也在网上看到有的代码用的是react，有的用的是reactDOM<br>这个是react最新版api，也就是0.14版本做出的改变。主要是为了使React能在更多的不同环境下更快、更容易构建。于是把react分成了react和react-dom两个部分。这样就为web版的react和移动端的React Native共享组件铺平了道路。也就是说我们可以跨平台使用相同的react组件。</p>\n<p>新的react包包含了React.createElement，.createClass，.Component，.PropTypes，.children以及其他元素和组件类。这些都是你需要构建组件时助手。 </p>\n</li>\n</ol>\n<p>而react-dom包包括ReactDOM.render，.unmountComponentAtNode和.findDOMNode。在 react-dom/server ，有ReactDOMServer.renderToString和.renderToStaticMarkup服务器端渲染支持。</p>\n<p>总的来说，两者的区别就是：ReactDom是React的一部分。ReactDOM是React和DOM之间的粘合剂，一般用来定义单一的组件，或者结合ReactDOM.findDOMNode（）来使用。更重要的是ReactDOM包已经允许开发者删除React包添加的非必要的代码，并将其移动到一个更合适的存储库。</p>\n</blockquote>\n</li>\n</ol>\n<hr>\n<p>通过以上的介绍，你应该就清楚了这个demo个行代码的意思了<br>script加载的三个库：<code>react.js</code>：React的核心库， <code>react-dom.js</code>:react中和dom有关的库，<code>Browser.js</code>将将jsx转化为js<br><code>ReactDOM.render(componments,containerName)</code>函数是将<code>componments</code>插入到<code>containerName</code>中，这个方法有两个参数，第一个是要插入的dom，后一个是插入到什么地方。上面的代码是将一个内容为hello world的div插入到id位container的div中。<br>react中可以直接在js中写html标签，这里运用的是jsx语法。但是这里并不是真正的dom节点，只是虚拟的dom，因为直接修改html的dom代价太大，所以我们操作虚拟dom，然后react有自己的diff算法，对比改动的地方，再完成对dom的操作（自己肤浅的理解）</p>\n<h1 id=\"虚拟DOM\"><a href=\"#虚拟DOM\" class=\"headerlink\" title=\"虚拟DOM\"></a>虚拟DOM</h1><blockquote>\n<p>组件并不是真实的 DOM 节点，而是存在于内存之中的一种数据结构，叫做虚拟 DOM （virtual DOM）。只有当它插入文档以后，才会变成真实的 DOM 。根据 React 的设计，所有的 DOM 变动，都先在虚拟 DOM 上发生，然后再将实际发生变动的部分，反映在真实 DOM上，这种算法叫做 DOM diff ，它可以极大提高网页的性能表现。<br>这里有几点需要注意的：</p>\n<ol>\n<li><code>componments</code>只能是一个dom节点，你可以插入两个标签，但是一定要用一个标签包裹在外面，也就是说最外层一定要是一个标签<br>至此，我们的第一个react工程就写好了，可以在浏览器中查看效果，效果如下<img src=\"http://image.beekka.com/blog/2015/bg2015033109.png\" alt=\"image\"><h1 id=\"JXL语法\"><a href=\"#JXL语法\" class=\"headerlink\" title=\"JXL语法\"></a>JXL语法</h1>JSX是React的核心组成部分，它使用XML标记的方式去直接声明界面，界面组件之间可以互相嵌套。可以理解为在JS中编写与XML类似的语言,一种定义带属性树结构（DOM结构）的语法，它的目的不是要在浏览器或者引擎中实现，它的目的是通过各种编译器将这些标记编译成标准的JS语言。<br><strong>利用 JSX 编写 DOM 结构，可以用原生的 HTML 标签，也可以直接像普通标签一样引用 React 组件。这两者约定通过大小写来区分，小写的字符串是 HTML 标签，大写开头的变量是 React 组件。</strong><h3 id=\"使用-HTML-标签：\"><a href=\"#使用-HTML-标签：\" class=\"headerlink\" title=\"使用 HTML 标签：\"></a>使用 HTML 标签：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\"></div><div class=\"line\">var myDivElement = &lt;div className=&quot;foo&quot; /&gt;;</div><div class=\"line\">render(myDivElement, document.getElementById(&apos;mountNode&apos;));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<p>HTML 里的 <code>class</code> 在 JSX 里要写成 <code>className</code>，因为 <code>class</code> 在 JS 里是保留关键字。同理某些属性比如 <code>for</code> 要写成 <code>htmlFor</code>。</p>\n<h3 id=\"使用组件：\"><a href=\"#使用组件：\" class=\"headerlink\" title=\"使用组件：\"></a>使用组件：</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; render &#125; from &apos;react-dom&apos;;</div><div class=\"line\">import MyComponent from &apos;./MyComponet&apos;;</div><div class=\"line\"></div><div class=\"line\">var myElement = &lt;MyComponent someProperty=&#123;true&#125; /&gt;;</div><div class=\"line\">render(myElement, document.body);</div></pre></td></tr></table></figure>\n<p>更多关于使用jsx的方法请见<a href=\"https://hulufei.gitbooks.io/react-tutorial/content/jsx-in-depth.html\">使用 JSX</a></p>\n<h1 id=\"component组件\"><a href=\"#component组件\" class=\"headerlink\" title=\"component组件\"></a>component组件</h1><p>component在react里面可以认为是组件的意思，是react中最小也是最重要的组成部分，在概念上类似于模块<br>将代码封装成组件之后我们就可以像插入普通html标签一样插入这个组件，React.createClass 方法就用于生成一个组件类（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo4\">demo04</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var HellOMessage = React.createClass(&#123;</div><div class=\"line\">    render:function () &#123;</div><div class=\"line\">        return &lt;h1&gt;Hello &#123;this.props.name&#125;&lt;/h1&gt;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">    </div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;HellOMessage name=&quot;John&quot; /&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>**因为这里是插入的组件，所以<code>HellOMessage</code>首字母需要大写</p>\n<p>上面代码中，变量 <code>HelloMessage</code> 就是一个组件类。模板插入 <code>&lt;HelloMessage /&gt;</code> 时，会自动生成 HelloMessage 的一个实例（下文的”组件”都指组件类的实例）。所有组件类都必须有自己的 <code>render</code> 方法，用于输出组件。</p>\n<p>组件的用法与原生的 HTML 标签完全一致，可以任意加入属性，比如 <code>&lt;HelloMessage name=&quot;John&quot;&gt;</code> ，就是 <code>HelloMessage</code> 组件加入一个 <code>name</code> 属性，值为 <code>John</code>。组件的属性可以在组件类的 <code>this.props</code> 对象上获取，比如 <code>name</code> 属性就可以通过 <code>this.props.name</code> 读取。上面代码的运行结果如下。<br><img src=\"http://image.beekka.com/blog/2015/bg2015033108.png\" alt=\"image\"></p>\n<p><code>this.props</code> 对象的属性与组件的属性一一对应，但是有一个例外，就是 <code>this.props.children</code> 属性。它表示组件的所有子节点（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo5\">demo05</a>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var NotesList = React.createClass(&#123;</div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;ol&gt;</div><div class=\"line\">      &#123;</div><div class=\"line\">        React.Children.map(this.props.children, function (child) &#123;</div><div class=\"line\">          return &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</div><div class=\"line\">        &#125;)</div><div class=\"line\">      &#125;</div><div class=\"line\">      &lt;/ol&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(</div><div class=\"line\">  &lt;NotesList&gt;</div><div class=\"line\">    &lt;span&gt;hello&lt;/span&gt;</div><div class=\"line\">    &lt;span&gt;world&lt;/span&gt;</div><div class=\"line\">  &lt;/NotesList&gt;,</div><div class=\"line\">  document.body</div><div class=\"line\">);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意， <code>this.props.children</code> 的值有三种可能：如果当前组件没有子节点，它就是 <code>undefined</code> ;如果有一个子节点，数据类型是 <code>object</code> ；如果有多个子节点，数据类型就是 <code>array</code> 。所以，处理 <code>this.props.children</code> 的时候要小心。<br>React 提供一个工具方法 <code>React.Children</code> 来处理 <code>this.props.children</code> 。我们可以用 <code>React.Children.map</code> 来遍历子节点，而不用担心 <code>this.props.children</code> 的数据类型是 <code>undefined</code> 还是 <code>object</code>。更多的 <code>React.Children</code> 的方法，<a href=\"https://facebook.github.io/react/docs/react-api.html\">请参考官方文档</a>。</p>\n<h1 id=\"PropTypes\"><a href=\"#PropTypes\" class=\"headerlink\" title=\"PropTypes\"></a>PropTypes</h1><p>组件的属性可以接受任意值，字符串、对象、函数都可以。所以我们react提供了一种机制，验证别人在使用我们的组件时提供的参数是否符合要求<br>组件类的<code>PropTypes</code>属性，就是用来验证组件实例的属性是否符合要求（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo6\">demo06</a>）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var data = &quot;123&quot;;</div><div class=\"line\"></div><div class=\"line\">    var TestPropsType = React.createClass(&#123;</div><div class=\"line\">        propsType:&#123;</div><div class=\"line\">            title:React.propsType.string.isRequired,</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render: function () &#123;</div><div class=\"line\">            return &lt;h1&gt;&#123;this.props.title&#125;&lt;/h1&gt;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;TestPropsType title=&#123;data&#125;/&gt;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>这就是验证了在使用<code>TestPropsType</code>这个组件时<code>title</code>属性是必须的并且传入的参数是字符串，如果将<code>data</code> 改为<code>var data = 123</code>，<code>title</code>属性就通不过验证了,会报错</p>\n<h1 id=\"获取真实的DOM节点\"><a href=\"#获取真实的DOM节点\" class=\"headerlink\" title=\"获取真实的DOM节点\"></a>获取真实的DOM节点</h1><p>从组件获取真实 DOM 的节点，就要用到 ref 属性（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo7\">demo07</a> ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var MyComponent = React.createClass(&#123;</div><div class=\"line\">        handleClick : function () &#123;</div><div class=\"line\">            this.refs.myTextInput.focus();</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;div&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; ref=&quot;myTextInput&quot;/&gt;</div><div class=\"line\">                        &lt;input type=&quot;text&quot; value=&quot;Focus the text input&quot; onClick=&#123;this.handleClick&#125;/&gt;</div><div class=\"line\">                    &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;MyComponent/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>这个demo中，组件<code>MyConmponent</code>的子节点有一个文本输入框，用于获取用户的输入。所以我们必须获取真实的DOM节点，所以在文本框的<code>input</code>标签有一个ref属性，然后<code>this.refs.[redName]</code>就会返回这个真实的DOM节点。</p>\n<h1 id=\"state\"><a href=\"#state\" class=\"headerlink\" title=\"state\"></a>state</h1><p>组件免不了要与用户互动，React的一大创新就是jiang将组件看成是一个状态机，一开始就有一个初始状态，然后用户互动，导致状态的改变，从而重新渲染UI（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo8\">demo08</a> ）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var LikeBtn = React.createClass(&#123;</div><div class=\"line\">        getInitialState: function () &#123;</div><div class=\"line\">            return &#123;liked:false&#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        handleClick:function (event) &#123;</div><div class=\"line\">            this.setState(&#123;liked:!this.state.liked&#125;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            var text = this.state.liked ? &apos;like&apos; : &apos;haven\\&apos;t liked&apos;;</div><div class=\"line\">            return(</div><div class=\"line\">                    &lt;p onClick=&#123;this.handleClick&#125;&gt;</div><div class=\"line\">                        You &#123;text&#125; this. click to toggle</div><div class=\"line\">                    &lt;/p&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;LikeBtn/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\"></div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>\n<p>在这个demo中，在组件<code>LikeBtn</code>中，首先为其定义了<code>InitialState:liked:false</code>,就是<code>liked</code>初始时的状态为<code>false</code>,然后当用户点击时,导致状态的变化，<code>this.setState</code>方法就修改<code>state</code>,将<code>liked</code>修改，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h1 id=\"React-state与props区别\"><a href=\"#React-state与props区别\" class=\"headerlink\" title=\"React state与props区别\"></a>React state与props区别</h1><p><code>state</code>与<code>props</code>都是描绘组件的特性的，所以有时候会容易混淆，所以来说一下两者的区别<br><code>state</code>可以理解为状态，可以认为是组件自带的性质，当发生交互效果的时候可以通过钩子检测到然后判断是否需要改变状态，状态改变时组件也会进行相应的更新。比如在demo8里面，初始的状态为<code>false</code>，然后当我们点击组件（发生了交互，触发事件），然后状态改变<code>liked</code>的状态变为<code>true</code>，因为状态的改变，所以<code>p</code>中的文字就会做出相应的改变<br><code>props</code>可以理解为属性，是由父组件继承来的，所以一旦定义就不能改变</p>\n<h2 id=\"props属性的用法\"><a href=\"#props属性的用法\" class=\"headerlink\" title=\"props属性的用法\"></a>props属性的用法</h2><h3 id=\"键值对：值可以有多种形式\"><a href=\"#键值对：值可以有多种形式\" class=\"headerlink\" title=\"键值对：值可以有多种形式\"></a>键值对：值可以有多种形式<HelloWorld name= ? /></h3><ul>\n<li>字符串：”XiaoWang”;</li>\n<li>求值表达式 {123}、{“XiaoWang”};</li>\n<li>数组{[1,2,3]};</li>\n<li>变量{variable};</li>\n<li>函数求值表达式{function}（不推荐，如果需要函数可以单独把函数提取出来然后单独调用函数）;<h3 id=\"展开语法-…props-：\"><a href=\"#展开语法-…props-：\" class=\"headerlink\" title=\"展开语法{…props}：\"></a>展开语法{…props}：</h3>React会自动把对象中的属性和值当做属性的赋值<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">var HelloWorld =React.createClass(&#123;</div><div class=\"line\">     rencer:function () &#123;</div><div class=\"line\">         return &lt;p&gt;Hello,&#123;this.props.name1 + &apos; &apos;this.props.name2&#125;&lt;/p&gt;;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> var HelloUniverse = React.createClass(&#123;</div><div class=\"line\">     getInitialState:function () &#123;</div><div class=\"line\">         return &#123;</div><div class=\"line\">             name1:&apos;Tim&apos;,</div><div class=\"line\">             name2:&apos;John&apos;,</div><div class=\"line\">         &#125;;</div><div class=\"line\">     &#125;,</div><div class=\"line\">     handleChange: function (event) &#123;</div><div class=\"line\">         this.setState(&#123;name: event.target.value&#125;);</div><div class=\"line\">     &#125;,</div><div class=\"line\">     render: function () &#123;</div><div class=\"line\">         return &lt;div&gt;</div><div class=\"line\">         &lt;HelloWorld name=&#123;...this.state&#125;&gt;&lt;/HelloWorld&gt;</div><div class=\"line\">         &lt;br/&gt;</div><div class=\"line\">         &lt;input type=&quot;text&quot; onChange=&#123;this.handleChange&#125; /&gt;</div><div class=\"line\">         &lt;/div&gt;</div><div class=\"line\">     &#125;,</div><div class=\"line\"> &#125;);</div><div class=\"line\"> ReactDom.render(&lt;HelloUniverse /&gt;,document.body);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h3><p>getDefaultProps 方法可以用来设置组件属性的默认值。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">var MyTitle = React.createClass(&#123;</div><div class=\"line\">  getDefaultProps : function () &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      title : &apos;Hello World&apos;</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">     return &lt;h1&gt; &#123;this.props.title&#125; &lt;/h1&gt;;</div><div class=\"line\">   &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\">ReactDOM.render(&lt;MyTitle /&gt;,document.body);</div></pre></td></tr></table></figure></p>\n<h2 id=\"state状态的用法\"><a href=\"#state状态的用法\" class=\"headerlink\" title=\"state状态的用法\"></a>state状态的用法</h2><h3 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h3><p><code>object getInitialState()</code></p>\n<p><code>getInitialState</code>方法用于定义初始状态，也就是一个对象，这个对象可以通过 <code>this.state</code> 属性读取。在组件挂载之前调用一次。返回值将会作为 <code>this.state</code> 的初始值。</p>\n<h3 id=\"setState\"><a href=\"#setState\" class=\"headerlink\" title=\"setState\"></a>setState</h3><p><code>setState(object nextState[, function callback])</code><br>合并 <code>nextState</code> 和当前 <code>state</code>。这是在事件处理函数中和请求回调函数中触发 UI 更新的主要方法。另外，也支持可选的回调函数，该函数在 <code>setState</code> 执行完毕并且组件重新渲染完成之后调用。<code>this.setState</code> 方法用于修改状态值，每次修改以后，自动调用 <code>this.render</code> 方法，再次渲染组件。</p>\n<h3 id=\"replaceState\"><a href=\"#replaceState\" class=\"headerlink\" title=\"replaceState\"></a>replaceState</h3><p><code>replaceState(object nextState[, function callback])</code><br>类似于 <code>setState()</code>，但是删除之前所有已存在的 <code>state</code> 键，这些键都不在 <code>nextState</code> 中。</p>\n<h1 id=\"表单\"><a href=\"#表单\" class=\"headerlink\" title=\"表单\"></a>表单</h1><p>用户在表单填入的内容，属于用户跟组件的互动，所以不能用 <code>this.props</code> 读取（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo9\">demo9</a> ）。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">var InputTest = React.createClass(&#123;</div><div class=\"line\">    getInitialState: function () &#123;</div><div class=\"line\">        return&#123;</div><div class=\"line\">            value : &apos;hello!&apos;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    handleChange: function (event) &#123;</div><div class=\"line\">        this.setState(&#123;</div><div class=\"line\">            value:event.target.value</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    render: function () &#123;</div><div class=\"line\">        var value = this.state.value;</div><div class=\"line\">        return(</div><div class=\"line\">                &lt;div&gt;</div><div class=\"line\">                    &lt;input type=&quot;text&quot; value=&#123;value&#125; onChange=&#123;this.handleChange&#125;/&gt;</div><div class=\"line\">                    &lt;p&gt;&#123;value&#125;&lt;/p&gt;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">            &lt;InputTest/&gt;</div><div class=\"line\">            ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>上述代码的效果是有一个输入框，输入框下面是一个<code>p</code>标签，第一次打开输入框和下面的文字都是Hello！然后改变输入框的内容就会在下面显示。</p>\n<p>文本输入框的值，不能用 <code>this.props.value</code> 读取，而要定义一个 <code>onChange</code> 事件的回调函数，通过 <code>event.target.value</code> 读取用户输入的值。<code>textarea</code> 元素、<code>select</code>元素、<code>radio</code>元素都属于这种情况</p>\n<h1 id=\"componments的生命周期\"><a href=\"#componments的生命周期\" class=\"headerlink\" title=\"componments的生命周期\"></a>componments的生命周期</h1><p>组件的生命周期分为三个状态：</p>\n<ul>\n<li>Mounting：已插入真实DOM</li>\n<li>Updating： 正在被重新渲染</li>\n<li>Unmounting：已移除真实的DOM<br>React 为每个状态都提供了两种处理函数，<code>will</code> 函数在进入状态之前调用，<code>did</code> 函数在进入状态之后调用，三种状态共计五种处理函数。</li>\n<li>componentWillMount()</li>\n<li>componentDidMount()</li>\n<li>componentWillUpdate(object nextProps, object nextState)</li>\n<li>componentDidUpdate(object prevProps, object prevState)</li>\n<li>componentWillUnmount()<br>此外，React 还提供两种特殊状态的处理函数。</li>\n<li>componentWillReceiveProps(object nextProps)：已加载组件收到新的参数时调用</li>\n<li>shouldComponentUpdate(object nextProps, object nextState)：组件判断是否重新渲染时调用</li>\n</ul>\n<p><img src=\"http://img.blog.csdn.net/20170303184018708?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p><img src=\"http://img.blog.csdn.net/20170303184131615?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>下面是一个例子（查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo10\">demo10</a> )。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">    var Hello = React.createClass(&#123;</div><div class=\"line\">        getInitialState:function () &#123;</div><div class=\"line\">            alert(&apos;init&apos;)</div><div class=\"line\">            return&#123;</div><div class=\"line\">                opacity:1.0</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentWillMount:function () &#123;</div><div class=\"line\">          alert(&apos;Will&apos;)</div><div class=\"line\">        &#125;,</div><div class=\"line\"></div><div class=\"line\">        componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            this.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = this.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                this.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;.bind(this),100)</div><div class=\"line\">        &#125;,</div><div class=\"line\">        render:function () &#123;</div><div class=\"line\">            return(</div><div class=\"line\">                &lt;div style=&#123;&#123;opacity:this.state.opacity&#125;&#125;&gt;</div><div class=\"line\">                    Hello &#123;this.props.name&#125;</div><div class=\"line\">                &lt;/div&gt;</div><div class=\"line\">            )</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\"></div><div class=\"line\">    ReactDOM.render(</div><div class=\"line\">        &lt;Hello name=&quot;world!&quot;/&gt;</div><div class=\"line\">        ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">    )</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>整理demo写了三个函数：getInitialState、componentWillMount、componentDidMount可以通过弹出的内容来很直观的知道到component的生命周期。</p>\n<p>为什么用bind函数，作为javascript初学者的我是这样理解的，我们在componentDidMount函数中又增加了定时器函数setInterval，所以在定时器函数的内部使用this的话，this代表的是setInterval的实例对象，但是我们需要this指向componentDidMount的实例对象，所以需要用bind函数将this指向改变，还有一种写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">componentDidMount:function () &#123;</div><div class=\"line\">            alert(&apos;Did&apos;)</div><div class=\"line\">            var _self  = this;</div><div class=\"line\">            _self.timer = setInterval(function () &#123;</div><div class=\"line\">                var opacity = _self.state.opacity;</div><div class=\"line\">                opacity -= 0.05;</div><div class=\"line\">                if(opacity&lt;0.1)&#123;</div><div class=\"line\">                    opacity = 1.0</div><div class=\"line\">                &#125;</div><div class=\"line\">                _self.setState(&#123;</div><div class=\"line\">                    opacity: opacity</div><div class=\"line\">                &#125;);</div><div class=\"line\">            &#125;,100)</div><div class=\"line\">        &#125;,</div></pre></td></tr></table></figure>\n<p>这是在setInterval函数外，先将this对的复制给一个局部变量 _self,然后在setInterval函数内使用这个局部变量_self就可以在setInterval函数内使用componentDidMount中的this，这种好理解但是逼格不够高，( ￣ー￣)( ￣ー￣)</p>\n<h1 id=\"AJAX\"><a href=\"#AJAX\" class=\"headerlink\" title=\"AJAX\"></a>AJAX</h1><p>组件的数据来源，通常是通过 Ajax 请求从服务器获取，可以使用 <code>componentDidMount</code> 方法设置 Ajax 请求，等到请求成功，再用 <code>this.setState</code> 方法重新渲染 UI （查看 <a href=\"https://github.com/sunshine940326/reactDemo/tree/master/demo11\">demo11</a>) ）。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!DOCTYPE html&gt;</div><div class=\"line\">&lt;html lang=&quot;en&quot;&gt;</div><div class=\"line\">&lt;head&gt;</div><div class=\"line\">    &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class=\"line\">    &lt;title&gt;Title&lt;/title&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/react-dom.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/browser.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;script src=&quot;../build/jquery.min.js&quot;&gt;&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/head&gt;</div><div class=\"line\">&lt;body&gt;</div><div class=\"line\"> &lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</div><div class=\"line\"></div><div class=\"line\"> &lt;script type=&quot;text/babel&quot;&gt;</div><div class=\"line\">     var UserGist = React.createClass(&#123;</div><div class=\"line\">         getInitialState:function () &#123;</div><div class=\"line\">             return&#123;</div><div class=\"line\">                 username: &apos;&apos;,</div><div class=\"line\">                 lastGistUrl: &apos;&apos;,</div><div class=\"line\">             &#125;</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         componentDidMount:function () &#123;</div><div class=\"line\">             $.get(this.props.source,function (result) &#123;</div><div class=\"line\">                 var lastGist = result[0];</div><div class=\"line\">                 if(this.isMounted())&#123;</div><div class=\"line\">                     this.setState(&#123;</div><div class=\"line\">                         username: lastGist.owner.login,</div><div class=\"line\">                         lastGistUrl: lastGist.html_url</div><div class=\"line\">                     &#125;);</div><div class=\"line\">                 &#125;</div><div class=\"line\">             &#125;.bind(this));</div><div class=\"line\">         &#125;,</div><div class=\"line\"></div><div class=\"line\">         render: function () &#123;</div><div class=\"line\">             return(</div><div class=\"line\">                 &lt;div&gt;</div><div class=\"line\">                     &#123;this.state.username&#125;&apos;s last gist is &lt;a href=&#123;this.lastGistUrl&#125;&gt;here&lt;/a&gt;.</div><div class=\"line\">                 &lt;/div&gt;</div><div class=\"line\">             )</div><div class=\"line\">         &#125;</div><div class=\"line\">     &#125;)</div><div class=\"line\"></div><div class=\"line\">     ReactDOM.render(</div><div class=\"line\">         &lt;UserGist source=&quot;https://api.github.com/users/octocat/gists&quot;/&gt;</div><div class=\"line\">         ,document.getElementById(&apos;container&apos;)</div><div class=\"line\">     )</div><div class=\"line\"> &lt;/script&gt;</div><div class=\"line\">&lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure></p>"},{"title":"将项目上传至github","date":"2017-02-25T09:35:35.000Z","_content":"概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题\n<!--more-->\n\n什么是git：\n-------\n\n之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统\n有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。\n\n关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程[Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n\n对github的初步认识\n---------\n因为现在使用github还不是特别熟练，只指出最基本的，\ngithub是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门[怎么使用Github](https://www.zhihu.com/question/20070065)\n\n我现在的使用有两个方面：\n 1. 使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）\n 但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~\n 2. 第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库\n 3. 当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~\n 4. 和海内外同胞共享资源，\n\n使用github遇到的问题，ssh秘钥变为灰色\n----------------\n先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：\n“Git”->“Git Bash”，输入\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email email@example.com\n$ ssh -T Git@github.com\n```\n\ngit config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n\n执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的\n\n但是在最后一步的时候报错了\n\n```\nssh: connect to host github.com port 22: Connection timed out\n```\n解决方法是\n在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：\n\n```\nHost github.com\nUser YourEmail@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\nYourEmail为您的邮箱\n再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。 \n![这里写图片描述](http://img.blog.csdn.net/20160113200605078)\n\n这时验证就可以通过。 \n\n\n将你的项目托管至github的方式\n---------------\n这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：\n 1. 网页版的github网页\n 2. 客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n 3. 我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度\n\n首先要新建一个项目，然后有三种上传项目的方式：\n\n 1. …or create a new repository on the command line  新建一个项目\n\n```\necho \"# 2017-02-23\" >> README.md     新建一个README.md文件并在里面写入 2017-02-23\ngit init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件\ngit add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)\ngit commit -m \"first commit\"         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m \"有意义的附加说明\"）\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系\ngit push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master\n```\n 2. …or push an existing repository from the command line  通过命令行提交一个已有的项目\n\n```\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git\ngit push -u origin master\n```\n 3. …or import code from another repository   从其他项目引入\n\n```\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n```\n\n这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时\n网上的解决方法没有看懂，先贴出来：[git遇到的诡异错误: Failed connect to github.com:443](http://blog.csdn.net/u011249920/article/details/55190409)\n\n总结一下用命令行提交项目的步骤（已经init过了）：\n 1. git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）\n 2. git commit -m \"first commit\"\n 3. push origin master\n \n 可以使用git status查看文件状态\n","source":"_posts/Upload-project-to-GitHub.md","raw":"---\ntitle: 将项目上传至github\ndate: 2017-02-25 17:35:35\ntags: git \ncategories: git\n---\n概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题\n<!--more-->\n\n什么是git：\n-------\n\n之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统\n有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。\n\n关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程[Git教程 - 廖雪峰的官方网站](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n\n对github的初步认识\n---------\n因为现在使用github还不是特别熟练，只指出最基本的，\ngithub是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门[怎么使用Github](https://www.zhihu.com/question/20070065)\n\n我现在的使用有两个方面：\n 1. 使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）\n 但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~\n 2. 第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库\n 3. 当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~\n 4. 和海内外同胞共享资源，\n\n使用github遇到的问题，ssh秘钥变为灰色\n----------------\n先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：\n“Git”->“Git Bash”，输入\n\n```\n$ git config --global user.name \"Your Name\"\n$ git config --global user.email email@example.com\n$ ssh -T Git@github.com\n```\n\ngit config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。\n\n\n执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的\n\n但是在最后一步的时候报错了\n\n```\nssh: connect to host github.com port 22: Connection timed out\n```\n解决方法是\n在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：\n\n```\nHost github.com\nUser YourEmail@163.com\nHostname ssh.github.com\nPreferredAuthentications publickey\nIdentityFile ~/.ssh/id_rsa\nPort 443\n```\nYourEmail为您的邮箱\n再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。 \n![这里写图片描述](http://img.blog.csdn.net/20160113200605078)\n\n这时验证就可以通过。 \n\n\n将你的项目托管至github的方式\n---------------\n这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：\n 1. 网页版的github网页\n 2. 客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n 3. 我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度\n\n首先要新建一个项目，然后有三种上传项目的方式：\n\n 1. …or create a new repository on the command line  新建一个项目\n\n```\necho \"# 2017-02-23\" >> README.md     新建一个README.md文件并在里面写入 2017-02-23\ngit init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件\ngit add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)\ngit commit -m \"first commit\"         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m \"有意义的附加说明\"）\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系\ngit push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master\n```\n 2. …or push an existing repository from the command line  通过命令行提交一个已有的项目\n\n```\ngit remote add origin https://github.com/sunshine940326/2017-02-23node1.git\ngit push -u origin master\n```\n 3. …or import code from another repository   从其他项目引入\n\n```\nYou can initialize this repository with code from a Subversion, Mercurial, or TFS project.\n```\n\n这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时\n网上的解决方法没有看懂，先贴出来：[git遇到的诡异错误: Failed connect to github.com:443](http://blog.csdn.net/u011249920/article/details/55190409)\n\n总结一下用命令行提交项目的步骤（已经init过了）：\n 1. git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）\n 2. git commit -m \"first commit\"\n 3. push origin master\n \n 可以使用git status查看文件状态\n","slug":"Upload-project-to-GitHub","published":1,"updated":"2017-03-12T02:46:45.975Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel3m001mqkyf28jsnn62","content":"<p>概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题<br><a id=\"more\"></a></p>\n<h2 id=\"什么是git：\"><a href=\"#什么是git：\" class=\"headerlink\" title=\"什么是git：\"></a>什么是git：</h2><p>之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统<br>有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。</p>\n<p>关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"external\">Git教程 - 廖雪峰的官方网站</a></p>\n<h2 id=\"对github的初步认识\"><a href=\"#对github的初步认识\" class=\"headerlink\" title=\"对github的初步认识\"></a>对github的初步认识</h2><p>因为现在使用github还不是特别熟练，只指出最基本的，<br>github是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门<a href=\"https://www.zhihu.com/question/20070065\" target=\"_blank\" rel=\"external\">怎么使用Github</a></p>\n<p>我现在的使用有两个方面：</p>\n<ol>\n<li>使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）<br>但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~</li>\n<li>第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库</li>\n<li>当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~</li>\n<li>和海内外同胞共享资源，</li>\n</ol>\n<h2 id=\"使用github遇到的问题，ssh秘钥变为灰色\"><a href=\"#使用github遇到的问题，ssh秘钥变为灰色\" class=\"headerlink\" title=\"使用github遇到的问题，ssh秘钥变为灰色\"></a>使用github遇到的问题，ssh秘钥变为灰色</h2><p>先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：<br>“Git”-&gt;“Git Bash”，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email email@example.com</div><div class=\"line\">$ ssh -T Git@github.com</div></pre></td></tr></table></figure>\n<p>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的</p>\n<p>但是在最后一步的时候报错了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh: connect to host github.com port 22: Connection timed out</div></pre></td></tr></table></figure>\n<p>解决方法是<br>在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">User YourEmail@163.com</div><div class=\"line\">Hostname ssh.github.com</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">Port 443</div></pre></td></tr></table></figure>\n<p>YourEmail为您的邮箱<br>再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。<br><img src=\"http://img.blog.csdn.net/20160113200605078\" alt=\"这里写图片描述\"></p>\n<p>这时验证就可以通过。 </p>\n<h2 id=\"将你的项目托管至github的方式\"><a href=\"#将你的项目托管至github的方式\" class=\"headerlink\" title=\"将你的项目托管至github的方式\"></a>将你的项目托管至github的方式</h2><p>这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：</p>\n<ol>\n<li>网页版的github网页</li>\n<li>客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</li>\n<li>我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度</li>\n</ol>\n<p>首先要新建一个项目，然后有三种上传项目的方式：</p>\n<ol>\n<li>…or create a new repository on the command line  新建一个项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;# 2017-02-23&quot; &gt;&gt; README.md     新建一个README.md文件并在里面写入 2017-02-23</div><div class=\"line\">git init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件</div><div class=\"line\">git add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)</div><div class=\"line\">git commit -m &quot;first commit&quot;         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m &quot;有意义的附加说明&quot;）</div><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系</div><div class=\"line\">git push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or push an existing repository from the command line  通过命令行提交一个已有的项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or import code from another repository   从其他项目引入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</div></pre></td></tr></table></figure>\n<p>这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时<br>网上的解决方法没有看懂，先贴出来：<a href=\"http://blog.csdn.net/u011249920/article/details/55190409\" target=\"_blank\" rel=\"external\">git遇到的诡异错误: Failed connect to github.com:443</a></p>\n<p>总结一下用命令行提交项目的步骤（已经init过了）：</p>\n<ol>\n<li>git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）</li>\n<li>git commit -m “first commit”</li>\n<li><p>push origin master</p>\n<p>可以使用git status查看文件状态</p>\n</li>\n</ol>\n","excerpt":"<p>概括的说明什么是git和github，以及怎么上传你的项目到github。主要说明在使用github时遇到的问题<br>","more":"</p>\n<h2 id=\"什么是git：\"><a href=\"#什么是git：\" class=\"headerlink\" title=\"什么是git：\"></a>什么是git：</h2><p>之前我使用过svn进行和队友合作开发项目，觉得svn是一个很好的工具，可以避免代码冲突，解决团队代码的同步问题，svn是集中式的版本控制系统，而git是分布式的版本控制系统<br>有人拿git和svn比较，我觉得git更偏向于版本控制，就是自己对自己的代码进行控制，有了版本的概念和回滚，即使不是变成人员也可以使用，比如作家可以管理自己的作品。</p>\n<p>关于git怎么使用的，百度可以搜出来一大堆，这里就不再赘述了，推荐廖雪峰老师的教程<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\">Git教程 - 廖雪峰的官方网站</a></p>\n<h2 id=\"对github的初步认识\"><a href=\"#对github的初步认识\" class=\"headerlink\" title=\"对github的初步认识\"></a>对github的初步认识</h2><p>因为现在使用github还不是特别熟练，只指出最基本的，<br>github是做什么的，github不仅仅是程序员可以使用的，在知乎上看完之后仿佛开启了新世界的大门<a href=\"https://www.zhihu.com/question/20070065\">怎么使用Github</a></p>\n<p>我现在的使用有两个方面：</p>\n<ol>\n<li>使用gitPage+hexo创建自己的博客，不过我发现如果单纯的以内容为主，在github上建一个仓库其实就是可以的，完全可以达到记录的目的，但谁让咱们是技术工作者呢，为了逼格更高一些，也为了运用更多的技术（前端工作者，有一个自己的网站可以把技术用上何乐而不为呢）<br>但是现阶段我还没有完全搞明白gitpage+hexo创建博客的原理，所以这个工程就一直停滞不前，先挖一个坑┗|｀O′|┛ 嗷~~</li>\n<li>第二个使用github是将自己平时做的demo和小项目做一个备份，相当于自己的在线作品库</li>\n<li>当然，github最出名的功能还是版本控制，但是目前还没有领略其精髓，再挖一个坑，嘤嘤嘤~</li>\n<li>和海内外同胞共享资源，</li>\n</ol>\n<h2 id=\"使用github遇到的问题，ssh秘钥变为灰色\"><a href=\"#使用github遇到的问题，ssh秘钥变为灰色\" class=\"headerlink\" title=\"使用github遇到的问题，ssh秘钥变为灰色\"></a>使用github遇到的问题，ssh秘钥变为灰色</h2><p>先来说一个我遇到的问题，不知道你们有没有遇到，因为不经常上github，所以有的时候我的ssh都会变成灰色的，这样本地就连接不上github，于是找到了解决方法：因为没有设置用户名和邮箱，解决方法如下：<br>“Git”-&gt;“Git Bash”，输入</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;Your Name&quot;</div><div class=\"line\">$ git config --global user.email email@example.com</div><div class=\"line\">$ ssh -T Git@github.com</div></pre></td></tr></table></figure>\n<p>git config命令的–global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。</p>\n<p>执行完最后一步的时候，刷新github的setting页面，就可以看见ssh中的钥匙变成绿色的</p>\n<p>但是在最后一步的时候报错了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh: connect to host github.com port 22: Connection timed out</div></pre></td></tr></table></figure>\n<p>解决方法是<br>在存放公钥私钥(id_rsa和id_rsa.pub)的文件里，新建config文本，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Host github.com</div><div class=\"line\">User YourEmail@163.com</div><div class=\"line\">Hostname ssh.github.com</div><div class=\"line\">PreferredAuthentications publickey</div><div class=\"line\">IdentityFile ~/.ssh/id_rsa</div><div class=\"line\">Port 443</div></pre></td></tr></table></figure>\n<p>YourEmail为您的邮箱<br>再次执行“ssh -T git@github.com”时，会出现提示如下，回车”yes”即可。<br><img src=\"http://img.blog.csdn.net/20160113200605078\" alt=\"这里写图片描述\"></p>\n<p>这时验证就可以通过。 </p>\n<h2 id=\"将你的项目托管至github的方式\"><a href=\"#将你的项目托管至github的方式\" class=\"headerlink\" title=\"将你的项目托管至github的方式\"></a>将你的项目托管至github的方式</h2><p>这里要说一下的是，最开始我认为github只是用来对代码进行版本控制的工具，不知道要怎么用，现在大概总结了三种在github上建仓库的方式：</p>\n<ol>\n<li>网页版的github网页</li>\n<li>客户端版本的github,windows版本的github客户端很多都安装不了，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</li>\n<li>我最喜欢的方式，通过webstorm跟github连接，就可以写完代码直接push，相当之方便，方法不是很难，大家自行百度</li>\n</ol>\n<p>首先要新建一个项目，然后有三种上传项目的方式：</p>\n<ol>\n<li>…or create a new repository on the command line  新建一个项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;# 2017-02-23&quot; &gt;&gt; README.md     新建一个README.md文件并在里面写入 2017-02-23</div><div class=\"line\">git init                             初始化一个git的本地仓库，这时会生成一个.git的隐藏文件</div><div class=\"line\">git add README.md                    用命令git add告诉Git，把文件添加到仓库(实际上就是把文件修改添加到暂存区)</div><div class=\"line\">git commit -m &quot;first commit&quot;         用命令git commit告诉Git，把文件提交到仓库(实际上就是把暂存区的所有内容提交到当前分支)（git commit -m &quot;有意义的附加说明&quot;）</div><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git   将本地仓库与远程建立联系</div><div class=\"line\">git push -u origin master            提交给远程的github .需要说明的是首次提交需要 加-u ,再次提交不需要加-u 即写成git push  origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or push an existing repository from the command line  通过命令行提交一个已有的项目</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git remote add origin https://github.com/sunshine940326/2017-02-23node1.git</div><div class=\"line\">git push -u origin master</div></pre></td></tr></table></figure>\n<ol>\n<li>…or import code from another repository   从其他项目引入</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">You can initialize this repository with code from a Subversion, Mercurial, or TFS project.</div></pre></td></tr></table></figure>\n<p>这里先埋一个坑，在第一种方法进行到git remote add origin这一步的时候一直报错Failed connect to    github.com:443 显示超时<br>网上的解决方法没有看懂，先贴出来：<a href=\"http://blog.csdn.net/u011249920/article/details/55190409\">git遇到的诡异错误: Failed connect to github.com:443</a></p>\n<p>总结一下用命令行提交项目的步骤（已经init过了）：</p>\n<ol>\n<li>git add 将要同步的文件add到暂存区 add后面可以直接跟文件名或文件夹名，也可以直接跟 .表示全部（add和.之间有空格）</li>\n<li>git commit -m “first commit”</li>\n<li><p>push origin master</p>\n<p>可以使用git status查看文件状态</p>\n</li>\n</ol>"},{"title":"利用Gitpage+hexo开发自己的博客","date":"2016-09-15T17:07:17.000Z","_content":"进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。\n<!--more-->\n\nGitpage+hexo\n------------\n\n想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。\n\n环境准备\n====\n\n1 安装Node\n--------\n\n到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi\n\n2 安装Git\n-------\n安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n\n安装步骤\n====\n\n1 安装Hexo\n------\n\n使用git shell,依次输入以下代码命令：\n\n```\ncd /\nnpm install hexo-cli -g\n```\n\n\n命令解释：\n\n**cd和/之间要有空格**，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。\n\n2 安装博客所需文件\n----------\n\n```\ncd /\nhexo init Hexo\ncd /Hexo\nnpm instal\nhexo generate（可简写为hexo g）\nhexo sever（可简写为hexo s）\n```\n\n命令解释:\n\n- cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。\n\n- Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。\n\n- 指向Hexo目录\n\n- 安装依赖文件\n\n- 编译\n\n- 开启本地服务(第5、6步的操作可以合并成hexo s -g)\n\n此时打开浏览器，在地址栏输入http://localhost:4000/\n即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。\n\n那么如何翻墙呢？ 下面提供我所知道的两种方法：\n\n这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: http://pan.baidu.com/s/1c2x7eRu\n密码: z3kw\n\n这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：http://blog.my-eclipse.cn/host-google.html\n\n如果你不想翻墙，可以采用这种方法：\n进入你刚新建好的 blog根目录\n\n```\n themes/landscape/layout/_partial\n\n```\n1，找到 after-footer.ejs把\n\n```\n<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>\n```\n替换成\n\n> `<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>`\n\n2，找到 header.ejs\n注释掉或者删掉 下面这句css引用\n`<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=”stylesheet” type=”text/css”>`\nhexo server 之后。访问 http://localhost:4000 就会看到blog主页了。\n\n如果你成功在http://localhost:4000/\n下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！\n\n> 行百里者半九十\n\n不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：\n\n3 部署博客到服务器\n--------\n\n也就是把博客部署到github page提供的服务器上。\n\n步骤\n\n- 首先回到git shell按ctrl+c，之后输入y即可\n\n\n- 修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：`deploy:  type: github  repo: https://github.com/yourname/blog.git`\n\n\n继续回到git shell输入命令：\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n命令解释:\n\n- 清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n- 开启本地服务，\n- 部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n是的，现在你拥有了自己的博客！\n\n发表博文\n====\n\n千辛万苦建立了博客，那么我们来学习一下如何发表博文。\n\n新建博文\n----\n\n继续回到git shell输入：\n\nhexo new \"新博文的名字\"\n即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。\n\n**Markdown编辑器**\n\n推荐两款我所使用的markdown编辑器：\n\n**MIU**，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：\n链接: http://pan.baidu.com/s/1slMPeTR\n密码: 2pnk\n**正在使用的Atom:**更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。\n可能会遇到的问题\n\n> hexo new [layout] \"postName\" #新建文章\n\n其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md\n\n```\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行\n\n```\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n\npostName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。\n\n注意，所有文件：后面都必须有个空格，不然会报错。\n\n看一下刚才生成的文件hexo\\source\\_posts\\postName.md\n\n```\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n```\n\n始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。\n\n**fancybox**\n可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。\n很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：\n```\nlayout: photo\ntitle: 我的阅历\ndate: 2085-01-16 07:33:44\ntags: [hexo]\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n```\n\n经过测试，文件头上的layout: photo可以省略。\n\n不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md\n```\nlayout: { { layout } }\ntitle: { { title } }\ndate: { { date } }\ntags:\nphotos:\n-\n---\n```\n然后每次可以执行带layout的new命令生成照片文章：\n\n```\nhexo new photo \"photoPostName\" #新建照片文章\n```\ndescription\nmarkdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。\n```\ntitle: hexo你的博客\ndate: 2013-11-22 17:11:54\ncategories: default\ntags: [hexo]\ndescription: 你对本页的描述\n---\n```\nhexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。\n\n**文章摘要**\n在需要显示摘要的地方添加如下代码即可：\n\n```\n以上是摘要\n<!--more-->\n以下是余下全文\n```\nmore以上内容即是文章摘要，在主页显示，more以下内容点击『> Read More』链接打开全文才显示。\n\nhexo中所有文件的编码格式均是UTF-8。\n\n\n优雅的在博客上插入图片\n-----------\n\n看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：\n\n首先确认 _config.yml 中更改 post_asset_folder:true 。\n回到git shell，输入\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n继续执行\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹\n\n\n然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？\n提醒：\n\n写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！\n\n预览和发表\n-----\n\n继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！\n\n```\n1.  hexo clean\n2.  hexo g\n3.  hexo s\n4.  hexo d\n```\n\n更高大上的发表博文的方法\n\n使用Travis CI自动部署你的Hexo博客到Github,请参考[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客\n\n安装主题\n----\n\n如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：\n\n选择主题\n\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你喜欢的主题，我使用的Next主题\n\n安装Next主题\n---\n\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽！\n\n安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist\n```\n\n目录是否是modernist无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为modernist\n\n```\ntheme: modernist\n```\n打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n```\n更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n评论框\n---\n\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用[多说](https://hexo.io/plugins/)\n直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置->域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以[参考这里](http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017)，我是在HeroicYang的基础上修改的。\n\n如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout\\_partial\\comment.ejs里面，如下：\n\n```\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n构建新页面\n-----\n\n那些小图标都是一个新页面，需要手动创建，那么如何创建？\n\n回到git shell，\n\nhexo new page \"页面名称\"\n比如你要创建一个about页面，就输入hexo new page “about”\n\n正确显示各页面内容\n\n发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！\n\n解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：\n\n\n\ncomments: false即关闭此页面的评论功能\n\ntype: “tags”这里的值根据你想更改的页面决定\n\n更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！\n\n安装插件\n----\n\nhexo支持的插件：[Plugins | Hexo](https://hexo.io/plugins/)\n想安装什么插件，按照相关README.md中介绍操作即可。\n\n安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:[第三方服务集成](http://theme-next.iissnan.com/third-party-services.html#swfitype)，介绍非常全面！好好用来装饰你的博客吧！\n\n安装sitemap和feed插件时，如果遇到问题，可以参考:[博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)，安装sitemap后要到[百度站长](http://zhanzhang.baidu.com/?castk=LTE=)提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:[为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n安装swiftype插件，如果遇到问题，可以参考[利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n图床\n---\n\n考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。\n\n免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里[关于key-value存储系统](https://support.qiniu.com/hc/)。\n\n七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇[Linux中国采用七牛云存储支撑图片访问](https://linux.cn/article-2311-1.html)。\n\n如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。\n\n如果你对七牛web版的文件管理界面不满意，可以用官方的[七牛云存储工具](http://docs.qiniu.com/tools/v6/index.html)。\n\n您还可以使用如下图床服务 FarBox，Dropbox，又拍云\n主题优化\n----\n\nNext主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！\n\n[提升Hexo的NexT主题加载速度](http://www.gfwsb.com/2016/improveNexTspeed/)\n\n[使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n绑定域名\n---\n\n购买域名，我是在[万网](https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist)购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个[网站](http://www.xiaoerguo.com/),但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！\n\n如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：\n\n192.30.252.153\n\n192.30.252.154\n\n制作ICO图标\n---\n\nfavicon.ico一般用于作为缩略图的网站标志，[在线制作网站](http://www.bitbug.net/)\n关于是否绑定域名\n\n经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考[单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/),这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！\n\n#至此，基本操作介绍完毕，以下内容普通用户无需了解。\n默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n接下来是重头戏_config.yml，做个简单说明：\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site #整站的基本信息\ntitle: 不如 #网站标题\nsubtitle: 码农，程序猿，未来的昏析师 #网站副标题\ndescription: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head->meta中可看到\nauthor: bruce #网站作者，在下方显示\nemail: bu.ru@qq.com #联系邮箱\nlanguage: zh-CN #语言\n\n# URL #域名和文件结构\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://ibruce.info #你的域名\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing #写文章选项\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post #默认layout方式\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight: #代码高亮\n  enable: true #是否启用\n  line_number: false #是否显示行号\n  tab_replace:\n\n# Category & Tag #分类与标签\ndefault_category: uncategorized # default\ncategory_map:\ntag_map:\n\n# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server #本地服务参数\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: true\nlogger_format:\n\n# Date / Time format #日期显示格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination #分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页10篇文章\npagination_dir: page\n\n# Disqus #社会化评论disqus，我使用多说，在主题中配置\ndisqus_shortname:\n\n# Extensions #插件，暂时未安装插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\n## 主题\ntheme: modernist # raytaylorism # pacman # modernist # light\nexclude_generator:\n\n# Deployment #部署\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库\n```\n修改局部页面\n---\n\n页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：\n```\n.\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-CN.yml      #中文语言\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   └── _widget        #小挂件的布局，页面下方小挂件的控制\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _base      #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts      #字体\n|   |   ├── images     #图片\n|   |   └── style.styl #*.styl引入需要的css源码\n|   ├── fancybox       #fancybox效果源码\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout\\_partial\\header.ejs，比如头上加个搜索框：\n```\n<div>\n<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n <input type=\"search\" name=\"q\" id=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" maxlength=\"20\" placeholder=\"Search\" />\n <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n</form>\n</div>\n```\n将如上代码加入即可，您需要修改css以便这个搜索框比较美观。\n\n再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout\\_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。\n\n统计\n---\n\n页面上显示访问次数可以使用 [不蒜子](http://busuanzi.ibruce.info/)，两行代码即可搞定。\n\n因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。\n编辑文件hexo\\themes\\modernist\\_config.yml，增加配置选项：\n\n```\nbaidu_tongji: true\n```\n新建文件hexo\\themes\\modernist\\layout\\_partial\\baidu_tongji.ejs，内容如下：\n\n```\n<% if (theme.baidu_tongji){ %>\n<script type=\"text/javascript\">\n#你的百度统计代码\n</script>\n<% } %>\n```\n注册并登录百度统计获取你的统计代码。\n\n编辑文件hexo\\themes\\modernist\\layout\\_partial\\head.ejs，在『/head』之前增加：\n\n```\n<%- partial('baidu_tongji') %>\n```\n重新生成并部署你的站点。\n\n不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页->网站列表->获取代码->系统管理设置->统计图标设置->显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。\n\n分享\n---\n\n我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：\n\n- 在hexo\\themes\\modernist\\layout\\_partial\\post下新建jiathis.ejs文件。\n注册加网获得你的分享代码，写入jiathis.ejs。\n- 在hexo\\themes\\modernist\\layout\\_partial\\article.ejs中，添加<%-partial(‘post/jiathis’)%>。\n-分享服务还可以使用如下企业提供的技术[加网](http://www.jiathis.com/)，[bShare](http://www.bshare.cn/)，[百度分享](http://share.baidu.com/)。\n\n网站图标\n\n看一下hexo\\themes\\modernist\\layout\\_partial\\head.ejs，找到这句：\n\n```\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%- config.root %>favicon.ico\">\n```\n你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以[在Faviconer](http://www.faviconer.com/)制作你的ico图标，国内有[比特虫](http://www.bitbug.net/)。\n\n自定义挂件\n---\n\n除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout\\_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist\\_config.yml中配置。\n```\nwidgets:\n  - myWidget\n```\n用上述方法可以添加新浪微博小挂件。\n\n- 生成自己的微博组件。\n- 添加hexo\\themes\\modernist\\layout\\_widget\\weibo.ejs文件。\n- 配置hexo\\themes\\modernist\\_config.yml。\n插件\n--\n\n安装插件：\n```\nnpm install <plugin-name> --save\n```\n启用插件：在*hexo\\_config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\nRSS插件\n将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。\n\n你可以用rss作为迁移工具，用如下命令读取其他位置的rss：\n\n```\nhexo migrate rss <source>\n```\n『source』是本地或网络文件路径。\n\nSitemap插件\n将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。\n\n更多插件的安装方法，请参考[官方Wiki](https://github.com/hexojs/hexo/wiki/Plugins)。\n\n如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。\n\n迁移\n---\n\nhexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。\n\n搜索引擎\n---\n\n你可以到[屈站长](http://www.sousuoyinqingtijiao.com/)提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。\n\n更新\n---\n\n更新hexo：\n\n```\nnpm update -g hexo\n```\n更新主题：\n```\ncd themes/你的主题\ngit pull\n```\n更新插件：\n```\nnpm update\n```\n干掉IE\n\nKill IE6 提示的javascript代码，请自行搜索。\n\n换机器\n---\n\n你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。\n\n我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。\n\n统计功能\n---\n\n为hexo博客添加访问次数统计功能\n\n其它\n\n网站加速\n\n[Webluker-CDN 网站加速 免费CDN DNS解析](http://www.webluker.com/)\n\nWebluker-FAQ索引\n\n网站监控\n\n[监控宝-网站监控 网页监控 服务器监控](http://www.jiankongbao.com/)\n\n[监控宝-常见问题](http://www.jiankongbao.com/faq)\n\n参考文献\n====\n\n\n\n- [hexo + github + 多说 来搭建免费博客](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n\n- [利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n- [博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)\n\n- [在 hexo中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n\n- [手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n- [为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n\n- [使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n- [单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/)\n\n- [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","source":"_posts/Use-Gitpagehexo-to-develop-their-own-blog.md","raw":"---\ntitle: 利用Gitpage+hexo开发自己的博客\ndate: 2016-09-16 01:07:17\ntags: hexo \ncategories: git\n---\n进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。\n<!--more-->\n\nGitpage+hexo\n------------\n\n想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。\n\n环境准备\n====\n\n1 安装Node\n--------\n\n到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi\n\n2 安装Git\n-------\n安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: http://pan.baidu.com/s/1eS2mHxS 密码: yatq ，有需要的同学可以点击下载。\n\n安装步骤\n====\n\n1 安装Hexo\n------\n\n使用git shell,依次输入以下代码命令：\n\n```\ncd /\nnpm install hexo-cli -g\n```\n\n\n命令解释：\n\n**cd和/之间要有空格**，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。\n\n2 安装博客所需文件\n----------\n\n```\ncd /\nhexo init Hexo\ncd /Hexo\nnpm instal\nhexo generate（可简写为hexo g）\nhexo sever（可简写为hexo s）\n```\n\n命令解释:\n\n- cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。\n\n- Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。\n\n- 指向Hexo目录\n\n- 安装依赖文件\n\n- 编译\n\n- 开启本地服务(第5、6步的操作可以合并成hexo s -g)\n\n此时打开浏览器，在地址栏输入http://localhost:4000/\n即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。\n\n那么如何翻墙呢？ 下面提供我所知道的两种方法：\n\n这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: http://pan.baidu.com/s/1c2x7eRu\n密码: z3kw\n\n这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：http://blog.my-eclipse.cn/host-google.html\n\n如果你不想翻墙，可以采用这种方法：\n进入你刚新建好的 blog根目录\n\n```\n themes/landscape/layout/_partial\n\n```\n1，找到 after-footer.ejs把\n\n```\n<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>\n```\n替换成\n\n> `<script src=\"http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ > </script>`\n\n2，找到 header.ejs\n注释掉或者删掉 下面这句css引用\n`<link href=\"//fonts.googleapis.com/css?family=Source+Code+Pro\" rel=”stylesheet” type=”text/css”>`\nhexo server 之后。访问 http://localhost:4000 就会看到blog主页了。\n\n如果你成功在http://localhost:4000/\n下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！\n\n> 行百里者半九十\n\n不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：\n\n3 部署博客到服务器\n--------\n\n也就是把博客部署到github page提供的服务器上。\n\n步骤\n\n- 首先回到git shell按ctrl+c，之后输入y即可\n\n\n- 修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：`deploy:  type: github  repo: https://github.com/yourname/blog.git`\n\n\n继续回到git shell输入命令：\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n命令解释:\n\n- 清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。\n编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件\n- 开启本地服务，\n- 部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！\n是的，现在你拥有了自己的博客！\n\n发表博文\n====\n\n千辛万苦建立了博客，那么我们来学习一下如何发表博文。\n\n新建博文\n----\n\n继续回到git shell输入：\n\nhexo new \"新博文的名字\"\n即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。\n\n**Markdown编辑器**\n\n推荐两款我所使用的markdown编辑器：\n\n**MIU**，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：\n链接: http://pan.baidu.com/s/1slMPeTR\n密码: 2pnk\n**正在使用的Atom:**更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。\n可能会遇到的问题\n\n> hexo new [layout] \"postName\" #新建文章\n\n其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md\n\n```\ntitle: { { title } }\ndate: { { date } }\ntags:\n---\n```\n\n大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。\n我想添加categories，以免每次手工输入，只需要修改这个文件添加一行\n\n```\ntitle: { { title } }\ndate: { { date } }\ncategories:\ntags:\n---\n```\n\n\npostName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。\n\n注意，所有文件：后面都必须有个空格，不然会报错。\n\n看一下刚才生成的文件hexo\\source\\_posts\\postName.md\n\n```\ntitle: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中\ndate: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改\ncategories: #文章分类目录，可以为空，注意:后面有个空格\ntags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格\n---\n```\n\n始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。\n\n**fancybox**\n可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。\n很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：\n```\nlayout: photo\ntitle: 我的阅历\ndate: 2085-01-16 07:33:44\ntags: [hexo]\nphotos:\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\n- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg\n```\n\n经过测试，文件头上的layout: photo可以省略。\n\n不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md\n```\nlayout: { { layout } }\ntitle: { { title } }\ndate: { { date } }\ntags:\nphotos:\n-\n---\n```\n然后每次可以执行带layout的new命令生成照片文章：\n\n```\nhexo new photo \"photoPostName\" #新建照片文章\n```\ndescription\nmarkdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。\n```\ntitle: hexo你的博客\ndate: 2013-11-22 17:11:54\ncategories: default\ntags: [hexo]\ndescription: 你对本页的描述\n---\n```\nhexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。\n\n**文章摘要**\n在需要显示摘要的地方添加如下代码即可：\n\n```\n以上是摘要\n<!--more-->\n以下是余下全文\n```\nmore以上内容即是文章摘要，在主页显示，more以下内容点击『> Read More』链接打开全文才显示。\n\nhexo中所有文件的编码格式均是UTF-8。\n\n\n优雅的在博客上插入图片\n-----------\n\n看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：\n\n首先确认 _config.yml 中更改 post_asset_folder:true 。\n回到git shell，输入\n\nnpm install https://github.com/CodeFalling/hexo-asset-image --save\n\n继续执行\n\n```\n hexo clean\n hexo g\n hexo s\n hexo d\n```\n\n重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹\n\n\n然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？\n提醒：\n\n写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！\n\n预览和发表\n-----\n\n继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！\n\n```\n1.  hexo clean\n2.  hexo g\n3.  hexo s\n4.  hexo d\n```\n\n更高大上的发表博文的方法\n\n使用Travis CI自动部署你的Hexo博客到Github,请参考[手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客\n\n安装主题\n----\n\n如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：\n\n选择主题\n\n你可以在[Themes·Hexo](https://github.com/hexojs/hexo/wiki/Themes)上选择你喜欢的主题，我使用的Next主题\n\n安装Next主题\n---\n\n参考[Next官方文档](http://theme-next.iissnan.com/getting-started.html),内容十分详尽！\n\n安装主题的方法就是一句git命令：\n\n```\ngit clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist\n```\n\n目录是否是modernist无所谓，只要与_config.yml文件一致即可。\n\n安装完成后，打开hexo\\_config.yml，修改主题为modernist\n\n```\ntheme: modernist\n```\n打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：\n\n```\nmenu: #配置页头显示哪些菜单\n#  Home: /\n  Archives: /archives\n  Reading: /reading\n  About: /about\n#  Guestbook: /about\n\nexcerpt_link: Read More #摘要链接文字\narchive_yearly: false #按年存档\n\nwidgets: #配置页脚显示哪些小挂件\n  - category\n#  - tag\n  - tagcloud\n  - recent_posts\n#  - blogroll\n\nblogrolls: #友情链接\n  - bruce sha's duapp wordpress: http://ibruce.duapp.com\n  - bruce sha's javaeye: http://buru.iteye.com\n  - bruce sha's oschina blog: http://my.oschina.net/buru\n  - bruce sha's baidu space: http://hi.baidu.com/iburu\n\nfancybox: true #是否开启fancybox效果\n\nduoshuo_shortname: buru #多说账号\n\ngoogle_analytics:\nrss:\n```\n更新主题\n\n```\ncd themes/modernist\ngit pull\n```\n\n评论框\n---\n\n静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用[多说](https://hexo.io/plugins/)\n直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置->域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以[参考这里](http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017)，我是在HeroicYang的基础上修改的。\n\n如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout\\_partial\\comment.ejs里面，如下：\n\n```\n<% if (config.disqus_shortname && page.comments){ %>\n<section id=\"comment\">\n  #你的通用代码\n<% } %>\n```\n构建新页面\n-----\n\n那些小图标都是一个新页面，需要手动创建，那么如何创建？\n\n回到git shell，\n\nhexo new page \"页面名称\"\n比如你要创建一个about页面，就输入hexo new page “about”\n\n正确显示各页面内容\n\n发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！\n\n解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：\n\n\n\ncomments: false即关闭此页面的评论功能\n\ntype: “tags”这里的值根据你想更改的页面决定\n\n更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！\n\n安装插件\n----\n\nhexo支持的插件：[Plugins | Hexo](https://hexo.io/plugins/)\n想安装什么插件，按照相关README.md中介绍操作即可。\n\n安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:[第三方服务集成](http://theme-next.iissnan.com/third-party-services.html#swfitype)，介绍非常全面！好好用来装饰你的博客吧！\n\n安装sitemap和feed插件时，如果遇到问题，可以参考:[博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)，安装sitemap后要到[百度站长](http://zhanzhang.baidu.com/?castk=LTE=)提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:[为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n安装swiftype插件，如果遇到问题，可以参考[利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n图床\n---\n\n考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。\n\n免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里[关于key-value存储系统](https://support.qiniu.com/hc/)。\n\n七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇[Linux中国采用七牛云存储支撑图片访问](https://linux.cn/article-2311-1.html)。\n\n如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。\n\n如果你对七牛web版的文件管理界面不满意，可以用官方的[七牛云存储工具](http://docs.qiniu.com/tools/v6/index.html)。\n\n您还可以使用如下图床服务 FarBox，Dropbox，又拍云\n主题优化\n----\n\nNext主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！\n\n[提升Hexo的NexT主题加载速度](http://www.gfwsb.com/2016/improveNexTspeed/)\n\n[使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n绑定域名\n---\n\n购买域名，我是在[万网](https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist)购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个[网站](http://www.xiaoerguo.com/),但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！\n\n如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：\n\n192.30.252.153\n\n192.30.252.154\n\n制作ICO图标\n---\n\nfavicon.ico一般用于作为缩略图的网站标志，[在线制作网站](http://www.bitbug.net/)\n关于是否绑定域名\n\n经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考[单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/),这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！\n\n#至此，基本操作介绍完毕，以下内容普通用户无需了解。\n默认目录结构：\n```\n.\n├── .deploy\n├── public\n├── scaffolds\n├── scripts\n├── source\n|   ├── _drafts\n|   └── _posts\n├── themes\n├── _config.yml\n└── package.json\n```\n- deploy：执行hexo deploy命令部署到GitHub上的内容目录\n- public：执行hexo generate命令，输出的静态网页内容目录\n- scaffolds：layout模板文件目录，其中的md文件可以添加编辑\n- scripts：扩展脚本目录，这里可以自定义一些javascript脚本\n- source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。\n - drafts：草稿文章\n - posts：发布文章\n- themes：主题文件目录\n- _config.yml：全局配置文件，大多数的设置都在这里\n- package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮\n\n接下来是重头戏_config.yml，做个简单说明：\n```\n# Hexo Configuration\n## Docs: http://zespia.tw/hexo/docs/configure.html\n## Source: https://github.com/tommy351/hexo/\n\n# Site #整站的基本信息\ntitle: 不如 #网站标题\nsubtitle: 码农，程序猿，未来的昏析师 #网站副标题\ndescription: bruce sha's blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head->meta中可看到\nauthor: bruce #网站作者，在下方显示\nemail: bu.ru@qq.com #联系邮箱\nlanguage: zh-CN #语言\n\n# URL #域名和文件结构\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: http://ibruce.info #你的域名\nroot: /\npermalink: :year/:month/:day/:title/\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\n\n# Writing #写文章选项\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post #默认layout方式\nauto_spacing: false # Add spaces between asian characters and western characters\ntitlecase: false # Transform title into titlecase\nexternal_link: true # Open external links in new tab\nmax_open_file: 100\nmulti_thread: true\nfilename_case: 0\nrender_drafts: false\nhighlight: #代码高亮\n  enable: true #是否启用\n  line_number: false #是否显示行号\n  tab_replace:\n\n# Category & Tag #分类与标签\ndefault_category: uncategorized # default\ncategory_map:\ntag_map:\n\n# Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突\n## 2: Enable pagination\n## 1: Disable pagination\n## 0: Fully Disable\narchive: 1\ncategory: 1\ntag: 1\n\n# Server #本地服务参数\n## Hexo uses Connect as a server\n## You can customize the logger format as defined in\n## http://www.senchalabs.org/connect/logger.html\nport: 4000\nlogger: true\nlogger_format:\n\n# Date / Time format #日期显示格式\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: MMM D YYYY\ntime_format: H:mm:ss\n\n# Pagination #分页设置\n## Set per_page to 0 to disable pagination\nper_page: 10 #每页10篇文章\npagination_dir: page\n\n# Disqus #社会化评论disqus，我使用多说，在主题中配置\ndisqus_shortname:\n\n# Extensions #插件，暂时未安装插件\n## Plugins: https://github.com/tommy351/hexo/wiki/Plugins\n## Themes: https://github.com/tommy351/hexo/wiki/Themes\n## 主题\ntheme: modernist # raytaylorism # pacman # modernist # light\nexclude_generator:\n\n# Deployment #部署\n## Docs: http://zespia.tw/hexo/docs/deploy.html\ndeploy:\n  type: github\n  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库\n```\n修改局部页面\n---\n\n页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：\n```\n.\n├── languages          #多语言\n|   ├── default.yml    #默认语言\n|   └── zh-CN.yml      #中文语言\n├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制\n|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制\n|   └── _widget        #小挂件的布局，页面下方小挂件的控制\n├── source             #源码\n|   ├── css            #css源码\n|   |   ├── _base      #*.styl基础css\n|   |   ├── _partial   #*.styl局部css\n|   |   ├── fonts      #字体\n|   |   ├── images     #图片\n|   |   └── style.styl #*.styl引入需要的css源码\n|   ├── fancybox       #fancybox效果源码\n|   └── js             #javascript源代码\n├── _config.yml        #主题配置文件\n└── README.md          #用GitHub的都知道\n```\n如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout\\_partial\\header.ejs，比如头上加个搜索框：\n```\n<div>\n<form class=\"search\" action=\"//google.com/search\" method=\"get\" accept-charset=\"utf-8\">\n <input type=\"search\" name=\"q\" id=\"search\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" maxlength=\"20\" placeholder=\"Search\" />\n <input type=\"hidden\" name=\"q\" value=\"site:<%- config.url.replace(/^https?:\\/\\//, '') %>\">\n</form>\n</div>\n```\n将如上代码加入即可，您需要修改css以便这个搜索框比较美观。\n\n再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout\\_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。\n\n统计\n---\n\n页面上显示访问次数可以使用 [不蒜子](http://busuanzi.ibruce.info/)，两行代码即可搞定。\n\n因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。\n编辑文件hexo\\themes\\modernist\\_config.yml，增加配置选项：\n\n```\nbaidu_tongji: true\n```\n新建文件hexo\\themes\\modernist\\layout\\_partial\\baidu_tongji.ejs，内容如下：\n\n```\n<% if (theme.baidu_tongji){ %>\n<script type=\"text/javascript\">\n#你的百度统计代码\n</script>\n<% } %>\n```\n注册并登录百度统计获取你的统计代码。\n\n编辑文件hexo\\themes\\modernist\\layout\\_partial\\head.ejs，在『/head』之前增加：\n\n```\n<%- partial('baidu_tongji') %>\n```\n重新生成并部署你的站点。\n\n不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页->网站列表->获取代码->系统管理设置->统计图标设置->显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。\n\n分享\n---\n\n我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：\n\n- 在hexo\\themes\\modernist\\layout\\_partial\\post下新建jiathis.ejs文件。\n注册加网获得你的分享代码，写入jiathis.ejs。\n- 在hexo\\themes\\modernist\\layout\\_partial\\article.ejs中，添加<%-partial(‘post/jiathis’)%>。\n-分享服务还可以使用如下企业提供的技术[加网](http://www.jiathis.com/)，[bShare](http://www.bshare.cn/)，[百度分享](http://share.baidu.com/)。\n\n网站图标\n\n看一下hexo\\themes\\modernist\\layout\\_partial\\head.ejs，找到这句：\n\n```\n<link rel=\"icon\" type=\"image/x-icon\" href=\"<%- config.root %>favicon.ico\">\n```\n你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以[在Faviconer](http://www.faviconer.com/)制作你的ico图标，国内有[比特虫](http://www.bitbug.net/)。\n\n自定义挂件\n---\n\n除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout\\_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist\\_config.yml中配置。\n```\nwidgets:\n  - myWidget\n```\n用上述方法可以添加新浪微博小挂件。\n\n- 生成自己的微博组件。\n- 添加hexo\\themes\\modernist\\layout\\_widget\\weibo.ejs文件。\n- 配置hexo\\themes\\modernist\\_config.yml。\n插件\n--\n\n安装插件：\n```\nnpm install <plugin-name> --save\n```\n启用插件：在*hexo\\_config.yml文件添加：\n```\nplugins:\n- <plugin-name>  #插件名\n```\n升级插件：\n```\nnpm update\n```\n卸载插件：\n```\nnpm uninstall <plugin-name>\n```\nRSS插件\n将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。\n\n你可以用rss作为迁移工具，用如下命令读取其他位置的rss：\n\n```\nhexo migrate rss <source>\n```\n『source』是本地或网络文件路径。\n\nSitemap插件\n将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。\n\n更多插件的安装方法，请参考[官方Wiki](https://github.com/hexojs/hexo/wiki/Plugins)。\n\n如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。\n\n迁移\n---\n\nhexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。\n\n搜索引擎\n---\n\n你可以到[屈站长](http://www.sousuoyinqingtijiao.com/)提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。\n\n更新\n---\n\n更新hexo：\n\n```\nnpm update -g hexo\n```\n更新主题：\n```\ncd themes/你的主题\ngit pull\n```\n更新插件：\n```\nnpm update\n```\n干掉IE\n\nKill IE6 提示的javascript代码，请自行搜索。\n\n换机器\n---\n\n你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。\n\n我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。\n\n统计功能\n---\n\n为hexo博客添加访问次数统计功能\n\n其它\n\n网站加速\n\n[Webluker-CDN 网站加速 免费CDN DNS解析](http://www.webluker.com/)\n\nWebluker-FAQ索引\n\n网站监控\n\n[监控宝-网站监控 网页监控 服务器监控](http://www.jiankongbao.com/)\n\n[监控宝-常见问题](http://www.jiankongbao.com/faq)\n\n参考文献\n====\n\n\n\n- [hexo + github + 多说 来搭建免费博客](http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/)\n\n- [利用swiftype为hexo添加站内搜索](http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html)\n\n- [博客搬迁记 - 从WordPress到Hexo](http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap)\n\n- [在 hexo中无痛使用本地图片](http://www.tuicool.com/articles/umEBVfI)\n\n- [手把手教你使用Travis CI自动部署你的Hexo博客到Github上](http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more)\n\n- [为Hexo博客生成sitemap](http://www.gfwsb.com/2016/use-sitemap-for-hexo/)\n\n\n- [使用gulp精简hexo博客代码](http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/)\n\n- [单个GitHub帐号下添加多个GitHub Pages的相关问题](http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/)\n\n- [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n","slug":"Use-Gitpagehexo-to-develop-their-own-blog","published":1,"updated":"2017-04-09T14:29:05.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel3m001pqkyfdhkug0ac","content":"<p>进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。<br><a id=\"more\"></a></p>\n<h2 id=\"Gitpage-hexo\"><a href=\"#Gitpage-hexo\" class=\"headerlink\" title=\"Gitpage+hexo\"></a>Gitpage+hexo</h2><p>想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"1-安装Node\"><a href=\"#1-安装Node\" class=\"headerlink\" title=\"1 安装Node\"></a>1 安装Node</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi</p>\n<h2 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2 安装Git\"></a>2 安装Git</h2><p>安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</p>\n<h1 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h1><h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1 安装Hexo\"></a>1 安装Hexo</h2><p>使用git shell,依次输入以下代码命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>命令解释：</p>\n<p><strong>cd和/之间要有空格</strong>，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。</p>\n<h2 id=\"2-安装博客所需文件\"><a href=\"#2-安装博客所需文件\" class=\"headerlink\" title=\"2 安装博客所需文件\"></a>2 安装博客所需文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">hexo init Hexo</div><div class=\"line\">cd /Hexo</div><div class=\"line\">npm instal</div><div class=\"line\">hexo generate（可简写为hexo g）</div><div class=\"line\">hexo sever（可简写为hexo s）</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li><p>cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。</p>\n</li>\n<li><p>Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。</p>\n</li>\n<li><p>指向Hexo目录</p>\n</li>\n<li><p>安装依赖文件</p>\n</li>\n<li><p>编译</p>\n</li>\n<li><p>开启本地服务(第5、6步的操作可以合并成hexo s -g)</p>\n</li>\n</ul>\n<p>此时打开浏览器，在地址栏输入<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。</p>\n<p>那么如何翻墙呢？ 下面提供我所知道的两种方法：</p>\n<p>这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: <a href=\"http://pan.baidu.com/s/1c2x7eRu\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1c2x7eRu</a><br>密码: z3kw</p>\n<p>这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：<a href=\"http://blog.my-eclipse.cn/host-google.html\" target=\"_blank\" rel=\"external\">http://blog.my-eclipse.cn/host-google.html</a></p>\n<p>如果你不想翻墙，可以采用这种方法：<br>进入你刚新建好的 blog根目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">themes/landscape/layout/_partial</div></pre></td></tr></table></figure>\n<p>1，找到 after-footer.ejs把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>替换成</p>\n<blockquote>\n<p><code>&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</code></p>\n</blockquote>\n<p>2，找到 header.ejs<br>注释掉或者删掉 下面这句css引用<br><code>&lt;link href=&quot;//fonts.googleapis.com/css?family=Source+Code+Pro&quot; rel=”stylesheet” type=”text/css”&gt;</code><br>hexo server 之后。访问 <a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> 就会看到blog主页了。</p>\n<p>如果你成功在<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"external\">http://localhost:4000/</a><br>下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！</p>\n<blockquote>\n<p>行百里者半九十</p>\n</blockquote>\n<p>不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：</p>\n<h2 id=\"3-部署博客到服务器\"><a href=\"#3-部署博客到服务器\" class=\"headerlink\" title=\"3 部署博客到服务器\"></a>3 部署博客到服务器</h2><p>也就是把博客部署到github page提供的服务器上。</p>\n<p>步骤</p>\n<ul>\n<li>首先回到git shell按ctrl+c，之后输入y即可</li>\n</ul>\n<ul>\n<li>修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：<code>deploy:  type: github  repo: https://github.com/yourname/blog.git</code></li>\n</ul>\n<p>继续回到git shell输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li>清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。<br>编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</li>\n<li>开启本地服务，</li>\n<li>部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！<br>是的，现在你拥有了自己的博客！</li>\n</ul>\n<h1 id=\"发表博文\"><a href=\"#发表博文\" class=\"headerlink\" title=\"发表博文\"></a>发表博文</h1><p>千辛万苦建立了博客，那么我们来学习一下如何发表博文。</p>\n<h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>继续回到git shell输入：</p>\n<p>hexo new “新博文的名字”<br>即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。</p>\n<p><strong>Markdown编辑器</strong></p>\n<p>推荐两款我所使用的markdown编辑器：</p>\n<p><strong>MIU</strong>，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：<br>链接: <a href=\"http://pan.baidu.com/s/1slMPeTR\" target=\"_blank\" rel=\"external\">http://pan.baidu.com/s/1slMPeTR</a><br>密码: 2pnk<br><strong>正在使用的Atom:</strong>更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。<br>可能会遇到的问题</p>\n<blockquote>\n<p>hexo new [layout] “postName” #新建文章</p>\n</blockquote>\n<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。<br>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">categories:</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。</p>\n<p>注意，所有文件：后面都必须有个空格，不然会报错。</p>\n<p>看一下刚才生成的文件hexo\\source_posts\\postName.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class=\"line\">categories: #文章分类目录，可以为空，注意:后面有个空格</div><div class=\"line\">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。</p>\n<p><strong>fancybox</strong><br>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: photo</div><div class=\"line\">title: 我的阅历</div><div class=\"line\">date: 2085-01-16 07:33:44</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">photos:</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</div></pre></td></tr></table></figure></p>\n<p>经过测试，文件头上的layout: photo可以省略。</p>\n<p>不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: &#123; &#123; layout &#125; &#125;</div><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">photos:</div><div class=\"line\">-</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>然后每次可以执行带layout的new命令生成照片文章：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new photo &quot;photoPostName&quot; #新建照片文章</div></pre></td></tr></table></figure>\n<p>description<br>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: hexo你的博客</div><div class=\"line\">date: 2013-11-22 17:11:54</div><div class=\"line\">categories: default</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">description: 你对本页的描述</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。</p>\n<p><strong>文章摘要</strong><br>在需要显示摘要的地方添加如下代码即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是余下全文</div></pre></td></tr></table></figure>\n<p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。</p>\n<p>hexo中所有文件的编码格式均是UTF-8。</p>\n<h2 id=\"优雅的在博客上插入图片\"><a href=\"#优雅的在博客上插入图片\" class=\"headerlink\" title=\"优雅的在博客上插入图片\"></a>优雅的在博客上插入图片</h2><p>看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：</p>\n<p>首先确认 _config.yml 中更改 post_asset_folder:true 。<br>回到git shell，输入</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\" target=\"_blank\" rel=\"external\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n<p>继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹</p>\n<p>然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？<br>提醒：</p>\n<p>写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！</p>\n<h2 id=\"预览和发表\"><a href=\"#预览和发表\" class=\"headerlink\" title=\"预览和发表\"></a>预览和发表</h2><p>继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.  hexo clean</div><div class=\"line\">2.  hexo g</div><div class=\"line\">3.  hexo s</div><div class=\"line\">4.  hexo d</div></pre></td></tr></table></figure>\n<p>更高大上的发表博文的方法</p>\n<p>使用Travis CI自动部署你的Hexo博客到Github,请参考<a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\" target=\"_blank\" rel=\"external\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：</p>\n<p>选择主题</p>\n<p>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">Themes·Hexo</a>上选择你喜欢的主题，我使用的Next主题</p>\n<h2 id=\"安装Next主题\"><a href=\"#安装Next主题\" class=\"headerlink\" title=\"安装Next主题\"></a>安装Next主题</h2><p>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">Next官方文档</a>,内容十分详尽！</p>\n<p>安装主题的方法就是一句git命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</div></pre></td></tr></table></figure>\n<p>目录是否是modernist无所谓，只要与_config.yml文件一致即可。</p>\n<p>安装完成后，打开hexo_config.yml，修改主题为modernist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: modernist</div></pre></td></tr></table></figure>\n<p>打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #配置页头显示哪些菜单</div><div class=\"line\">#  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\">  Reading: /reading</div><div class=\"line\">  About: /about</div><div class=\"line\">#  Guestbook: /about</div><div class=\"line\"></div><div class=\"line\">excerpt_link: Read More #摘要链接文字</div><div class=\"line\">archive_yearly: false #按年存档</div><div class=\"line\"></div><div class=\"line\">widgets: #配置页脚显示哪些小挂件</div><div class=\"line\">  - category</div><div class=\"line\">#  - tag</div><div class=\"line\">  - tagcloud</div><div class=\"line\">  - recent_posts</div><div class=\"line\">#  - blogroll</div><div class=\"line\"></div><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - bruce sha&apos;s duapp wordpress: http://ibruce.duapp.com</div><div class=\"line\">  - bruce sha&apos;s javaeye: http://buru.iteye.com</div><div class=\"line\">  - bruce sha&apos;s oschina blog: http://my.oschina.net/buru</div><div class=\"line\">  - bruce sha&apos;s baidu space: http://hi.baidu.com/iburu</div><div class=\"line\"></div><div class=\"line\">fancybox: true #是否开启fancybox效果</div><div class=\"line\"></div><div class=\"line\">duoshuo_shortname: buru #多说账号</div><div class=\"line\"></div><div class=\"line\">google_analytics:</div><div class=\"line\">rss:</div></pre></td></tr></table></figure>\n<p>更新主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/modernist</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h2 id=\"评论框\"><a href=\"#评论框\" class=\"headerlink\" title=\"评论框\"></a>评论框</h2><p>静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">多说</a><br>直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置-&gt;域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以<a href=\"http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017\" target=\"_blank\" rel=\"external\">参考这里</a>，我是在HeroicYang的基础上修改的。</p>\n<p>如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout_partial\\comment.ejs里面，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (config.disqus_shortname &amp;&amp; page.comments)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comment&quot;&gt;</div><div class=\"line\">  #你的通用代码</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"构建新页面\"><a href=\"#构建新页面\" class=\"headerlink\" title=\"构建新页面\"></a>构建新页面</h2><p>那些小图标都是一个新页面，需要手动创建，那么如何创建？</p>\n<p>回到git shell，</p>\n<p>hexo new page “页面名称”<br>比如你要创建一个about页面，就输入hexo new page “about”</p>\n<p>正确显示各页面内容</p>\n<p>发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！</p>\n<p>解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：</p>\n<p>comments: false即关闭此页面的评论功能</p>\n<p>type: “tags”这里的值根据你想更改的页面决定</p>\n<p>更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>hexo支持的插件：<a href=\"https://hexo.io/plugins/\" target=\"_blank\" rel=\"external\">Plugins | Hexo</a><br>想安装什么插件，按照相关README.md中介绍操作即可。</p>\n<p>安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:<a href=\"http://theme-next.iissnan.com/third-party-services.html#swfitype\" target=\"_blank\" rel=\"external\">第三方服务集成</a>，介绍非常全面！好好用来装饰你的博客吧！</p>\n<p>安装sitemap和feed插件时，如果遇到问题，可以参考:<a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\" target=\"_blank\" rel=\"external\">博客搬迁记 - 从WordPress到Hexo</a>，安装sitemap后要到<a href=\"http://zhanzhang.baidu.com/?castk=LTE=\" target=\"_blank\" rel=\"external\">百度站长</a>提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:<a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\" target=\"_blank\" rel=\"external\">为Hexo博客生成sitemap</a></p>\n<p>安装swiftype插件，如果遇到问题，可以参考<a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p>\n<p>免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里<a href=\"https://support.qiniu.com/hc/\" target=\"_blank\" rel=\"external\">关于key-value存储系统</a>。</p>\n<p>七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇<a href=\"https://linux.cn/article-2311-1.html\" target=\"_blank\" rel=\"external\">Linux中国采用七牛云存储支撑图片访问</a>。</p>\n<p>如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。</p>\n<p>如果你对七牛web版的文件管理界面不满意，可以用官方的<a href=\"http://docs.qiniu.com/tools/v6/index.html\" target=\"_blank\" rel=\"external\">七牛云存储工具</a>。</p>\n<p>您还可以使用如下图床服务 FarBox，Dropbox，又拍云</p>\n<h2 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h2><p>Next主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！</p>\n<p><a href=\"http://www.gfwsb.com/2016/improveNexTspeed/\" target=\"_blank\" rel=\"external\">提升Hexo的NexT主题加载速度</a></p>\n<p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\" target=\"_blank\" rel=\"external\">使用gulp精简hexo博客代码</a></p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>购买域名，我是在<a href=\"https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist\" target=\"_blank\" rel=\"external\">万网</a>购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个<a href=\"http://www.xiaoerguo.com/\" target=\"_blank\" rel=\"external\">网站</a>,但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！</p>\n<p>如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：</p>\n<p>192.30.252.153</p>\n<p>192.30.252.154</p>\n<h2 id=\"制作ICO图标\"><a href=\"#制作ICO图标\" class=\"headerlink\" title=\"制作ICO图标\"></a>制作ICO图标</h2><p>favicon.ico一般用于作为缩略图的网站标志，<a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">在线制作网站</a><br>关于是否绑定域名</p>\n<p>经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考<a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\" target=\"_blank\" rel=\"external\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a>,这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！</p>\n<p>#至此，基本操作介绍完毕，以下内容普通用户无需了解。<br>默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>接下来是重头戏_config.yml，做个简单说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</div><div class=\"line\">## Source: https://github.com/tommy351/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site #整站的基本信息</div><div class=\"line\">title: 不如 #网站标题</div><div class=\"line\">subtitle: 码农，程序猿，未来的昏析师 #网站副标题</div><div class=\"line\">description: bruce sha&apos;s blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</div><div class=\"line\">author: bruce #网站作者，在下方显示</div><div class=\"line\">email: bu.ru@qq.com #联系邮箱</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\"></div><div class=\"line\"># URL #域名和文件结构</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://ibruce.info #你的域名</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\"></div><div class=\"line\"># Writing #写文章选项</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post #默认layout方式</div><div class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">max_open_file: 100</div><div class=\"line\">multi_thread: true</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">highlight: #代码高亮</div><div class=\"line\">  enable: true #是否启用</div><div class=\"line\">  line_number: false #是否显示行号</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag #分类与标签</div><div class=\"line\">default_category: uncategorized # default</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</div><div class=\"line\">## 2: Enable pagination</div><div class=\"line\">## 1: Disable pagination</div><div class=\"line\">## 0: Fully Disable</div><div class=\"line\">archive: 1</div><div class=\"line\">category: 1</div><div class=\"line\">tag: 1</div><div class=\"line\"></div><div class=\"line\"># Server #本地服务参数</div><div class=\"line\">## Hexo uses Connect as a server</div><div class=\"line\">## You can customize the logger format as defined in</div><div class=\"line\">## http://www.senchalabs.org/connect/logger.html</div><div class=\"line\">port: 4000</div><div class=\"line\">logger: true</div><div class=\"line\">logger_format:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format #日期显示格式</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: MMM D YYYY</div><div class=\"line\">time_format: H:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination #分页设置</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10 #每页10篇文章</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus #社会化评论disqus，我使用多说，在主题中配置</div><div class=\"line\">disqus_shortname:</div><div class=\"line\"></div><div class=\"line\"># Extensions #插件，暂时未安装插件</div><div class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class=\"line\">## 主题</div><div class=\"line\">theme: modernist # raytaylorism # pacman # modernist # light</div><div class=\"line\">exclude_generator:</div><div class=\"line\"></div><div class=\"line\"># Deployment #部署</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改局部页面\"><a href=\"#修改局部页面\" class=\"headerlink\" title=\"修改局部页面\"></a>修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-CN.yml      #中文语言</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</div><div class=\"line\">|   └── _widget        #小挂件的布局，页面下方小挂件的控制</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _base      #*.styl基础css</div><div class=\"line\">|   |   ├── _partial   #*.styl局部css</div><div class=\"line\">|   |   ├── fonts      #字体</div><div class=\"line\">|   |   ├── images     #图片</div><div class=\"line\">|   |   └── style.styl #*.styl引入需要的css源码</div><div class=\"line\">|   ├── fancybox       #fancybox效果源码</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<p>如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout_partial\\header.ejs，比如头上加个搜索框：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\"> &lt;input type=&quot;search&quot; name=&quot;q&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</div><div class=\"line\"> &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。</p>\n<p>再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。</p>\n<h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>页面上显示访问次数可以使用 <a href=\"http://busuanzi.ibruce.info/\" target=\"_blank\" rel=\"external\">不蒜子</a>，两行代码即可搞定。</p>\n<p>因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。<br>编辑文件hexo\\themes\\modernist_config.yml，增加配置选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">baidu_tongji: true</div></pre></td></tr></table></figure>\n<p>新建文件hexo\\themes\\modernist\\layout_partial\\baidu_tongji.ejs，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.baidu_tongji)&#123; %&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">#你的百度统计代码</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>注册并登录百度统计获取你的统计代码。</p>\n<p>编辑文件hexo\\themes\\modernist\\layout_partial\\head.ejs，在『/head』之前增加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;baidu_tongji&apos;) %&gt;</div></pre></td></tr></table></figure>\n<p>重新生成并部署你的站点。</p>\n<p>不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页-&gt;网站列表-&gt;获取代码-&gt;系统管理设置-&gt;统计图标设置-&gt;显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。</p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p>我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：</p>\n<ul>\n<li>在hexo\\themes\\modernist\\layout_partial\\post下新建jiathis.ejs文件。<br>注册加网获得你的分享代码，写入jiathis.ejs。</li>\n<li>在hexo\\themes\\modernist\\layout_partial\\article.ejs中，添加&lt;%-partial(‘post/jiathis’)%&gt;。<br>-分享服务还可以使用如下企业提供的技术<a href=\"http://www.jiathis.com/\" target=\"_blank\" rel=\"external\">加网</a>，<a href=\"http://www.bshare.cn/\" target=\"_blank\" rel=\"external\">bShare</a>，<a href=\"http://share.baidu.com/\" target=\"_blank\" rel=\"external\">百度分享</a>。</li>\n</ul>\n<p>网站图标</p>\n<p>看一下hexo\\themes\\modernist\\layout_partial\\head.ejs，找到这句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;&lt;%- config.root %&gt;favicon.ico&quot;&gt;</div></pre></td></tr></table></figure>\n<p>你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以<a href=\"http://www.faviconer.com/\" target=\"_blank\" rel=\"external\">在Faviconer</a>制作你的ico图标，国内有<a href=\"http://www.bitbug.net/\" target=\"_blank\" rel=\"external\">比特虫</a>。</p>\n<h2 id=\"自定义挂件\"><a href=\"#自定义挂件\" class=\"headerlink\" title=\"自定义挂件\"></a>自定义挂件</h2><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist_config.yml中配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">  - myWidget</div></pre></td></tr></table></figure></p>\n<p>用上述方法可以添加新浪微博小挂件。</p>\n<ul>\n<li>生成自己的微博组件。</li>\n<li>添加hexo\\themes\\modernist\\layout_widget\\weibo.ejs文件。</li>\n<li>配置hexo\\themes\\modernist_config.yml。<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2></li>\n</ul>\n<p>安装插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install &lt;plugin-name&gt; --save</div></pre></td></tr></table></figure></p>\n<p>启用插件：在*hexo_config.yml文件添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">- &lt;plugin-name&gt;  #插件名</div></pre></td></tr></table></figure></p>\n<p>升级插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>卸载插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall &lt;plugin-name&gt;</div></pre></td></tr></table></figure></p>\n<p>RSS插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。</p>\n<p>你可以用rss作为迁移工具，用如下命令读取其他位置的rss：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate rss &lt;source&gt;</div></pre></td></tr></table></figure>\n<p>『source』是本地或网络文件路径。</p>\n<p>Sitemap插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。</p>\n<p>更多插件的安装方法，请参考<a href=\"https://github.com/hexojs/hexo/wiki/Plugins\" target=\"_blank\" rel=\"external\">官方Wiki</a>。</p>\n<p>如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。</p>\n<h2 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h2><p>hexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。</p>\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2><p>你可以到<a href=\"http://www.sousuoyinqingtijiao.com/\" target=\"_blank\" rel=\"external\">屈站长</a>提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>更新hexo：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update -g hexo</div></pre></td></tr></table></figure>\n<p>更新主题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/你的主题</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>更新插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>干掉IE</p>\n<p>Kill IE6 提示的javascript代码，请自行搜索。</p>\n<h2 id=\"换机器\"><a href=\"#换机器\" class=\"headerlink\" title=\"换机器\"></a>换机器</h2><p>你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。</p>\n<p>我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。</p>\n<h2 id=\"统计功能\"><a href=\"#统计功能\" class=\"headerlink\" title=\"统计功能\"></a>统计功能</h2><p>为hexo博客添加访问次数统计功能</p>\n<p>其它</p>\n<p>网站加速</p>\n<p><a href=\"http://www.webluker.com/\" target=\"_blank\" rel=\"external\">Webluker-CDN 网站加速 免费CDN DNS解析</a></p>\n<p>Webluker-FAQ索引</p>\n<p>网站监控</p>\n<p><a href=\"http://www.jiankongbao.com/\" target=\"_blank\" rel=\"external\">监控宝-网站监控 网页监控 服务器监控</a></p>\n<p><a href=\"http://www.jiankongbao.com/faq\" target=\"_blank\" rel=\"external\">监控宝-常见问题</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><p><a href=\"http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/\" target=\"_blank\" rel=\"external\">hexo + github + 多说 来搭建免费博客</a></p>\n</li>\n<li><p><a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\" target=\"_blank\" rel=\"external\">利用swiftype为hexo添加站内搜索</a></p>\n</li>\n<li><p><a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\" target=\"_blank\" rel=\"external\">博客搬迁记 - 从WordPress到Hexo</a></p>\n</li>\n<li><p><a href=\"http://www.tuicool.com/articles/umEBVfI\" target=\"_blank\" rel=\"external\">在 hexo中无痛使用本地图片</a></p>\n</li>\n<li><p><a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\" target=\"_blank\" rel=\"external\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n</li>\n<li><p><a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\" target=\"_blank\" rel=\"external\">为Hexo博客生成sitemap</a></p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\" target=\"_blank\" rel=\"external\">使用gulp精简hexo博客代码</a></p>\n</li>\n<li><p><a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\" target=\"_blank\" rel=\"external\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a></p>\n</li>\n<li><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"external\">hexo你的博客</a></p>\n</li>\n</ul>\n","excerpt":"<p>进入程序员这个坑之后就开始自己在网上扒资料，然而资料太多，情况太复杂，主要是看见别人的博客，感觉好高大上，并且感觉在茫茫的互联网有自己的小天地感觉也是极好的。不是为了给别人看，而是为了 记录自己的成长，记录自己的每一个脚印。<br>","more":"</p>\n<h2 id=\"Gitpage-hexo\"><a href=\"#Gitpage-hexo\" class=\"headerlink\" title=\"Gitpage+hexo\"></a>Gitpage+hexo</h2><p>想要实现拥有一个独立的私有博客，我们需要两个东西，一个是可供浏览器访问的静态网页存储空间，这个我们选择gitPage，一个是一个静态网页生成工具，Octopress也好，Hexo也罢，这里我选择的是Hexo。</p>\n<h1 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h1><h2 id=\"1-安装Node\"><a href=\"#1-安装Node\" class=\"headerlink\" title=\"1 安装Node\"></a>1 安装Node</h2><p>到Node.js官网下载相应平台的最新版本，一路安装即可。我用的是node-v0.10.22-x86.msi</p>\n<h2 id=\"2-安装Git\"><a href=\"#2-安装Git\" class=\"headerlink\" title=\"2 安装Git\"></a>2 安装Git</h2><p>安装git，或安装github客户端，自我感觉github客户端很好用，界面很友好，同样操作起来也比git好用的多！我用的是window10系统，在官网下载数次都未安装成功，最后在知乎上终于找到安装包，链接: <a href=\"http://pan.baidu.com/s/1eS2mHxS\">http://pan.baidu.com/s/1eS2mHxS</a> 密码: yatq ，有需要的同学可以点击下载。</p>\n<h1 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h1><h2 id=\"1-安装Hexo\"><a href=\"#1-安装Hexo\" class=\"headerlink\" title=\"1 安装Hexo\"></a>1 安装Hexo</h2><p>使用git shell,依次输入以下代码命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">npm install hexo-cli -g</div></pre></td></tr></table></figure>\n<p>命令解释：</p>\n<p><strong>cd和/之间要有空格</strong>，这条指令的作用是返回根目录，也可以在cd /后加入一个文件名，例如下文要用到的cd /Hexo 就可以指向这个文件夹，再输入代码行就默认在在此文件下执行。</p>\n<h2 id=\"2-安装博客所需文件\"><a href=\"#2-安装博客所需文件\" class=\"headerlink\" title=\"2 安装博客所需文件\"></a>2 安装博客所需文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd /</div><div class=\"line\">hexo init Hexo</div><div class=\"line\">cd /Hexo</div><div class=\"line\">npm instal</div><div class=\"line\">hexo generate（可简写为hexo g）</div><div class=\"line\">hexo sever（可简写为hexo s）</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li><p>cd /这里返回的根目录取决于你在github客户端的设置，我设置的是F盘，所以返回得也是F盘，所以下面创建的Hexo文件夹也在F盘。</p>\n</li>\n<li><p>Hexo这个文件名可以随便命名，存放的是构建博客所要用到的所有文件。</p>\n</li>\n<li><p>指向Hexo目录</p>\n</li>\n<li><p>安装依赖文件</p>\n</li>\n<li><p>编译</p>\n</li>\n<li><p>开启本地服务(第5、6步的操作可以合并成hexo s -g)</p>\n</li>\n</ul>\n<p>此时打开浏览器，在地址栏输入<a href=\"http://localhost:4000/\">http://localhost:4000/</a><br>即可查看博客的原型，是不是看到了胜利的曙光；但是如果“显示无法访问此网站”也不要沮丧，我这步是直接看到页面的，你无法访问的原因可能你没有翻墙，因为页面中默认使用了ajax.google.com 下的js包。</p>\n<p>那么如何翻墙呢？ 下面提供我所知道的两种方法：</p>\n<p>这种方法比较简单，下载安装运行Lantern，可以官网下载的吧！这里提供一下安装包吧，链接: <a href=\"http://pan.baidu.com/s/1c2x7eRu\">http://pan.baidu.com/s/1c2x7eRu</a><br>密码: z3kw</p>\n<p>这种方法需要修改hosts文件，我的 hosts 文件路径：C:\\Windows\\System32\\drivers\\etc ，详细攻略：<a href=\"http://blog.my-eclipse.cn/host-google.html\">http://blog.my-eclipse.cn/host-google.html</a></p>\n<p>如果你不想翻墙，可以采用这种方法：<br>进入你刚新建好的 blog根目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">themes/landscape/layout/_partial</div></pre></td></tr></table></figure>\n<p>1，找到 after-footer.ejs把</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</div></pre></td></tr></table></figure>\n<p>替换成</p>\n<blockquote>\n<p><code>&lt;script src=&quot;http://cdn.bootcss.com/jquery/2.1.1/jquery.min.js“ &gt; &lt;/script&gt;</code></p>\n</blockquote>\n<p>2，找到 header.ejs<br>注释掉或者删掉 下面这句css引用<br><code>&lt;link href=&quot;//fonts.googleapis.com/css?family=Source+Code+Pro&quot; rel=”stylesheet” type=”text/css”&gt;</code><br>hexo server 之后。访问 <a href=\"http://localhost:4000\">http://localhost:4000</a> 就会看到blog主页了。</p>\n<p>如果你成功在<a href=\"http://localhost:4000/\">http://localhost:4000/</a><br>下看到了博客原型，那么再进行一些简单的操作之后就可以马上拥有自己的博客了，是不是很激动！</p>\n<blockquote>\n<p>行百里者半九十</p>\n</blockquote>\n<p>不到成功的那一刻，一切欣喜若狂都是不值得的！如果你已经迫不及待，我们继续：</p>\n<h2 id=\"3-部署博客到服务器\"><a href=\"#3-部署博客到服务器\" class=\"headerlink\" title=\"3 部署博客到服务器\"></a>3 部署博客到服务器</h2><p>也就是把博客部署到github page提供的服务器上。</p>\n<p>步骤</p>\n<ul>\n<li>首先回到git shell按ctrl+c，之后输入y即可</li>\n</ul>\n<ul>\n<li>修改Hexo文件夹下_config.yml文件，如下图所示修改，repository后的地址要改成你自己的地址：<code>deploy:  type: github  repo: https://github.com/yourname/blog.git</code></li>\n</ul>\n<p>继续回到git shell输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>命令解释:</p>\n<ul>\n<li>清除public，当 source 文件夹中的部分资源更改过之后，特别是对文件进行了删除或者路径的改变之后，需要执行这个命令，然后重新编译。<br>编译，一般部署上去的时候都需要编译一下，编译后，会出现一个 public 文件夹，将所有的md文件编译成html文件</li>\n<li>开启本地服务，</li>\n<li>部署博客到github上，如果一切顺利，你就通过访问usename.github.io访问你的博客了！<br>是的，现在你拥有了自己的博客！</li>\n</ul>\n<h1 id=\"发表博文\"><a href=\"#发表博文\" class=\"headerlink\" title=\"发表博文\"></a>发表博文</h1><p>千辛万苦建立了博客，那么我们来学习一下如何发表博文。</p>\n<h2 id=\"新建博文\"><a href=\"#新建博文\" class=\"headerlink\" title=\"新建博文\"></a>新建博文</h2><p>继续回到git shell输入：</p>\n<p>hexo new “新博文的名字”<br>即可在 Hexo\\source_posts 目录中找到”新博文的名字.md”这个文件。你就可以使用maekdown编辑器打开进行编写博客内容了。</p>\n<p><strong>Markdown编辑器</strong></p>\n<p>推荐两款我所使用的markdown编辑器：</p>\n<p><strong>MIU</strong>，据说是仿mac版的mou，界面相当友好，非常喜欢，官网都下载不了，挺小众，可能我就是典型的少说派，我也是偶然间得到，在此提供下载地址：<br>链接: <a href=\"http://pan.baidu.com/s/1slMPeTR\">http://pan.baidu.com/s/1slMPeTR</a><br>密码: 2pnk<br><strong>正在使用的Atom:</strong>更为先进的文本代码编辑器 ,由 Github 打造的下一代编程开发神器,其中支持markdown。<br>可能会遇到的问题</p>\n<blockquote>\n<p>hexo new [layout] “postName” #新建文章</p>\n</blockquote>\n<p>其中layout是可选参数，默认值为post。有哪些layout呢，请到scaffolds目录下查看，这些文件名称就是layout名称。当然你可以添加自己的layout，方法就是添加一个文件即可，同时你也可以编辑现有的layout，比如post的layout默认是hexo\\scaffolds\\post.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>大括号与大括号之间我多加了个空格，否则会被转义，不能正常显示。<br>我想添加categories，以免每次手工输入，只需要修改这个文件添加一行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">categories:</div><div class=\"line\">tags:</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>postName是md文件的名字，同时也出现在你文章的URL中，postName如果包含空格，必须用”将其包围，postName可以为中文。</p>\n<p>注意，所有文件：后面都必须有个空格，不然会报错。</p>\n<p>看一下刚才生成的文件hexo\\source_posts\\postName.md</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: postName #文章页面上的显示名称，可以任意修改，不会出现在URL中</div><div class=\"line\">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</div><div class=\"line\">categories: #文章分类目录，可以为空，注意:后面有个空格</div><div class=\"line\">tags: #文章标签，可空，多标签请用格式[tag1,tag2,tag3]，注意:后面有个空格</div><div class=\"line\">---</div></pre></td></tr></table></figure>\n<p>始使用markdown格式输入你的正文。，你就可以用喜爱的编辑器尽情书写你的文章。关于markdown语法，可以参考我的文章Markdown简明语法。</p>\n<p><strong>fancybox</strong><br>可能有人对这个Reading页面中图片的fancybox效果感兴趣，这个是怎么做的呢。<br>很简单，只需要在你的文章*.md文件的头上添加photos项即可，然后一行行添加你要展示的照片：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: photo</div><div class=\"line\">title: 我的阅历</div><div class=\"line\">date: 2085-01-16 07:33:44</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">photos:</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg</div><div class=\"line\">- http://bruce.u.qiniudn.com/2013/11/27/reading/photos-1.jpg</div></pre></td></tr></table></figure></p>\n<p>经过测试，文件头上的layout: photo可以省略。</p>\n<p>不想每次都手动添加怎么办？同样的，打开您的hexo\\scaffolds\\photo.md<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">layout: &#123; &#123; layout &#125; &#125;</div><div class=\"line\">title: &#123; &#123; title &#125; &#125;</div><div class=\"line\">date: &#123; &#123; date &#125; &#125;</div><div class=\"line\">tags:</div><div class=\"line\">photos:</div><div class=\"line\">-</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>然后每次可以执行带layout的new命令生成照片文章：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo new photo &quot;photoPostName&quot; #新建照片文章</div></pre></td></tr></table></figure>\n<p>description<br>markdown文件头中也可以添加description，以覆盖全局配置文件中的description内容，请参考下文_config.yml的介绍。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">title: hexo你的博客</div><div class=\"line\">date: 2013-11-22 17:11:54</div><div class=\"line\">categories: default</div><div class=\"line\">tags: [hexo]</div><div class=\"line\">description: 你对本页的描述</div><div class=\"line\">---</div></pre></td></tr></table></figure></p>\n<p>hexo默认会处理全部markdown和html文件，如果不想让hexo处理你的文件，可以在文件头中加入layout: false。</p>\n<p><strong>文章摘要</strong><br>在需要显示摘要的地方添加如下代码即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">以上是摘要</div><div class=\"line\">&lt;!--more--&gt;</div><div class=\"line\">以下是余下全文</div></pre></td></tr></table></figure>\n<p>more以上内容即是文章摘要，在主页显示，more以下内容点击『&gt; Read More』链接打开全文才显示。</p>\n<p>hexo中所有文件的编码格式均是UTF-8。</p>\n<h2 id=\"优雅的在博客上插入图片\"><a href=\"#优雅的在博客上插入图片\" class=\"headerlink\" title=\"优雅的在博客上插入图片\"></a>优雅的在博客上插入图片</h2><p>看到很多博客上说使用七牛，但是这种方法可能是用着最爽的，我们来看一下如何使用：</p>\n<p>首先确认 _config.yml 中更改 post_asset_folder:true 。<br>回到git shell，输入</p>\n<p>npm install <a href=\"https://github.com/CodeFalling/hexo-asset-image\">https://github.com/CodeFalling/hexo-asset-image</a> –save</p>\n<p>继续执行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo g</div><div class=\"line\">hexo s</div><div class=\"line\">hexo d</div></pre></td></tr></table></figure>\n<p>重新创建一个博客名字，然后发现Hexo\\source_posts下多了一个与博客名字相同的空文件夹</p>\n<p>然后就可以把我们博客中要用到的图片存放在这个文件夹下，需要时直接引用即可，是不是特别方便？<br>提醒：</p>\n<p>写一篇博文时尽量只使用一种markdown编辑器，如果同时使用两个编辑器，我感觉不同编辑器对markdown语法的编译还是有一些差别的，用这个编辑器写好的格式用另一个编辑器打开却乱了！</p>\n<h2 id=\"预览和发表\"><a href=\"#预览和发表\" class=\"headerlink\" title=\"预览和发表\"></a>预览和发表</h2><p>继续重复以下命令即可实现预览和发表，恭喜你已经在自己建设的博客网站上发表了第一篇博文！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1.  hexo clean</div><div class=\"line\">2.  hexo g</div><div class=\"line\">3.  hexo s</div><div class=\"line\">4.  hexo d</div></pre></td></tr></table></figure>\n<p>更高大上的发表博文的方法</p>\n<p>使用Travis CI自动部署你的Hexo博客到Github,请参考<a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n<p>使用could9在线更新博客，这样的话即使更换了电脑，也能优雅的更新博客了。详细请参考：用c9.io实现在线更新博客</p>\n<h2 id=\"安装主题\"><a href=\"#安装主题\" class=\"headerlink\" title=\"安装主题\"></a>安装主题</h2><p>如果你跟我一样觉得原始的博客主题很low，想更换一个高逼格的，那我们继续往下进行：</p>\n<p>选择主题</p>\n<p>你可以在<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">Themes·Hexo</a>上选择你喜欢的主题，我使用的Next主题</p>\n<h2 id=\"安装Next主题\"><a href=\"#安装Next主题\" class=\"headerlink\" title=\"安装Next主题\"></a>安装Next主题</h2><p>参考<a href=\"http://theme-next.iissnan.com/getting-started.html\">Next官方文档</a>,内容十分详尽！</p>\n<p>安装主题的方法就是一句git命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git clone https://github.com/heroicyang/hexo-theme-modernist.git themes/modernist</div></pre></td></tr></table></figure>\n<p>目录是否是modernist无所谓，只要与_config.yml文件一致即可。</p>\n<p>安装完成后，打开hexo_config.yml，修改主题为modernist</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">theme: modernist</div></pre></td></tr></table></figure>\n<p>打开hexo\\themes\\modernist目录，编辑主题配置文件_config.yml：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">menu: #配置页头显示哪些菜单</div><div class=\"line\">#  Home: /</div><div class=\"line\">  Archives: /archives</div><div class=\"line\">  Reading: /reading</div><div class=\"line\">  About: /about</div><div class=\"line\">#  Guestbook: /about</div><div class=\"line\"></div><div class=\"line\">excerpt_link: Read More #摘要链接文字</div><div class=\"line\">archive_yearly: false #按年存档</div><div class=\"line\"></div><div class=\"line\">widgets: #配置页脚显示哪些小挂件</div><div class=\"line\">  - category</div><div class=\"line\">#  - tag</div><div class=\"line\">  - tagcloud</div><div class=\"line\">  - recent_posts</div><div class=\"line\">#  - blogroll</div><div class=\"line\"></div><div class=\"line\">blogrolls: #友情链接</div><div class=\"line\">  - bruce sha&apos;s duapp wordpress: http://ibruce.duapp.com</div><div class=\"line\">  - bruce sha&apos;s javaeye: http://buru.iteye.com</div><div class=\"line\">  - bruce sha&apos;s oschina blog: http://my.oschina.net/buru</div><div class=\"line\">  - bruce sha&apos;s baidu space: http://hi.baidu.com/iburu</div><div class=\"line\"></div><div class=\"line\">fancybox: true #是否开启fancybox效果</div><div class=\"line\"></div><div class=\"line\">duoshuo_shortname: buru #多说账号</div><div class=\"line\"></div><div class=\"line\">google_analytics:</div><div class=\"line\">rss:</div></pre></td></tr></table></figure>\n<p>更新主题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/modernist</div><div class=\"line\">git pull</div></pre></td></tr></table></figure>\n<h2 id=\"评论框\"><a href=\"#评论框\" class=\"headerlink\" title=\"评论框\"></a>评论框</h2><p>静态博客要使用第三方评论系统，hexo默认集成的是Disqus，因为你懂的，所以国内的话还是建议用<a href=\"https://hexo.io/plugins/\">多说</a><br>直接用你的微博/豆瓣/人人/百度/开心网帐号登录多说，做一下基本设置。如果使用modernist主题，在modernist_config.yml中配置duoshuo_shortname为多说的基本设置-&gt;域名中的shortname即可。你也可以在多说后台自定义一下多说评论框的格式，比如评论框的位置，对于css设置，可以<a href=\"http://dev.duoshuo.com/docs/4ff1cfd0397309552c000017\">参考这里</a>，我是在HeroicYang的基础上修改的。</p>\n<p>如果你是有的其他第三方评论系统，将通用代码粘贴到hexo\\themes\\modernist\\layout_partial\\comment.ejs里面，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (config.disqus_shortname &amp;&amp; page.comments)&#123; %&gt;</div><div class=\"line\">&lt;section id=&quot;comment&quot;&gt;</div><div class=\"line\">  #你的通用代码</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"构建新页面\"><a href=\"#构建新页面\" class=\"headerlink\" title=\"构建新页面\"></a>构建新页面</h2><p>那些小图标都是一个新页面，需要手动创建，那么如何创建？</p>\n<p>回到git shell，</p>\n<p>hexo new page “页面名称”<br>比如你要创建一个about页面，就输入hexo new page “about”</p>\n<p>正确显示各页面内容</p>\n<p>发表博文后发现点击上面建立的页面后发现是空白页，比如，打开标签页面，发现是空白，或者提示找不到！</p>\n<p>解决方法：以标签页为例，打开Hexo\\source\\tags下index.md文件，修改如下：</p>\n<p>comments: false即关闭此页面的评论功能</p>\n<p>type: “tags”这里的值根据你想更改的页面决定</p>\n<p>更改过后，在重新部署到github上，你就可以点击各个页面查看，发现一切都是那么美好！</p>\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><p>hexo支持的插件：<a href=\"https://hexo.io/plugins/\">Plugins | Hexo</a><br>想安装什么插件，按照相关README.md中介绍操作即可。</p>\n<p>安装多说评论、不蒜子（或LeanCloud）和分享插件，参考:<a href=\"http://theme-next.iissnan.com/third-party-services.html#swfitype\">第三方服务集成</a>，介绍非常全面！好好用来装饰你的博客吧！</p>\n<p>安装sitemap和feed插件时，如果遇到问题，可以参考:<a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\">博客搬迁记 - 从WordPress到Hexo</a>，安装sitemap后要到<a href=\"http://zhanzhang.baidu.com/?castk=LTE=\">百度站长</a>提交你的网站，首先要添加站点，然后在链接提交你的sitemap.xml，详细操作参考:<a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\">为Hexo博客生成sitemap</a></p>\n<p>安装swiftype插件，如果遇到问题，可以参考<a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\">利用swiftype为hexo添加站内搜索</a></p>\n<h2 id=\"图床\"><a href=\"#图床\" class=\"headerlink\" title=\"图床\"></a>图床</h2><p>考虑到博客的速度，同时也为了便于博客的迁移，图床是必须的。我墙裂推荐七牛，访问速度极快，支持日志、防盗链和水印。</p>\n<p>免费用户有每月10GB流量+总空间10GB+PUT/DELETE 10万次请求+GET 100万次请求，这对个人博客来说足够，有一点要说明的是，七牛没有目录的概念，但是文件名可以包含/，比如2013/11/27/reading/photos-0.jpg，参考这里<a href=\"https://support.qiniu.com/hc/\">关于key-value存储系统</a>。</p>\n<p>七牛除了作为图床还可以作为其他静态文件存储空间，比如我的个人站点首页有个字库文件和JS文件下载较慢，有时间会把它弄到七牛上去，以提高首页打开速度。请看这篇<a href=\"https://linux.cn/article-2311-1.html\">Linux中国采用七牛云存储支撑图片访问</a>。</p>\n<p>如果非要说不足的话，就是文件管理界面不是很友好，不支持CNAME到分配的永久链接，也不能绑定未备案的自有域名，必须备案才可以。</p>\n<p>如果你对七牛web版的文件管理界面不满意，可以用官方的<a href=\"http://docs.qiniu.com/tools/v6/index.html\">七牛云存储工具</a>。</p>\n<p>您还可以使用如下图床服务 FarBox，Dropbox，又拍云</p>\n<h2 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h2><p>Next主题很美观，个人也非常喜欢，但是一点令我们烦恼的就是主题加载的特别缓慢，那怎么优化呢？请参考一下两篇博文，作者已经总结的非常详细了，有需要的可以拜读一下，受益匪浅！</p>\n<p><a href=\"http://www.gfwsb.com/2016/improveNexTspeed/\">提升Hexo的NexT主题加载速度</a></p>\n<p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\">使用gulp精简hexo博客代码</a></p>\n<h2 id=\"绑定域名\"><a href=\"#绑定域名\" class=\"headerlink\" title=\"绑定域名\"></a>绑定域名</h2><p>购买域名，我是在<a href=\"https://account.aliyun.com/login/login.htm?oauth_callback=http://netcn.console.aliyun.com/core/domain/tclist\">万网</a>购买的，可以申请到国际域名，免去了备案的繁杂过程，我居然申请了两个，由于自学前端，所以就构建了一个网站来展示自己写的一些demo，【至于如何快速的构建一个网站，从购买域名，云空间到上传文件，你可以试一下这个<a href=\"http://www.xiaoerguo.com/\">网站</a>,但是现在可以用github page做服务器，也可以构建多个项目主页来展现demo，是我马上要研究的方向，自己上传云服务器感觉步骤好繁琐，看一下在github建立项目主页能否得到改善！】还一个正好闲置着，所以就拿来解析到github page上，以后就可以通过自己的域名访问自己的博客了！</p>\n<p>如何操作：在 Hexo\\source 文件夹里新建一个名为 CNAME 的文件，用文本编辑器打开，添加内容 yourwebsite.com （你的个人域名 ）。保存后，部署你的博客即可。如果这步遇到问题，也可手动在万网上解析，github page提供的IP：</p>\n<p>192.30.252.153</p>\n<p>192.30.252.154</p>\n<h2 id=\"制作ICO图标\"><a href=\"#制作ICO图标\" class=\"headerlink\" title=\"制作ICO图标\"></a>制作ICO图标</h2><p>favicon.ico一般用于作为缩略图的网站标志，<a href=\"http://www.bitbug.net/\">在线制作网站</a><br>关于是否绑定域名</p>\n<p>经过这几天的试用，关于是否绑定域名，发表一下自己的看法，如果你仅仅是使用个人主页来托管个人博客。绑定与否看你自己的想法，如果你还想使用github的项目主页来展示平时写的一些小练习demo，那我劝你不要绑定个人域名了，关于如何使用github的项目主页，请参考<a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a>,这样你就可以直接在需要展示的项目下添加gh-pages分支，然后通过访问“用户名。github.io/项目名/*.html”来查看页面展示效果了。这多方便，不用自己在上传云空间了，省去了一堆麻烦事！</p>\n<p>#至此，基本操作介绍完毕，以下内容普通用户无需了解。<br>默认目录结构：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── .deploy</div><div class=\"line\">├── public</div><div class=\"line\">├── scaffolds</div><div class=\"line\">├── scripts</div><div class=\"line\">├── source</div><div class=\"line\">|   ├── _drafts</div><div class=\"line\">|   └── _posts</div><div class=\"line\">├── themes</div><div class=\"line\">├── _config.yml</div><div class=\"line\">└── package.json</div></pre></td></tr></table></figure></p>\n<ul>\n<li>deploy：执行hexo deploy命令部署到GitHub上的内容目录</li>\n<li>public：执行hexo generate命令，输出的静态网页内容目录</li>\n<li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li>\n<li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li>\n<li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul>\n<li>drafts：草稿文章</li>\n<li>posts：发布文章</li>\n</ul>\n</li>\n<li>themes：主题文件目录</li>\n<li>_config.yml：全局配置文件，大多数的设置都在这里</li>\n<li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li>\n</ul>\n<p>接下来是重头戏_config.yml，做个简单说明：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Hexo Configuration</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/configure.html</div><div class=\"line\">## Source: https://github.com/tommy351/hexo/</div><div class=\"line\"></div><div class=\"line\"># Site #整站的基本信息</div><div class=\"line\">title: 不如 #网站标题</div><div class=\"line\">subtitle: 码农，程序猿，未来的昏析师 #网站副标题</div><div class=\"line\">description: bruce sha&apos;s blog | java | scala | bi #网站描述，给搜索引擎用的，在生成html中的head-&gt;meta中可看到</div><div class=\"line\">author: bruce #网站作者，在下方显示</div><div class=\"line\">email: bu.ru@qq.com #联系邮箱</div><div class=\"line\">language: zh-CN #语言</div><div class=\"line\"></div><div class=\"line\"># URL #域名和文件结构</div><div class=\"line\">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</div><div class=\"line\">url: http://ibruce.info #你的域名</div><div class=\"line\">root: /</div><div class=\"line\">permalink: :year/:month/:day/:title/</div><div class=\"line\">tag_dir: tags</div><div class=\"line\">archive_dir: archives</div><div class=\"line\">category_dir: categories</div><div class=\"line\">code_dir: downloads/code</div><div class=\"line\"></div><div class=\"line\"># Writing #写文章选项</div><div class=\"line\">new_post_name: :title.md # File name of new posts</div><div class=\"line\">default_layout: post #默认layout方式</div><div class=\"line\">auto_spacing: false # Add spaces between asian characters and western characters</div><div class=\"line\">titlecase: false # Transform title into titlecase</div><div class=\"line\">external_link: true # Open external links in new tab</div><div class=\"line\">max_open_file: 100</div><div class=\"line\">multi_thread: true</div><div class=\"line\">filename_case: 0</div><div class=\"line\">render_drafts: false</div><div class=\"line\">highlight: #代码高亮</div><div class=\"line\">  enable: true #是否启用</div><div class=\"line\">  line_number: false #是否显示行号</div><div class=\"line\">  tab_replace:</div><div class=\"line\"></div><div class=\"line\"># Category &amp; Tag #分类与标签</div><div class=\"line\">default_category: uncategorized # default</div><div class=\"line\">category_map:</div><div class=\"line\">tag_map:</div><div class=\"line\"></div><div class=\"line\"># Archives #存档，这里的说明好像不对。全部选择1，这个选项与主题中的选项有时候会有冲突</div><div class=\"line\">## 2: Enable pagination</div><div class=\"line\">## 1: Disable pagination</div><div class=\"line\">## 0: Fully Disable</div><div class=\"line\">archive: 1</div><div class=\"line\">category: 1</div><div class=\"line\">tag: 1</div><div class=\"line\"></div><div class=\"line\"># Server #本地服务参数</div><div class=\"line\">## Hexo uses Connect as a server</div><div class=\"line\">## You can customize the logger format as defined in</div><div class=\"line\">## http://www.senchalabs.org/connect/logger.html</div><div class=\"line\">port: 4000</div><div class=\"line\">logger: true</div><div class=\"line\">logger_format:</div><div class=\"line\"></div><div class=\"line\"># Date / Time format #日期显示格式</div><div class=\"line\">## Hexo uses Moment.js to parse and display date</div><div class=\"line\">## You can customize the date format as defined in</div><div class=\"line\">## http://momentjs.com/docs/#/displaying/format/</div><div class=\"line\">date_format: MMM D YYYY</div><div class=\"line\">time_format: H:mm:ss</div><div class=\"line\"></div><div class=\"line\"># Pagination #分页设置</div><div class=\"line\">## Set per_page to 0 to disable pagination</div><div class=\"line\">per_page: 10 #每页10篇文章</div><div class=\"line\">pagination_dir: page</div><div class=\"line\"></div><div class=\"line\"># Disqus #社会化评论disqus，我使用多说，在主题中配置</div><div class=\"line\">disqus_shortname:</div><div class=\"line\"></div><div class=\"line\"># Extensions #插件，暂时未安装插件</div><div class=\"line\">## Plugins: https://github.com/tommy351/hexo/wiki/Plugins</div><div class=\"line\">## Themes: https://github.com/tommy351/hexo/wiki/Themes</div><div class=\"line\">## 主题</div><div class=\"line\">theme: modernist # raytaylorism # pacman # modernist # light</div><div class=\"line\">exclude_generator:</div><div class=\"line\"></div><div class=\"line\"># Deployment #部署</div><div class=\"line\">## Docs: http://zespia.tw/hexo/docs/deploy.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: github</div><div class=\"line\">  repository: git@github.com:bruce-sha/bruce-sha.github.com.git #你的GitHub Pages仓库</div></pre></td></tr></table></figure></p>\n<h2 id=\"修改局部页面\"><a href=\"#修改局部页面\" class=\"headerlink\" title=\"修改局部页面\"></a>修改局部页面</h2><p>页面展现的全部逻辑都在每个主题中控制，源代码在hexo\\themes\\你使用的主题\\中，以modernist主题为例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">.</div><div class=\"line\">├── languages          #多语言</div><div class=\"line\">|   ├── default.yml    #默认语言</div><div class=\"line\">|   └── zh-CN.yml      #中文语言</div><div class=\"line\">├── layout             #布局，根目录下的*.ejs文件是对主页，分页，存档等的控制</div><div class=\"line\">|   ├── _partial       #局部的布局，此目录下的*.ejs是对头尾等局部的控制</div><div class=\"line\">|   └── _widget        #小挂件的布局，页面下方小挂件的控制</div><div class=\"line\">├── source             #源码</div><div class=\"line\">|   ├── css            #css源码</div><div class=\"line\">|   |   ├── _base      #*.styl基础css</div><div class=\"line\">|   |   ├── _partial   #*.styl局部css</div><div class=\"line\">|   |   ├── fonts      #字体</div><div class=\"line\">|   |   ├── images     #图片</div><div class=\"line\">|   |   └── style.styl #*.styl引入需要的css源码</div><div class=\"line\">|   ├── fancybox       #fancybox效果源码</div><div class=\"line\">|   └── js             #javascript源代码</div><div class=\"line\">├── _config.yml        #主题配置文件</div><div class=\"line\">└── README.md          #用GitHub的都知道</div></pre></td></tr></table></figure></p>\n<p>如果你需要修改头部，直接修改hexo\\themes\\modernist\\layout_partial\\header.ejs，比如头上加个搜索框：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">&lt;form class=&quot;search&quot; action=&quot;//google.com/search&quot; method=&quot;get&quot; accept-charset=&quot;utf-8&quot;&gt;</div><div class=\"line\"> &lt;input type=&quot;search&quot; name=&quot;q&quot; id=&quot;search&quot; autocomplete=&quot;off&quot; autocorrect=&quot;off&quot; autocapitalize=&quot;off&quot; maxlength=&quot;20&quot; placeholder=&quot;Search&quot; /&gt;</div><div class=\"line\"> &lt;input type=&quot;hidden&quot; name=&quot;q&quot; value=&quot;site:&lt;%- config.url.replace(/^https?:\\/\\//, &apos;&apos;) %&gt;&quot;&gt;</div><div class=\"line\">&lt;/form&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<p>将如上代码加入即可，您需要修改css以便这个搜索框比较美观。</p>\n<p>再如，你要修改页脚版权信息，直接编辑hexo\\themes\\modernist\\layout_partial\\footer.ejs。同理，你需要修改css，直接去修改对应位置的styl文件。</p>\n<h2 id=\"统计\"><a href=\"#统计\" class=\"headerlink\" title=\"统计\"></a>统计</h2><p>页面上显示访问次数可以使用 <a href=\"http://busuanzi.ibruce.info/\">不蒜子</a>，两行代码即可搞定。</p>\n<p>因Google Analytics偶尔被墙，故用百度统计，以modernist主题为例，介绍如何添加。<br>编辑文件hexo\\themes\\modernist_config.yml，增加配置选项：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">baidu_tongji: true</div></pre></td></tr></table></figure>\n<p>新建文件hexo\\themes\\modernist\\layout_partial\\baidu_tongji.ejs，内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;% if (theme.baidu_tongji)&#123; %&gt;</div><div class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</div><div class=\"line\">#你的百度统计代码</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\">&lt;% &#125; %&gt;</div></pre></td></tr></table></figure>\n<p>注册并登录百度统计获取你的统计代码。</p>\n<p>编辑文件hexo\\themes\\modernist\\layout_partial\\head.ejs，在『/head』之前增加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;%- partial(&apos;baidu_tongji&apos;) %&gt;</div></pre></td></tr></table></figure>\n<p>重新生成并部署你的站点。</p>\n<p>不出意外的话，在你的站点的每个页面的左上角都会看到一个恶心的百度LOGO。你只能在『百度统计首页-&gt;网站列表-&gt;获取代码-&gt;系统管理设置-&gt;统计图标设置-&gt;显示图标』，把那个勾去掉。百度真是恶心，我准备还是用Google Analytics。</p>\n<h2 id=\"分享\"><a href=\"#分享\" class=\"headerlink\" title=\"分享\"></a>分享</h2><p>我没有添加分享，觉得这个不是很必要，导致页面看起来啰嗦。以加网为例介绍如何添加：</p>\n<ul>\n<li>在hexo\\themes\\modernist\\layout_partial\\post下新建jiathis.ejs文件。<br>注册加网获得你的分享代码，写入jiathis.ejs。</li>\n<li>在hexo\\themes\\modernist\\layout_partial\\article.ejs中，添加&lt;%-partial(‘post/jiathis’)%&gt;。<br>-分享服务还可以使用如下企业提供的技术<a href=\"http://www.jiathis.com/\">加网</a>，<a href=\"http://www.bshare.cn/\">bShare</a>，<a href=\"http://share.baidu.com/\">百度分享</a>。</li>\n</ul>\n<p>网站图标</p>\n<p>看一下hexo\\themes\\modernist\\layout_partial\\head.ejs，找到这句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;link rel=&quot;icon&quot; type=&quot;image/x-icon&quot; href=&quot;&lt;%- config.root %&gt;favicon.ico&quot;&gt;</div></pre></td></tr></table></figure>\n<p>你懂的，将你的favicon.ico放到工程根目录下即可，也就是hexo\\source目录。可以<a href=\"http://www.faviconer.com/\">在Faviconer</a>制作你的ico图标，国内有<a href=\"http://www.bitbug.net/\">比特虫</a>。</p>\n<h2 id=\"自定义挂件\"><a href=\"#自定义挂件\" class=\"headerlink\" title=\"自定义挂件\"></a>自定义挂件</h2><p>除了默认已提供的挂件外，你还可以自定义自己的小挂件，在hexo\\themes\\modernist\\layout_widget\\下，新建自己的ejs文件，如myWidget.ejs，然后在配置文件hexo\\themes\\modernist_config.yml中配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">widgets:</div><div class=\"line\">  - myWidget</div></pre></td></tr></table></figure></p>\n<p>用上述方法可以添加新浪微博小挂件。</p>\n<ul>\n<li>生成自己的微博组件。</li>\n<li>添加hexo\\themes\\modernist\\layout_widget\\weibo.ejs文件。</li>\n<li>配置hexo\\themes\\modernist_config.yml。<h2 id=\"插件\"><a href=\"#插件\" class=\"headerlink\" title=\"插件\"></a>插件</h2></li>\n</ul>\n<p>安装插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install &lt;plugin-name&gt; --save</div></pre></td></tr></table></figure></p>\n<p>启用插件：在*hexo_config.yml文件添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">plugins:</div><div class=\"line\">- &lt;plugin-name&gt;  #插件名</div></pre></td></tr></table></figure></p>\n<p>升级插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>卸载插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm uninstall &lt;plugin-name&gt;</div></pre></td></tr></table></figure></p>\n<p>RSS插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-feed。一旦安装完成，你可以在配置显示你站点的RSS，文件路径\\atom.xml。</p>\n<p>你可以用rss作为迁移工具，用如下命令读取其他位置的rss：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo migrate rss &lt;source&gt;</div></pre></td></tr></table></figure>\n<p>『source』是本地或网络文件路径。</p>\n<p>Sitemap插件<br>将上述命令中的『plugin-name』，替换为hexo-generator-sitemap。你可以将你站点地图提交给搜索引擎，文件路径\\sitemap.xml。</p>\n<p>更多插件的安装方法，请参考<a href=\"https://github.com/hexojs/hexo/wiki/Plugins\">官方Wiki</a>。</p>\n<p>如果你按照上述步骤做，但插件不起作用，没有生成atom.xml和sitemap.xml，也没有报错，那么你应该cd到你的hexo初始化目录，在该目录下重新安装插件，重试。</p>\n<h2 id=\"迁移\"><a href=\"#迁移\" class=\"headerlink\" title=\"迁移\"></a>迁移</h2><p>hexo支持从其他类型站点迁移，如通用RSS，Jekyll，Octopress，WordPress等，这一部分我没试过。请参考官方文档Hexo Migration。</p>\n<h2 id=\"搜索引擎\"><a href=\"#搜索引擎\" class=\"headerlink\" title=\"搜索引擎\"></a>搜索引擎</h2><p>你可以到<a href=\"http://www.sousuoyinqingtijiao.com/\">屈站长</a>提交你的站点给搜索引擎。其他内容如添加站点或页面的description，提交Sitemap，添加百度统计，Google Analytics等等，参考本文其他章节的内容，不再一一阐述。</p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><p>更新hexo：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update -g hexo</div></pre></td></tr></table></figure>\n<p>更新主题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd themes/你的主题</div><div class=\"line\">git pull</div></pre></td></tr></table></figure></p>\n<p>更新插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm update</div></pre></td></tr></table></figure></p>\n<p>干掉IE</p>\n<p>Kill IE6 提示的javascript代码，请自行搜索。</p>\n<h2 id=\"换机器\"><a href=\"#换机器\" class=\"headerlink\" title=\"换机器\"></a>换机器</h2><p>你要保留好自己的博客源码。换机器写博客，就只能使用各种网盘的同步功能，或者你把你的站点源文件提交到某代码托管服务器。另外，貌似这篇很牛逼，Hexo 服务器端布署及 Dropbox 同步。</p>\n<p>我的办法是这样的，先在一个目录下做好Node+Git+Hexo的绿色环境，写个hexos.bat可以一键启动hexo工作台，把整个目录用Dropbox同步，这样随便在办公室或家的任何笔记本台式机都可以写博客，也不用处理什么文件拷贝备份的事情，非常爽。</p>\n<h2 id=\"统计功能\"><a href=\"#统计功能\" class=\"headerlink\" title=\"统计功能\"></a>统计功能</h2><p>为hexo博客添加访问次数统计功能</p>\n<p>其它</p>\n<p>网站加速</p>\n<p><a href=\"http://www.webluker.com/\">Webluker-CDN 网站加速 免费CDN DNS解析</a></p>\n<p>Webluker-FAQ索引</p>\n<p>网站监控</p>\n<p><a href=\"http://www.jiankongbao.com/\">监控宝-网站监控 网页监控 服务器监控</a></p>\n<p><a href=\"http://www.jiankongbao.com/faq\">监控宝-常见问题</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><ul>\n<li><p><a href=\"http://blog.netpi.me/%E5%AE%9E%E7%94%A8/hexo/\">hexo + github + 多说 来搭建免费博客</a></p>\n</li>\n<li><p><a href=\"http://www.jerryfu.net/post/search-engine-for-hexo-with-swiftype-v2.html\">利用swiftype为hexo添加站内搜索</a></p>\n</li>\n<li><p><a href=\"http://www.imys.net/20150513/wordpress-to-hexo.html#%E6%97%A0%E6%B3%95%E5%BC%80%E5%90%AFRSS%E5%92%8Csitemap\">博客搬迁记 - 从WordPress到Hexo</a></p>\n</li>\n<li><p><a href=\"http://www.tuicool.com/articles/umEBVfI\">在 hexo中无痛使用本地图片</a></p>\n</li>\n<li><p><a href=\"http://i.woblog.cn/2016/05/04/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8Travis%20CI%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E4%BD%A0%E7%9A%84Hexo%E5%8D%9A%E5%AE%A2%E5%88%B0Github%E4%B8%8A/#more\">手把手教你使用Travis CI自动部署你的Hexo博客到Github上</a></p>\n</li>\n<li><p><a href=\"http://www.gfwsb.com/2016/use-sitemap-for-hexo/\">为Hexo博客生成sitemap</a></p>\n</li>\n</ul>\n<ul>\n<li><p><a href=\"http://www.5941740.cn/2016/02/19/%E4%BD%BF%E7%94%A8gulp%E7%B2%BE%E7%AE%80hexo%E5%8D%9A%E5%AE%A2%E4%BB%A3%E7%A0%81/\">使用gulp精简hexo博客代码</a></p>\n</li>\n<li><p><a href=\"http://chitanda.me/2015/11/03/multiple-git-pages-in-one-github-account/\">单个GitHub帐号下添加多个GitHub Pages的相关问题</a></p>\n</li>\n<li><p><a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\">hexo你的博客</a></p>\n</li>\n</ul>"},{"title":"使用webstorm连接github","date":"2017-02-24T02:40:20.000Z","_content":"本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！~\n<!--more-->\n昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容\n\n说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，[WebStorm 有哪些过人之处？](https://www.zhihu.com/question/20936155)，说一下我现在觉得有用的功能：\n \n\n - 连接ftp，可以直接上传文件，一键就可以更新\n - 就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦\n\n因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能\n\n今天记录一下怎么用webstorm连接github以及一些操作说明\n怎么连接用webstorm连接github这点自行百度。\n在连接到github上之后，想要把你的项目上传到github上，\n1、点击右上方的VCS然后import...→share....\n![这里写图片描述](http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库\n![这里写图片描述](http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。\n![这里写图片描述](http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png)\nadd之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上\n![这里写图片描述](http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之后再push，也可以点击上方的VSC-git-push\n\n附文件颜色代表的含义：\n红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；\n\n绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；\n\n蓝色：文件内容有修改；\n\n灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。\n\n总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；\n\n这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键\n\n在右下角还可以口管理分支\n\n附上查找的资料，他们写的比较详细，我就不再赘述\n - [利用WebStorm来管理你的Github](http://www.cnblogs.com/liulinjie/p/5708149.html)\n - [git checkout 命令详解](http://www.tuicool.com/articles/A3Mn6f)\n - [webstormGit上的使用](http://www.cnblogs.com/zhaoxiu/p/5772466.html)\n - [使用webstorm操作git](http://www.cnblogs.com/jinguangguo/p/4868152.html)\n - [使用webstorm上传代码到github](http://www.cnblogs.com/vanstrict/p/5677716.html)\n","source":"_posts/Use-webstorm-to-connect-GitHub.md","raw":"---\ntitle: 使用webstorm连接github\ndate: 2017-02-24 10:40:20\ntags: git\ncategories: git\n---\n本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，*★,°*:.☆\\(￣▽￣)/$:*.°★*。撒花！~\n<!--more-->\n昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容\n\n说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，[WebStorm 有哪些过人之处？](https://www.zhihu.com/question/20936155)，说一下我现在觉得有用的功能：\n \n\n - 连接ftp，可以直接上传文件，一键就可以更新\n - 就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦\n\n因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能\n\n今天记录一下怎么用webstorm连接github以及一些操作说明\n怎么连接用webstorm连接github这点自行百度。\n在连接到github上之后，想要把你的项目上传到github上，\n1、点击右上方的VCS然后import...→share....\n![这里写图片描述](http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库\n![这里写图片描述](http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。\n![这里写图片描述](http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png)\nadd之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上\n![这里写图片描述](http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n之后再push，也可以点击上方的VSC-git-push\n\n附文件颜色代表的含义：\n红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；\n\n绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；\n\n蓝色：文件内容有修改；\n\n灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。\n\n总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；\n\n这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键\n\n在右下角还可以口管理分支\n\n附上查找的资料，他们写的比较详细，我就不再赘述\n - [利用WebStorm来管理你的Github](http://www.cnblogs.com/liulinjie/p/5708149.html)\n - [git checkout 命令详解](http://www.tuicool.com/articles/A3Mn6f)\n - [webstormGit上的使用](http://www.cnblogs.com/zhaoxiu/p/5772466.html)\n - [使用webstorm操作git](http://www.cnblogs.com/jinguangguo/p/4868152.html)\n - [使用webstorm上传代码到github](http://www.cnblogs.com/vanstrict/p/5677716.html)\n","slug":"Use-webstorm-to-connect-GitHub","published":1,"updated":"2017-03-12T02:45:05.477Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel3m001uqkyf7r2e6iwj","content":"<p>本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！~<br><a id=\"more\"></a><br>昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容</p>\n<p>说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，<a href=\"https://www.zhihu.com/question/20936155\" target=\"_blank\" rel=\"external\">WebStorm 有哪些过人之处？</a>，说一下我现在觉得有用的功能：</p>\n<ul>\n<li>连接ftp，可以直接上传文件，一键就可以更新</li>\n<li>就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦</li>\n</ul>\n<p>因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能</p>\n<p>今天记录一下怎么用webstorm连接github以及一些操作说明<br>怎么连接用webstorm连接github这点自行百度。<br>在连接到github上之后，想要把你的项目上传到github上，<br>1、点击右上方的VCS然后import…→share….<br><img src=\"http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库<br><img src=\"http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。<br><img src=\"http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png\" alt=\"这里写图片描述\"><br>add之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上<br><img src=\"http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>之后再push，也可以点击上方的VSC-git-push</p>\n<p>附文件颜色代表的含义：<br>红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；</p>\n<p>绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；</p>\n<p>蓝色：文件内容有修改；</p>\n<p>灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。</p>\n<p>总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；</p>\n<p>这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键</p>\n<p>在右下角还可以口管理分支</p>\n<p>附上查找的资料，他们写的比较详细，我就不再赘述</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/liulinjie/p/5708149.html\" target=\"_blank\" rel=\"external\">利用WebStorm来管理你的Github</a></li>\n<li><a href=\"http://www.tuicool.com/articles/A3Mn6f\" target=\"_blank\" rel=\"external\">git checkout 命令详解</a></li>\n<li><a href=\"http://www.cnblogs.com/zhaoxiu/p/5772466.html\" target=\"_blank\" rel=\"external\">webstormGit上的使用</a></li>\n<li><a href=\"http://www.cnblogs.com/jinguangguo/p/4868152.html\" target=\"_blank\" rel=\"external\">使用webstorm操作git</a></li>\n<li><a href=\"http://www.cnblogs.com/vanstrict/p/5677716.html\" target=\"_blank\" rel=\"external\">使用webstorm上传代码到github</a></li>\n</ul>\n","excerpt":"<p>本文主要讲了怎么使用webstorm连接自己的github，从而做到版本控制自己的代码，用起来很方便，在coding完之后直接可以commit和push，但是时间长了发现还是有一定的不方便（应该是自己还不会用= =），本文持续更新，<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em>。撒花！~<br>","more":"<br>昨天重新捣鼓了下github，给自己立一个flag，每天都要写总结，记录这一天学习的内容</p>\n<p>说起来很惭愧，之前用webstorm都是把其当成编辑器使用，不知道可以导入工程的概念= =，表打我，因为我们公司好多项目都是在playcanvas下开展的，不能直接打开index.html浏览项目，每次都需要开启终端，开启python，然后我们同事说你用webstorm可以直接打开，然后我试了下，不行，就没有再继续尝试下去了，直到用sass的时候，我发现按照网上的方式，怎么都添加不了watch，一直报错,然后用webstorm创建工程发现就可以了，心塞塞~然后在知乎上看了一个问答才发现我一直在暴殄天物，<a href=\"https://www.zhihu.com/question/20936155\">WebStorm 有哪些过人之处？</a>，说一下我现在觉得有用的功能：</p>\n<ul>\n<li>连接ftp，可以直接上传文件，一键就可以更新</li>\n<li>就是自带git功能，并且可以连接github，也是可以一键更新，没有什么命令行那么麻烦</li>\n</ul>\n<p>因为我还没有那么高的水平，所以目前就觉得这两点比较方便= =，待以后发现更多的强大功能</p>\n<p>今天记录一下怎么用webstorm连接github以及一些操作说明<br>怎么连接用webstorm连接github这点自行百度。<br>在连接到github上之后，想要把你的项目上传到github上，<br>1、点击右上方的VCS然后import…→share….<br><img src=\"http://img.blog.csdn.net/20170224184547396?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>2、填写一下新建仓库的名称和描述，然后点击share，就可以在你的github下创新一个新的仓库<br><img src=\"http://img.blog.csdn.net/20170224184718834?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>3、然后你就会发现你的左侧文件都变成了红色，红色代表你还没有add到缓存区，点击右键，将你要上传的文件add到缓存区。<br><img src=\"http://images2015.cnblogs.com/blog/1004353/201608/1004353-20160815113925453-1269489073.png\" alt=\"这里写图片描述\"><br>add之后文件就会变成绿色的了，接下来要commit，直接右下角可以选择commit and push我理解的commit就是发布版本的意思，将你add到缓存区的文件发布成版本，这里还是本地的版本，需要push到github上，就是同步到github上<br><img src=\"http://img.blog.csdn.net/20170224185234305?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc3Vuc2hpbmU5NDAzMjY=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n<p>之后再push，也可以点击上方的VSC-git-push</p>\n<p>附文件颜色代表的含义：<br>红色：本地新增文件，没有关联到git，ctrl + k 提交不到git；</p>\n<p>绿色：由红色add to 转变而成，ctrl + k 可以提交的新增文件；</p>\n<p>蓝色：文件内容有修改；</p>\n<p>灰色：本地删除的文件（待删除的文件，远程没删）ctrl + k ,ctrl + shift + k 提交就没了。</p>\n<p>总结一下就是先share到github（在github上创建仓库）→将文件add到缓存区→commit发布版本→push到github（同步到github上）；</p>\n<p>这些步骤可以再上方的VCS完成也可以在左侧的包管理器右键</p>\n<p>在右下角还可以口管理分支</p>\n<p>附上查找的资料，他们写的比较详细，我就不再赘述</p>\n<ul>\n<li><a href=\"http://www.cnblogs.com/liulinjie/p/5708149.html\">利用WebStorm来管理你的Github</a></li>\n<li><a href=\"http://www.tuicool.com/articles/A3Mn6f\">git checkout 命令详解</a></li>\n<li><a href=\"http://www.cnblogs.com/zhaoxiu/p/5772466.html\">webstormGit上的使用</a></li>\n<li><a href=\"http://www.cnblogs.com/jinguangguo/p/4868152.html\">使用webstorm操作git</a></li>\n<li><a href=\"http://www.cnblogs.com/vanstrict/p/5677716.html\">使用webstorm上传代码到github</a></li>\n</ul>"},{"title":"gulp（一）","date":"2017-03-18T12:00:06.000Z","_content":"因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：http://www.cnblogs.com/2050/p/4198792.html.   以及gulp的官网\n<!--more-->\n# gulp的工作原理简述\n## 下Grunt.js和Gulp.js工作方式的区别\n>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务...但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的`pipe()`方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因\n\n## gulp传入的路径参数与最终生成文件的关系\n> 理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用`gulp.dest() `这个方法。gulp的流程是这样的：首先通过`gulp.src()`方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到`gulp.dest()`中，`gulp.dest()`方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给`gulp.dest()`传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，**所以生成的文件名是由导入到它的文件流决定的**即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名\n\n# gulp安装\ngulp是基于node环境的，所以首先需要安装node环境\n然后以全局方式安装gulp\n```\nnpm install -g gulp\n```\n全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行\n```\nnpm install gulp\n```\n如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 --save-dev\n```\nnpm install --save-dev gulp\n```\n\n# 开始使用gulp\n## 建立gulpfile.js文件\n建立一个`gulpfile.js`文件，这个文件就是gulp的主文件，之后要做的事情就是在`gulpfile.js`文件中定义我们的任务就好，下面是一个最简单的`gulpfile.js`\n```\nvar gulp = require('gulp');\ngulp.task('default',function(){\n  console.log('Hello world')  \n})\n\n```\n此时我们的目录结构是这样的\n├── gulpfile.js\n├── node_modules\n│ └── gulp\n└── package.json\n\n## 运行gulp任务\n要运行gulp任务，只需切换到存放`gulpfile.js `文件的目录，然后在命令行执行`gulp`命令就可以，`gulp`后面加上要执行的任务名，例如`gulp task1`，如果没有指定任务名。则是按照默认的`defaule`任务\n\n# gulp的api\ngulp只要四个api，`gulp.task()`、`gulp.src()`,`gulp.dest()`,`gulp.watch()`\n\n## gulp.src\n这个方法用来读取你需要操作的文件\n\n`gulp.src()`方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，\n\n```\ngulp.src(globs[,options])\n```\nglobs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组\n\noption是可选参数，通常情况下我们不需要用到\n\n\n# gulp.dest()\n`gulp.dest()`是用来写文件的，其语法为：\n```\ngulp.dest(path[,option])\n\n```\n`path`为写入文件的路径\noption为一个可选的参数，通常我们不需要用到\n","source":"_posts/gulp（一）.md","raw":"---\ntitle: gulp（一）\ndate: 2017-03-18 20:00:06\ntags: gulp\ncategories: gulp\n---\n因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：http://www.cnblogs.com/2050/p/4198792.html.   以及gulp的官网\n<!--more-->\n# gulp的工作原理简述\n## 下Grunt.js和Gulp.js工作方式的区别\n>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务...但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的`pipe()`方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因\n\n## gulp传入的路径参数与最终生成文件的关系\n> 理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用`gulp.dest() `这个方法。gulp的流程是这样的：首先通过`gulp.src()`方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到`gulp.dest()`中，`gulp.dest()`方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给`gulp.dest()`传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，**所以生成的文件名是由导入到它的文件流决定的**即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名\n\n# gulp安装\ngulp是基于node环境的，所以首先需要安装node环境\n然后以全局方式安装gulp\n```\nnpm install -g gulp\n```\n全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行\n```\nnpm install gulp\n```\n如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 --save-dev\n```\nnpm install --save-dev gulp\n```\n\n# 开始使用gulp\n## 建立gulpfile.js文件\n建立一个`gulpfile.js`文件，这个文件就是gulp的主文件，之后要做的事情就是在`gulpfile.js`文件中定义我们的任务就好，下面是一个最简单的`gulpfile.js`\n```\nvar gulp = require('gulp');\ngulp.task('default',function(){\n  console.log('Hello world')  \n})\n\n```\n此时我们的目录结构是这样的\n├── gulpfile.js\n├── node_modules\n│ └── gulp\n└── package.json\n\n## 运行gulp任务\n要运行gulp任务，只需切换到存放`gulpfile.js `文件的目录，然后在命令行执行`gulp`命令就可以，`gulp`后面加上要执行的任务名，例如`gulp task1`，如果没有指定任务名。则是按照默认的`defaule`任务\n\n# gulp的api\ngulp只要四个api，`gulp.task()`、`gulp.src()`,`gulp.dest()`,`gulp.watch()`\n\n## gulp.src\n这个方法用来读取你需要操作的文件\n\n`gulp.src()`方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，\n\n```\ngulp.src(globs[,options])\n```\nglobs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组\n\noption是可选参数，通常情况下我们不需要用到\n\n\n# gulp.dest()\n`gulp.dest()`是用来写文件的，其语法为：\n```\ngulp.dest(path[,option])\n\n```\n`path`为写入文件的路径\noption为一个可选的参数，通常我们不需要用到\n","slug":"gulp（一）","published":1,"updated":"2017-03-26T13:51:18.406Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj1jcel42001xqkyfj0r1a5jx","content":"<p>因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：<a href=\"http://www.cnblogs.com/2050/p/4198792.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/2050/p/4198792.html</a>.   以及gulp的官网<br><a id=\"more\"></a></p>\n<h1 id=\"gulp的工作原理简述\"><a href=\"#gulp的工作原理简述\" class=\"headerlink\" title=\"gulp的工作原理简述\"></a>gulp的工作原理简述</h1><h2 id=\"下Grunt-js和Gulp-js工作方式的区别\"><a href=\"#下Grunt-js和Gulp-js工作方式的区别\" class=\"headerlink\" title=\"下Grunt.js和Gulp.js工作方式的区别\"></a>下Grunt.js和Gulp.js工作方式的区别</h2><blockquote>\n<p>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务…但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的<code>pipe()</code>方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因</p>\n</blockquote>\n<h2 id=\"gulp传入的路径参数与最终生成文件的关系\"><a href=\"#gulp传入的路径参数与最终生成文件的关系\" class=\"headerlink\" title=\"gulp传入的路径参数与最终生成文件的关系\"></a>gulp传入的路径参数与最终生成文件的关系</h2><blockquote>\n<p>理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用<code>gulp.dest()</code>这个方法。gulp的流程是这样的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给<code>gulp.dest()</code>传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，<strong>所以生成的文件名是由导入到它的文件流决定的</strong>即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名</p>\n</blockquote>\n<h1 id=\"gulp安装\"><a href=\"#gulp安装\" class=\"headerlink\" title=\"gulp安装\"></a>gulp安装</h1><p>gulp是基于node环境的，所以首先需要安装node环境<br>然后以全局方式安装gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g gulp</div></pre></td></tr></table></figure></p>\n<p>全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp</div></pre></td></tr></table></figure></p>\n<p>如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 –save-dev<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp</div></pre></td></tr></table></figure></p>\n<h1 id=\"开始使用gulp\"><a href=\"#开始使用gulp\" class=\"headerlink\" title=\"开始使用gulp\"></a>开始使用gulp</h1><h2 id=\"建立gulpfile-js文件\"><a href=\"#建立gulpfile-js文件\" class=\"headerlink\" title=\"建立gulpfile.js文件\"></a>建立gulpfile.js文件</h2><p>建立一个<code>gulpfile.js</code>文件，这个文件就是gulp的主文件，之后要做的事情就是在<code>gulpfile.js</code>文件中定义我们的任务就好，下面是一个最简单的<code>gulpfile.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;,function()&#123;</div><div class=\"line\">  console.log(&apos;Hello world&apos;)  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时我们的目录结构是这样的<br>├── gulpfile.js<br>├── node_modules<br>│ └── gulp<br>└── package.json</p>\n<h2 id=\"运行gulp任务\"><a href=\"#运行gulp任务\" class=\"headerlink\" title=\"运行gulp任务\"></a>运行gulp任务</h2><p>要运行gulp任务，只需切换到存放<code>gulpfile.js</code>文件的目录，然后在命令行执行<code>gulp</code>命令就可以，<code>gulp</code>后面加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名。则是按照默认的<code>defaule</code>任务</p>\n<h1 id=\"gulp的api\"><a href=\"#gulp的api\" class=\"headerlink\" title=\"gulp的api\"></a>gulp的api</h1><p>gulp只要四个api，<code>gulp.task()</code>、<code>gulp.src()</code>,<code>gulp.dest()</code>,<code>gulp.watch()</code></p>\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src\"></a>gulp.src</h2><p>这个方法用来读取你需要操作的文件</p>\n<p><code>gulp.src()</code>方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(globs[,options])</div></pre></td></tr></table></figure>\n<p>globs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组</p>\n<p>option是可选参数，通常情况下我们不需要用到</p>\n<h1 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h1><p><code>gulp.dest()</code>是用来写文件的，其语法为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.dest(path[,option])</div></pre></td></tr></table></figure></p>\n<p><code>path</code>为写入文件的路径<br>option为一个可选的参数，通常我们不需要用到</p>\n","excerpt":"<p>因为新的工作使用的是gulp，所以学习一下gulp，本文主要参考的是：<a href=\"http://www.cnblogs.com/2050/p/4198792.html\">http://www.cnblogs.com/2050/p/4198792.html</a>.   以及gulp的官网<br>","more":"</p>\n<h1 id=\"gulp的工作原理简述\"><a href=\"#gulp的工作原理简述\" class=\"headerlink\" title=\"gulp的工作原理简述\"></a>gulp的工作原理简述</h1><h2 id=\"下Grunt-js和Gulp-js工作方式的区别\"><a href=\"#下Grunt-js和Gulp-js工作方式的区别\" class=\"headerlink\" title=\"下Grunt.js和Gulp.js工作方式的区别\"></a>下Grunt.js和Gulp.js工作方式的区别</h2><blockquote>\n<p>grunt主要是以文件为媒介来运行工作流的，比如在grunt中执行完一个任务后，会把结果写在一个临时文件中，然后可以在这个临时文件内容的基础上执行其他任务，执行完之后又把结果写入到临时文件中，，然后又以这个为基础继续执行其他任务…但是在gulp中，使用的是nodejs中的stream（流），首先获取到需要的stream，然后可以通过stream的<code>pipe()</code>方法把流导入到你想要的地方，比如gulp的插件中，经过插件处理后的流又可以继续导入到其他插件中，当然也可以把流写到文件中，所以gulp是以stream为媒介的，它不需要频繁的生成临时文件，这也是gulp比grunt快的一个原因</p>\n</blockquote>\n<h2 id=\"gulp传入的路径参数与最终生成文件的关系\"><a href=\"#gulp传入的路径参数与最终生成文件的关系\" class=\"headerlink\" title=\"gulp传入的路径参数与最终生成文件的关系\"></a>gulp传入的路径参数与最终生成文件的关系</h2><blockquote>\n<p>理解了gulp传入路径参数与最终生成文件的关系，就可以理解怎么使用<code>gulp.dest()</code>这个方法。gulp的流程是这样的：首先通过<code>gulp.src()</code>方法获取到我们想要处理的文件流，然后把文件流通过pipe方法导入到gulp插件中，最后把经过插件处理后的流再通过pipe方法导入到<code>gulp.dest()</code>中，<code>gulp.dest()</code>方法则把流中的内容写入到文件中，这里首先需要弄清楚一点的是，我们给<code>gulp.dest()</code>传入的路径参数，只能用来指定要生成的文件的目录，而不能指定生成文件的文件名，它生成文件的文件名使用的是导入到它的文件流自身的文件名，<strong>所以生成的文件名是由导入到它的文件流决定的</strong>即使我们给它传入一个带有文件名的路径的参数，然后它也会把这个文件名</p>\n</blockquote>\n<h1 id=\"gulp安装\"><a href=\"#gulp安装\" class=\"headerlink\" title=\"gulp安装\"></a>gulp安装</h1><p>gulp是基于node环境的，所以首先需要安装node环境<br>然后以全局方式安装gulp<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g gulp</div></pre></td></tr></table></figure></p>\n<p>全局安装gulp之后还需要在每个要使用gulp的项目中都单独安装一次。把目录切换到你的项目文件夹中，然后执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install gulp</div></pre></td></tr></table></figure></p>\n<p>如果想要在安装的时候把gulp写进项目package.json文件的依赖中，可以加上 –save-dev<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev gulp</div></pre></td></tr></table></figure></p>\n<h1 id=\"开始使用gulp\"><a href=\"#开始使用gulp\" class=\"headerlink\" title=\"开始使用gulp\"></a>开始使用gulp</h1><h2 id=\"建立gulpfile-js文件\"><a href=\"#建立gulpfile-js文件\" class=\"headerlink\" title=\"建立gulpfile.js文件\"></a>建立gulpfile.js文件</h2><p>建立一个<code>gulpfile.js</code>文件，这个文件就是gulp的主文件，之后要做的事情就是在<code>gulpfile.js</code>文件中定义我们的任务就好，下面是一个最简单的<code>gulpfile.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;,function()&#123;</div><div class=\"line\">  console.log(&apos;Hello world&apos;)  </div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>此时我们的目录结构是这样的<br>├── gulpfile.js<br>├── node_modules<br>│ └── gulp<br>└── package.json</p>\n<h2 id=\"运行gulp任务\"><a href=\"#运行gulp任务\" class=\"headerlink\" title=\"运行gulp任务\"></a>运行gulp任务</h2><p>要运行gulp任务，只需切换到存放<code>gulpfile.js</code>文件的目录，然后在命令行执行<code>gulp</code>命令就可以，<code>gulp</code>后面加上要执行的任务名，例如<code>gulp task1</code>，如果没有指定任务名。则是按照默认的<code>defaule</code>任务</p>\n<h1 id=\"gulp的api\"><a href=\"#gulp的api\" class=\"headerlink\" title=\"gulp的api\"></a>gulp的api</h1><p>gulp只要四个api，<code>gulp.task()</code>、<code>gulp.src()</code>,<code>gulp.dest()</code>,<code>gulp.watch()</code></p>\n<h2 id=\"gulp-src\"><a href=\"#gulp-src\" class=\"headerlink\" title=\"gulp.src\"></a>gulp.src</h2><p>这个方法用来读取你需要操作的文件</p>\n<p><code>gulp.src()</code>方法正是用来获取流的，但是要注意这个流里的内容不是原始的文件流，而是一个虚拟文件对象流，这个虚拟文件对象中存储着原始文件的路径、文件名、内容信息等，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.src(globs[,options])</div></pre></td></tr></table></figure>\n<p>globs参数是文件匹配模式，用来匹配文件路径（包括文件名），当然这里也可以直接指定某个具体的文件路径，当有多个匹配模式时，该参数可以为一个数组</p>\n<p>option是可选参数，通常情况下我们不需要用到</p>\n<h1 id=\"gulp-dest\"><a href=\"#gulp-dest\" class=\"headerlink\" title=\"gulp.dest()\"></a>gulp.dest()</h1><p><code>gulp.dest()</code>是用来写文件的，其语法为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">gulp.dest(path[,option])</div></pre></td></tr></table></figure></p>\n<p><code>path</code>为写入文件的路径<br>option为一个可选的参数，通常我们不需要用到</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj1jcel1g0008qkyfzxlgjl3l","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel1w000hqkyfbnu3wmn1"},{"post_id":"cj1jcel0l0000qkyfhr6repw9","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel2b000lqkyfdc82ri8y"},{"post_id":"cj1jcel1w000aqkyf3tieyb9r","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel2b000oqkyfht61zdus"},{"post_id":"cj1jcel1w000fqkyf38edj4k8","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel2b000tqkyf9biqulwv"},{"post_id":"cj1jcel100002qkyfhtgardfj","category_id":"cj1jcel1w000bqkyf5bvgfqsg","_id":"cj1jcel2b000vqkyf5xry4l0g"},{"post_id":"cj1jcel1w000iqkyfpacixrc9","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel2r000xqkyf4kngrjo5"},{"post_id":"cj1jcel1g0006qkyfg008j0w0","category_id":"cj1jcel1w000jqkyfztspvdkd","_id":"cj1jcel2r0011qkyfzol57bx3"},{"post_id":"cj1jcel2b000pqkyf08258qfx","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel2r0013qkyfef6gtdsq"},{"post_id":"cj1jcel2b000wqkyfm2h0jkvc","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel2r0016qkyflnacb07e"},{"post_id":"cj1jcel2b000mqkyf9bgy9zlv","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel370019qkyfz1bsghrd"},{"post_id":"cj1jcel2r000zqkyf9svu6pl5","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel37001dqkyfqgwxxh3q"},{"post_id":"cj1jcel2r0012qkyfp12wpqp4","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel37001hqkyflhy478vn"},{"post_id":"cj1jcel2b000uqkyft36hg6ti","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel3m001lqkyfliu5ebg7"},{"post_id":"cj1jcel2r0014qkyf29ztusje","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel3m001oqkyf985iwckg"},{"post_id":"cj1jcel2r0018qkyf3rfu1ihu","category_id":"cj1jcel2b000sqkyf0khfugfc","_id":"cj1jcel3m001sqkyf2fxh97is"},{"post_id":"cj1jcel3m001mqkyf28jsnn62","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel3m001wqkyfnv5ef9a1"},{"post_id":"cj1jcel37001bqkyfaf5b3ml8","category_id":"cj1jcel37001gqkyfhw45ye3s","_id":"cj1jcel420020qkyft3vrd8tx"},{"post_id":"cj1jcel3m001pqkyfdhkug0ac","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel420023qkyfmw7zrm2d"},{"post_id":"cj1jcel3m001uqkyf7r2e6iwj","category_id":"cj1jcel100004qkyfycmnyzi3","_id":"cj1jcel420026qkyffujbcf4c"},{"post_id":"cj1jcel37001fqkyf8l25k1kx","category_id":"cj1jcel3m001qqkyf99o95jn7","_id":"cj1jcel420029qkyfy144ua81"},{"post_id":"cj1jcel37001jqkyfaj1p6nuv","category_id":"cj1jcel3m001qqkyf99o95jn7","_id":"cj1jcel42002aqkyfeip3tkql"},{"post_id":"cj1jcel42001xqkyfj0r1a5jx","category_id":"cj1jcel420024qkyffgborubk","_id":"cj1jcel42002dqkyfzljr47an"}],"PostTag":[{"post_id":"cj1jcel1g0008qkyfzxlgjl3l","tag_id":"cj1jcel1g0005qkyfeccytj7j","_id":"cj1jcel1w000eqkyfq84tq03n"},{"post_id":"cj1jcel0l0000qkyfhr6repw9","tag_id":"cj1jcel1g0005qkyfeccytj7j","_id":"cj1jcel2b000nqkyfs2tzmn5h"},{"post_id":"cj1jcel0l0000qkyfhr6repw9","tag_id":"cj1jcel1w000cqkyf50qmel2f","_id":"cj1jcel2b000qqkyfcfvtw5jp"},{"post_id":"cj1jcel100002qkyfhtgardfj","tag_id":"cj1jcel1w000kqkyfmf0yg3nr","_id":"cj1jcel2r0017qkyf43i769n4"},{"post_id":"cj1jcel100002qkyfhtgardfj","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel37001aqkyfmhjxjqpf"},{"post_id":"cj1jcel100002qkyfhtgardfj","tag_id":"cj1jcel2r000yqkyf00ae28j8","_id":"cj1jcel37001eqkyfhsgh5tc1"},{"post_id":"cj1jcel1g0006qkyfg008j0w0","tag_id":"cj1jcel2r0015qkyfx1rqb8sr","_id":"cj1jcel37001iqkyfhsdz4vwn"},{"post_id":"cj1jcel1w000aqkyf3tieyb9r","tag_id":"cj1jcel37001cqkyfo4sxp3xs","_id":"cj1jcel3m001nqkyfa7bi6nbe"},{"post_id":"cj1jcel3m001mqkyf28jsnn62","tag_id":"cj1jcel1g0005qkyfeccytj7j","_id":"cj1jcel3m001rqkyfd70vbsyx"},{"post_id":"cj1jcel1w000fqkyf38edj4k8","tag_id":"cj1jcel1g0005qkyfeccytj7j","_id":"cj1jcel3m001vqkyfvx5j1e58"},{"post_id":"cj1jcel1w000fqkyf38edj4k8","tag_id":"cj1jcel3m001kqkyfymspacb1","_id":"cj1jcel42001zqkyfxudcwg3g"},{"post_id":"cj1jcel3m001pqkyfdhkug0ac","tag_id":"cj1jcel37001cqkyfo4sxp3xs","_id":"cj1jcel420022qkyfcqfqrauy"},{"post_id":"cj1jcel3m001uqkyf7r2e6iwj","tag_id":"cj1jcel1g0005qkyfeccytj7j","_id":"cj1jcel420025qkyfdcn9wmmw"},{"post_id":"cj1jcel1w000iqkyfpacixrc9","tag_id":"cj1jcel37001cqkyfo4sxp3xs","_id":"cj1jcel420028qkyfgb7nh9oi"},{"post_id":"cj1jcel2b000mqkyf9bgy9zlv","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel42002cqkyf0u62tn2g"},{"post_id":"cj1jcel2b000mqkyf9bgy9zlv","tag_id":"cj1jcel420027qkyf7ujrod21","_id":"cj1jcel42002eqkyfwqc0tetl"},{"post_id":"cj1jcel2b000pqkyf08258qfx","tag_id":"cj1jcel37001cqkyfo4sxp3xs","_id":"cj1jcel42002gqkyfhnubwuc3"},{"post_id":"cj1jcel2b000uqkyft36hg6ti","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel42002iqkyf2wsbmy7e"},{"post_id":"cj1jcel2b000uqkyft36hg6ti","tag_id":"cj1jcel420027qkyf7ujrod21","_id":"cj1jcel4h002jqkyf3biep8qa"},{"post_id":"cj1jcel2b000wqkyfm2h0jkvc","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel4h002lqkyfda4anbtr"},{"post_id":"cj1jcel2b000wqkyfm2h0jkvc","tag_id":"cj1jcel420027qkyf7ujrod21","_id":"cj1jcel4h002mqkyfq5dgiumw"},{"post_id":"cj1jcel2r000zqkyf9svu6pl5","tag_id":"cj1jcel4h002kqkyf5jy4m5h5","_id":"cj1jcel4h002oqkyf52u6gyu3"},{"post_id":"cj1jcel2r000zqkyf9svu6pl5","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel4h002pqkyftjqpw4ul"},{"post_id":"cj1jcel2r0012qkyfp12wpqp4","tag_id":"cj1jcel4h002kqkyf5jy4m5h5","_id":"cj1jcel4h002rqkyfwdw1wrjv"},{"post_id":"cj1jcel2r0012qkyfp12wpqp4","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel4h002sqkyf382hwm6u"},{"post_id":"cj1jcel2r0014qkyf29ztusje","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel4h002uqkyfl3ggogi8"},{"post_id":"cj1jcel2r0014qkyf29ztusje","tag_id":"cj1jcel420027qkyf7ujrod21","_id":"cj1jcel4h002vqkyfp6qjj1pn"},{"post_id":"cj1jcel2r0018qkyf3rfu1ihu","tag_id":"cj1jcel4h002kqkyf5jy4m5h5","_id":"cj1jcel4h002xqkyfeff9c737"},{"post_id":"cj1jcel2r0018qkyf3rfu1ihu","tag_id":"cj1jcel2b000rqkyfqe22d7ml","_id":"cj1jcel4h002yqkyfid23o400"},{"post_id":"cj1jcel37001bqkyfaf5b3ml8","tag_id":"cj1jcel4h002wqkyfu6vfioqz","_id":"cj1jcel4h0030qkyfucyh52iy"},{"post_id":"cj1jcel37001fqkyf8l25k1kx","tag_id":"cj1jcel4h002zqkyfj3bz44rt","_id":"cj1jcel4h0032qkyfr0wpxdpu"},{"post_id":"cj1jcel37001jqkyfaj1p6nuv","tag_id":"cj1jcel4h002zqkyfj3bz44rt","_id":"cj1jcel4x0034qkyfjvzpy1je"},{"post_id":"cj1jcel42001xqkyfj0r1a5jx","tag_id":"cj1jcel4x0033qkyfgbuecomc","_id":"cj1jcel4x0035qkyfmzq5ii8d"}],"Tag":[{"name":"git","_id":"cj1jcel1g0005qkyfeccytj7j"},{"name":"实战经验","_id":"cj1jcel1w000cqkyf50qmel2f"},{"name":"面试","_id":"cj1jcel1w000kqkyfmf0yg3nr"},{"name":"js","_id":"cj1jcel2b000rqkyfqe22d7ml"},{"name":"知识点","_id":"cj1jcel2r000yqkyf00ae28j8"},{"name":"脑子里的小想法","_id":"cj1jcel2r0015qkyfx1rqb8sr"},{"name":"hexo","_id":"cj1jcel37001cqkyfo4sxp3xs"},{"name":"hexo教程","_id":"cj1jcel3m001kqkyfymspacb1"},{"name":"js设计模式","_id":"cj1jcel420027qkyf7ujrod21"},{"name":"js模块化","_id":"cj1jcel4h002kqkyf5jy4m5h5"},{"name":"调试","_id":"cj1jcel4h002wqkyfu6vfioqz"},{"name":"react","_id":"cj1jcel4h002zqkyfj3bz44rt"},{"name":"gulp","_id":"cj1jcel4x0033qkyfgbuecomc"}]}}